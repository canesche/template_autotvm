2024-04-29 16:32:29 [INFO] [task_scheduler.cc:160] Initializing Task #188: "fused_nn_conv2d_add_nn_relu_92"
2024-04-29 16:32:29 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(56), T.int64(56)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(224), T.int64(56), T.int64(56)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56), T.int64(224), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 16:32:29 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 16:32:29 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(56), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(224), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1568)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(224), rc_0)
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(64)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + ax0_ax1_ax2_ax3_fused)
                                    v1 = T.axis.spatial(T.int64(224), rc_0)
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(4)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(4) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + xx_3 * T.int64(4) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(224), rc_0 + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 8, 2, 1, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 4])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[224, 1, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 16:32:29 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(56), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(224), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1568)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(224), rc_0_ry_0_rx_0_fused)
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(64)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + ax0_ax1_ax2_ax3_fused)
                                    v1 = T.axis.spatial(T.int64(224), rc_0_ry_0_rx_0_fused)
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(4)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(4) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + xx_3 * T.int64(4) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(224), rc_0_ry_0_rx_0_fused + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 8, 2, 1, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 4])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[224, 1, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 16:32:29 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(56), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(224), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1568)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(224), rc_0_ry_0_rx_0_fused)
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(64)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + ax0_ax1_ax2_ax3_fused)
                                    v1 = T.axis.spatial(T.int64(224), rc_0_ry_0_rx_0_fused)
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(4)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(4) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + xx_3 * T.int64(4) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(224), rc_0_ry_0_rx_0_fused + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 8, 2, 1, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 4])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[224, 1, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 19:38:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 19:38:02 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 19:38:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf3b22c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x13524f88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x13d8ea18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x12f72b38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd8d4bf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xaccc5e8)]: 494 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xdb32ca8)]: 0 failure(s)
2024-04-29 19:38:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf3b22c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x13524f88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x13d8ea18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x12f72b38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd8d4bf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xaccc5e8)]: 981 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xdb32ca8)]: 0 failure(s)
2024-04-29 19:38:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf3b22c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x13524f88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x13d8ea18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x12f72b38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd8d4bf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xaccc5e8)]: 1466 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xdb32ca8)]: 0 failure(s)
2024-04-29 19:38:08 [INFO] [evolutionary_search.cc:723] Sampled 70 candidate(s)
2024-04-29 19:38:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf3b22c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x13524f88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x13d8ea18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x12f72b38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd8d4bf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xaccc5e8)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xdb32ca8)]: 0 failure(s)
2024-04-29 19:38:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf3b22c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x13524f88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x13d8ea18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x12f72b38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd8d4bf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xaccc5e8)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xdb32ca8)]: 0 failure(s)
2024-04-29 19:38:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf3b22c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x13524f88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x13d8ea18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x12f72b38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd8d4bf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xaccc5e8)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xdb32ca8)]: 0 failure(s)
2024-04-29 19:38:17 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xf3b22c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x13524f88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x13d8ea18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x12f72b38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd8d4bf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xaccc5e8)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xdb32ca8)]: 0 failure(s)
2024-04-29 19:38:18 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9988  0.9980  0.9969  0.9967  0.9957  0.9957  0.9950  0.9949  0.9940  0.9922  0.9910  0.9906  0.9863  0.9862  0.9858  0.9856
[17 : 32]:	0.9854  0.9850  0.9848  0.9845  0.9842  0.9838  0.9835  0.9834  0.9830  0.9826  0.9824  0.9823  0.9821  0.9812  0.9811  0.9800
[33 : 48]:	0.9797  0.9795  0.9792  0.9785  0.9770  0.9740  0.9738  0.9736  0.9731  0.9731  0.9723  0.9712  0.9704  0.9704  0.9679  0.9672
[49 : 64]:	0.9661  0.9659  0.9655  0.9655  0.9645  0.9644  0.9610  0.9594  0.9579  0.9577  0.9571  0.9549  0.9547  0.9537  0.9533  0.9506
2024-04-29 19:38:18 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 19:38:18 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #1: GFLOPs: 417.4537. Time: 432.7033 us. Best GFLOPs: 417.4537
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #2: GFLOPs: 1611.9230. Time: 112.0609 us. Best GFLOPs: 1611.9230
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #3: GFLOPs: 75.1743. Time: 2402.8647 us. Best GFLOPs: 1611.9230
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #4: GFLOPs: 12.8070. Time: 14104.3195 us. Best GFLOPs: 1611.9230
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #5: GFLOPs: 1604.6005. Time: 112.5723 us. Best GFLOPs: 1611.9230
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #6: GFLOPs: 213.0587. Time: 847.8112 us. Best GFLOPs: 1611.9230
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #7: GFLOPs: 2232.9408. Time: 80.8949 us. Best GFLOPs: 2232.9408
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #8: GFLOPs: 1758.8491. Time: 102.6999 us. Best GFLOPs: 2232.9408
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #9: GFLOPs: 29.0638. Time: 6215.0775 us. Best GFLOPs: 2232.9408
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #10: GFLOPs: 104.3925. Time: 1730.3305 us. Best GFLOPs: 2232.9408
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #11: GFLOPs: 358.8694. Time: 503.3408 us. Best GFLOPs: 2232.9408
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #12: GFLOPs: 5345.3830. Time: 33.7925 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #13: GFLOPs: 4058.0930. Time: 44.5119 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #14: GFLOPs: 1226.5666. Time: 147.2677 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #15: GFLOPs: 1282.3983. Time: 140.8561 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #16: GFLOPs: 4124.9462. Time: 43.7905 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #17: GFLOPs: 1507.5271. Time: 119.8211 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #18: GFLOPs: 259.6929. Time: 695.5662 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #19: GFLOPs: 1593.3756. Time: 113.3654 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #20: GFLOPs: 52.7459. Time: 3424.5974 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #21: GFLOPs: 203.5890. Time: 887.2462 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #22: GFLOPs: 646.1414. Time: 279.5574 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #23: GFLOPs: 1073.8851. Time: 168.2057 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #24: GFLOPs: 2732.5667. Time: 66.1040 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #25: GFLOPs: 2552.2106. Time: 70.7753 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #26: GFLOPs: 590.3389. Time: 305.9829 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #27: GFLOPs: 17.3665. Time: 10401.2802 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #28: GFLOPs: 5013.7392. Time: 36.0277 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #29: GFLOPs: 42.9450. Time: 4206.1653 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #30: GFLOPs: 3143.4841. Time: 57.4629 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #31: GFLOPs: 2580.0337. Time: 70.0121 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #32: GFLOPs: 337.2090. Time: 535.6725 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #33: GFLOPs: 2198.4762. Time: 82.1631 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #34: GFLOPs: 4881.5200. Time: 37.0036 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #35: GFLOPs: 990.9349. Time: 182.2860 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #36: GFLOPs: 2459.1573. Time: 73.4535 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #37: GFLOPs: 897.4530. Time: 201.2736 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #38: GFLOPs: 5223.5901. Time: 34.5804 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #39: GFLOPs: 208.1020. Time: 868.0052 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #40: GFLOPs: 1993.4521. Time: 90.6135 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #41: GFLOPs: 21.0543. Time: 8579.4131 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #42: GFLOPs: 5006.4012. Time: 36.0805 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #43: GFLOPs: 3233.9532. Time: 55.8554 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #44: GFLOPs: 2147.3028. Time: 84.1212 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #45: GFLOPs: 204.3135. Time: 884.1002 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #46: GFLOPs: 1105.0838. Time: 163.4569 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #47: GFLOPs: 2977.4481. Time: 60.6673 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #48: GFLOPs: 26.6780. Time: 6770.8928 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #49: GFLOPs: 3446.0801. Time: 52.4171 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #50: GFLOPs: 1195.6399. Time: 151.0769 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #51: GFLOPs: 688.3031. Time: 262.4332 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #52: GFLOPs: 501.3056. Time: 360.3263 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #53: GFLOPs: 868.4642. Time: 207.9920 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #54: GFLOPs: 52.1814. Time: 3461.6497 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #55: GFLOPs: 4423.0764. Time: 40.8389 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #56: GFLOPs: 120.2919. Time: 1501.6272 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #57: GFLOPs: 1820.4929. Time: 99.2224 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #58: GFLOPs: 141.1944. Time: 1279.3259 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #59: GFLOPs: 1236.9223. Time: 146.0347 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #60: GFLOPs: 2855.3294. Time: 63.2619 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #61: GFLOPs: 4932.3839. Time: 36.6220 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #62: GFLOPs: 46.8756. Time: 3853.4695 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #63: GFLOPs: 336.7312. Time: 536.4326 us. Best GFLOPs: 5345.3830
2024-04-29 20:33:07 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #64: GFLOPs: 1212.5229. Time: 148.9734 us. Best GFLOPs: 5345.3830
2024-05-01 15:06:10 [INFO] [task_scheduler.cc:160] Initializing Task #188: "fused_nn_conv2d_add_nn_relu_92"
2024-05-01 15:06:10 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(56), T.int64(56)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(224), T.int64(56), T.int64(56)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56), T.int64(224), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-05-01 15:06:10 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-05-01 15:06:10 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(14), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7168)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(224), rc_0 * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(448) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(512)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(16))
                                    v1 = T.axis.spatial(T.int64(224), rc_0 * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(4)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(16) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(2) * T.int64(8) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(4) + xx_3 * T.int64(4) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(224), rc_0 * T.int64(16) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(8), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(2) * T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 2, 1, 4, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 2, 1, 1, 4])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[14, 1, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-05-01 15:06:10 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(14), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7168)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(224), rc_0_ry_0_rx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(448) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(512)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(16))
                                    v1 = T.axis.spatial(T.int64(224), rc_0_ry_0_rx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(4)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(16) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(2) * T.int64(8) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(4) + xx_3 * T.int64(4) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(224), rc_0_ry_0_rx_0_fused * T.int64(16) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(8), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(2) * T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 2, 1, 4, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 2, 1, 1, 4])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[14, 1, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-05-01 15:06:10 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(14), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7168)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(224), rc_0_ry_0_rx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(448) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(512)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(16))
                                    v1 = T.axis.spatial(T.int64(224), rc_0_ry_0_rx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(4)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(16) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(2) * T.int64(8) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(4) + xx_3 * T.int64(4) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(224), rc_0_ry_0_rx_0_fused * T.int64(16) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(8), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(2) * T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 2, 1, 4, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 2, 1, 1, 4])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[14, 1, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-05-01 18:00:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 18:00:44 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-05-01 18:00:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11f88b88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x112176f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd848f18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x394d818)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x14e89d18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xffe1c98)]: 430 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15054048)]: 0 failure(s)
2024-05-01 18:00:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11f88b88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x112176f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd848f18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x394d818)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x14e89d18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xffe1c98)]: 859 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15054048)]: 0 failure(s)
2024-05-01 18:00:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11f88b88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x112176f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd848f18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x394d818)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x14e89d18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xffe1c98)]: 1293 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15054048)]: 0 failure(s)
2024-05-01 18:00:48 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-05-01 18:00:51 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11f88b88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x112176f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd848f18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x394d818)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x14e89d18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xffe1c98)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15054048)]: 0 failure(s)
2024-05-01 18:00:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11f88b88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x112176f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd848f18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x394d818)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x14e89d18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xffe1c98)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15054048)]: 0 failure(s)
2024-05-01 18:00:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11f88b88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x112176f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd848f18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x394d818)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x14e89d18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xffe1c98)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15054048)]: 0 failure(s)
2024-05-01 18:00:58 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11f88b88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x112176f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xd848f18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x394d818)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x14e89d18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xffe1c98)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15054048)]: 0 failure(s)
2024-05-01 18:00:58 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9989  0.9987  0.9979  0.9978  0.9978  0.9975  0.9972  0.9968  0.9947  0.9940  0.9933  0.9931  0.9928  0.9903  0.9899  0.9876
[17 : 32]:	0.9875  0.9871  0.9839  0.9839  0.9829  0.9817  0.9816  0.9815  0.9802  0.9795  0.9794  0.9788  0.9783  0.9782  0.9779  0.9776
[33 : 48]:	0.9776  0.9770  0.9764  0.9757  0.9750  0.9737  0.9729  0.9725  0.9725  0.9710  0.9705  0.9692  0.9691  0.9682  0.9681  0.9677
[49 : 64]:	0.9664  0.9663  0.9657  0.9656  0.9651  0.9645  0.9642  0.9641  0.9635  0.9617  0.9605  0.9604  0.9596  0.9595  0.9594  0.9584
2024-05-01 18:00:58 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 18:00:58 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #1: GFLOPs: 1192.5292. Time: 151.4710 us. Best GFLOPs: 1192.5292
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #2: GFLOPs: 2309.5096. Time: 78.2130 us. Best GFLOPs: 2309.5096
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #3: GFLOPs: 1080.6633. Time: 167.1507 us. Best GFLOPs: 2309.5096
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #4: GFLOPs: 3238.5403. Time: 55.7762 us. Best GFLOPs: 3238.5403
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #5: GFLOPs: 1331.6027. Time: 135.6513 us. Best GFLOPs: 3238.5403
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #6: GFLOPs: 727.3764. Time: 248.3358 us. Best GFLOPs: 3238.5403
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #7: GFLOPs: 1204.9518. Time: 149.9094 us. Best GFLOPs: 3238.5403
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #8: GFLOPs: 804.8094. Time: 224.4427 us. Best GFLOPs: 3238.5403
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #9: GFLOPs: 89.4669. Time: 2019.0002 us. Best GFLOPs: 3238.5403
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #10: GFLOPs: 165.0980. Time: 1094.0995 us. Best GFLOPs: 3238.5403
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #11: GFLOPs: 14.7831. Time: 12218.9364 us. Best GFLOPs: 3238.5403
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #12: GFLOPs: 2473.2995. Time: 73.0335 us. Best GFLOPs: 3238.5403
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #13: GFLOPs: 344.4896. Time: 524.3514 us. Best GFLOPs: 3238.5403
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #14: GFLOPs: 59.9352. Time: 3013.8128 us. Best GFLOPs: 3238.5403
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #15: GFLOPs: 812.6135. Time: 222.2872 us. Best GFLOPs: 3238.5403
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #16: GFLOPs: 1621.0961. Time: 111.4268 us. Best GFLOPs: 3238.5403
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #17: GFLOPs: 2887.1678. Time: 62.5643 us. Best GFLOPs: 3238.5403
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #18: GFLOPs: 3258.9087. Time: 55.4276 us. Best GFLOPs: 3258.9087
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #19: GFLOPs: 50.5289. Time: 3574.8571 us. Best GFLOPs: 3258.9087
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #20: GFLOPs: 1197.3870. Time: 150.8565 us. Best GFLOPs: 3258.9087
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #21: GFLOPs: 221.7802. Time: 814.4713 us. Best GFLOPs: 3258.9087
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #22: GFLOPs: 2071.3907. Time: 87.2040 us. Best GFLOPs: 3258.9087
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #23: GFLOPs: 1192.2574. Time: 151.5055 us. Best GFLOPs: 3258.9087
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #24: GFLOPs: 21.0286. Time: 8589.9092 us. Best GFLOPs: 3258.9087
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #25: GFLOPs: 836.9626. Time: 215.8204 us. Best GFLOPs: 3258.9087
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #26: GFLOPs: 2800.0545. Time: 64.5107 us. Best GFLOPs: 3258.9087
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #27: GFLOPs: 51.3506. Time: 3517.6518 us. Best GFLOPs: 3258.9087
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #28: GFLOPs: 2421.5191. Time: 74.5952 us. Best GFLOPs: 3258.9087
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #29: GFLOPs: 30.5029. Time: 5921.8521 us. Best GFLOPs: 3258.9087
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #30: GFLOPs: 684.0233. Time: 264.0752 us. Best GFLOPs: 3258.9087
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #31: GFLOPs: 83.7209. Time: 2157.5679 us. Best GFLOPs: 3258.9087
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #32: GFLOPs: 537.4840. Time: 336.0725 us. Best GFLOPs: 3258.9087
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #33: GFLOPs: 1276.7652. Time: 141.4775 us. Best GFLOPs: 3258.9087
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #34: GFLOPs: 2231.8673. Time: 80.9338 us. Best GFLOPs: 3258.9087
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #35: GFLOPs: 7568.7187. Time: 23.8658 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #36: GFLOPs: 61.3741. Time: 2943.1567 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #37: GFLOPs: 322.5489. Time: 560.0193 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #38: GFLOPs: 113.9581. Time: 1585.0880 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #39: GFLOPs: 41.6569. Time: 4336.2249 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #40: GFLOPs: 3885.0249. Time: 46.4948 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #41: GFLOPs: 1212.0037. Time: 149.0372 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #42: GFLOPs: 49.6567. Time: 3637.6503 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #43: GFLOPs: 264.1690. Time: 683.7803 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #44: GFLOPs: 1180.3105. Time: 153.0390 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #45: GFLOPs: 341.7106. Time: 528.6157 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #46: GFLOPs: 2654.7126. Time: 68.0426 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #47: GFLOPs: 88.4301. Time: 2042.6710 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #48: GFLOPs: 4065.2576. Time: 44.4335 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #49: GFLOPs: 3535.8392. Time: 51.0865 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #50: GFLOPs: 2257.9328. Time: 79.9995 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #51: GFLOPs: 839.4756. Time: 215.1743 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #52: GFLOPs: 224.3847. Time: 805.0176 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #53: GFLOPs: 113.9857. Time: 1584.7040 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #54: GFLOPs: 36.2668. Time: 4980.6871 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #55: GFLOPs: 51.8924. Time: 3480.9291 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #56: GFLOPs: 6329.3696. Time: 28.5390 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #57: GFLOPs: 3182.0451. Time: 56.7665 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #58: GFLOPs: 1283.0445. Time: 140.7851 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #59: GFLOPs: 204.2719. Time: 884.2803 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #60: GFLOPs: 4890.7867. Time: 36.9334 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #61: GFLOPs: 2348.0005. Time: 76.9308 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #62: GFLOPs: 360.3001. Time: 501.3421 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #63: GFLOPs: 1017.8244. Time: 177.4703 us. Best GFLOPs: 7568.7187
2024-05-01 18:40:10 [INFO] [task_scheduler.cc:131] [Task #188: fused_nn_conv2d_add_nn_relu_92] Trial #64: GFLOPs: 2651.8294. Time: 68.1166 us. Best GFLOPs: 7568.7187
