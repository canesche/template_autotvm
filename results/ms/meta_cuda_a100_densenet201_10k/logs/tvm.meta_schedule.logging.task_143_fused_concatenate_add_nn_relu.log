2024-04-29 16:32:14 [INFO] [task_scheduler.cc:160] Initializing Task #143: "fused_concatenate_add_nn_relu"
2024-04-29 16:32:14 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p9: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_concat = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(14), T.int64(14)):
            with T.block("T_concat"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p8[v_ax0, v_ax1 - T.int64(480), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(448), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(416), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(384), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(352), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(288), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(256), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(480) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(480), v_ax2, v_ax3], T.if_then_else(T.int64(448) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(448), v_ax2, v_ax3], T.if_then_else(T.int64(416) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(416), v_ax2, v_ax3], T.if_then_else(T.int64(384) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(384), v_ax2, v_ax3], T.if_then_else(T.int64(352) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(352), v_ax2, v_ax3], T.if_then_else(T.int64(320) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], T.if_then_else(T.int64(288) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(288), v_ax2, v_ax3], T.if_then_else(T.int64(256) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(256), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3]))))))))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_concat[v_ax0, v_ax1, v_ax2, v_ax3], p9[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = T_concat[v_ax0, v_ax1, v_ax2, v_ax3] + p9[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 16:32:14 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-04-29 16:32:14 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p9: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(3136), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(512), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(196))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196) // T.int64(14))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(14))
                    T.reads(p8[v_ax0, v_ax1 - T.int64(480), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(448), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(416), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(384), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(352), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(288), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(256), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], p9[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T.if_then_else(T.int64(480) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(480), v_ax2, v_ax3], T.if_then_else(T.int64(448) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(448), v_ax2, v_ax3], T.if_then_else(T.int64(416) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(416), v_ax2, v_ax3], T.if_then_else(T.int64(384) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(384), v_ax2, v_ax3], T.if_then_else(T.int64(352) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(352), v_ax2, v_ax3], T.if_then_else(T.int64(320) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], T.if_then_else(T.int64(288) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(288), v_ax2, v_ax3], T.if_then_else(T.int64(256) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(256), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))))) + p9[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="T_concat", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l3, l4, l5, l6 = sch.get_loops(block=b0)
l7 = sch.fuse(l3, l4, l5, l6, preserve_unit_iters=True)
v8 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l9, thread_axis="blockIdx.x")
sch.bind(loop=l10, thread_axis="threadIdx.x")
2024-04-29 18:41:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:41:09 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 18:41:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11652c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xdbedba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe4ac628)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa242af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf5acd08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1451ea58)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe4ac5f8)]: 0 failure(s)
2024-04-29 18:41:12 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 18:41:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11652c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xdbedba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe4ac628)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa242af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf5acd08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1451ea58)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe4ac5f8)]: 0 failure(s)
2024-04-29 18:41:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11652c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xdbedba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe4ac628)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa242af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf5acd08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1451ea58)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe4ac5f8)]: 0 failure(s)
2024-04-29 18:41:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11652c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xdbedba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe4ac628)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa242af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf5acd08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1451ea58)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe4ac5f8)]: 0 failure(s)
2024-04-29 18:41:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11652c88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xdbedba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xe4ac628)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa242af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf5acd08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1451ea58)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe4ac5f8)]: 0 failure(s)
2024-04-29 18:41:14 [INFO] [evolutionary_search.cc:649] Scores of the best 6 candidates:
[1 : 6]:	0.9535  0.7412  0.6858  0.6599  0.5152  0.4198
2024-04-29 18:41:14 [INFO] [evolutionary_search.cc:727] Got 6 candidate(s) with evolutionary search
2024-04-29 18:41:14 [INFO] [evolutionary_search.cc:730] Sending 6 candidates(s) for measurement
2024-04-29 20:28:52 [INFO] [task_scheduler.cc:131] [Task #143: fused_concatenate_add_nn_relu] Trial #1: GFLOPs: 56.8353. Time: 3.5313 us. Best GFLOPs: 56.8353
2024-04-29 20:28:52 [INFO] [task_scheduler.cc:131] [Task #143: fused_concatenate_add_nn_relu] Trial #2: GFLOPs: 57.3956. Time: 3.4969 us. Best GFLOPs: 57.3956
2024-04-29 20:28:52 [INFO] [task_scheduler.cc:131] [Task #143: fused_concatenate_add_nn_relu] Trial #3: GFLOPs: 37.9978. Time: 5.2820 us. Best GFLOPs: 57.3956
2024-04-29 20:28:52 [INFO] [task_scheduler.cc:131] [Task #143: fused_concatenate_add_nn_relu] Trial #4: GFLOPs: 50.8188. Time: 3.9494 us. Best GFLOPs: 57.3956
2024-04-29 20:28:52 [INFO] [task_scheduler.cc:131] [Task #143: fused_concatenate_add_nn_relu] Trial #5: GFLOPs: 57.8338. Time: 3.4704 us. Best GFLOPs: 57.8338
2024-04-29 20:28:52 [INFO] [task_scheduler.cc:131] [Task #143: fused_concatenate_add_nn_relu] Trial #6: GFLOPs: 57.5129. Time: 3.4897 us. Best GFLOPs: 57.8338
2024-05-01 15:05:54 [INFO] [task_scheduler.cc:160] Initializing Task #143: "fused_concatenate_add_nn_relu"
2024-05-01 15:05:54 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p9: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_concat = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(14), T.int64(14)):
            with T.block("T_concat"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p8[v_ax0, v_ax1 - T.int64(480), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(448), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(416), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(384), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(352), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(288), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(256), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(480) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(480), v_ax2, v_ax3], T.if_then_else(T.int64(448) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(448), v_ax2, v_ax3], T.if_then_else(T.int64(416) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(416), v_ax2, v_ax3], T.if_then_else(T.int64(384) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(384), v_ax2, v_ax3], T.if_then_else(T.int64(352) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(352), v_ax2, v_ax3], T.if_then_else(T.int64(320) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], T.if_then_else(T.int64(288) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(288), v_ax2, v_ax3], T.if_then_else(T.int64(256) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(256), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3]))))))))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_concat[v_ax0, v_ax1, v_ax2, v_ax3], p9[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = T_concat[v_ax0, v_ax1, v_ax2, v_ax3] + p9[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-05-01 15:05:54 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-05-01 15:05:54 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14)), "float32"), p9: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(3136), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(512), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(196))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196) // T.int64(14))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(14))
                    T.reads(p8[v_ax0, v_ax1 - T.int64(480), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(448), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(416), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(384), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(352), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(288), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(256), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], p9[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T.if_then_else(T.int64(480) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(480), v_ax2, v_ax3], T.if_then_else(T.int64(448) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(448), v_ax2, v_ax3], T.if_then_else(T.int64(416) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(416), v_ax2, v_ax3], T.if_then_else(T.int64(384) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(384), v_ax2, v_ax3], T.if_then_else(T.int64(352) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(352), v_ax2, v_ax3], T.if_then_else(T.int64(320) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], T.if_then_else(T.int64(288) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(288), v_ax2, v_ax3], T.if_then_else(T.int64(256) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(256), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))))) + p9[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="T_concat", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l3, l4, l5, l6 = sch.get_loops(block=b0)
l7 = sch.fuse(l3, l4, l5, l6, preserve_unit_iters=True)
v8 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l9, thread_axis="blockIdx.x")
sch.bind(loop=l10, thread_axis="threadIdx.x")
2024-05-01 17:17:18 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 17:17:18 [INFO] [evolutionary_search.cc:715] Picked top 6 candidate(s) from database
2024-05-01 17:17:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb082348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x10988458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xddd58e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x113b7348)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3770008)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3c1d478)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x116427d8)]: 0 failure(s)
2024-05-01 17:17:21 [INFO] [evolutionary_search.cc:723] Sampled 506 candidate(s)
2024-05-01 17:17:21 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb082348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x10988458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xddd58e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x113b7348)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3770008)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3c1d478)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x116427d8)]: 0 failure(s)
2024-05-01 17:17:21 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb082348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x10988458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xddd58e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x113b7348)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3770008)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3c1d478)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x116427d8)]: 0 failure(s)
2024-05-01 17:17:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb082348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x10988458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xddd58e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x113b7348)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3770008)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3c1d478)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x116427d8)]: 0 failure(s)
2024-05-01 17:17:22 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb082348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x10988458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xddd58e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x113b7348)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3770008)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3c1d478)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x116427d8)]: 0 failure(s)
2024-05-01 17:17:22 [INFO] [evolutionary_search.cc:649] Scores of the best 6 candidates:
[1 : 6]:	0.9555  0.9411  0.8986  0.4892  0.0633  0.0028
2024-05-01 17:17:22 [INFO] [evolutionary_search.cc:727] Got 6 candidate(s) with evolutionary search
2024-05-01 17:17:22 [INFO] [evolutionary_search.cc:730] Sending 6 candidates(s) for measurement
2024-05-01 18:37:14 [INFO] [task_scheduler.cc:131] [Task #143: fused_concatenate_add_nn_relu] Trial #1: GFLOPs: 64.4889. Time: 3.1122 us. Best GFLOPs: 64.4889
2024-05-01 18:37:14 [INFO] [task_scheduler.cc:131] [Task #143: fused_concatenate_add_nn_relu] Trial #2: GFLOPs: 51.8749. Time: 3.8690 us. Best GFLOPs: 64.4889
2024-05-01 18:37:14 [INFO] [task_scheduler.cc:131] [Task #143: fused_concatenate_add_nn_relu] Trial #3: GFLOPs: 64.2249. Time: 3.1250 us. Best GFLOPs: 64.4889
2024-05-01 18:37:14 [INFO] [task_scheduler.cc:131] [Task #143: fused_concatenate_add_nn_relu] Trial #4: GFLOPs: 64.5760. Time: 3.1080 us. Best GFLOPs: 64.5760
2024-05-01 18:37:14 [INFO] [task_scheduler.cc:131] [Task #143: fused_concatenate_add_nn_relu] Trial #5: GFLOPs: 59.8458. Time: 3.3537 us. Best GFLOPs: 64.5760
2024-05-01 18:37:14 [INFO] [task_scheduler.cc:131] [Task #143: fused_concatenate_add_nn_relu] Trial #6: GFLOPs: 39.3783. Time: 5.0968 us. Best GFLOPs: 64.5760
