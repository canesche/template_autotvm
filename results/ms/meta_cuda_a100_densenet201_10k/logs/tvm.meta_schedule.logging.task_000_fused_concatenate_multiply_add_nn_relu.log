2024-04-29 16:31:03 [INFO] [task_scheduler.cc:160] Initializing Task #0: "fused_concatenate_multiply_add_nn_relu"
2024-04-29 16:31:03 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p9: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p10: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p11: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p12: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p13: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p14: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p15: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p16: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p17: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p18: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p19: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p20: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p21: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p22: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p23: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p24: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p25: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p26: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p27: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p28: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p29: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p30: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p31: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p32: T.Buffer((T.int64(1), T.int64(1888), T.int64(1), T.int64(1)), "float32"), p33: T.Buffer((T.int64(1), T.int64(1888), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(1888), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_concat = T.alloc_buffer((T.int64(1), T.int64(1888), T.int64(7), T.int64(7)))
        T_multiply = T.alloc_buffer((T.int64(1), T.int64(1888), T.int64(7), T.int64(7)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(1888), T.int64(7), T.int64(7)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1888), T.int64(7), T.int64(7)):
            with T.block("T_concat"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p31[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1856) <= v_ax1, p31[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], T.if_then_else(T.int64(1824) <= v_ax1, p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], T.if_then_else(T.int64(1792) <= v_ax1, p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], T.if_then_else(T.int64(1760) <= v_ax1, p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], T.if_then_else(T.int64(1728) <= v_ax1, p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], T.if_then_else(T.int64(1696) <= v_ax1, p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], T.if_then_else(T.int64(1664) <= v_ax1, p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], T.if_then_else(T.int64(1632) <= v_ax1, p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], T.if_then_else(T.int64(1600) <= v_ax1, p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], T.if_then_else(T.int64(1568) <= v_ax1, p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], T.if_then_else(T.int64(1536) <= v_ax1, p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], T.if_then_else(T.int64(1504) <= v_ax1, p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1440) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], T.if_then_else(T.int64(1408) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], T.if_then_else(T.int64(1376) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], T.if_then_else(T.int64(1344) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], T.if_then_else(T.int64(1312) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], T.if_then_else(T.int64(1280) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], T.if_then_else(T.int64(1248) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], T.if_then_else(T.int64(1216) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], T.if_then_else(T.int64(1184) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], T.if_then_else(T.int64(1152) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], T.if_then_else(T.int64(1120) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(1056) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], T.if_then_else(T.int64(1024) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], T.if_then_else(T.int64(992) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], T.if_then_else(T.int64(960) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))))))))))))))))))))))))))))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1888), T.int64(7), T.int64(7)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_concat[v_ax0, v_ax1, v_ax2, v_ax3], p32[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = T_concat[v_ax0, v_ax1, v_ax2, v_ax3] * p32[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1888), T.int64(7), T.int64(7)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p33[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p33[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1888), T.int64(7), T.int64(7)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 16:31:04 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-04-29 16:31:04 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p9: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p10: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p11: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p12: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p13: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p14: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p15: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p16: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p17: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p18: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p19: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p20: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p21: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p22: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p23: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p24: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p25: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p26: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p27: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p28: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p29: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p30: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p31: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p32: T.Buffer((T.int64(1), T.int64(1888), T.int64(1), T.int64(1)), "float32"), p33: T.Buffer((T.int64(1), T.int64(1888), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(1888), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(1446), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1888), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 < T.int64(92512))
                    T.reads(p31[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], p32[v_ax0, v_ax1, T.int64(0), T.int64(0)], p33[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T.if_then_else(T.int64(1856) <= v_ax1, p31[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], T.if_then_else(T.int64(1824) <= v_ax1, p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], T.if_then_else(T.int64(1792) <= v_ax1, p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], T.if_then_else(T.int64(1760) <= v_ax1, p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], T.if_then_else(T.int64(1728) <= v_ax1, p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], T.if_then_else(T.int64(1696) <= v_ax1, p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], T.if_then_else(T.int64(1664) <= v_ax1, p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], T.if_then_else(T.int64(1632) <= v_ax1, p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], T.if_then_else(T.int64(1600) <= v_ax1, p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], T.if_then_else(T.int64(1568) <= v_ax1, p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], T.if_then_else(T.int64(1536) <= v_ax1, p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], T.if_then_else(T.int64(1504) <= v_ax1, p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1440) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], T.if_then_else(T.int64(1408) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], T.if_then_else(T.int64(1376) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], T.if_then_else(T.int64(1344) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], T.if_then_else(T.int64(1312) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], T.if_then_else(T.int64(1280) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], T.if_then_else(T.int64(1248) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], T.if_then_else(T.int64(1216) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], T.if_then_else(T.int64(1184) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], T.if_then_else(T.int64(1152) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], T.if_then_else(T.int64(1120) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(1056) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], T.if_then_else(T.int64(1024) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], T.if_then_else(T.int64(992) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], T.if_then_else(T.int64(960) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3]))))))))))))))))))))))))))))))) * p32[v_ax0, v_ax1, T.int64(0), T.int64(0)] + p33[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="T_concat", func_name="main")
b1 = sch.get_block(name="T_multiply", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
2024-04-29 16:32:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 16:32:38 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 16:32:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1337c928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14e70018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb7401f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd7a5268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe9017b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11b90a98)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf4f388)]: 0 failure(s)
2024-04-29 16:32:47 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 16:32:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1337c928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14e70018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb7401f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd7a5268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe9017b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11b90a98)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf4f388)]: 0 failure(s)
2024-04-29 16:32:50 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1337c928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14e70018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb7401f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd7a5268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe9017b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11b90a98)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf4f388)]: 0 failure(s)
2024-04-29 16:32:51 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1337c928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14e70018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb7401f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd7a5268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe9017b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11b90a98)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf4f388)]: 0 failure(s)
2024-04-29 16:32:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1337c928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14e70018)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb7401f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xd7a5268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe9017b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11b90a98)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf4f388)]: 0 failure(s)
2024-04-29 16:32:53 [INFO] [evolutionary_search.cc:649] Scores of the best 6 candidates:
[1 : 6]:	0.9729  0.9636  0.9052  0.6106  0.4397  0.1566
2024-04-29 16:32:53 [INFO] [evolutionary_search.cc:727] Got 6 candidate(s) with evolutionary search
2024-04-29 16:32:53 [INFO] [evolutionary_search.cc:730] Sending 6 candidates(s) for measurement
2024-04-29 20:20:12 [INFO] [task_scheduler.cc:131] [Task #0: fused_concatenate_multiply_add_nn_relu] Trial #1: GFLOPs: 62.1163. Time: 4.4680 us. Best GFLOPs: 62.1163
2024-04-29 20:20:12 [INFO] [task_scheduler.cc:131] [Task #0: fused_concatenate_multiply_add_nn_relu] Trial #2: GFLOPs: 73.0480. Time: 3.7994 us. Best GFLOPs: 73.0480
2024-04-29 20:20:12 [INFO] [task_scheduler.cc:131] [Task #0: fused_concatenate_multiply_add_nn_relu] Trial #3: GFLOPs: 79.6930. Time: 3.4826 us. Best GFLOPs: 79.6930
2024-04-29 20:20:12 [INFO] [task_scheduler.cc:131] [Task #0: fused_concatenate_multiply_add_nn_relu] Trial #4: GFLOPs: 70.0775. Time: 3.9604 us. Best GFLOPs: 79.6930
2024-04-29 20:20:12 [INFO] [task_scheduler.cc:131] [Task #0: fused_concatenate_multiply_add_nn_relu] Trial #5: GFLOPs: 70.1625. Time: 3.9556 us. Best GFLOPs: 79.6930
2024-04-29 20:20:12 [INFO] [task_scheduler.cc:131] [Task #0: fused_concatenate_multiply_add_nn_relu] Trial #6: GFLOPs: 52.3879. Time: 5.2977 us. Best GFLOPs: 79.6930
2024-05-01 15:04:43 [INFO] [task_scheduler.cc:160] Initializing Task #0: "fused_concatenate_multiply_add_nn_relu"
2024-05-01 15:04:43 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p9: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p10: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p11: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p12: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p13: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p14: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p15: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p16: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p17: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p18: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p19: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p20: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p21: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p22: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p23: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p24: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p25: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p26: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p27: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p28: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p29: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p30: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p31: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p32: T.Buffer((T.int64(1), T.int64(1888), T.int64(1), T.int64(1)), "float32"), p33: T.Buffer((T.int64(1), T.int64(1888), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(1888), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_concat = T.alloc_buffer((T.int64(1), T.int64(1888), T.int64(7), T.int64(7)))
        T_multiply = T.alloc_buffer((T.int64(1), T.int64(1888), T.int64(7), T.int64(7)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(1888), T.int64(7), T.int64(7)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1888), T.int64(7), T.int64(7)):
            with T.block("T_concat"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p31[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1856) <= v_ax1, p31[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], T.if_then_else(T.int64(1824) <= v_ax1, p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], T.if_then_else(T.int64(1792) <= v_ax1, p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], T.if_then_else(T.int64(1760) <= v_ax1, p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], T.if_then_else(T.int64(1728) <= v_ax1, p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], T.if_then_else(T.int64(1696) <= v_ax1, p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], T.if_then_else(T.int64(1664) <= v_ax1, p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], T.if_then_else(T.int64(1632) <= v_ax1, p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], T.if_then_else(T.int64(1600) <= v_ax1, p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], T.if_then_else(T.int64(1568) <= v_ax1, p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], T.if_then_else(T.int64(1536) <= v_ax1, p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], T.if_then_else(T.int64(1504) <= v_ax1, p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1440) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], T.if_then_else(T.int64(1408) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], T.if_then_else(T.int64(1376) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], T.if_then_else(T.int64(1344) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], T.if_then_else(T.int64(1312) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], T.if_then_else(T.int64(1280) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], T.if_then_else(T.int64(1248) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], T.if_then_else(T.int64(1216) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], T.if_then_else(T.int64(1184) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], T.if_then_else(T.int64(1152) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], T.if_then_else(T.int64(1120) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(1056) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], T.if_then_else(T.int64(1024) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], T.if_then_else(T.int64(992) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], T.if_then_else(T.int64(960) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))))))))))))))))))))))))))))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1888), T.int64(7), T.int64(7)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_concat[v_ax0, v_ax1, v_ax2, v_ax3], p32[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = T_concat[v_ax0, v_ax1, v_ax2, v_ax3] * p32[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1888), T.int64(7), T.int64(7)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p33[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p33[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1888), T.int64(7), T.int64(7)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-05-01 15:04:43 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-05-01 15:04:43 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p5: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p6: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p7: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p8: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p9: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p10: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p11: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p12: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p13: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p14: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p15: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p16: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p17: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p18: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p19: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p20: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p21: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p22: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p23: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p24: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p25: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p26: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p27: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p28: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p29: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p30: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p31: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32"), p32: T.Buffer((T.int64(1), T.int64(1888), T.int64(1), T.int64(1)), "float32"), p33: T.Buffer((T.int64(1), T.int64(1888), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(1888), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(1446), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1888), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 < T.int64(92512))
                    T.reads(p31[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], p32[v_ax0, v_ax1, T.int64(0), T.int64(0)], p33[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T.if_then_else(T.int64(1856) <= v_ax1, p31[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], T.if_then_else(T.int64(1824) <= v_ax1, p30[v_ax0, v_ax1 - T.int64(1824), v_ax2, v_ax3], T.if_then_else(T.int64(1792) <= v_ax1, p29[v_ax0, v_ax1 - T.int64(1792), v_ax2, v_ax3], T.if_then_else(T.int64(1760) <= v_ax1, p28[v_ax0, v_ax1 - T.int64(1760), v_ax2, v_ax3], T.if_then_else(T.int64(1728) <= v_ax1, p27[v_ax0, v_ax1 - T.int64(1728), v_ax2, v_ax3], T.if_then_else(T.int64(1696) <= v_ax1, p26[v_ax0, v_ax1 - T.int64(1696), v_ax2, v_ax3], T.if_then_else(T.int64(1664) <= v_ax1, p25[v_ax0, v_ax1 - T.int64(1664), v_ax2, v_ax3], T.if_then_else(T.int64(1632) <= v_ax1, p24[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], T.if_then_else(T.int64(1600) <= v_ax1, p23[v_ax0, v_ax1 - T.int64(1600), v_ax2, v_ax3], T.if_then_else(T.int64(1568) <= v_ax1, p22[v_ax0, v_ax1 - T.int64(1568), v_ax2, v_ax3], T.if_then_else(T.int64(1536) <= v_ax1, p21[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], T.if_then_else(T.int64(1504) <= v_ax1, p20[v_ax0, v_ax1 - T.int64(1504), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1440) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], T.if_then_else(T.int64(1408) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(1408), v_ax2, v_ax3], T.if_then_else(T.int64(1376) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(1376), v_ax2, v_ax3], T.if_then_else(T.int64(1344) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], T.if_then_else(T.int64(1312) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(1312), v_ax2, v_ax3], T.if_then_else(T.int64(1280) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(1280), v_ax2, v_ax3], T.if_then_else(T.int64(1248) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], T.if_then_else(T.int64(1216) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(1216), v_ax2, v_ax3], T.if_then_else(T.int64(1184) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(1184), v_ax2, v_ax3], T.if_then_else(T.int64(1152) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], T.if_then_else(T.int64(1120) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(1120), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(1056) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], T.if_then_else(T.int64(1024) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1024), v_ax2, v_ax3], T.if_then_else(T.int64(992) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], T.if_then_else(T.int64(960) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3]))))))))))))))))))))))))))))))) * p32[v_ax0, v_ax1, T.int64(0), T.int64(0)] + p33[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="T_concat", func_name="main")
b1 = sch.get_block(name="T_multiply", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
2024-05-01 15:06:20 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 15:06:21 [INFO] [evolutionary_search.cc:715] Picked top 6 candidate(s) from database
2024-05-01 15:06:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xed27028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcd0d128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb6438b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xed27a88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xed38288)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x150874e8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa95fb68)]: 0 failure(s)
2024-05-01 15:06:31 [INFO] [evolutionary_search.cc:723] Sampled 506 candidate(s)
2024-05-01 15:06:32 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xed27028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcd0d128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb6438b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xed27a88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xed38288)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x150874e8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa95fb68)]: 0 failure(s)
2024-05-01 15:06:34 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xed27028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcd0d128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb6438b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xed27a88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xed38288)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x150874e8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa95fb68)]: 0 failure(s)
2024-05-01 15:06:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xed27028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcd0d128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb6438b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xed27a88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xed38288)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x150874e8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa95fb68)]: 0 failure(s)
2024-05-01 15:06:37 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xed27028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xcd0d128)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb6438b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xed27a88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xed38288)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x150874e8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xa95fb68)]: 0 failure(s)
2024-05-01 15:06:37 [INFO] [evolutionary_search.cc:649] Scores of the best 6 candidates:
[1 : 6]:	0.7167  0.6017  0.3611  0.3384  0.1761  0.1697
2024-05-01 15:06:37 [INFO] [evolutionary_search.cc:727] Got 6 candidate(s) with evolutionary search
2024-05-01 15:06:37 [INFO] [evolutionary_search.cc:730] Sending 6 candidates(s) for measurement
2024-05-01 18:31:41 [INFO] [task_scheduler.cc:131] [Task #0: fused_concatenate_multiply_add_nn_relu] Trial #1: GFLOPs: 80.9871. Time: 3.4269 us. Best GFLOPs: 80.9871
2024-05-01 18:31:41 [INFO] [task_scheduler.cc:131] [Task #0: fused_concatenate_multiply_add_nn_relu] Trial #2: GFLOPs: 51.3680. Time: 5.4029 us. Best GFLOPs: 80.9871
2024-05-01 18:31:41 [INFO] [task_scheduler.cc:131] [Task #0: fused_concatenate_multiply_add_nn_relu] Trial #3: GFLOPs: 81.5380. Time: 3.4038 us. Best GFLOPs: 81.5380
2024-05-01 18:31:41 [INFO] [task_scheduler.cc:131] [Task #0: fused_concatenate_multiply_add_nn_relu] Trial #4: GFLOPs: 74.1308. Time: 3.7439 us. Best GFLOPs: 81.5380
2024-05-01 18:31:41 [INFO] [task_scheduler.cc:131] [Task #0: fused_concatenate_multiply_add_nn_relu] Trial #5: GFLOPs: 61.0842. Time: 4.5435 us. Best GFLOPs: 81.5380
2024-05-01 18:31:41 [INFO] [task_scheduler.cc:131] [Task #0: fused_concatenate_multiply_add_nn_relu] Trial #6: GFLOPs: 81.5359. Time: 3.4038 us. Best GFLOPs: 81.5380
