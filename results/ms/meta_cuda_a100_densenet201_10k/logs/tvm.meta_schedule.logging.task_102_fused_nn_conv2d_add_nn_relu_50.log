2024-04-29 16:31:56 [INFO] [task_scheduler.cc:160] Initializing Task #102: "fused_nn_conv2d_add_nn_relu_50"
2024-04-29 16:31:56 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1184), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(1184), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 16:31:56 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 16:31:56 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(116032)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1184), ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(151552)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(1184))
                                    v1 = T.axis.spatial(T.int64(1184), ax0_ax1_ax2_ax3_fused % T.int64(1184))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(296), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1184), rc_0 * T.int64(1184) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 8, 8, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 14, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 296, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 16:31:56 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(116032)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1184), ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(151552)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(1184))
                                    v1 = T.axis.spatial(T.int64(1184), ax0_ax1_ax2_ax3_fused % T.int64(1184))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(296), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1184), rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 8, 8, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 14, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 296, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 16:31:56 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(116032)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1184), ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(151552)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(1184))
                                    v1 = T.axis.spatial(T.int64(1184), ax0_ax1_ax2_ax3_fused % T.int64(1184))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(296), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1184), rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 8, 8, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 14, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 296, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 17:57:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 17:57:27 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 17:57:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa4c39d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14cb8a38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14cbe5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcc00d58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x112b48c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf2d39c8)]: 479 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xfb15c98)]: 0 failure(s)
2024-04-29 17:57:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa4c39d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14cb8a38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14cbe5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcc00d58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x112b48c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf2d39c8)]: 959 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xfb15c98)]: 0 failure(s)
2024-04-29 17:57:30 [INFO] [evolutionary_search.cc:723] Sampled 65 candidate(s)
2024-04-29 17:57:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa4c39d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14cb8a38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14cbe5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcc00d58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x112b48c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf2d39c8)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xfb15c98)]: 0 failure(s)
2024-04-29 17:57:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa4c39d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14cb8a38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14cbe5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcc00d58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x112b48c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf2d39c8)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xfb15c98)]: 0 failure(s)
2024-04-29 17:57:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa4c39d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14cb8a38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14cbe5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcc00d58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x112b48c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf2d39c8)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xfb15c98)]: 0 failure(s)
2024-04-29 17:57:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa4c39d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14cb8a38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14cbe5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcc00d58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x112b48c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf2d39c8)]: 71 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xfb15c98)]: 0 failure(s)
2024-04-29 17:57:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9997  0.9990  0.9988  0.9972  0.9964  0.9947  0.9942  0.9927  0.9927  0.9921  0.9920  0.9910  0.9907  0.9901  0.9900
[17 : 32]:	0.9898  0.9898  0.9891  0.9888  0.9881  0.9880  0.9875  0.9874  0.9867  0.9854  0.9852  0.9838  0.9832  0.9829  0.9829  0.9828
[33 : 48]:	0.9814  0.9813  0.9811  0.9800  0.9796  0.9778  0.9773  0.9752  0.9744  0.9736  0.9732  0.9714  0.9706  0.9706  0.9700  0.9697
[49 : 64]:	0.9690  0.9689  0.9685  0.9682  0.9676  0.9644  0.9638  0.9637  0.9624  0.9624  0.9616  0.9615  0.9613  0.9611  0.9605  0.9602
2024-04-29 17:57:39 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 17:57:39 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #1: GFLOPs: 13.4798. Time: 4410.9266 us. Best GFLOPs: 13.4798
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #2: GFLOPs: 852.9110. Time: 69.7125 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #3: GFLOPs: 582.4010. Time: 102.0921 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #4: GFLOPs: 76.8539. Time: 773.6566 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #5: GFLOPs: 9.2845. Time: 6404.0961 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #6: GFLOPs: 19.4608. Time: 3055.3057 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #7: GFLOPs: 309.5757. Time: 192.0647 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #8: GFLOPs: 92.1384. Time: 645.3182 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #9: GFLOPs: 536.8661. Time: 110.7512 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #10: GFLOPs: 102.3938. Time: 580.6853 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #11: GFLOPs: 78.5365. Time: 757.0822 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #12: GFLOPs: 451.4786. Time: 131.6974 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #13: GFLOPs: 29.3655. Time: 2024.7757 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #14: GFLOPs: 347.6323. Time: 171.0387 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #15: GFLOPs: 122.5570. Time: 485.1502 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #16: GFLOPs: 155.2500. Time: 382.9858 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #17: GFLOPs: 60.1408. Time: 988.6563 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #18: GFLOPs: 406.4707. Time: 146.2800 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #19: GFLOPs: 271.1597. Time: 219.2751 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #20: GFLOPs: 77.0171. Time: 772.0173 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #21: GFLOPs: 551.3078. Time: 107.8500 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #22: GFLOPs: 191.1922. Time: 310.9884 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #23: GFLOPs: 78.9588. Time: 753.0327 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #24: GFLOPs: 119.4008. Time: 497.9747 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #25: GFLOPs: 47.1972. Time: 1259.7888 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #26: GFLOPs: 81.6797. Time: 727.9481 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #27: GFLOPs: 87.6517. Time: 678.3503 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #28: GFLOPs: 311.7234. Time: 190.7414 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #29: GFLOPs: 496.1307. Time: 119.8445 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #30: GFLOPs: 517.5790. Time: 114.8782 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #31: GFLOPs: 185.2664. Time: 320.9354 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #32: GFLOPs: 142.0061. Time: 418.7043 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #33: GFLOPs: 847.9312. Time: 70.1219 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #34: GFLOPs: 307.3030. Time: 193.4851 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #35: GFLOPs: 304.2837. Time: 195.4050 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #36: GFLOPs: 584.8652. Time: 101.6620 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #37: GFLOPs: 430.2888. Time: 138.1829 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #38: GFLOPs: 65.2056. Time: 911.8627 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #39: GFLOPs: 152.5660. Time: 389.7235 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #40: GFLOPs: 38.4286. Time: 1547.2482 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #41: GFLOPs: 601.5806. Time: 98.8372 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #42: GFLOPs: 361.8718. Time: 164.3084 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #43: GFLOPs: 15.5627. Time: 3820.5818 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #44: GFLOPs: 697.6947. Time: 85.2215 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #45: GFLOPs: 824.8497. Time: 72.0841 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #46: GFLOPs: 136.2133. Time: 436.5106 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #47: GFLOPs: 11.7942. Time: 5041.3566 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #48: GFLOPs: 348.9694. Time: 170.3833 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #49: GFLOPs: 691.9782. Time: 85.9255 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #50: GFLOPs: 163.2391. Time: 364.2421 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #51: GFLOPs: 123.5827. Time: 481.1236 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #52: GFLOPs: 312.9173. Time: 190.0136 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #53: GFLOPs: 182.0219. Time: 326.6560 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #54: GFLOPs: 72.1829. Time: 823.7214 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #55: GFLOPs: 309.1291. Time: 192.3422 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #56: GFLOPs: 47.1350. Time: 1261.4528 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #57: GFLOPs: 138.8117. Time: 428.3397 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #58: GFLOPs: 581.3235. Time: 102.2814 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #59: GFLOPs: 12.7894. Time: 4649.0530 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #60: GFLOPs: 123.1886. Time: 482.6627 us. Best GFLOPs: 852.9110
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #61: GFLOPs: 1054.3891. Time: 56.3915 us. Best GFLOPs: 1054.3891
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #62: GFLOPs: 567.5627. Time: 104.7612 us. Best GFLOPs: 1054.3891
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #63: GFLOPs: 421.4127. Time: 141.0934 us. Best GFLOPs: 1054.3891
2024-04-29 20:25:35 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #64: GFLOPs: 160.7118. Time: 369.9700 us. Best GFLOPs: 1054.3891
2024-04-29 21:59:23 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 21:59:23 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-29 21:59:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa4c39d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14cb8a38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14cbe5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcc00d58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x112b48c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf2d39c8)]: 418 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xfb15c98)]: 0 failure(s)
2024-04-29 21:59:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa4c39d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14cb8a38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14cbe5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcc00d58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x112b48c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf2d39c8)]: 837 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xfb15c98)]: 0 failure(s)
2024-04-29 21:59:27 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2024-04-29 21:59:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa4c39d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14cb8a38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14cbe5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcc00d58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x112b48c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf2d39c8)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xfb15c98)]: 0 failure(s)
2024-04-29 21:59:34 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa4c39d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14cb8a38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14cbe5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcc00d58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x112b48c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf2d39c8)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xfb15c98)]: 0 failure(s)
2024-04-29 21:59:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa4c39d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14cb8a38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14cbe5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcc00d58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x112b48c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf2d39c8)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xfb15c98)]: 0 failure(s)
2024-04-29 21:59:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa4c39d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14cb8a38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14cbe5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcc00d58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x112b48c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xf2d39c8)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xfb15c98)]: 0 failure(s)
2024-04-29 21:59:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0088  1.0037  0.9830  0.9818  0.9630  0.9582  0.9578  0.9548  0.9530  0.9516  0.9513  0.9513  0.9482  0.9465  0.9430  0.9382
[17 : 32]:	0.9378  0.9331  0.9330  0.9282  0.9280  0.9234  0.9207  0.9201  0.9160  0.9160  0.9142  0.9131  0.9101  0.9094  0.9087  0.9034
[33 : 48]:	0.8890  0.8887  0.8762  0.8748  0.8746  0.8746  0.8740  0.8716  0.8700  0.8671  0.8625  0.8601  0.8599  0.8597  0.8580  0.8553
[49 : 64]:	0.8540  0.8540  0.8518  0.8513  0.8501  0.8467  0.8452  0.8403  0.8403  0.8392  0.8384  0.8373  0.8357  0.8352  0.8334  0.8300
2024-04-29 21:59:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 21:59:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #65: GFLOPs: 1147.8878. Time: 51.7982 us. Best GFLOPs: 1147.8878
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #66: GFLOPs: 1147.8409. Time: 51.8003 us. Best GFLOPs: 1147.8878
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #67: GFLOPs: 1047.2058. Time: 56.7783 us. Best GFLOPs: 1147.8878
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #68: GFLOPs: 1143.6867. Time: 51.9885 us. Best GFLOPs: 1147.8878
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #69: GFLOPs: 1080.6253. Time: 55.0224 us. Best GFLOPs: 1147.8878
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #70: GFLOPs: 1080.5310. Time: 55.0272 us. Best GFLOPs: 1147.8878
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #71: GFLOPs: 1080.6459. Time: 55.0213 us. Best GFLOPs: 1147.8878
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #72: GFLOPs: 1055.0761. Time: 56.3548 us. Best GFLOPs: 1147.8878
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #73: GFLOPs: 1080.5033. Time: 55.0286 us. Best GFLOPs: 1147.8878
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #74: GFLOPs: 1124.4571. Time: 52.8776 us. Best GFLOPs: 1147.8878
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #75: GFLOPs: 1654.5206. Time: 35.9370 us. Best GFLOPs: 1654.5206
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #76: GFLOPs: 1655.0084. Time: 35.9264 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #77: GFLOPs: 1080.5505. Time: 55.0262 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #78: GFLOPs: 1124.3596. Time: 52.8822 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #79: GFLOPs: 972.8164. Time: 61.1200 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #80: GFLOPs: 972.7995. Time: 61.1211 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #81: GFLOPs: 972.8274. Time: 61.1193 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #82: GFLOPs: 1147.6047. Time: 51.8110 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #83: GFLOPs: 972.9374. Time: 61.1124 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #84: GFLOPs: 972.8470. Time: 61.1181 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #85: GFLOPs: 1147.6429. Time: 51.8093 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #86: GFLOPs: 1065.3171. Time: 55.8130 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #87: GFLOPs: 1244.6442. Time: 47.7715 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #88: GFLOPs: 980.6596. Time: 60.6312 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #89: GFLOPs: 1055.0441. Time: 56.3565 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #90: GFLOPs: 1054.9879. Time: 56.3595 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #91: GFLOPs: 1051.0479. Time: 56.5707 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #92: GFLOPs: 1046.4109. Time: 56.8214 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #93: GFLOPs: 980.6736. Time: 60.6303 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #94: GFLOPs: 1050.8774. Time: 56.5799 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #95: GFLOPs: 1065.3557. Time: 55.8110 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #96: GFLOPs: 963.0015. Time: 61.7430 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #97: GFLOPs: 1036.9869. Time: 57.3378 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #98: GFLOPs: 962.8816. Time: 61.7506 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #99: GFLOPs: 1439.7102. Time: 41.2990 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #100: GFLOPs: 972.7667. Time: 61.1231 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #101: GFLOPs: 1135.5736. Time: 52.3599 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #102: GFLOPs: 1466.1692. Time: 40.5537 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #103: GFLOPs: 1065.4561. Time: 55.8057 us. Best GFLOPs: 1655.0084
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #104: GFLOPs: 1675.2568. Time: 35.4922 us. Best GFLOPs: 1675.2568
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #105: GFLOPs: 1499.3536. Time: 39.6561 us. Best GFLOPs: 1675.2568
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #106: GFLOPs: 1436.7277. Time: 41.3847 us. Best GFLOPs: 1675.2568
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #107: GFLOPs: 1732.8191. Time: 34.3132 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #108: GFLOPs: 1129.7014. Time: 52.6321 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #109: GFLOPs: 1135.7134. Time: 52.3535 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #110: GFLOPs: 901.6269. Time: 65.9459 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #111: GFLOPs: 1307.6193. Time: 45.4709 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #112: GFLOPs: 1235.8639. Time: 48.1109 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #113: GFLOPs: 1119.8177. Time: 53.0966 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #114: GFLOPs: 962.8625. Time: 61.7519 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #115: GFLOPs: 1381.6601. Time: 43.0341 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #116: GFLOPs: 1307.4149. Time: 45.4780 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #117: GFLOPs: 901.6013. Time: 65.9477 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #118: GFLOPs: 1054.9794. Time: 56.3599 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #119: GFLOPs: 1517.8256. Time: 39.1735 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #120: GFLOPs: 1046.3605. Time: 56.8242 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #121: GFLOPs: 1046.2945. Time: 56.8277 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #122: GFLOPs: 1290.8280. Time: 46.0623 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #123: GFLOPs: 1072.4108. Time: 55.4438 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #124: GFLOPs: 1468.3887. Time: 40.4924 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #125: GFLOPs: 1086.9889. Time: 54.7002 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #126: GFLOPs: 1441.0228. Time: 41.2614 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #127: GFLOPs: 77.6595. Time: 765.6315 us. Best GFLOPs: 1732.8191
2024-04-29 22:01:34 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #128: GFLOPs: 92.8710. Time: 640.2275 us. Best GFLOPs: 1732.8191
2024-05-01 15:05:35 [INFO] [task_scheduler.cc:160] Initializing Task #102: "fused_nn_conv2d_add_nn_relu_50"
2024-05-01 15:05:35 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1184), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(1184), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-05-01 15:05:35 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-05-01 15:05:35 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(58016)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1184), rc_0 * T.int64(592) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(18944)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(592))
                                    v1 = T.axis.spatial(T.int64(1184), rc_0 * T.int64(592) + ax0_ax1_ax2_ax3_fused % T.int64(592))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(37), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(16) + ff_3 * T.int64(16) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1184), rc_0 * T.int64(592) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 2, 1, 16])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 37, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-05-01 15:05:35 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(58016)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1184), rc_0_ry_0_rx_0_fused * T.int64(592) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(18944)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(592))
                                    v1 = T.axis.spatial(T.int64(1184), rc_0_ry_0_rx_0_fused * T.int64(592) + ax0_ax1_ax2_ax3_fused % T.int64(592))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(37), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(16) + ff_3 * T.int64(16) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1184), rc_0_ry_0_rx_0_fused * T.int64(592) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 2, 1, 16])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 37, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-05-01 15:05:35 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1184), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1184), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(58016)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1184), rc_0_ry_0_rx_0_fused * T.int64(592) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(18944)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(592))
                                    v1 = T.axis.spatial(T.int64(1184), rc_0_ry_0_rx_0_fused * T.int64(592) + ax0_ax1_ax2_ax3_fused % T.int64(592))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(37), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(16) + ff_3 * T.int64(16) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1184), rc_0_ry_0_rx_0_fused * T.int64(592) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 2, 1, 16])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 37, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-05-01 16:40:14 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 16:40:14 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-05-01 16:40:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcb5c0d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xddd5688)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xea90cb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1200cf48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd8a2b18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x13ee3578)]: 377 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10dcf918)]: 0 failure(s)
2024-05-01 16:40:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcb5c0d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xddd5688)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xea90cb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1200cf48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd8a2b18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x13ee3578)]: 753 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10dcf918)]: 0 failure(s)
2024-05-01 16:40:17 [INFO] [evolutionary_search.cc:723] Sampled 67 candidate(s)
2024-05-01 16:40:19 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcb5c0d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xddd5688)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xea90cb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1200cf48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd8a2b18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x13ee3578)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10dcf918)]: 0 failure(s)
2024-05-01 16:40:22 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcb5c0d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xddd5688)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xea90cb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1200cf48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd8a2b18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x13ee3578)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10dcf918)]: 0 failure(s)
2024-05-01 16:40:24 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcb5c0d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xddd5688)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xea90cb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1200cf48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd8a2b18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x13ee3578)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10dcf918)]: 0 failure(s)
2024-05-01 16:40:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xcb5c0d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xddd5688)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xea90cb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1200cf48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xd8a2b18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x13ee3578)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x10dcf918)]: 0 failure(s)
2024-05-01 16:40:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9995  0.9989  0.9986  0.9973  0.9970  0.9963  0.9943  0.9942  0.9936  0.9931  0.9922  0.9916  0.9915  0.9910  0.9899
[17 : 32]:	0.9890  0.9887  0.9882  0.9868  0.9862  0.9860  0.9856  0.9853  0.9842  0.9842  0.9833  0.9817  0.9797  0.9791  0.9788  0.9787
[33 : 48]:	0.9778  0.9773  0.9758  0.9752  0.9746  0.9744  0.9738  0.9732  0.9730  0.9724  0.9723  0.9717  0.9709  0.9707  0.9705  0.9701
[49 : 64]:	0.9681  0.9679  0.9676  0.9653  0.9653  0.9650  0.9646  0.9642  0.9629  0.9626  0.9622  0.9612  0.9606  0.9600  0.9592  0.9577
2024-05-01 16:40:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 16:40:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #1: GFLOPs: 1342.8804. Time: 44.2769 us. Best GFLOPs: 1342.8804
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #2: GFLOPs: 306.4146. Time: 194.0461 us. Best GFLOPs: 1342.8804
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #3: GFLOPs: 193.6373. Time: 307.0615 us. Best GFLOPs: 1342.8804
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #4: GFLOPs: 349.8605. Time: 169.9494 us. Best GFLOPs: 1342.8804
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #5: GFLOPs: 105.4876. Time: 563.6547 us. Best GFLOPs: 1342.8804
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #6: GFLOPs: 546.1041. Time: 108.8777 us. Best GFLOPs: 1342.8804
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #7: GFLOPs: 208.8868. Time: 284.6449 us. Best GFLOPs: 1342.8804
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #8: GFLOPs: 561.1692. Time: 105.9548 us. Best GFLOPs: 1342.8804
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #9: GFLOPs: 12.4217. Time: 4786.6636 us. Best GFLOPs: 1342.8804
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #10: GFLOPs: 1081.9100. Time: 54.9570 us. Best GFLOPs: 1342.8804
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #11: GFLOPs: 1449.7668. Time: 41.0125 us. Best GFLOPs: 1449.7668
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #12: GFLOPs: 209.4370. Time: 283.8972 us. Best GFLOPs: 1449.7668
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #13: GFLOPs: 729.0205. Time: 81.5595 us. Best GFLOPs: 1449.7668
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #14: GFLOPs: 785.6745. Time: 75.6784 us. Best GFLOPs: 1449.7668
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #15: GFLOPs: 178.6490. Time: 332.8234 us. Best GFLOPs: 1449.7668
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #16: GFLOPs: 1257.1914. Time: 47.2948 us. Best GFLOPs: 1449.7668
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #17: GFLOPs: 1068.4802. Time: 55.6478 us. Best GFLOPs: 1449.7668
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #18: GFLOPs: 289.2275. Time: 205.5771 us. Best GFLOPs: 1449.7668
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #19: GFLOPs: 972.1958. Time: 61.1590 us. Best GFLOPs: 1449.7668
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #20: GFLOPs: 714.4767. Time: 83.2197 us. Best GFLOPs: 1449.7668
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #21: GFLOPs: 86.7733. Time: 685.2173 us. Best GFLOPs: 1449.7668
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #22: GFLOPs: 1150.5952. Time: 51.6764 us. Best GFLOPs: 1449.7668
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #23: GFLOPs: 610.1982. Time: 97.4414 us. Best GFLOPs: 1449.7668
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #24: GFLOPs: 1315.4739. Time: 45.1993 us. Best GFLOPs: 1449.7668
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #25: GFLOPs: 1062.0108. Time: 55.9868 us. Best GFLOPs: 1449.7668
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #26: GFLOPs: 969.6879. Time: 61.3172 us. Best GFLOPs: 1449.7668
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #27: GFLOPs: 899.2938. Time: 66.1169 us. Best GFLOPs: 1449.7668
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #28: GFLOPs: 516.9343. Time: 115.0215 us. Best GFLOPs: 1449.7668
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #29: GFLOPs: 383.5869. Time: 155.0068 us. Best GFLOPs: 1449.7668
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #30: GFLOPs: 1470.4598. Time: 40.4354 us. Best GFLOPs: 1470.4598
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #31: GFLOPs: 92.2680. Time: 644.4114 us. Best GFLOPs: 1470.4598
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #32: GFLOPs: 1500.2963. Time: 39.6312 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #33: GFLOPs: 94.6344. Time: 628.2977 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #34: GFLOPs: 1034.9645. Time: 57.4499 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #35: GFLOPs: 198.5986. Time: 299.3906 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #36: GFLOPs: 231.3214. Time: 257.0387 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #37: GFLOPs: 119.9278. Time: 495.7861 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #38: GFLOPs: 1127.9191. Time: 52.7153 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #39: GFLOPs: 386.4269. Time: 153.8676 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #40: GFLOPs: 495.0011. Time: 120.1180 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #41: GFLOPs: 165.5246. Time: 359.2128 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #42: GFLOPs: 294.2167. Time: 202.0910 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #43: GFLOPs: 136.4240. Time: 435.8365 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #44: GFLOPs: 135.6564. Time: 438.3026 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #45: GFLOPs: 318.8779. Time: 186.4619 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #46: GFLOPs: 350.0706. Time: 169.8473 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #47: GFLOPs: 402.7780. Time: 147.6212 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #48: GFLOPs: 422.8630. Time: 140.6095 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #49: GFLOPs: 606.3039. Time: 98.0673 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #50: GFLOPs: 397.7004. Time: 149.5059 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #51: GFLOPs: 1095.1044. Time: 54.2949 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #52: GFLOPs: 309.9522. Time: 191.8314 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #53: GFLOPs: 29.5400. Time: 2012.8154 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #54: GFLOPs: 1078.1699. Time: 55.1477 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #55: GFLOPs: 309.4273. Time: 192.1568 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #56: GFLOPs: 25.4331. Time: 2337.8397 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #57: GFLOPs: 484.4186. Time: 122.7421 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #58: GFLOPs: 97.9853. Time: 606.8108 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #59: GFLOPs: 353.5520. Time: 168.1749 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #60: GFLOPs: 836.9784. Time: 71.0395 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #61: GFLOPs: 101.6161. Time: 585.1292 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #62: GFLOPs: 305.8035. Time: 194.4338 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #63: GFLOPs: 375.9221. Time: 158.1672 us. Best GFLOPs: 1500.2963
2024-05-01 18:35:00 [INFO] [task_scheduler.cc:131] [Task #102: fused_nn_conv2d_add_nn_relu_50] Trial #64: GFLOPs: 31.8245. Time: 1868.3260 us. Best GFLOPs: 1500.2963
