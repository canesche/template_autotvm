2024-04-29 16:32:13 [INFO] [task_scheduler.cc:160] Initializing Task #140: "fused_nn_conv2d_add_nn_relu_69"
2024-04-29 16:32:13 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(576), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(576), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 16:32:13 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 16:32:13 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(56448)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(576), rc_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(36864)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(288))
                                    v1 = T.axis.spatial(T.int64(576), rc_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused % T.int64(288))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(2), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(32) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(7) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(576), rc_0 * T.int64(288) + rc_1 * T.int64(6) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 2, 32, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 48, 6])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 16:32:13 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(56448)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(288) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(36864)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(288))
                                    v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(288) + ax0_ax1_ax2_ax3_fused % T.int64(288))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(2), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(32) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(7) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(288) + rc_1 * T.int64(6) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 2, 32, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 48, 6])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 16:32:13 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(56448)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(288) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(36864)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(288))
                                    v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(288) + ax0_ax1_ax2_ax3_fused % T.int64(288))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(2), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(32) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(7) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(288) + rc_1 * T.int64(6) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 2, 32, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 48, 6])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 18:36:25 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 18:36:25 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 18:36:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1052fe38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14e72228)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xff8cf78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14cc2b38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe62ef48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x106d8588)]: 469 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1240d348)]: 0 failure(s)
2024-04-29 18:36:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1052fe38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14e72228)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xff8cf78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14cc2b38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe62ef48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x106d8588)]: 961 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1240d348)]: 0 failure(s)
2024-04-29 18:36:29 [INFO] [evolutionary_search.cc:723] Sampled 63 candidate(s)
2024-04-29 18:36:32 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1052fe38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14e72228)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xff8cf78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14cc2b38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe62ef48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x106d8588)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1240d348)]: 0 failure(s)
2024-04-29 18:36:34 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1052fe38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14e72228)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xff8cf78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14cc2b38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe62ef48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x106d8588)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1240d348)]: 0 failure(s)
2024-04-29 18:36:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1052fe38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14e72228)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xff8cf78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14cc2b38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe62ef48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x106d8588)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1240d348)]: 0 failure(s)
2024-04-29 18:36:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x1052fe38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14e72228)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xff8cf78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14cc2b38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xe62ef48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x106d8588)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1240d348)]: 0 failure(s)
2024-04-29 18:36:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9970  0.9952  0.9935  0.9934  0.9931  0.9920  0.9891  0.9880  0.9880  0.9879  0.9874  0.9867  0.9863  0.9859  0.9854
[17 : 32]:	0.9851  0.9847  0.9829  0.9822  0.9814  0.9810  0.9805  0.9798  0.9796  0.9789  0.9788  0.9779  0.9778  0.9772  0.9770  0.9759
[33 : 48]:	0.9738  0.9727  0.9707  0.9703  0.9700  0.9699  0.9698  0.9698  0.9692  0.9690  0.9688  0.9686  0.9665  0.9659  0.9653  0.9650
[49 : 64]:	0.9636  0.9628  0.9623  0.9622  0.9621  0.9620  0.9618  0.9614  0.9614  0.9607  0.9599  0.9598  0.9591  0.9582  0.9581  0.9579
2024-04-29 18:36:39 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 18:36:39 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #1: GFLOPs: 7.2003. Time: 4020.8792 us. Best GFLOPs: 7.2003
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #2: GFLOPs: 93.4148. Time: 309.9247 us. Best GFLOPs: 93.4148
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #3: GFLOPs: 1451.2474. Time: 19.9494 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #4: GFLOPs: 329.1227. Time: 87.9658 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #5: GFLOPs: 98.0583. Time: 295.2483 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #6: GFLOPs: 349.8889. Time: 82.7450 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #7: GFLOPs: 15.2198. Time: 1902.2248 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #8: GFLOPs: 174.8755. Time: 165.5553 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #9: GFLOPs: 73.1751. Time: 395.6474 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #10: GFLOPs: 124.0712. Time: 233.3462 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #11: GFLOPs: 852.6973. Time: 33.9529 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #12: GFLOPs: 15.5292. Time: 1864.3248 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #13: GFLOPs: 89.7458. Time: 322.5951 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #14: GFLOPs: 616.7795. Time: 46.9399 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #15: GFLOPs: 5.0345. Time: 5750.6133 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #16: GFLOPs: 733.2737. Time: 39.4826 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #17: GFLOPs: 274.5783. Time: 105.4400 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #18: GFLOPs: 742.5216. Time: 38.9909 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #19: GFLOPs: 210.3878. Time: 137.6104 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #20: GFLOPs: 336.2421. Time: 86.1033 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #21: GFLOPs: 110.7084. Time: 261.5118 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #22: GFLOPs: 12.5075. Time: 2314.7286 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #23: GFLOPs: 507.7923. Time: 57.0146 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #24: GFLOPs: 218.7770. Time: 132.3336 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #25: GFLOPs: 207.0986. Time: 139.7960 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #26: GFLOPs: 14.0828. Time: 2055.8159 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #27: GFLOPs: 114.5324. Time: 252.7806 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #28: GFLOPs: 235.9322. Time: 122.7113 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #29: GFLOPs: 1380.7056. Time: 20.9687 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #30: GFLOPs: 355.9588. Time: 81.3340 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #31: GFLOPs: 445.8200. Time: 64.9400 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #32: GFLOPs: 69.5926. Time: 416.0146 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #33: GFLOPs: 73.2984. Time: 394.9822 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #34: GFLOPs: 1141.4565. Time: 25.3637 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #35: GFLOPs: 159.1877. Time: 181.8706 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #36: GFLOPs: 28.0822. Time: 1030.9569 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:121] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #37: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ff_3_init * T.int64(4) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(144), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(196))
                                        v2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196) // T.int64(14))
                                        v3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(784))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(4) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 16, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[144, 4, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116 = sch.split(loop=l114, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b118)
l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #38: GFLOPs: 132.2985. Time: 218.8350 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #39: GFLOPs: 234.9180. Time: 123.2411 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #40: GFLOPs: 117.3695. Time: 246.6700 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #41: GFLOPs: 291.6992. Time: 99.2514 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #42: GFLOPs: 194.1986. Time: 149.0822 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #43: GFLOPs: 176.0597. Time: 164.4417 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #44: GFLOPs: 445.3800. Time: 65.0042 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #45: GFLOPs: 3.3758. Time: 8576.1706 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #46: GFLOPs: 78.7695. Time: 367.5477 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #47: GFLOPs: 173.7139. Time: 166.6622 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #48: GFLOPs: 307.6238. Time: 94.1135 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #49: GFLOPs: 3.3430. Time: 8660.3094 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #50: GFLOPs: 86.7680. Time: 333.6661 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #51: GFLOPs: 496.4143. Time: 58.3214 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #52: GFLOPs: 708.9358. Time: 40.8380 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #53: GFLOPs: 26.5382. Time: 1090.9384 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #54: GFLOPs: 255.2658. Time: 113.4173 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #55: GFLOPs: 220.0774. Time: 131.5517 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #56: GFLOPs: 991.9176. Time: 29.1875 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #57: GFLOPs: 15.0685. Time: 1921.3288 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #58: GFLOPs: 473.5507. Time: 61.1372 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #59: GFLOPs: 119.5576. Time: 242.1558 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #60: GFLOPs: 85.3940. Time: 339.0351 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #61: GFLOPs: 707.5491. Time: 40.9181 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #62: GFLOPs: 282.2973. Time: 102.5570 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #63: GFLOPs: 297.3597. Time: 97.3620 us. Best GFLOPs: 1451.2474
2024-04-29 20:28:37 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #64: GFLOPs: 534.3349. Time: 54.1824 us. Best GFLOPs: 1451.2474
2024-05-01 15:05:53 [INFO] [task_scheduler.cc:160] Initializing Task #140: "fused_nn_conv2d_add_nn_relu_69"
2024-05-01 15:05:53 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(576), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(576), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-05-01 15:05:53 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-05-01 15:05:53 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(6), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(9408)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(576), rc_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v1 = T.axis.spatial(T.int64(576), rc_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(576), rc_0 * T.int64(96) + rc_1 * T.int64(24) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 4, 1, 4, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[6, 4, 24])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-05-01 15:05:53 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(6), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(9408)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + rc_1 * T.int64(24) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 4, 1, 4, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[6, 4, 24])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-05-01 15:05:53 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(6), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(9408)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + rc_1 * T.int64(24) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 4, 1, 4, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[6, 4, 24])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-05-01 17:14:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 17:14:09 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-05-01 17:14:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc4f0188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd383058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc8129a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14fd2cc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x148e2c68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x150a1228)]: 428 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x150be888)]: 0 failure(s)
2024-05-01 17:14:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc4f0188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd383058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc8129a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14fd2cc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x148e2c68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x150a1228)]: 851 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x150be888)]: 0 failure(s)
2024-05-01 17:14:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc4f0188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd383058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc8129a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14fd2cc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x148e2c68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x150a1228)]: 1281 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x150be888)]: 0 failure(s)
2024-05-01 17:14:13 [INFO] [evolutionary_search.cc:723] Sampled 66 candidate(s)
2024-05-01 17:14:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc4f0188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd383058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc8129a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14fd2cc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x148e2c68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x150a1228)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x150be888)]: 0 failure(s)
2024-05-01 17:14:17 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc4f0188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd383058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc8129a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14fd2cc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x148e2c68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x150a1228)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x150be888)]: 0 failure(s)
2024-05-01 17:14:20 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc4f0188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd383058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc8129a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14fd2cc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x148e2c68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x150a1228)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x150be888)]: 0 failure(s)
2024-05-01 17:14:22 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc4f0188)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xd383058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc8129a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x14fd2cc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x148e2c68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x150a1228)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x150be888)]: 0 failure(s)
2024-05-01 17:14:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9991  0.9981  0.9981  0.9980  0.9978  0.9972  0.9971  0.9960  0.9958  0.9956  0.9955  0.9946  0.9940  0.9919  0.9919  0.9919
[17 : 32]:	0.9917  0.9917  0.9909  0.9904  0.9901  0.9895  0.9894  0.9890  0.9883  0.9877  0.9873  0.9867  0.9867  0.9866  0.9864  0.9863
[33 : 48]:	0.9858  0.9844  0.9841  0.9841  0.9827  0.9824  0.9824  0.9822  0.9815  0.9813  0.9812  0.9794  0.9792  0.9788  0.9780  0.9775
[49 : 64]:	0.9774  0.9773  0.9765  0.9757  0.9753  0.9751  0.9750  0.9748  0.9745  0.9735  0.9734  0.9732  0.9731  0.9726  0.9720  0.9717
2024-05-01 17:14:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 17:14:22 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #1: GFLOPs: 146.5084. Time: 197.6101 us. Best GFLOPs: 146.5084
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #2: GFLOPs: 16.2664. Time: 1779.8378 us. Best GFLOPs: 146.5084
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #3: GFLOPs: 156.1547. Time: 185.4031 us. Best GFLOPs: 156.1547
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #4: GFLOPs: 43.0929. Time: 671.8402 us. Best GFLOPs: 156.1547
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #5: GFLOPs: 342.6338. Time: 84.4971 us. Best GFLOPs: 342.6338
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #6: GFLOPs: 139.5391. Time: 207.4799 us. Best GFLOPs: 342.6338
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #7: GFLOPs: 125.8247. Time: 230.0943 us. Best GFLOPs: 342.6338
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #8: GFLOPs: 332.3789. Time: 87.1041 us. Best GFLOPs: 342.6338
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #9: GFLOPs: 151.9570. Time: 190.5247 us. Best GFLOPs: 342.6338
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #10: GFLOPs: 228.0602. Time: 126.9470 us. Best GFLOPs: 342.6338
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #11: GFLOPs: 198.5730. Time: 145.7980 us. Best GFLOPs: 342.6338
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #12: GFLOPs: 190.3067. Time: 152.1310 us. Best GFLOPs: 342.6338
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #13: GFLOPs: 210.3035. Time: 137.6655 us. Best GFLOPs: 342.6338
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #14: GFLOPs: 195.5263. Time: 148.0698 us. Best GFLOPs: 342.6338
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #15: GFLOPs: 926.7436. Time: 31.2401 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #16: GFLOPs: 332.5231. Time: 87.0663 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #17: GFLOPs: 333.0884. Time: 86.9185 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #18: GFLOPs: 155.6814. Time: 185.9667 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #19: GFLOPs: 132.2543. Time: 218.9081 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #20: GFLOPs: 130.1198. Time: 222.4993 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #21: GFLOPs: 508.0979. Time: 56.9803 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #22: GFLOPs: 51.9341. Time: 557.4670 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #23: GFLOPs: 896.6886. Time: 32.2872 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #24: GFLOPs: 128.6044. Time: 225.1210 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #25: GFLOPs: 74.3950. Time: 389.1598 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #26: GFLOPs: 145.1300. Time: 199.4870 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #27: GFLOPs: 226.3904. Time: 127.8833 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #28: GFLOPs: 507.0045. Time: 57.1031 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #29: GFLOPs: 284.9583. Time: 101.5993 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #30: GFLOPs: 85.8625. Time: 337.1852 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #31: GFLOPs: 16.1595. Time: 1791.6160 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #32: GFLOPs: 549.5717. Time: 52.6802 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #33: GFLOPs: 66.7066. Time: 434.0136 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #34: GFLOPs: 325.1056. Time: 89.0528 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #35: GFLOPs: 52.1206. Time: 555.4722 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #36: GFLOPs: 676.7129. Time: 42.7826 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #37: GFLOPs: 462.9858. Time: 62.5323 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #38: GFLOPs: 97.6070. Time: 296.6136 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #39: GFLOPs: 470.9621. Time: 61.4732 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #40: GFLOPs: 97.6717. Time: 296.4169 us. Best GFLOPs: 926.7436
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #41: GFLOPs: 1578.1795. Time: 18.3449 us. Best GFLOPs: 1578.1795
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #42: GFLOPs: 27.9397. Time: 1036.2141 us. Best GFLOPs: 1578.1795
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #43: GFLOPs: 42.1386. Time: 687.0549 us. Best GFLOPs: 1578.1795
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #44: GFLOPs: 379.3790. Time: 76.3130 us. Best GFLOPs: 1578.1795
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #45: GFLOPs: 332.1583. Time: 87.1619 us. Best GFLOPs: 1578.1795
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #46: GFLOPs: 1123.2458. Time: 25.7749 us. Best GFLOPs: 1578.1795
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #47: GFLOPs: 472.6431. Time: 61.2546 us. Best GFLOPs: 1578.1795
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #48: GFLOPs: 232.4225. Time: 124.5643 us. Best GFLOPs: 1578.1795
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #49: GFLOPs: 26.1050. Time: 1109.0414 us. Best GFLOPs: 1578.1795
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #50: GFLOPs: 227.0924. Time: 127.4880 us. Best GFLOPs: 1578.1795
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #51: GFLOPs: 245.7784. Time: 117.7953 us. Best GFLOPs: 1578.1795
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #52: GFLOPs: 1584.3015. Time: 18.2740 us. Best GFLOPs: 1584.3015
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #53: GFLOPs: 125.3815. Time: 230.9076 us. Best GFLOPs: 1584.3015
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #54: GFLOPs: 201.0262. Time: 144.0188 us. Best GFLOPs: 1584.3015
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #55: GFLOPs: 551.8089. Time: 52.4666 us. Best GFLOPs: 1584.3015
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #56: GFLOPs: 447.5000. Time: 64.6962 us. Best GFLOPs: 1584.3015
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #57: GFLOPs: 80.0557. Time: 361.6427 us. Best GFLOPs: 1584.3015
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #58: GFLOPs: 876.4980. Time: 33.0309 us. Best GFLOPs: 1584.3015
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #59: GFLOPs: 326.0585. Time: 88.7925 us. Best GFLOPs: 1584.3015
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #60: GFLOPs: 85.0943. Time: 340.2292 us. Best GFLOPs: 1584.3015
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #61: GFLOPs: 852.2746. Time: 33.9697 us. Best GFLOPs: 1584.3015
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #62: GFLOPs: 260.5522. Time: 111.1161 us. Best GFLOPs: 1584.3015
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #63: GFLOPs: 106.3498. Time: 272.2295 us. Best GFLOPs: 1584.3015
2024-05-01 18:37:04 [INFO] [task_scheduler.cc:131] [Task #140: fused_nn_conv2d_add_nn_relu_69] Trial #64: GFLOPs: 49.9444. Time: 579.6761 us. Best GFLOPs: 1584.3015
