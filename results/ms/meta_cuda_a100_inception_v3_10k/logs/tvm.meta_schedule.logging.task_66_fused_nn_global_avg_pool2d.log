2024-04-29 01:54:33 [INFO] [task_scheduler.cc:160] Initializing Task #66: "fused_nn_global_avg_pool2d"
2024-04-29 01:54:33 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(2048), T.int64(1), T.int64(1), T.int64(5), T.int64(5)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2048), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.040000000000000001)
2024-04-29 01:54:33 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-04-29 01:54:33 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(5), T.int64(5)):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.040000000000000001)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-04-29 01:54:33 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(2048), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_0_fused + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(5), (ax4_ax5_fused_0 * T.int64(256) + ax4_ax5_fused_1) // T.int64(5))
                            v_rv1 = T.axis.reduce(T.int64(5), (ax4_ax5_fused_0 * T.int64(256) + ax4_ax5_fused_1) % T.int64(5))
                            T.where(ax4_ax5_fused_0 * T.int64(256) + ax4_ax5_fused_1 < T.int64(25))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.where(T.Mul(T.int64(0), T.int64(256)) + ax3_1 < T.int64(1))
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.040000000000000001)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=6)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2024-04-29 03:53:16 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:53:16 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:53:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x37b2ea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86aa758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x332e298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0d3998)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3676ff8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x33f6258)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xac6ae88)]: 0 failure(s)
2024-04-29 03:53:17 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 03:53:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x37b2ea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86aa758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x332e298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0d3998)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3676ff8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x33f6258)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xac6ae88)]: 0 failure(s)
2024-04-29 03:53:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x37b2ea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86aa758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x332e298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0d3998)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3676ff8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x33f6258)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xac6ae88)]: 0 failure(s)
2024-04-29 03:53:18 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x37b2ea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86aa758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x332e298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0d3998)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3676ff8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x33f6258)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xac6ae88)]: 0 failure(s)
2024-04-29 03:53:18 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x37b2ea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86aa758)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x332e298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb0d3998)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3676ff8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x33f6258)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xac6ae88)]: 0 failure(s)
2024-04-29 03:53:18 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9849  0.9836  0.9832  0.9747  0.9724  0.9722  0.9711  0.9590  0.9510  0.9497  0.9428  0.9351  0.9321  0.9110  0.9098
[17 : 32]:	0.9061  0.9025  0.9019  0.8957  0.8871  0.8799  0.8730  0.8721  0.8689  0.8680  0.8669  0.8632  0.8612  0.8586  0.8534  0.8504
[33 : 48]:	0.8472  0.8357  0.8333  0.8302  0.8272  0.8262  0.8260  0.8259  0.8159  0.8151  0.8013  0.7986  0.7982  0.7956  0.7796  0.7766
[49 : 64]:	0.7756  0.7747  0.7738  0.7713  0.7672  0.7567  0.7502  0.7490  0.7449  0.7440  0.7346  0.7343  0.7326  0.7257  0.7223  0.7137
2024-04-29 03:53:18 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:53:18 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:121] [Task #66: fused_nn_global_avg_pool2d] Trial #1: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(5), T.int64(5)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.040000000000000001)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:121] [Task #66: fused_nn_global_avg_pool2d] Trial #2: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(5), T.int64(5)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.040000000000000001)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:121] [Task #66: fused_nn_global_avg_pool2d] Trial #3: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(5), T.int64(5)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.040000000000000001)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:121] [Task #66: fused_nn_global_avg_pool2d] Trial #4: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(5), T.int64(5)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.040000000000000001)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:121] [Task #66: fused_nn_global_avg_pool2d] Trial #5: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(5), T.int64(5)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(4), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.040000000000000001)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:121] [Task #66: fused_nn_global_avg_pool2d] Trial #6: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(5), T.int64(5)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.040000000000000001)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:121] [Task #66: fused_nn_global_avg_pool2d] Trial #7: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(5), T.int64(5)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.040000000000000001)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:121] [Task #66: fused_nn_global_avg_pool2d] Trial #8: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(5), T.int64(5)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.040000000000000001)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:121] [Task #66: fused_nn_global_avg_pool2d] Trial #9: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), scope="shared")
        for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(2048), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for ax4_ax5_fused_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                    with T.block("adaptive_pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_0_fused + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_rv0 = T.axis.reduce(T.int64(5), (ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1) // T.int64(5))
                        v_rv1 = T.axis.reduce(T.int64(5), (ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1) % T.int64(5))
                        T.where(ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1 < T.int64(25))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1])
                        T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                        adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1]
            for ax3_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_0_fused)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                    T.where(T.Mul(T.int64(0), T.int64(16)) + ax3_1 < T.int64(1))
                    T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.040000000000000001)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=2)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
sch.enter_postproc()
b31 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b31, ann_key="meta_schedule.unroll_explicit")
b32, b33 = sch.get_child_blocks(b31)
l34, l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b32)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l41, l42 = sch.get_loops(block=b33)
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:121] [Task #66: fused_nn_global_avg_pool2d] Trial #10: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(5), T.int64(5)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.040000000000000001)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:121] [Task #66: fused_nn_global_avg_pool2d] Trial #11: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                with T.block("adaptive_pool_sum_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads()
                    T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                for rv0, rv1 in T.grid(T.int64(5), T.int64(5)):
                    with T.block("adaptive_pool_sum_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1]
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                with T.block("adaptive_pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                    v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.040000000000000001)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
sch.enter_postproc()
b22 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b22, ann_key="meta_schedule.unroll_explicit")
b23, b24 = sch.get_child_blocks(b22)
l25, l26, l27, l28 = sch.get_loops(block=b23)
sch.annotate(block_or_loop=l25, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l25, ann_key="pragma_unroll_explicit", ann_val=1)
l29, l30 = sch.get_loops(block=b24)
b31 = sch.get_block(name="adaptive_pool_sum", func_name="main")
l32, l33, l34, l35 = sch.get_loops(block=b31)
b36 = sch.decompose_reduction(block=b31, loop=l34)
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 9.3236. Time: 5.7111 us. Best GFLOPs: 9.3236
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 9.4238. Time: 5.6504 us. Best GFLOPs: 9.4238
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 10.3641. Time: 5.1377 us. Best GFLOPs: 10.3641
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 12.6470. Time: 4.2103 us. Best GFLOPs: 12.6470
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 10.3652. Time: 5.1372 us. Best GFLOPs: 12.6470
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 12.2073. Time: 4.3620 us. Best GFLOPs: 12.6470
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 9.8582. Time: 5.4014 us. Best GFLOPs: 12.6470
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 9.4417. Time: 5.6397 us. Best GFLOPs: 12.6470
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 10.2848. Time: 5.1773 us. Best GFLOPs: 12.6470
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 9.8596. Time: 5.4006 us. Best GFLOPs: 12.6470
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 10.3659. Time: 5.1368 us. Best GFLOPs: 12.6470
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 10.3666. Time: 5.1365 us. Best GFLOPs: 12.6470
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 12.6530. Time: 4.2083 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 5.7332. Time: 9.2876 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 7.4857. Time: 7.1133 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 12.6461. Time: 4.2106 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 12.0744. Time: 4.4100 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 5.7327. Time: 9.2884 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 8.5427. Time: 6.2331 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 12.6471. Time: 4.2103 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 8.4799. Time: 6.2793 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 8.6665. Time: 6.1441 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 10.5468. Time: 5.0487 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 8.4109. Time: 6.3309 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 8.7371. Time: 6.0945 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 7.4834. Time: 7.1155 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 5.7350. Time: 9.2847 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 12.6491. Time: 4.2096 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 8.2944. Time: 6.4197 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 8.6022. Time: 6.1900 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 8.7275. Time: 6.1012 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 8.5607. Time: 6.2201 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 10.5597. Time: 5.0426 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 5.7302. Time: 9.2925 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 8.4161. Time: 6.3269 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 7.4923. Time: 7.1070 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 8.5311. Time: 6.2416 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 8.6422. Time: 6.1614 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 8.6600. Time: 6.1488 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 8.6501. Time: 6.1558 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 8.2651. Time: 6.4425 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 8.5102. Time: 6.2570 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 12.6507. Time: 4.2091 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 7.5360. Time: 7.0658 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 8.4549. Time: 6.2979 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 8.4983. Time: 6.2657 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 12.2074. Time: 4.3620 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 8.6078. Time: 6.1860 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 12.0173. Time: 4.4310 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 7.4994. Time: 7.1003 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 12.6491. Time: 4.2096 us. Best GFLOPs: 12.6530
2024-04-29 04:04:12 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 5.7339. Time: 9.2865 us. Best GFLOPs: 12.6530
2024-05-01 15:10:10 [INFO] [task_scheduler.cc:160] Initializing Task #66: "fused_nn_global_avg_pool2d"
2024-05-01 15:10:10 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(2048), T.int64(1), T.int64(1), T.int64(5), T.int64(5)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2048), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.040000000000000001)
2024-05-01 15:10:10 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-05-01 15:10:10 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(5), T.int64(5)):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.040000000000000001)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-05-01 15:10:10 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(2048), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_0_fused + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(5), (ax4_ax5_fused_0 * T.int64(128) + ax4_ax5_fused_1) // T.int64(5))
                            v_rv1 = T.axis.reduce(T.int64(5), (ax4_ax5_fused_0 * T.int64(128) + ax4_ax5_fused_1) % T.int64(5))
                            T.where(ax4_ax5_fused_0 * T.int64(128) + ax4_ax5_fused_1 < T.int64(25))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.where(T.Mul(T.int64(0), T.int64(128)) + ax3_1 < T.int64(1))
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.040000000000000001)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=5)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2024-05-01 16:32:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 16:32:43 [INFO] [evolutionary_search.cc:715] Picked top 52 candidate(s) from database
2024-05-01 16:32:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63156a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xac64558)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8762fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4743c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8eb07c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac645f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8724da8)]: 0 failure(s)
2024-05-01 16:32:43 [INFO] [evolutionary_search.cc:723] Sampled 460 candidate(s)
2024-05-01 16:32:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63156a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xac64558)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8762fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4743c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8eb07c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac645f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8724da8)]: 0 failure(s)
2024-05-01 16:32:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63156a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xac64558)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8762fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4743c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8eb07c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac645f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8724da8)]: 0 failure(s)
2024-05-01 16:32:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63156a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xac64558)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8762fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4743c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8eb07c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac645f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8724da8)]: 0 failure(s)
2024-05-01 16:32:44 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63156a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xac64558)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8762fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb4743c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8eb07c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xac645f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8724da8)]: 0 failure(s)
2024-05-01 16:32:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9949  0.9932  0.9929  0.9927  0.9925  0.9911  0.9772  0.9710  0.9685  0.9548  0.9463  0.9427  0.9411  0.9365  0.9278  0.9174
[17 : 32]:	0.9163  0.9123  0.9069  0.9018  0.8922  0.8813  0.8786  0.8751  0.8733  0.8723  0.8718  0.8703  0.8626  0.8583  0.8506  0.8425
[33 : 48]:	0.8334  0.8309  0.8295  0.8289  0.8250  0.8245  0.8237  0.8168  0.8068  0.8068  0.7967  0.7862  0.7828  0.7815  0.7781  0.7760
[49 : 64]:	0.7759  0.7746  0.7689  0.7657  0.7641  0.7631  0.7524  0.7477  0.7472  0.7401  0.7361  0.7350  0.7285  0.7237  0.7233  0.7217
2024-05-01 16:32:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 16:32:44 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 7.4665. Time: 7.1315 us. Best GFLOPs: 7.4665
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 5.7111. Time: 9.3236 us. Best GFLOPs: 7.4665
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 8.7109. Time: 6.1128 us. Best GFLOPs: 8.7109
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 7.2460. Time: 7.3486 us. Best GFLOPs: 8.7109
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 7.2461. Time: 7.3485 us. Best GFLOPs: 8.7109
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 10.1308. Time: 5.2560 us. Best GFLOPs: 10.1308
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 12.3924. Time: 4.2968 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 12.3536. Time: 4.3103 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 5.7411. Time: 9.2748 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 9.4618. Time: 5.6277 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 9.3943. Time: 5.6681 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 8.7186. Time: 6.1074 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 7.3186. Time: 7.2757 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 10.0873. Time: 5.2787 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 10.5749. Time: 5.0353 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 9.5883. Time: 5.5534 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 10.0231. Time: 5.3125 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 7.4277. Time: 7.1688 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 10.0101. Time: 5.3194 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 7.3993. Time: 7.1964 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 9.5233. Time: 5.5913 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 9.9143. Time: 5.3708 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 5.7177. Time: 9.3129 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 9.8965. Time: 5.3805 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 8.8288. Time: 6.0312 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 9.5243. Time: 5.5908 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 9.8626. Time: 5.3990 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 8.8160. Time: 6.0399 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 9.8632. Time: 5.3987 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 9.8611. Time: 5.3998 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 8.8326. Time: 6.0286 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 12.3548. Time: 4.3099 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 7.4105. Time: 7.1855 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 9.4969. Time: 5.6069 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 9.5085. Time: 5.6000 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 8.8559. Time: 6.0127 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 5.7297. Time: 9.2933 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 9.9048. Time: 5.3760 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 12.1089. Time: 4.3974 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 7.3523. Time: 7.2423 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 12.3789. Time: 4.3015 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 7.4815. Time: 7.1173 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 12.3495. Time: 4.3118 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 7.4244. Time: 7.1720 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 10.5721. Time: 5.0366 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 7.4806. Time: 7.1182 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 10.0889. Time: 5.2779 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 10.5708. Time: 5.0373 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 5.7301. Time: 9.2926 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 9.4697. Time: 5.6230 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 5.7059. Time: 9.3321 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 8.8803. Time: 5.9962 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 9.5047. Time: 5.6023 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 7.3873. Time: 7.2080 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 12.3501. Time: 4.3115 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 12.3800. Time: 4.3011 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 7.3489. Time: 7.2457 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 11.8783. Time: 4.4828 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 9.9227. Time: 5.3663 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 12.3542. Time: 4.3101 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 10.1383. Time: 5.2521 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 12.2904. Time: 4.3325 us. Best GFLOPs: 12.3924
2024-05-01 16:39:03 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 12.2909. Time: 4.3323 us. Best GFLOPs: 12.3924
