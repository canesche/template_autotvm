2024-04-29 01:54:24 [INFO] [task_scheduler.cc:160] Initializing Task #41: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2"
2024-04-29 01:54:24 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(27), T.int64(27)))
        input_tile = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)))
        B = T.alloc_buffer((T.int64(4), T.int64(4)))
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        A = T.alloc_buffer((T.int64(4), T.int64(2)))
        inverse = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(96), T.int64(27), T.int64(27)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(26) and T.int64(1) <= v_i3 and v_i3 < T.int64(26), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(96), T.int64(169), T.int64(4), T.int64(4)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps, v_p % T.int64(13) * T.int64(2) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps, v_p % T.int64(13) * T.int64(2) + v_nu]
        for i, j in T.grid(T.int64(4), T.int64(4)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(96), T.int64(169), T.int64(4), T.int64(4)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(4), T.int64(4), T.int64(96), T.int64(169), T.int64(96)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(4), T.int64(2)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(96), T.int64(169), T.int64(2), T.int64(2), T.int64(4), T.int64(4)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(96), T.int64(25), T.int64(25)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(96), T.int64(25), T.int64(25)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(96), T.int64(25), T.int64(25)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 01:54:24 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 01:54:24 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169) + ax0)
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(87) + ci_p_fused_1) % T.int64(169) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                            T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169))
                                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(169))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169) + ax2)
                            v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(87) + ci_p_fused_1) % T.int64(169) + ax3)
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(52), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(13), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(19968)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(4992))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(4992) // T.int64(1248))
                                    v2 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused % T.int64(1248) // T.int64(13))
                                    v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + ax0_ax1_ax2_ax3_fused % T.int64(13))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(36864)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(9216))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(9216) // T.int64(2304))
                                    v2 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused % T.int64(2304) // T.int64(24))
                                    v3 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(24) + ax0_ax1_ax2_ax3_fused % T.int64(24))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(6), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(16), T.int64(1), T.int64(4), T.int64(8), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused * T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), nu_3 * T.int64(4) + nu_4)
                                    v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(24) + co_3 * T.int64(8) + co_4)
                                    v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_1_nu_1_co_1_p_1_fused + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(96), ci_0 * T.int64(96) + ci_1 * T.int64(16) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(4), T.int64(24), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), ax1)
                                v2 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(24) + ax2)
                                v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_1_nu_1_co_1_p_1_fused + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                            v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169))
                            v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                            T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 2, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 4])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 1, 3, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[13, 13, 1, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[1, 6, 16])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-04-29 01:54:24 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169) + ax0)
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(87) + ci_p_fused_1) % T.int64(169) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                            T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169))
                                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(169))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169) + ax2)
                            v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(87) + ci_p_fused_1) % T.int64(169) + ax3)
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(52), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(13), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(19968)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(4992))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(4992) // T.int64(1248))
                                    v2 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused % T.int64(1248) // T.int64(13))
                                    v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + ax0_ax1_ax2_ax3_fused % T.int64(13))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(36864)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(9216))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(9216) // T.int64(2304))
                                    v2 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused % T.int64(2304) // T.int64(24))
                                    v3 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(24) + ax0_ax1_ax2_ax3_fused % T.int64(24))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(6), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(16), T.int64(1), T.int64(4), T.int64(8), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused * T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), nu_3 * T.int64(4) + nu_4)
                                    v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(24) + co_3 * T.int64(8) + co_4)
                                    v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_1_nu_1_co_1_p_1_fused + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(96), ci_1 * T.int64(16) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(4), T.int64(24), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), ax1)
                                v2 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(24) + ax2)
                                v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_1_nu_1_co_1_p_1_fused + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                            v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169))
                            v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                            T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 2, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 4])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 1, 3, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[13, 13, 1, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[1, 6, 16])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-29 01:54:24 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169) + ax0)
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(87) + ci_p_fused_1) % T.int64(169) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                            T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169))
                                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(169))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169) + ax2)
                            v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(87) + ci_p_fused_1) % T.int64(169) + ax3)
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(52), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(13), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(19968)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(4992))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(4992) // T.int64(1248))
                                    v2 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused % T.int64(1248) // T.int64(13))
                                    v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + ax0_ax1_ax2_ax3_fused % T.int64(13))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(36864)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(9216))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(9216) // T.int64(2304))
                                    v2 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused % T.int64(2304) // T.int64(24))
                                    v3 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(24) + ax0_ax1_ax2_ax3_fused % T.int64(24))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(6), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(16), T.int64(1), T.int64(4), T.int64(8), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused * T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), nu_3 * T.int64(4) + nu_4)
                                    v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(24) + co_3 * T.int64(8) + co_4)
                                    v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_1_nu_1_co_1_p_1_fused + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(96), ci_1 * T.int64(16) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(4), T.int64(24), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), ax1)
                                v2 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(24) + ax2)
                                v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_1_nu_1_co_1_p_1_fused + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(254), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                            v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(169))
                            v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                            T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 2, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 4])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 1, 3, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[13, 13, 1, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[1, 6, 16])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-29 03:06:30 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:06:30 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:06:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 501 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 03:06:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 997 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 03:06:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 1492 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 03:06:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 1990 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 03:06:54 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-04-29 03:07:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 03:07:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 128 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 03:07:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 143 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 03:07:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 03:07:42 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9988  0.9974  0.9962  0.9961  0.9956  0.9955  0.9945  0.9940  0.9932  0.9931  0.9929  0.9928  0.9917  0.9914  0.9912  0.9911
[17 : 32]:	0.9887  0.9887  0.9886  0.9885  0.9884  0.9884  0.9880  0.9877  0.9874  0.9874  0.9873  0.9857  0.9838  0.9838  0.9837  0.9818
[33 : 48]:	0.9798  0.9795  0.9793  0.9792  0.9790  0.9789  0.9782  0.9780  0.9777  0.9774  0.9764  0.9763  0.9762  0.9755  0.9719  0.9717
[49 : 64]:	0.9686  0.9679  0.9671  0.9671  0.9658  0.9650  0.9638  0.9633  0.9625  0.9623  0.9623  0.9621  0.9616  0.9609  0.9602  0.9590
2024-04-29 03:07:42 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:07:42 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #1: GFLOPs: 1542.0426. Time: 42.4989 us. Best GFLOPs: 1542.0426
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #2: GFLOPs: 964.3183. Time: 67.9601 us. Best GFLOPs: 1542.0426
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #3: GFLOPs: 1909.9473. Time: 34.3126 us. Best GFLOPs: 1909.9473
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #4: GFLOPs: 658.2132. Time: 99.5653 us. Best GFLOPs: 1909.9473
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #5: GFLOPs: 1026.1620. Time: 63.8644 us. Best GFLOPs: 1909.9473
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #6: GFLOPs: 1632.1008. Time: 40.1539 us. Best GFLOPs: 1909.9473
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #7: GFLOPs: 237.5662. Time: 275.8607 us. Best GFLOPs: 1909.9473
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #8: GFLOPs: 2199.6278. Time: 29.7938 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #9: GFLOPs: 1036.7606. Time: 63.2115 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #10: GFLOPs: 30.4364. Time: 2153.1813 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #11: GFLOPs: 542.6437. Time: 120.7702 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #12: GFLOPs: 1183.1754. Time: 55.3892 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #13: GFLOPs: 291.3487. Time: 224.9372 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #14: GFLOPs: 1596.8558. Time: 41.0401 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #15: GFLOPs: 569.9941. Time: 114.9752 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #16: GFLOPs: 432.7227. Time: 151.4484 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #17: GFLOPs: 771.3486. Time: 84.9618 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #18: GFLOPs: 1210.2665. Time: 54.1494 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #19: GFLOPs: 362.9101. Time: 180.5824 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #20: GFLOPs: 22.4304. Time: 2921.7061 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #21: GFLOPs: 1303.6944. Time: 50.2688 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #22: GFLOPs: 141.5415. Time: 463.0103 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #23: GFLOPs: 20.7111. Time: 3164.2561 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #24: GFLOPs: 955.2573. Time: 68.6047 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #25: GFLOPs: 43.5143. Time: 1506.0594 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #26: GFLOPs: 939.4563. Time: 69.7586 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #27: GFLOPs: 229.3437. Time: 285.7510 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #28: GFLOPs: 1276.3407. Time: 51.3461 us. Best GFLOPs: 2199.6278
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #29: GFLOPs: 2834.9992. Time: 23.1165 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #30: GFLOPs: 1328.8366. Time: 49.3177 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #31: GFLOPs: 67.7399. Time: 967.4535 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #32: GFLOPs: 214.5690. Time: 305.4270 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #33: GFLOPs: 90.8223. Time: 721.5756 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #34: GFLOPs: 18.6868. Time: 3507.0235 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #35: GFLOPs: 1599.2727. Time: 40.9781 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #36: GFLOPs: 1648.1215. Time: 39.7636 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #37: GFLOPs: 48.1148. Time: 1362.0584 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #38: GFLOPs: 454.8079. Time: 144.0942 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #39: GFLOPs: 241.9237. Time: 270.8919 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #40: GFLOPs: 1265.5690. Time: 51.7832 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #41: GFLOPs: 999.6737. Time: 65.5566 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #42: GFLOPs: 6.4480. Time: 10163.6093 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #43: GFLOPs: 102.0955. Time: 641.9006 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #44: GFLOPs: 333.6663. Time: 196.4093 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #45: GFLOPs: 875.2283. Time: 74.8778 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #46: GFLOPs: 38.7999. Time: 1689.0539 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #47: GFLOPs: 268.0137. Time: 244.5217 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #48: GFLOPs: 1019.5151. Time: 64.2807 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #49: GFLOPs: 19.8390. Time: 3303.3580 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #50: GFLOPs: 1822.8901. Time: 35.9512 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #51: GFLOPs: 20.7615. Time: 3156.5759 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #52: GFLOPs: 21.0484. Time: 3113.5496 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #53: GFLOPs: 510.4759. Time: 128.3805 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #54: GFLOPs: 13.6242. Time: 4810.2155 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #55: GFLOPs: 874.1106. Time: 74.9735 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #56: GFLOPs: 1134.1006. Time: 57.7860 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #57: GFLOPs: 22.5801. Time: 2902.3379 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #58: GFLOPs: 1667.3292. Time: 39.3055 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #59: GFLOPs: 25.6138. Time: 2558.5920 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #60: GFLOPs: 48.5572. Time: 1349.6493 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:21 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #61: GFLOPs: 18.9246. Time: 3462.9561 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #62: GFLOPs: 1013.2616. Time: 64.6774 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #63: GFLOPs: 1677.6022. Time: 39.0648 us. Best GFLOPs: 2834.9992
2024-04-29 04:02:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #64: GFLOPs: 903.8058. Time: 72.5102 us. Best GFLOPs: 2834.9992
2024-04-29 04:46:22 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:46:25 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-29 04:46:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 431 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 04:46:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 871 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 04:46:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 1305 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 04:46:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 1734 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 04:46:45 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-04-29 04:46:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 151 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 04:47:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 04:47:31 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 04:47:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 04:47:53 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.6354  1.5970  1.5471  1.5392  1.5065  1.4916  1.4914  1.4892  1.4891  1.4673  1.4411  1.4261  1.4258  1.4258  1.4235  1.4181
[17 : 32]:	1.4158  1.4154  1.4005  1.3990  1.3948  1.3853  1.3840  1.3837  1.3835  1.3825  1.3823  1.3819  1.3818  1.3792  1.3746  1.3674
[33 : 48]:	1.3616  1.3520  1.3516  1.3424  1.3371  1.3371  1.3353  1.3319  1.3300  1.3006  1.2951  1.2951  1.2939  1.2937  1.2844  1.2821
[49 : 64]:	1.2786  1.2786  1.2779  1.2767  1.2759  1.2747  1.2735  1.2715  1.2671  1.2587  1.2579  1.2458  1.2446  1.2423  1.2402  1.2399
2024-04-29 04:47:53 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:47:53 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #65: GFLOPs: 1074.6774. Time: 60.9812 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #66: GFLOPs: 1648.1720. Time: 39.7623 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #67: GFLOPs: 22.6709. Time: 2890.7226 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #68: GFLOPs: 1421.7657. Time: 46.0942 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #69: GFLOPs: 733.5381. Time: 89.3412 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #70: GFLOPs: 983.5339. Time: 66.6323 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #71: GFLOPs: 827.8841. Time: 79.1598 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #72: GFLOPs: 841.0051. Time: 77.9248 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #73: GFLOPs: 12.3844. Time: 5291.7625 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #74: GFLOPs: 1450.1220. Time: 45.1929 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #75: GFLOPs: 1457.5628. Time: 44.9622 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #76: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(128), thread="blockIdx.x"):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(1014), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_2_nu_2_co_2_p_2_fused // T.int64(169) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1014), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(2028) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(507))
                                        v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(2028) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(507) // T.int64(169))
                                        v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(2028) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(169))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(1014) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1014))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1014), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(4056) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(18))
                                        v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(4056) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(18) // T.int64(6))
                                        v3 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(4056) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(6))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(1014) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(36))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_2_nu_2_co_2_p_2_fused // T.int64(169) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0 * T.int64(3) + ci_1 * T.int64(3) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_2_nu_2_co_2_p_2_fused // T.int64(169) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[16, 1, 6, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 169, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[32, 1, 3])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 1014, 2], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 1014, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #77: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(676), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(338) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(338) // T.int64(169) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(676), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1352) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(507))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16))
                                        v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1352) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(507) // T.int64(169))
                                        v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1352) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(169))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(676) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2028))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(676), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(18))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16))
                                        v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(18) // T.int64(6))
                                        v3 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(6))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(676) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(72))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(338) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(338) // T.int64(169) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0 * T.int64(3) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(338) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(338) // T.int64(169) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[16, 3, 2, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 169, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[32, 3, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 676, 2], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 676, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #78: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(676), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(338) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(338) // T.int64(169) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(676), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1352) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(507))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16))
                                        v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1352) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(507) // T.int64(169))
                                        v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1352) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(169))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(676) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2028))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(676), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(18))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16))
                                        v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(18) // T.int64(6))
                                        v3 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(6))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(676) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(72))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(338) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(338) // T.int64(169) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0 * T.int64(3) + ci_1 * T.int64(3) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(338) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(338) // T.int64(169) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[16, 3, 2, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 169, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[32, 1, 3])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 676, 2], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 676, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #79: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(676), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(338) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(338) // T.int64(169) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(676), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(507))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16))
                                        v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(507) // T.int64(169))
                                        v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(169))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(676) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2028))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(676), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(18))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16))
                                        v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(18) // T.int64(6))
                                        v3 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(6))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(676) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(72))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(338) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(338) // T.int64(169) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0 * T.int64(3) + ci_1 * T.int64(3) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(338) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(338) // T.int64(169) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[16, 3, 2, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 169, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[32, 1, 3])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 676, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 676, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #80: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(87) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(87) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(208), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(156), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(104) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(104) // T.int64(52) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(13) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(96), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(156), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(104) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(156) + ax0_ax1_ax2_ax3_fused_1) // T.int64(26))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(104) // T.int64(52) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(156) + ax0_ax1_ax2_ax3_fused_1) % T.int64(26) // T.int64(13))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(156) + ax0_ax1_ax2_ax3_fused_1) % T.int64(13))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(156) + ax0_ax1_ax2_ax3_fused_1 < T.int64(52))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(156), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(104) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(156) + ax0_ax1_ax2_ax3_fused_1) // T.int64(48))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(104) // T.int64(52) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(156) + ax0_ax1_ax2_ax3_fused_1) % T.int64(48) // T.int64(24))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(13) * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(156) + ax0_ax1_ax2_ax3_fused_1) % T.int64(24))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(156) + ax0_ax1_ax2_ax3_fused_1 < T.int64(96))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(104) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(104) // T.int64(52) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(13) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(104) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(104) // T.int64(52) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(13) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 12, 2, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[13, 1, 13, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[96, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 156], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144 = sch.split(loop=l142, factors=[None, 156], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b150)
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l185, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l185, ann_key="pragma_unroll_explicit", ann_val=1)
l199, l200, l201, l202, l203, l204, l205 = sch.get_loops(block=b152)
l206, l207, l208, l209, l210, l211, l212, l213 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l206, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l206, ann_key="pragma_unroll_explicit", ann_val=1)
l214, l215, l216, l217 = sch.get_loops(block=b154)
b218 = sch.get_block(name="data_pack", func_name="main")
l219, l220, l221, l222, l223, l224 = sch.get_loops(block=b218)
b225 = sch.decompose_reduction(block=b218, loop=l223)
b226 = sch.get_block(name="bgemm", func_name="main")
l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240 = sch.get_loops(block=b226)
b241 = sch.decompose_reduction(block=b226, loop=l230)
b242 = sch.get_block(name="inverse", func_name="main")
l243, l244, l245, l246, l247, l248, l249, l250 = sch.get_loops(block=b242)
b251 = sch.decompose_reduction(block=b242, loop=l249)
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #81: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(676), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(338) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(338) // T.int64(169) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(676), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1352) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(507))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16))
                                        v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1352) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(507) // T.int64(169))
                                        v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1352) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(169))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(676) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2028))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(676), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(18))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16))
                                        v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(18) // T.int64(6))
                                        v3 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(6))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(676) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(72))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(338) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(338) // T.int64(169) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0 * T.int64(3) + ci_1 * T.int64(3) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(338) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(338) // T.int64(169) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[16, 3, 2, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 169, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[32, 1, 3])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 676, 2], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 676, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #82: GFLOPs: 1478.4456. Time: 44.3271 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #83: GFLOPs: 11.7109. Time: 5596.1032 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #84: GFLOPs: 11.7151. Time: 5594.0552 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #85: GFLOPs: 4.9041. Time: 13363.4557 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #86: GFLOPs: 871.7700. Time: 75.1748 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #87: GFLOPs: 12.3825. Time: 5292.5708 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #88: GFLOPs: 12.3817. Time: 5292.8944 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #89: GFLOPs: 1269.0912. Time: 51.6394 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #90: GFLOPs: 12.3956. Time: 5286.9660 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #91: GFLOPs: 12.4050. Time: 5282.9778 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #92: GFLOPs: 4.8093. Time: 13626.8796 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #93: GFLOPs: 2.9940. Time: 21889.0242 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #94: GFLOPs: 1343.5831. Time: 48.7764 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #95: GFLOPs: 2305.2764. Time: 28.4283 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #96: GFLOPs: 883.6229. Time: 74.1664 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #97: GFLOPs: 11.7594. Time: 5573.0061 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #98: GFLOPs: 1460.5048. Time: 44.8716 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #99: GFLOPs: 1270.2469. Time: 51.5925 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #100: GFLOPs: 12.3479. Time: 5307.3919 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #101: GFLOPs: 1179.1453. Time: 55.5785 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #102: GFLOPs: 1180.6775. Time: 55.5064 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #103: GFLOPs: 455.4425. Time: 143.8934 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #104: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(87) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(87) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(208), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(624), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(13) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(96), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(624), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(13))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(624) + ax0_ax1_ax2_ax3_fused_1))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(624) + ax0_ax1_ax2_ax3_fused_1 < T.int64(13))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(624), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(13))
                                        v2 = T.axis.spatial(T.int64(96), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused_0 * T.int64(2496) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(624) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(96))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(13) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(13) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 48, 2, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[13, 1, 13, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[96, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 624], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 624, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #105: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(1014), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_2_nu_2_co_2_p_2_fused // T.int64(169) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1014), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(4056) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1014))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(4056) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1014) // T.int64(507))
                                        v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(4056) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(507) // T.int64(169))
                                        v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(4056) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(169))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(1014) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2028))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1014), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(4056) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(36))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(4056) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(36) // T.int64(18))
                                        v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(4056) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(18) // T.int64(6))
                                        v3 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(4056) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(6))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(1014) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(72))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_2_nu_2_co_2_p_2_fused // T.int64(169) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0 * T.int64(3) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_2_nu_2_co_2_p_2_fused // T.int64(169) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[16, 1, 6, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 169, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[32, 3, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 1014, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 1014, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #106: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(254), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(338), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(22)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1014))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                        v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1014) // T.int64(169))
                                        v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(169))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2028))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(576))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                        v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(576) // T.int64(96))
                                        v3 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(6), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0_fused * T.int64(6) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 2, 48, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 169, 1, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 6, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 48, 2], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 48, 4], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #107: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(127), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(338), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(43)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1014))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1014) // T.int64(169))
                                    v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2028))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(576))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                        v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(576) // T.int64(96))
                                        v3 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(6), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0_fused * T.int64(6) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 2, 48, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 169, 1, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 6, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 48], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 48, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #108: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(127), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(338), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_3_init * T.int64(2) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(43)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1014))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1014) // T.int64(169))
                                    v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2028))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(576))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                        v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(576) // T.int64(96))
                                        v3 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0_fused * T.int64(6) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 2, 48, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 169, 1, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 6, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 48], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 48, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #109: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(127), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(338), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(43)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1014))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1014) // T.int64(169))
                                    v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2028))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(12)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(576))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                        v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(576) // T.int64(96))
                                        v3 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(6), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0_fused * T.int64(6) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 2, 48, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 169, 1, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 6, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 48], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 48, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #110: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(127), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(338), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(43)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1014))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1014) // T.int64(169))
                                    v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2028))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(576))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                        v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(576) // T.int64(96))
                                        v3 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(6), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0_fused * T.int64(6) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 2, 48, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 169, 1, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 6, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 48], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 48, 3], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #111: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(127), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(338), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(43)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1014))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1014) // T.int64(169))
                                    v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2028))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(24)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) // T.int64(576))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(576) // T.int64(96))
                                    v3 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(96))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(6), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0_fused * T.int64(6) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 2, 48, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 169, 1, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 6, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 48], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144 = sch.split(loop=l142, factors=[None, 48], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b150)
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l185, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l185, ann_key="pragma_unroll_explicit", ann_val=1)
l199, l200, l201, l202, l203, l204, l205 = sch.get_loops(block=b152)
l206, l207, l208, l209, l210, l211, l212, l213 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l206, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l206, ann_key="pragma_unroll_explicit", ann_val=1)
l214, l215, l216, l217 = sch.get_loops(block=b154)
b218 = sch.get_block(name="data_pack", func_name="main")
l219, l220, l221, l222, l223, l224 = sch.get_loops(block=b218)
b225 = sch.decompose_reduction(block=b218, loop=l223)
b226 = sch.get_block(name="bgemm", func_name="main")
l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240 = sch.get_loops(block=b226)
b241 = sch.decompose_reduction(block=b226, loop=l230)
b242 = sch.get_block(name="inverse", func_name="main")
l243, l244, l245, l246, l247, l248, l249, l250 = sch.get_loops(block=b242)
b251 = sch.decompose_reduction(block=b242, loop=l249)
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #112: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(169), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(3) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(169), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(338) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1014))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(338) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1014) // T.int64(507))
                                        v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(338) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(507) // T.int64(169))
                                        v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(338) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(169))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(169), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(676) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(36))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(676) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(36) // T.int64(18))
                                        v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(676) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(18) // T.int64(6))
                                        v3 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(676) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(6))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(169) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(72))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(3) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0 * T.int64(3) + ci_1 * T.int64(3) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(16) * T.int64(6) + eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[16, 3, 1, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 169, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[32, 1, 3])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 169, 2], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 169, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #113: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(127), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(338), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(22)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1014))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                        v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1014) // T.int64(169))
                                        v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(169))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2028))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(576))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                        v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(576) // T.int64(96))
                                        v3 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(6), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0_fused * T.int64(6) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 2, 48, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 169, 1, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 6, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 48, 2], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 48, 4], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #114: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(127), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(338), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_3_init * T.int64(2) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(22)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1014))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                        v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1014) // T.int64(169))
                                        v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(169))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2028))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(576))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                        v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(576) // T.int64(96))
                                        v3 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0_fused * T.int64(6) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 2, 48, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 169, 1, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 6, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 48, 2], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 48, 4], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #115: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(127), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(338), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(43)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1014))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1014) // T.int64(169))
                                    v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2028))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(576))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                        v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(576) // T.int64(96))
                                        v3 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0_fused * T.int64(6) + ci_1 * T.int64(3) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 2, 48, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 169, 1, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 2, 3])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 48], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 48, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #116: GFLOPs: 11.0699. Time: 5920.1054 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #117: GFLOPs: 12.3875. Time: 5290.4153 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #118: GFLOPs: 12.3870. Time: 5290.6305 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #119: GFLOPs: 818.7680. Time: 80.0412 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #120: GFLOPs: 1906.1139. Time: 34.3816 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #121: GFLOPs: 12.2570. Time: 5346.7351 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #122: GFLOPs: 12.3874. Time: 5290.4691 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #123: GFLOPs: 588.2776. Time: 111.4018 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #124: GFLOPs: 1630.0864. Time: 40.2035 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #125: GFLOPs: 1281.4288. Time: 51.1423 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #126: GFLOPs: 99.9407. Time: 655.7404 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #127: GFLOPs: 1762.5456. Time: 37.1821 us. Best GFLOPs: 2834.9992
2024-04-29 04:51:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #128: GFLOPs: 160.0645. Time: 409.4298 us. Best GFLOPs: 2834.9992
2024-04-29 05:42:08 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 05:42:11 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 05:42:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 399 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 05:42:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 797 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 05:42:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 1188 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 05:42:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 1587 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 05:42:29 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-29 05:42:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 05:42:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 05:43:14 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 05:43:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 05:43:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.3388  1.3332  1.3270  1.2699  1.2541  1.2181  1.2011  1.1989  1.1980  1.1933  1.1911  1.1863  1.1791  1.1751  1.1708  1.1571
[17 : 32]:	1.1520  1.1519  1.1494  1.1483  1.1414  1.1408  1.1404  1.1104  1.1092  1.1024  1.1006  1.0965  1.0945  1.0945  1.0936  1.0868
[33 : 48]:	1.0828  1.0687  1.0598  1.0576  1.0571  1.0549  1.0525  1.0511  1.0511  1.0457  1.0436  1.0426  1.0415  1.0407  1.0388  1.0359
[49 : 64]:	1.0339  1.0339  1.0339  1.0337  1.0331  1.0319  1.0312  1.0261  1.0250  1.0242  1.0195  1.0192  1.0156  1.0149  1.0144  1.0132
2024-04-29 05:43:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 05:43:35 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #129: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(48), thread="blockIdx.x"):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(676), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(338) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(338) // T.int64(169) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(96)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(676), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(676))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(676) // T.int64(169))
                                        v2 = T.axis.spatial(T.int64(96), ci_0)
                                        v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(169))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(676), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(8))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(8) // T.int64(2))
                                        v2 = T.axis.spatial(T.int64(96), ci_0)
                                        v3 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(676) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(32))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(338) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(338) // T.int64(169) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(338) + ax0)
                            v1 = T.axis.spatial(T.int64(4), ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(338) // T.int64(169) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 4, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[48, 1, 2, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 169, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[96, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 676, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 676, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #130: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(48), thread="blockIdx.x"):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(676), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(338) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(338) // T.int64(169) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(96)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(676), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(676))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(676) // T.int64(169))
                                        v2 = T.axis.spatial(T.int64(96), ci_0)
                                        v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(169))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(676), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(8))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(8) // T.int64(2))
                                        v2 = T.axis.spatial(T.int64(96), ci_0)
                                        v3 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(2704) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(676) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(32))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(338) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(338) // T.int64(169) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(338) + ax0)
                            v1 = T.axis.spatial(T.int64(4), ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(338) // T.int64(169) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(169) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[48, 1, 2, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 169, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[96, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 676, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 676, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #131: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(254), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(1248), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(13) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(312) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(312) // T.int64(13) * T.int64(4) + eps_1_nu_1_co_1_p_1_fused * T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(6)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(208))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(312))
                                        v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(208) // T.int64(13))
                                        v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(13))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(64))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(312))
                                        v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(4))
                                        v3 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(312) // T.int64(13) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(4))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(256))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(13) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(312) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(312) // T.int64(13) * T.int64(4) + eps_1_nu_1_co_1_p_1_fused * T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0 * T.int64(16) + ci_1 * T.int64(4) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(13) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(312) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(312) // T.int64(13) * T.int64(4) + eps_1_nu_1_co_1_p_1_fused * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(507), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[24, 2, 1, 2, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[13, 1, 13, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[6, 4, 4])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 52, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 52, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #132: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(254), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(52), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(13), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(192), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(96) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(96) // T.int64(24) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(24) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_1_nu_1_co_1_p_1_fused + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(6)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(18)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(192), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1) // T.int64(832))
                                    v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1) % T.int64(832) // T.int64(208))
                                    v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1) % T.int64(208) // T.int64(13))
                                    v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1) % T.int64(13))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 < T.int64(3328))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(192), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1536))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1536) // T.int64(384))
                                        v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(24))
                                        v3 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(24))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(96) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(96) // T.int64(24) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(24) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_1_nu_1_co_1_p_1_fused + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0 * T.int64(16) + ci_1 * T.int64(4) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(96) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(96) // T.int64(24) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(24) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_1_nu_1_co_1_p_1_fused + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 2, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 24, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[13, 13, 1, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[6, 4, 4])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136 = sch.split(loop=l134, factors=[None, 192], preserve_unit_iters=True)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b108)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 192, 2], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #133: GFLOPs: 2023.7183. Time: 32.3835 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #134: GFLOPs: 2726.2319. Time: 24.0387 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #135: GFLOPs: 2688.4446. Time: 24.3766 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #136: GFLOPs: 2602.3825. Time: 25.1828 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #137: GFLOPs: 2610.1452. Time: 25.1079 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #138: GFLOPs: 2659.0147. Time: 24.6464 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #139: GFLOPs: 2359.8115. Time: 27.7714 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #140: GFLOPs: 2360.6315. Time: 27.7617 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #141: GFLOPs: 2710.6696. Time: 24.1767 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #142: GFLOPs: 622.4598. Time: 105.2842 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #143: GFLOPs: 2607.6355. Time: 25.1320 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #144: GFLOPs: 1743.3484. Time: 37.5916 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #145: GFLOPs: 2195.1755. Time: 29.8542 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #146: GFLOPs: 834.4891. Time: 78.5333 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #147: GFLOPs: 2732.0315. Time: 23.9877 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #148: GFLOPs: 2702.4381. Time: 24.2504 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #149: GFLOPs: 2640.0718. Time: 24.8233 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #150: GFLOPs: 1975.2468. Time: 33.1782 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #151: GFLOPs: 1961.2653. Time: 33.4147 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #152: GFLOPs: 2269.7526. Time: 28.8733 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #153: GFLOPs: 2183.6040. Time: 30.0124 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #154: GFLOPs: 2464.8033. Time: 26.5884 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #155: GFLOPs: 2599.5455. Time: 25.2102 us. Best GFLOPs: 2834.9992
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #156: GFLOPs: 2867.0195. Time: 22.8583 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #157: GFLOPs: 2453.5904. Time: 26.7099 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #158: GFLOPs: 2700.3696. Time: 24.2690 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #159: GFLOPs: 845.7148. Time: 77.4909 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #160: GFLOPs: 2111.7487. Time: 31.0336 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #161: GFLOPs: 2225.9227. Time: 29.4418 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #162: GFLOPs: 2578.7903. Time: 25.4131 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #163: GFLOPs: 2050.1320. Time: 31.9663 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #164: GFLOPs: 2435.9251. Time: 26.9036 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #165: GFLOPs: 2318.1232. Time: 28.2708 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #166: GFLOPs: 840.7444. Time: 77.9490 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #167: GFLOPs: 2478.0983. Time: 26.4457 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #168: GFLOPs: 2700.4928. Time: 24.2679 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #169: GFLOPs: 1755.3701. Time: 37.3341 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #170: GFLOPs: 2477.1330. Time: 26.4561 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #171: GFLOPs: 2367.3946. Time: 27.6824 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #172: GFLOPs: 2203.5979. Time: 29.7401 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #173: GFLOPs: 2359.7569. Time: 27.7720 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #174: GFLOPs: 2486.0034. Time: 26.3617 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #175: GFLOPs: 2197.9900. Time: 29.8160 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #176: GFLOPs: 2182.0579. Time: 30.0337 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #177: GFLOPs: 1186.8841. Time: 55.2161 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #178: GFLOPs: 1186.5080. Time: 55.2337 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #179: GFLOPs: 1186.9168. Time: 55.2146 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #180: GFLOPs: 1799.4788. Time: 36.4190 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #181: GFLOPs: 1347.2963. Time: 48.6420 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #182: GFLOPs: 1603.3283. Time: 40.8745 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #183: GFLOPs: 2068.2585. Time: 31.6862 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #184: GFLOPs: 1604.7864. Time: 40.8373 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #185: GFLOPs: 2026.0854. Time: 32.3457 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #186: GFLOPs: 2060.3052. Time: 31.8085 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #187: GFLOPs: 2436.2850. Time: 26.8996 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #188: GFLOPs: 1751.1982. Time: 37.4230 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #189: GFLOPs: 2433.0555. Time: 26.9353 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #190: GFLOPs: 2189.9493. Time: 29.9254 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #191: GFLOPs: 1457.3342. Time: 44.9692 us. Best GFLOPs: 2867.0195
2024-04-29 05:46:03 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #192: GFLOPs: 362.2902. Time: 180.8914 us. Best GFLOPs: 2867.0195
2024-04-29 06:35:47 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:35:50 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 06:35:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 394 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 06:36:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 791 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 06:36:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 1187 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 06:36:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 1586 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 06:36:09 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-29 06:36:22 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 06:36:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 06:36:54 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 06:37:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 06:37:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.0783  2.0669  1.8141  1.6832  1.6823  1.6539  1.6251  1.5912  1.5792  1.5792  1.5778  1.5705  1.5669  1.5443  1.5430  1.5379
[17 : 32]:	1.5358  1.5228  1.4879  1.4775  1.4629  1.4614  1.4610  1.4599  1.4586  1.4554  1.4551  1.4452  1.4420  1.4410  1.4392  1.4351
[33 : 48]:	1.4340  1.4322  1.4143  1.4097  1.4042  1.3977  1.3951  1.3887  1.3859  1.3856  1.3831  1.3803  1.3802  1.3795  1.3781  1.3780
[49 : 64]:	1.3754  1.3582  1.3443  1.3371  1.3339  1.3333  1.3285  1.3285  1.3243  1.3095  1.2891  1.2864  1.2791  1.2790  1.2774  1.2679
2024-04-29 06:37:15 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:37:15 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #193: GFLOPs: 2588.1948. Time: 25.3208 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #194: GFLOPs: 2833.5484. Time: 23.1283 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #195: GFLOPs: 2293.8757. Time: 28.5696 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #196: GFLOPs: 2508.4972. Time: 26.1253 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #197: GFLOPs: 2599.6612. Time: 25.2091 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #198: GFLOPs: 1761.3198. Time: 37.2080 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #199: GFLOPs: 1503.7628. Time: 43.5808 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #200: GFLOPs: 2564.6713. Time: 25.5530 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #201: GFLOPs: 2329.0542. Time: 28.1381 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #202: GFLOPs: 2373.7059. Time: 27.6088 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #203: GFLOPs: 2433.6430. Time: 26.9288 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #204: GFLOPs: 1894.7638. Time: 34.5875 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #205: GFLOPs: 2433.8146. Time: 26.9269 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #206: GFLOPs: 2141.4686. Time: 30.6029 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #207: GFLOPs: 2674.0514. Time: 24.5078 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #208: GFLOPs: 1386.4161. Time: 47.2695 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #209: GFLOPs: 1386.3150. Time: 47.2729 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #210: GFLOPs: 2128.2836. Time: 30.7925 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #211: GFLOPs: 2448.4905. Time: 26.7655 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #212: GFLOPs: 2391.4061. Time: 27.4044 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #213: GFLOPs: 2317.7042. Time: 28.2759 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #214: GFLOPs: 2424.4577. Time: 27.0309 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #215: GFLOPs: 2580.5830. Time: 25.3955 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #216: GFLOPs: 2704.9175. Time: 24.2282 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #217: GFLOPs: 1186.6508. Time: 55.2270 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #218: GFLOPs: 1735.7086. Time: 37.7570 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #219: GFLOPs: 1482.4818. Time: 44.2064 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #220: GFLOPs: 1483.9307. Time: 44.1632 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #221: GFLOPs: 2763.7442. Time: 23.7125 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #222: GFLOPs: 1856.7420. Time: 35.2958 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #223: GFLOPs: 2643.9866. Time: 24.7865 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #224: GFLOPs: 2054.5084. Time: 31.8982 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #225: GFLOPs: 2721.5716. Time: 24.0799 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #226: GFLOPs: 2759.0219. Time: 23.7530 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #227: GFLOPs: 2496.9028. Time: 26.2466 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #228: GFLOPs: 616.7042. Time: 106.2668 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #229: GFLOPs: 1413.8428. Time: 46.3525 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #230: GFLOPs: 2704.5179. Time: 24.2317 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #231: GFLOPs: 2240.4271. Time: 29.2512 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #232: GFLOPs: 2418.7339. Time: 27.0948 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #233: GFLOPs: 2375.7337. Time: 27.5852 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #234: GFLOPs: 2441.7058. Time: 26.8399 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #235: GFLOPs: 2658.9068. Time: 24.6474 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #236: GFLOPs: 2580.3545. Time: 25.3977 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #237: GFLOPs: 1476.4213. Time: 44.3878 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #238: GFLOPs: 2436.6074. Time: 26.8961 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #239: GFLOPs: 2551.4221. Time: 25.6857 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #240: GFLOPs: 2517.3622. Time: 26.0333 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #241: GFLOPs: 803.8624. Time: 81.5254 us. Best GFLOPs: 2867.0195
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #242: GFLOPs: 2893.6240. Time: 22.6481 us. Best GFLOPs: 2893.6240
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #243: GFLOPs: 2712.5795. Time: 24.1597 us. Best GFLOPs: 2893.6240
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #244: GFLOPs: 2346.1444. Time: 27.9331 us. Best GFLOPs: 2893.6240
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #245: GFLOPs: 1499.6098. Time: 43.7015 us. Best GFLOPs: 2893.6240
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #246: GFLOPs: 2561.5463. Time: 25.5842 us. Best GFLOPs: 2893.6240
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #247: GFLOPs: 79.0953. Time: 828.5599 us. Best GFLOPs: 2893.6240
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #248: GFLOPs: 79.0953. Time: 828.5599 us. Best GFLOPs: 2893.6240
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #249: GFLOPs: 564.9287. Time: 116.0061 us. Best GFLOPs: 2893.6240
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #250: GFLOPs: 781.0385. Time: 83.9077 us. Best GFLOPs: 2893.6240
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #251: GFLOPs: 2270.9006. Time: 28.8587 us. Best GFLOPs: 2893.6240
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #252: GFLOPs: 1505.1050. Time: 43.5419 us. Best GFLOPs: 2893.6240
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #253: GFLOPs: 2784.2466. Time: 23.5378 us. Best GFLOPs: 2893.6240
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #254: GFLOPs: 2208.3304. Time: 29.6763 us. Best GFLOPs: 2893.6240
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #255: GFLOPs: 1235.2845. Time: 53.0527 us. Best GFLOPs: 2893.6240
2024-04-29 06:39:00 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #256: GFLOPs: 1031.3071. Time: 63.5457 us. Best GFLOPs: 2893.6240
2024-04-29 07:17:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:17:33 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 07:17:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 397 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 07:17:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 795 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 07:17:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 1191 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 07:17:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 1593 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 07:17:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 1984 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 07:17:55 [INFO] [evolutionary_search.cc:723] Sampled 66 candidate(s)
2024-04-29 07:18:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 07:18:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 66 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 07:18:34 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 71 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 07:18:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 72 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 07:18:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.8612  1.8530  1.8499  1.7990  1.7907  1.7850  1.7771  1.7548  1.7548  1.7359  1.7060  1.6923  1.6829  1.6828  1.6503  1.6447
[17 : 32]:	1.6322  1.6266  1.6257  1.6237  1.6184  1.6173  1.6120  1.6087  1.6072  1.5831  1.5777  1.5459  1.5459  1.5414  1.5253  1.5209
[33 : 48]:	1.5130  1.5007  1.4995  1.4985  1.4948  1.4943  1.4899  1.4899  1.4791  1.4539  1.4472  1.4416  1.4348  1.4339  1.4334  1.4302
[49 : 64]:	1.4266  1.4261  1.4082  1.4079  1.4055  1.3885  1.3846  1.3830  1.3788  1.3783  1.3724  1.3638  1.3619  1.3555  1.3548  1.3542
2024-04-29 07:18:53 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:18:53 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #257: GFLOPs: 2020.0821. Time: 32.4418 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #258: GFLOPs: 2035.8669. Time: 32.1903 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #259: GFLOPs: 1984.7240. Time: 33.0198 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #260: GFLOPs: 2025.6741. Time: 32.3523 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #261: GFLOPs: 1560.0552. Time: 42.0082 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #262: GFLOPs: 2074.3656. Time: 31.5929 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #263: GFLOPs: 1825.9663. Time: 35.8907 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #264: GFLOPs: 1849.8752. Time: 35.4268 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #265: GFLOPs: 1850.7075. Time: 35.4109 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #266: GFLOPs: 1710.0409. Time: 38.3237 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #267: GFLOPs: 1697.9200. Time: 38.5973 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #268: GFLOPs: 1983.5269. Time: 33.0397 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #269: GFLOPs: 1797.8520. Time: 36.4519 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #270: GFLOPs: 2246.6097. Time: 29.1707 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #271: GFLOPs: 1831.0103. Time: 35.7918 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #272: GFLOPs: 2243.4547. Time: 29.2117 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #273: GFLOPs: 1462.9415. Time: 44.7968 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #274: GFLOPs: 1897.8464. Time: 34.5313 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #275: GFLOPs: 1984.5092. Time: 33.0234 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #276: GFLOPs: 1845.2040. Time: 35.5165 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #277: GFLOPs: 1756.6831. Time: 37.3062 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #278: GFLOPs: 2254.1283. Time: 29.0734 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #279: GFLOPs: 1542.5306. Time: 42.4855 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #280: GFLOPs: 2067.5621. Time: 31.6968 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #281: GFLOPs: 2280.3019. Time: 28.7397 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #282: GFLOPs: 1850.3461. Time: 35.4178 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #283: GFLOPs: 2027.5295. Time: 32.3227 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #284: GFLOPs: 1471.4043. Time: 44.5392 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #285: GFLOPs: 1471.5829. Time: 44.5338 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #286: GFLOPs: 1695.4768. Time: 38.6529 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #287: GFLOPs: 2577.1576. Time: 25.4292 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #288: GFLOPs: 1859.9543. Time: 35.2348 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #289: GFLOPs: 1471.6381. Time: 44.5321 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #290: GFLOPs: 1671.2081. Time: 39.2142 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #291: GFLOPs: 1736.5304. Time: 37.7391 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #292: GFLOPs: 2067.5176. Time: 31.6975 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #293: GFLOPs: 1658.9184. Time: 39.5048 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #294: GFLOPs: 1966.0315. Time: 33.3337 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #295: GFLOPs: 2063.3411. Time: 31.7617 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #296: GFLOPs: 2062.5431. Time: 31.7740 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #297: GFLOPs: 1324.7027. Time: 49.4716 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #298: GFLOPs: 1698.0165. Time: 38.5951 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #299: GFLOPs: 2161.3785. Time: 30.3210 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #300: GFLOPs: 1717.6526. Time: 38.1539 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #301: GFLOPs: 2160.1814. Time: 30.3378 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #302: GFLOPs: 1955.1627. Time: 33.5190 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #303: GFLOPs: 1319.9289. Time: 49.6505 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #304: GFLOPs: 1737.2286. Time: 37.7240 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #305: GFLOPs: 1860.8062. Time: 35.2187 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #306: GFLOPs: 755.5886. Time: 86.7339 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #307: GFLOPs: 1834.8967. Time: 35.7160 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #308: GFLOPs: 1541.9573. Time: 42.5013 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #309: GFLOPs: 1513.6311. Time: 43.2967 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #310: GFLOPs: 1524.7546. Time: 42.9808 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #311: GFLOPs: 2115.9540. Time: 30.9719 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #312: GFLOPs: 2120.5412. Time: 30.9049 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #313: GFLOPs: 2000.2025. Time: 32.7643 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #314: GFLOPs: 2004.8921. Time: 32.6876 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #315: GFLOPs: 1691.0372. Time: 38.7544 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #316: GFLOPs: 801.9474. Time: 81.7200 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #317: GFLOPs: 1830.8706. Time: 35.7945 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #318: GFLOPs: 1337.2433. Time: 49.0077 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #319: GFLOPs: 126.7102. Time: 517.2053 us. Best GFLOPs: 2893.6240
2024-04-29 07:20:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #320: GFLOPs: 68.8080. Time: 952.4351 us. Best GFLOPs: 2893.6240
2024-04-29 07:53:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:53:15 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 07:53:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 391 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 07:53:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 786 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 07:53:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 1176 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 07:53:28 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-29 07:53:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 07:53:54 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 07:54:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 07:54:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb332d48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb24d098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xab22a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be9908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb454e38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x34ca918)]: 75 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb48b018)]: 0 failure(s)
2024-04-29 07:54:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.1080  1.9057  1.9055  1.8974  1.8922  1.8738  1.8391  1.7351  1.7284  1.7182  1.7102  1.6554  1.6415  1.6394  1.6364  1.6318
[17 : 32]:	1.6292  1.6292  1.6213  1.6145  1.6104  1.6035  1.6021  1.6009  1.5932  1.5779  1.5533  1.5432  1.5407  1.5256  1.5086  1.4967
[33 : 48]:	1.4957  1.4910  1.4905  1.4897  1.4550  1.4472  1.4464  1.4454  1.4426  1.4361  1.4294  1.4206  1.4173  1.4153  1.4115  1.4066
[49 : 64]:	1.4021  1.3988  1.3910  1.3859  1.3855  1.3812  1.3782  1.3770  1.3733  1.3683  1.3671  1.3667  1.3666  1.3603  1.3597  1.3547
2024-04-29 07:54:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:54:27 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #321: GFLOPs: 1253.2912. Time: 52.2905 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #322: GFLOPs: 1258.6742. Time: 52.0668 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #323: GFLOPs: 1258.8123. Time: 52.0611 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #324: GFLOPs: 2546.7407. Time: 25.7330 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #325: GFLOPs: 1144.2001. Time: 57.2760 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #326: GFLOPs: 1895.6617. Time: 34.5711 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #327: GFLOPs: 1641.8064. Time: 39.9165 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #328: GFLOPs: 2061.6867. Time: 31.7872 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #329: GFLOPs: 2082.0398. Time: 31.4764 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #330: GFLOPs: 1769.3766. Time: 37.0386 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #331: GFLOPs: 1731.1044. Time: 37.8574 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #332: GFLOPs: 1759.8124. Time: 37.2399 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #333: GFLOPs: 1745.5999. Time: 37.5431 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #334: GFLOPs: 2675.0878. Time: 24.4983 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #335: GFLOPs: 1746.0352. Time: 37.5337 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #336: GFLOPs: 2736.7324. Time: 23.9465 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #337: GFLOPs: 1525.8356. Time: 42.9503 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #338: GFLOPs: 951.2582. Time: 68.8931 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #339: GFLOPs: 2243.4834. Time: 29.2113 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #340: GFLOPs: 2196.7674. Time: 29.8325 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #341: GFLOPs: 2178.2447. Time: 30.0862 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #342: GFLOPs: 1698.4290. Time: 38.5858 us. Best GFLOPs: 2893.6240
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #343: GFLOPs: 2969.3438. Time: 22.0706 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #344: GFLOPs: 2082.3041. Time: 31.4724 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #345: GFLOPs: 2178.7547. Time: 30.0792 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #346: GFLOPs: 1853.4914. Time: 35.3577 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #347: GFLOPs: 2188.1138. Time: 29.9505 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #348: GFLOPs: 2295.5696. Time: 28.5485 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #349: GFLOPs: 2178.5672. Time: 30.0818 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #350: GFLOPs: 1812.4011. Time: 36.1593 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #351: GFLOPs: 2193.2979. Time: 29.8797 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #352: GFLOPs: 1568.4456. Time: 41.7835 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #353: GFLOPs: 1519.3981. Time: 43.1323 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #354: GFLOPs: 1519.4826. Time: 43.1299 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #355: GFLOPs: 1518.7896. Time: 43.1496 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #356: GFLOPs: 1762.6233. Time: 37.1805 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #357: GFLOPs: 1518.8317. Time: 43.1484 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #358: GFLOPs: 1235.0963. Time: 53.0608 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #359: GFLOPs: 1316.1302. Time: 49.7938 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #360: GFLOPs: 1457.1544. Time: 44.9748 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #361: GFLOPs: 1234.8355. Time: 53.0720 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #362: GFLOPs: 2416.8737. Time: 27.1157 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #363: GFLOPs: 1365.9720. Time: 47.9769 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #364: GFLOPs: 2297.6000. Time: 28.5233 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #365: GFLOPs: 2312.4698. Time: 28.3399 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #366: GFLOPs: 2721.3689. Time: 24.0817 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #367: GFLOPs: 1682.6585. Time: 38.9474 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #368: GFLOPs: 1531.1234. Time: 42.8020 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #369: GFLOPs: 1080.4292. Time: 60.6566 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #370: GFLOPs: 1390.9548. Time: 47.1152 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #371: GFLOPs: 1350.2734. Time: 48.5347 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #372: GFLOPs: 2639.0212. Time: 24.8331 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #373: GFLOPs: 1276.9360. Time: 51.3222 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #374: GFLOPs: 1900.5303. Time: 34.4826 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #375: GFLOPs: 1454.1655. Time: 45.0672 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #376: GFLOPs: 1400.3201. Time: 46.8001 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #377: GFLOPs: 1626.5647. Time: 40.2905 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #378: GFLOPs: 2598.0661. Time: 25.2246 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #379: GFLOPs: 1743.0780. Time: 37.5974 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #380: GFLOPs: 1996.1736. Time: 32.8304 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #381: GFLOPs: 1266.1543. Time: 51.7592 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #382: GFLOPs: 1388.4413. Time: 47.2005 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #383: GFLOPs: 1415.3442. Time: 46.3033 us. Best GFLOPs: 2969.3438
2024-04-29 07:57:20 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #384: GFLOPs: 1738.9156. Time: 37.6874 us. Best GFLOPs: 2969.3438
2024-05-01 15:10:02 [INFO] [task_scheduler.cc:160] Initializing Task #41: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2"
2024-05-01 15:10:02 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(27), T.int64(27)))
        input_tile = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)))
        B = T.alloc_buffer((T.int64(4), T.int64(4)))
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        A = T.alloc_buffer((T.int64(4), T.int64(2)))
        inverse = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(96), T.int64(27), T.int64(27)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(26) and T.int64(1) <= v_i3 and v_i3 < T.int64(26), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(96), T.int64(169), T.int64(4), T.int64(4)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps, v_p % T.int64(13) * T.int64(2) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps, v_p % T.int64(13) * T.int64(2) + v_nu]
        for i, j in T.grid(T.int64(4), T.int64(4)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(96), T.int64(169), T.int64(4), T.int64(4)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(4), T.int64(4), T.int64(96), T.int64(169), T.int64(96)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(4), T.int64(2)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(96), T.int64(169), T.int64(2), T.int64(2), T.int64(4), T.int64(4)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(96), T.int64(25), T.int64(25)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(96), T.int64(25), T.int64(25)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(96), T.int64(25), T.int64(25)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-05-01 15:10:02 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-05-01 15:10:02 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169) + ax0)
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(87) + ci_p_fused_1) % T.int64(169) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                            T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169))
                                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(169))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169) + ax2)
                            v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(87) + ci_p_fused_1) % T.int64(169) + ax3)
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(26), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(48)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(208)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(104))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(104) // T.int64(26))
                                    v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(26) // T.int64(13))
                                    v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + ax0_ax1_ax2_ax3_fused % T.int64(13))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1536)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(768))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(768) // T.int64(192))
                                    v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(192) // T.int64(96))
                                    v3 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(8) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(26) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) * T.int64(12) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(96), ci_0 * T.int64(2) + ci_1 * T.int64(2) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(12), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(8) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(26) + ax1)
                                v2 = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) * T.int64(12) + ax2)
                                v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                            v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(169))
                            v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                            T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 4, 2, 12, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[13, 1, 13, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[48, 1, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-05-01 15:10:02 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169) + ax0)
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(87) + ci_p_fused_1) % T.int64(169) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                            T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169))
                                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(169))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169) + ax2)
                            v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(87) + ci_p_fused_1) % T.int64(169) + ax3)
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(26), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(48), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(208)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(104))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(104) // T.int64(26))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(26) // T.int64(13))
                                    v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + ax0_ax1_ax2_ax3_fused % T.int64(13))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1536)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(768))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(768) // T.int64(192))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(192) // T.int64(96))
                                    v3 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(8) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(26) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) * T.int64(12) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(96), ci_0_fused * T.int64(2) + ci_1 * T.int64(2) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(12), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(8) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(26) + ax1)
                                v2 = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) * T.int64(12) + ax2)
                                v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                            v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(169))
                            v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                            T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 4, 2, 12, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[13, 1, 13, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[48, 1, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-05-01 15:10:02 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169) + ax0)
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(87) + ci_p_fused_1) % T.int64(169) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                            T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169))
                                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(169))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169) + ax2)
                            v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(87) + ci_p_fused_1) % T.int64(169) + ax3)
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(26), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(48), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(208)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(104))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(104) // T.int64(26))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(26) // T.int64(13))
                                    v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + ax0_ax1_ax2_ax3_fused % T.int64(13))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1536)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(768))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(768) // T.int64(192))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(192) // T.int64(96))
                                    v3 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(8) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(26) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) * T.int64(12) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(96), ci_0_fused * T.int64(2) + ci_1 * T.int64(2) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(12), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(8) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(26) + ax1)
                                v2 = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) * T.int64(12) + ax2)
                                v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(507), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                            v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(169))
                            v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25))
                            T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 4, 2, 12, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[13, 1, 13, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[48, 1, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-05-01 16:02:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 16:02:13 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-05-01 16:02:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 395 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 16:02:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 794 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 16:02:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 1181 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 16:02:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 1579 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 16:02:31 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2024-05-01 16:02:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 16:02:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 75 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 16:03:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 70 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 16:03:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 16:03:15 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9995  0.9990  0.9983  0.9983  0.9972  0.9961  0.9960  0.9959  0.9958  0.9957  0.9948  0.9945  0.9943  0.9923  0.9915
[17 : 32]:	0.9897  0.9891  0.9880  0.9875  0.9867  0.9852  0.9849  0.9841  0.9839  0.9837  0.9836  0.9835  0.9828  0.9822  0.9818  0.9817
[33 : 48]:	0.9809  0.9799  0.9793  0.9791  0.9790  0.9788  0.9783  0.9780  0.9775  0.9774  0.9765  0.9765  0.9764  0.9761  0.9740  0.9737
[49 : 64]:	0.9731  0.9711  0.9702  0.9668  0.9668  0.9668  0.9663  0.9648  0.9648  0.9646  0.9642  0.9641  0.9638  0.9615  0.9603  0.9600
2024-05-01 16:03:15 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 16:03:15 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #1: GFLOPs: 23.3899. Time: 2801.8631 us. Best GFLOPs: 23.3899
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #2: GFLOPs: 451.7280. Time: 145.0766 us. Best GFLOPs: 451.7280
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #3: GFLOPs: 1989.9438. Time: 32.9332 us. Best GFLOPs: 1989.9438
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #4: GFLOPs: 8.3286. Time: 7868.6523 us. Best GFLOPs: 1989.9438
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #5: GFLOPs: 2417.9984. Time: 27.1031 us. Best GFLOPs: 2417.9984
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #6: GFLOPs: 3001.3478. Time: 21.8352 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #7: GFLOPs: 2843.5311. Time: 23.0471 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #8: GFLOPs: 2275.9979. Time: 28.7940 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #9: GFLOPs: 99.2562. Time: 660.2627 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #10: GFLOPs: 669.8408. Time: 97.8369 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #11: GFLOPs: 1657.0084. Time: 39.5503 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #12: GFLOPs: 2012.1631. Time: 32.5695 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #13: GFLOPs: 793.6141. Time: 82.5781 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #14: GFLOPs: 35.5153. Time: 1845.2666 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #15: GFLOPs: 2020.9426. Time: 32.4280 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #16: GFLOPs: 1537.5332. Time: 42.6236 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #17: GFLOPs: 2372.1140. Time: 27.6273 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #18: GFLOPs: 2203.3241. Time: 29.7438 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #19: GFLOPs: 2237.9190. Time: 29.2840 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #20: GFLOPs: 1908.3354. Time: 34.3415 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #21: GFLOPs: 2372.0888. Time: 27.6276 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #22: GFLOPs: 2622.3134. Time: 24.9914 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #23: GFLOPs: 1773.5991. Time: 36.9504 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #24: GFLOPs: 2163.9075. Time: 30.2856 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #25: GFLOPs: 2788.2857. Time: 23.5037 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #26: GFLOPs: 321.3440. Time: 203.9408 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #27: GFLOPs: 87.0688. Time: 752.6828 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #28: GFLOPs: 662.9329. Time: 98.8564 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #29: GFLOPs: 432.4551. Time: 151.5421 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #30: GFLOPs: 240.7594. Time: 272.2020 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #31: GFLOPs: 2558.4353. Time: 25.6153 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #32: GFLOPs: 25.9303. Time: 2527.3600 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #33: GFLOPs: 2262.3080. Time: 28.9683 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #34: GFLOPs: 2376.3264. Time: 27.5784 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #35: GFLOPs: 2121.2341. Time: 30.8948 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #36: GFLOPs: 2277.4754. Time: 28.7754 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #37: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(87) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(87) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(13), T.int64(1), T.int64(1), T.int64(8), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(26) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(24) + co_3_init * T.int64(8) + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(96)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(13)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(104) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(338))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(104) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(338) // T.int64(169))
                                        v2 = T.axis.spatial(T.int64(96), ci_0)
                                        v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(104) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(169))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(192))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(192) // T.int64(96))
                                        v2 = T.axis.spatial(T.int64(96), ci_0)
                                        v3 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(768))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(13), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(26) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(24) + co_3 * T.int64(8) + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(24), T.int64(13)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(26) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(24) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 4, 1, 3, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 13, 13, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[96, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 52, 2], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 52, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #38: GFLOPs: 2246.5001. Time: 29.1721 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #39: GFLOPs: 2384.8477. Time: 27.4798 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #40: GFLOPs: 322.8407. Time: 202.9954 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #41: GFLOPs: 2495.5406. Time: 26.2609 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #42: GFLOPs: 548.7213. Time: 119.4325 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #43: GFLOPs: 2178.5859. Time: 30.0815 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #44: GFLOPs: 27.3320. Time: 2397.7447 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #45: GFLOPs: 2167.8916. Time: 30.2299 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #46: GFLOPs: 2743.4640. Time: 23.8877 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #47: GFLOPs: 142.2332. Time: 460.7587 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #48: GFLOPs: 2017.3662. Time: 32.4855 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #49: GFLOPs: 568.1456. Time: 115.3492 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #50: GFLOPs: 38.1294. Time: 1718.7564 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #51: GFLOPs: 1004.7252. Time: 65.2270 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #52: GFLOPs: 2239.6118. Time: 29.2618 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #53: GFLOPs: 2013.5137. Time: 32.5477 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #54: GFLOPs: 254.9522. Time: 257.0488 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #55: GFLOPs: 2337.5462. Time: 28.0359 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #56: GFLOPs: 768.3489. Time: 85.2935 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #57: GFLOPs: 501.7506. Time: 130.6130 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #58: GFLOPs: 2361.3823. Time: 27.7529 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #59: GFLOPs: 1058.7721. Time: 61.8973 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #60: GFLOPs: 2362.7283. Time: 27.7371 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #61: GFLOPs: 2018.3938. Time: 32.4690 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #62: GFLOPs: 2074.4307. Time: 31.5919 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #63: GFLOPs: 445.7397. Time: 147.0256 us. Best GFLOPs: 3001.3478
2024-05-01 16:37:58 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #64: GFLOPs: 710.6232. Time: 92.2221 us. Best GFLOPs: 3001.3478
2024-05-01 16:58:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 16:58:32 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-05-01 16:58:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 399 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 16:58:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 796 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 16:58:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 1191 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 16:58:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 1588 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 16:58:50 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-05-01 16:59:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 68 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 16:59:16 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 65 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 16:59:31 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 16:59:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 16:59:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.2300  2.1093  2.0928  2.0784  2.0750  2.0550  2.0475  2.0410  2.0088  1.9694  1.9618  1.9528  1.9504  1.9350  1.9209  1.9205
[17 : 32]:	1.9014  1.8924  1.8915  1.8669  1.8305  1.8105  1.8004  1.7973  1.7835  1.7427  1.7372  1.7283  1.7272  1.7261  1.7254  1.7248
[33 : 48]:	1.7236  1.7227  1.7225  1.7207  1.7171  1.7144  1.7067  1.6958  1.6778  1.6707  1.6671  1.6666  1.6666  1.6650  1.6606  1.6459
[49 : 64]:	1.6303  1.6303  1.6262  1.6195  1.6187  1.6163  1.6163  1.6045  1.6026  1.6003  1.6003  1.5961  1.5857  1.5797  1.5723  1.5721
2024-05-01 16:59:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 16:59:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #65: GFLOPs: 2837.2115. Time: 23.0984 us. Best GFLOPs: 3001.3478
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #66: GFLOPs: 1832.6064. Time: 35.7606 us. Best GFLOPs: 3001.3478
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #67: GFLOPs: 1337.4573. Time: 48.9998 us. Best GFLOPs: 3001.3478
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #68: GFLOPs: 1302.1282. Time: 50.3293 us. Best GFLOPs: 3001.3478
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #69: GFLOPs: 1288.5256. Time: 50.8606 us. Best GFLOPs: 3001.3478
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #70: GFLOPs: 1592.2642. Time: 41.1585 us. Best GFLOPs: 3001.3478
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #71: GFLOPs: 1762.4984. Time: 37.1831 us. Best GFLOPs: 3001.3478
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #72: GFLOPs: 1660.5403. Time: 39.4662 us. Best GFLOPs: 3001.3478
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #73: GFLOPs: 1592.3566. Time: 41.1561 us. Best GFLOPs: 3001.3478
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #74: GFLOPs: 2468.8612. Time: 26.5447 us. Best GFLOPs: 3001.3478
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #75: GFLOPs: 2021.8195. Time: 32.4140 us. Best GFLOPs: 3001.3478
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #76: GFLOPs: 2472.3022. Time: 26.5078 us. Best GFLOPs: 3001.3478
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #77: GFLOPs: 1287.0234. Time: 50.9199 us. Best GFLOPs: 3001.3478
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #78: GFLOPs: 1262.6590. Time: 51.9025 us. Best GFLOPs: 3001.3478
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #79: GFLOPs: 1937.6142. Time: 33.8226 us. Best GFLOPs: 3001.3478
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #80: GFLOPs: 3253.2328. Time: 20.1446 us. Best GFLOPs: 3253.2328
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #81: GFLOPs: 1292.8318. Time: 50.6912 us. Best GFLOPs: 3253.2328
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #82: GFLOPs: 3418.9658. Time: 19.1681 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #83: GFLOPs: 3395.4837. Time: 19.3007 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #84: GFLOPs: 1822.5721. Time: 35.9575 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #85: GFLOPs: 1504.3474. Time: 43.5639 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #86: GFLOPs: 1616.0427. Time: 40.5529 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #87: GFLOPs: 2357.9775. Time: 27.7930 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #88: GFLOPs: 2778.8480. Time: 23.5836 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #89: GFLOPs: 2730.4009. Time: 24.0020 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #90: GFLOPs: 2340.1722. Time: 28.0044 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #91: GFLOPs: 2521.6854. Time: 25.9886 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #92: GFLOPs: 2484.0847. Time: 26.3820 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #93: GFLOPs: 2484.5768. Time: 26.3768 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #94: GFLOPs: 2343.6389. Time: 27.9630 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #95: GFLOPs: 2394.0058. Time: 27.3747 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #96: GFLOPs: 2535.5174. Time: 25.8469 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #97: GFLOPs: 2539.9189. Time: 25.8021 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #98: GFLOPs: 2941.6294. Time: 22.2785 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #99: GFLOPs: 2386.5158. Time: 27.4606 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #100: GFLOPs: 2522.2149. Time: 25.9832 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #101: GFLOPs: 2574.4077. Time: 25.4564 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #102: GFLOPs: 1790.8827. Time: 36.5938 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #103: GFLOPs: 3322.3857. Time: 19.7253 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #104: GFLOPs: 1271.2639. Time: 51.5512 us. Best GFLOPs: 3418.9658
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #105: GFLOPs: 3465.0686. Time: 18.9131 us. Best GFLOPs: 3465.0686
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #106: GFLOPs: 2941.1524. Time: 22.2821 us. Best GFLOPs: 3465.0686
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #107: GFLOPs: 1673.5560. Time: 39.1592 us. Best GFLOPs: 3465.0686
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #108: GFLOPs: 1511.6420. Time: 43.3536 us. Best GFLOPs: 3465.0686
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #109: GFLOPs: 1511.7356. Time: 43.3509 us. Best GFLOPs: 3465.0686
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #110: GFLOPs: 2290.4894. Time: 28.6119 us. Best GFLOPs: 3465.0686
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #111: GFLOPs: 2418.6137. Time: 27.0962 us. Best GFLOPs: 3465.0686
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #112: GFLOPs: 3189.0144. Time: 20.5503 us. Best GFLOPs: 3465.0686
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #113: GFLOPs: 1523.0570. Time: 43.0287 us. Best GFLOPs: 3465.0686
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #114: GFLOPs: 1435.0250. Time: 45.6683 us. Best GFLOPs: 3465.0686
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #115: GFLOPs: 1248.7585. Time: 52.4803 us. Best GFLOPs: 3465.0686
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #116: GFLOPs: 2399.8499. Time: 27.3080 us. Best GFLOPs: 3465.0686
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #117: GFLOPs: 1450.8467. Time: 45.1703 us. Best GFLOPs: 3465.0686
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #118: GFLOPs: 1543.8999. Time: 42.4478 us. Best GFLOPs: 3465.0686
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #119: GFLOPs: 1521.8423. Time: 43.0630 us. Best GFLOPs: 3465.0686
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #120: GFLOPs: 3482.2893. Time: 18.8196 us. Best GFLOPs: 3482.2893
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #121: GFLOPs: 2790.8883. Time: 23.4818 us. Best GFLOPs: 3482.2893
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #122: GFLOPs: 1938.6197. Time: 33.8051 us. Best GFLOPs: 3482.2893
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #123: GFLOPs: 1940.5593. Time: 33.7713 us. Best GFLOPs: 3482.2893
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #124: GFLOPs: 1280.8934. Time: 51.1636 us. Best GFLOPs: 3482.2893
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #125: GFLOPs: 1832.2948. Time: 35.7667 us. Best GFLOPs: 3482.2893
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #126: GFLOPs: 2249.9159. Time: 29.1278 us. Best GFLOPs: 3482.2893
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #127: GFLOPs: 161.7302. Time: 405.2129 us. Best GFLOPs: 3482.2893
2024-05-01 17:01:07 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #128: GFLOPs: 2047.9975. Time: 31.9996 us. Best GFLOPs: 3482.2893
2024-05-01 17:50:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 17:50:56 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-05-01 17:51:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 397 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 17:51:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 797 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 17:51:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 1192 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 17:51:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 1593 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 17:51:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 1986 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 17:51:19 [INFO] [evolutionary_search.cc:723] Sampled 64 candidate(s)
2024-05-01 17:51:30 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 17:51:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 17:52:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 17:52:15 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 17:52:20 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.6757  2.6368  2.5790  2.5245  2.5230  2.3801  2.2928  2.2590  2.2567  2.2428  2.2372  2.1967  2.1609  2.1010  2.0632  2.0584
[17 : 32]:	2.0364  2.0253  2.0135  1.9768  1.9723  1.9677  1.9650  1.9625  1.9607  1.9556  1.9538  1.9519  1.9476  1.9469  1.9467  1.9462
[33 : 48]:	1.9455  1.9440  1.9423  1.9417  1.9358  1.9321  1.9205  1.9188  1.8927  1.8883  1.8843  1.8784  1.8679  1.8556  1.8532  1.8488
[49 : 64]:	1.8461  1.8455  1.8378  1.8374  1.8318  1.8282  1.8110  1.8042  1.7976  1.7942  1.7816  1.7811  1.7810  1.7753  1.7742  1.7742
2024-05-01 17:52:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 17:52:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #129: GFLOPs: 2675.4167. Time: 24.4953 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #130: GFLOPs: 2675.1499. Time: 24.4978 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #131: GFLOPs: 2799.1887. Time: 23.4122 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #132: GFLOPs: 2669.9941. Time: 24.5451 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #133: GFLOPs: 2699.0687. Time: 24.2807 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #134: GFLOPs: 2158.9188. Time: 30.3555 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #135: GFLOPs: 2068.9697. Time: 31.6753 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #136: GFLOPs: 1997.2982. Time: 32.8119 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #137: GFLOPs: 2098.0424. Time: 31.2363 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #138: GFLOPs: 2088.5135. Time: 31.3789 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #139: GFLOPs: 2472.1986. Time: 26.5089 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #140: GFLOPs: 2111.1054. Time: 31.0431 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #141: GFLOPs: 2418.1441. Time: 27.1014 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #142: GFLOPs: 2679.1009. Time: 24.4616 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #143: GFLOPs: 3032.5708. Time: 21.6104 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #144: GFLOPs: 2224.7625. Time: 29.4572 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #145: GFLOPs: 1304.6559. Time: 50.2318 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #146: GFLOPs: 1311.1030. Time: 49.9848 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #147: GFLOPs: 1325.8826. Time: 49.4276 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #148: GFLOPs: 3001.8258. Time: 21.8318 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #149: GFLOPs: 2605.5950. Time: 25.1517 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #150: GFLOPs: 2607.0645. Time: 25.1375 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #151: GFLOPs: 2617.7022. Time: 25.0354 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #152: GFLOPs: 2976.7957. Time: 22.0153 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #153: GFLOPs: 1526.8112. Time: 42.9229 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #154: GFLOPs: 1606.0608. Time: 40.8049 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #155: GFLOPs: 2538.5000. Time: 25.8165 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #156: GFLOPs: 3232.1736. Time: 20.2759 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #157: GFLOPs: 2552.6004. Time: 25.6739 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #158: GFLOPs: 2575.8174. Time: 25.4425 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #159: GFLOPs: 2901.1093. Time: 22.5897 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #160: GFLOPs: 1544.9086. Time: 42.4201 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #161: GFLOPs: 1499.6950. Time: 43.6990 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #162: GFLOPs: 2877.0364. Time: 22.7787 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #163: GFLOPs: 2892.8834. Time: 22.6539 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #164: GFLOPs: 2873.6788. Time: 22.8053 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #165: GFLOPs: 1649.8813. Time: 39.7211 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #166: GFLOPs: 2331.4422. Time: 28.1093 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #167: GFLOPs: 1991.2559. Time: 32.9115 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #168: GFLOPs: 1648.8491. Time: 39.7460 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #169: GFLOPs: 2545.8320. Time: 25.7421 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #170: GFLOPs: 1652.0014. Time: 39.6702 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #171: GFLOPs: 2405.3564. Time: 27.2455 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #172: GFLOPs: 2330.4410. Time: 28.1214 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #173: GFLOPs: 2408.1816. Time: 27.2135 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #174: GFLOPs: 2381.1709. Time: 27.5222 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #175: GFLOPs: 2381.7202. Time: 27.5159 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #176: GFLOPs: 2772.8335. Time: 23.6347 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #177: GFLOPs: 2381.5635. Time: 27.5177 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #178: GFLOPs: 1772.8778. Time: 36.9654 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #179: GFLOPs: 3204.7403. Time: 20.4494 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #180: GFLOPs: 2977.3871. Time: 22.0110 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #181: GFLOPs: 2212.0818. Time: 29.6260 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #182: GFLOPs: 3136.7543. Time: 20.8927 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #183: GFLOPs: 1591.7461. Time: 41.1719 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #184: GFLOPs: 1556.9064. Time: 42.0932 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #185: GFLOPs: 1603.1411. Time: 40.8792 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #186: GFLOPs: 2681.3231. Time: 24.4414 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #187: GFLOPs: 1387.5363. Time: 47.2313 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #188: GFLOPs: 2111.6165. Time: 31.0355 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #189: GFLOPs: 2694.9804. Time: 24.3175 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #190: GFLOPs: 106.3487. Time: 616.2289 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #191: GFLOPs: 54.1431. Time: 1210.4068 us. Best GFLOPs: 3482.2893
2024-05-01 17:54:15 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #192: GFLOPs: 903.7060. Time: 72.5182 us. Best GFLOPs: 3482.2893
2024-05-01 18:40:21 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 18:40:23 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-05-01 18:40:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 392 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 18:40:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 793 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 18:40:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 1185 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 18:40:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 1586 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 18:40:41 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-05-01 18:40:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 18:41:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 80 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 18:41:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 18:41:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 18:41:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.8695  1.8618  1.6486  1.6321  1.6150  1.6015  1.5758  1.5755  1.5653  1.5653  1.5510  1.5510  1.5475  1.5097  1.5079  1.5035
[17 : 32]:	1.4946  1.4924  1.4919  1.4697  1.4689  1.4641  1.4463  1.4178  1.4158  1.4101  1.4081  1.4046  1.3945  1.3858  1.3814  1.3709
[33 : 48]:	1.3593  1.3567  1.3556  1.3502  1.3400  1.3394  1.3353  1.3347  1.3250  1.3198  1.3152  1.3130  1.3104  1.3104  1.3070  1.2975
[49 : 64]:	1.2975  1.2975  1.2931  1.2901  1.2830  1.2822  1.2807  1.2783  1.2766  1.2749  1.2705  1.2703  1.2696  1.2675  1.2673  1.2648
2024-05-01 18:41:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 18:41:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #193: GFLOPs: 1619.5524. Time: 40.4650 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #194: GFLOPs: 2995.5843. Time: 21.8773 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #195: GFLOPs: 2192.6907. Time: 29.8880 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #196: GFLOPs: 1869.6217. Time: 35.0526 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #197: GFLOPs: 1583.0204. Time: 41.3988 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #198: GFLOPs: 1428.4366. Time: 45.8789 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #199: GFLOPs: 2614.4715. Time: 25.0663 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #200: GFLOPs: 1475.4232. Time: 44.4179 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #201: GFLOPs: 1551.3867. Time: 42.2430 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #202: GFLOPs: 1537.5624. Time: 42.6228 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #203: GFLOPs: 1530.4249. Time: 42.8216 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #204: GFLOPs: 1550.7458. Time: 42.2604 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #205: GFLOPs: 3276.9747. Time: 19.9987 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #206: GFLOPs: 2795.4123. Time: 23.4438 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #207: GFLOPs: 2796.9892. Time: 23.4306 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #208: GFLOPs: 2796.9405. Time: 23.4310 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #209: GFLOPs: 2775.6845. Time: 23.6105 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #210: GFLOPs: 703.2454. Time: 93.1896 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #211: GFLOPs: 2795.7421. Time: 23.4411 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #212: GFLOPs: 2190.5028. Time: 29.9179 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #213: GFLOPs: 745.0310. Time: 87.9630 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #214: GFLOPs: 2619.5791. Time: 25.0174 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #215: GFLOPs: 2125.8367. Time: 30.8279 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #216: GFLOPs: 2619.6914. Time: 25.0164 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #217: GFLOPs: 1516.0391. Time: 43.2279 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #218: GFLOPs: 2012.4330. Time: 32.5651 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #219: GFLOPs: 2892.9592. Time: 22.6533 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #220: GFLOPs: 2067.3058. Time: 31.7008 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #221: GFLOPs: 2384.9730. Time: 27.4784 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #222: GFLOPs: 2156.4682. Time: 30.3900 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #223: GFLOPs: 1530.7173. Time: 42.8134 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #224: GFLOPs: 1925.5745. Time: 34.0341 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #225: GFLOPs: 2022.2990. Time: 32.4063 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #226: GFLOPs: 2029.0281. Time: 32.2988 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #227: GFLOPs: 2074.2622. Time: 31.5944 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #228: GFLOPs: 827.3305. Time: 79.2128 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #229: GFLOPs: 3041.9321. Time: 21.5439 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #230: GFLOPs: 2761.7062. Time: 23.7300 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #231: GFLOPs: 2112.2324. Time: 31.0265 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #232: GFLOPs: 1435.0277. Time: 45.6682 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #233: GFLOPs: 2332.1506. Time: 28.1007 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #234: GFLOPs: 684.5559. Time: 95.7338 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #235: GFLOPs: 2080.1176. Time: 31.5055 us. Best GFLOPs: 3482.2893
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #236: GFLOPs: 3501.4912. Time: 18.7164 us. Best GFLOPs: 3501.4912
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #237: GFLOPs: 1619.5944. Time: 40.4639 us. Best GFLOPs: 3501.4912
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #238: GFLOPs: 1460.7042. Time: 44.8655 us. Best GFLOPs: 3501.4912
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #239: GFLOPs: 814.6770. Time: 80.4431 us. Best GFLOPs: 3501.4912
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #240: GFLOPs: 1592.3580. Time: 41.1561 us. Best GFLOPs: 3501.4912
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #241: GFLOPs: 1592.3566. Time: 41.1561 us. Best GFLOPs: 3501.4912
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #242: GFLOPs: 1592.3627. Time: 41.1559 us. Best GFLOPs: 3501.4912
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #243: GFLOPs: 1592.4049. Time: 41.1548 us. Best GFLOPs: 3501.4912
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #244: GFLOPs: 2689.7224. Time: 24.3650 us. Best GFLOPs: 3501.4912
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #245: GFLOPs: 1926.1460. Time: 34.0240 us. Best GFLOPs: 3501.4912
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #246: GFLOPs: 2288.3701. Time: 28.6384 us. Best GFLOPs: 3501.4912
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #247: GFLOPs: 1421.8454. Time: 46.0916 us. Best GFLOPs: 3501.4912
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #248: GFLOPs: 1433.7794. Time: 45.7080 us. Best GFLOPs: 3501.4912
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #249: GFLOPs: 2466.2985. Time: 26.5723 us. Best GFLOPs: 3501.4912
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #250: GFLOPs: 2371.6946. Time: 27.6322 us. Best GFLOPs: 3501.4912
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #251: GFLOPs: 3454.6274. Time: 18.9703 us. Best GFLOPs: 3501.4912
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #252: GFLOPs: 2755.9115. Time: 23.7799 us. Best GFLOPs: 3501.4912
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #253: GFLOPs: 3453.7688. Time: 18.9750 us. Best GFLOPs: 3501.4912
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #254: GFLOPs: 1187.8192. Time: 55.1727 us. Best GFLOPs: 3501.4912
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #255: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(104), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(4), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(13)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(52) * T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused % T.int64(52) // T.int64(13) * T.int64(24) + co_3_init * T.int64(6) + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + p_3_init * T.int64(13) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(96)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(104), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(416) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(676))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(416) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(676) // T.int64(169))
                                        v2 = T.axis.spatial(T.int64(96), ci_0)
                                        v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(416) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(169))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(104) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2704))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(104), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(96))
                                        v2 = T.axis.spatial(T.int64(96), ci_0)
                                        v3 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(104) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1536))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(13)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(52) * T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused % T.int64(52) // T.int64(13) * T.int64(24) + co_3 * T.int64(6) + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + p_3 * T.int64(13) + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(2), T.int64(24), T.int64(13)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(52) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused % T.int64(52) // T.int64(13) * T.int64(24) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 4, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 2, 2, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 4, 4, 6])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 13, 1, 13])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[96, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 104, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 104, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-05-01 18:43:22 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #256: GFLOPs: 1421.8730. Time: 46.0907 us. Best GFLOPs: 3501.4912
2024-05-01 19:30:59 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 19:31:02 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-05-01 19:31:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 391 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 19:31:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 781 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 19:31:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 1179 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 19:31:15 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-05-01 19:31:27 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 19:31:41 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 19:31:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 19:32:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0c9f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x8711828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8ede978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5237558)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6319e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x871d7e8)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8711348)]: 0 failure(s)
2024-05-01 19:32:15 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.7741  1.7715  1.7636  1.7367  1.7277  1.7147  1.6954  1.6927  1.6926  1.6901  1.6625  1.6616  1.6573  1.6515  1.6362  1.6361
[17 : 32]:	1.6345  1.6326  1.6309  1.6291  1.6277  1.6214  1.6195  1.5886  1.5714  1.5445  1.5398  1.5119  1.5088  1.5067  1.4934  1.4911
[33 : 48]:	1.4811  1.4806  1.4804  1.4787  1.4767  1.4733  1.4603  1.4532  1.4491  1.4370  1.4355  1.4341  1.4339  1.4323  1.4216  1.4205
[49 : 64]:	1.4114  1.4076  1.4019  1.4017  1.3904  1.3882  1.3813  1.3795  1.3780  1.3737  1.3707  1.3673  1.3661  1.3546  1.3494  1.3489
2024-05-01 19:32:15 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 19:32:15 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #257: GFLOPs: 2657.5473. Time: 24.6600 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #258: GFLOPs: 1622.0762. Time: 40.4020 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #259: GFLOPs: 2374.4468. Time: 27.6002 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #260: GFLOPs: 2388.4605. Time: 27.4382 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #261: GFLOPs: 2626.0377. Time: 24.9559 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #262: GFLOPs: 2363.3010. Time: 27.7304 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #263: GFLOPs: 2462.2437. Time: 26.6160 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #264: GFLOPs: 2964.8404. Time: 22.1041 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #265: GFLOPs: 2681.4174. Time: 24.4405 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #266: GFLOPs: 2385.9005. Time: 27.4677 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #267: GFLOPs: 2583.7649. Time: 25.3642 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #268: GFLOPs: 2814.6762. Time: 23.2834 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #269: GFLOPs: 1622.5233. Time: 40.3909 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #270: GFLOPs: 2466.0320. Time: 26.5751 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #271: GFLOPs: 2413.8241. Time: 27.1499 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #272: GFLOPs: 2754.9578. Time: 23.7881 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #273: GFLOPs: 2625.3304. Time: 24.9626 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #274: GFLOPs: 2726.8745. Time: 24.0331 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #275: GFLOPs: 2338.5625. Time: 28.0237 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #276: GFLOPs: 2580.6205. Time: 25.3951 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #277: GFLOPs: 2083.6333. Time: 31.4524 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #278: GFLOPs: 2645.4345. Time: 24.7729 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #279: GFLOPs: 1312.7524. Time: 49.9220 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #280: GFLOPs: 2586.1175. Time: 25.3411 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #281: GFLOPs: 1790.1510. Time: 36.6087 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #282: GFLOPs: 2487.0848. Time: 26.3502 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #283: GFLOPs: 2962.7581. Time: 22.1196 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #284: GFLOPs: 2118.1967. Time: 30.9391 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #285: GFLOPs: 2517.3577. Time: 26.0333 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #286: GFLOPs: 2501.1918. Time: 26.2016 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #287: GFLOPs: 2782.1497. Time: 23.5556 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #288: GFLOPs: 2484.4142. Time: 26.3785 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #289: GFLOPs: 1899.6956. Time: 34.4977 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #290: GFLOPs: 2581.0489. Time: 25.3909 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #291: GFLOPs: 3402.7279. Time: 19.2596 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #292: GFLOPs: 1875.4260. Time: 34.9442 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #293: GFLOPs: 1943.0768. Time: 33.7275 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #294: GFLOPs: 1528.5916. Time: 42.8729 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #295: GFLOPs: 2535.3203. Time: 25.8489 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #296: GFLOPs: 2119.1192. Time: 30.9257 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #297: GFLOPs: 2024.1458. Time: 32.3767 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #298: GFLOPs: 2013.6486. Time: 32.5455 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #299: GFLOPs: 1392.1123. Time: 47.0761 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #300: GFLOPs: 2295.7843. Time: 28.5459 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #301: GFLOPs: 1969.9366. Time: 33.2677 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #302: GFLOPs: 1874.3666. Time: 34.9639 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #303: GFLOPs: 1391.9437. Time: 47.0818 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #304: GFLOPs: 2538.9218. Time: 25.8122 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #305: GFLOPs: 1237.2026. Time: 52.9704 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #306: GFLOPs: 2139.3718. Time: 30.6329 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #307: GFLOPs: 2003.1495. Time: 32.7161 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #308: GFLOPs: 2485.5449. Time: 26.3665 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #309: GFLOPs: 3457.6010. Time: 18.9539 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #310: GFLOPs: 3461.5902. Time: 18.9321 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #311: GFLOPs: 820.3919. Time: 79.8828 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #312: GFLOPs: 2677.3468. Time: 24.4777 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #313: GFLOPs: 2351.5687. Time: 27.8687 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #314: GFLOPs: 2471.7447. Time: 26.5137 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #315: GFLOPs: 2874.7342. Time: 22.7969 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #316: GFLOPs: 1758.7146. Time: 37.2631 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #317: GFLOPs: 2068.6820. Time: 31.6797 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #318: GFLOPs: 474.2844. Time: 138.1769 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #319: GFLOPs: 2094.6177. Time: 31.2874 us. Best GFLOPs: 3501.4912
2024-05-01 19:33:29 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #320: GFLOPs: 1123.9569. Time: 58.3075 us. Best GFLOPs: 3501.4912
