2024-04-29 01:54:27 [INFO] [task_scheduler.cc:160] Initializing Task #47: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4"
2024-04-29 01:54:27 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(109), T.int64(109)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(109), T.int64(109)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(111), T.int64(111)))
        input_tile = T.alloc_buffer((T.int64(32), T.int64(3025), T.int64(4), T.int64(4)))
        B = T.alloc_buffer((T.int64(4), T.int64(4)))
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(3025)))
        A = T.alloc_buffer((T.int64(4), T.int64(2)))
        inverse = T.alloc_buffer((T.int64(64), T.int64(3025), T.int64(2), T.int64(2)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(109), T.int64(109)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(109), T.int64(109)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(32), T.int64(111), T.int64(111)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(110) and T.int64(1) <= v_i3 and v_i3 < T.int64(110), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(32), T.int64(3025), T.int64(4), T.int64(4)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps, v_p % T.int64(55) * T.int64(2) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps, v_p % T.int64(55) * T.int64(2) + v_nu]
        for i, j in T.grid(T.int64(4), T.int64(4)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(32), T.int64(3025), T.int64(4), T.int64(4)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(4), T.int64(4), T.int64(64), T.int64(3025), T.int64(32)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(4), T.int64(2)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(64), T.int64(3025), T.int64(2), T.int64(2), T.int64(4), T.int64(4)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(64), T.int64(109), T.int64(109)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(109), T.int64(109)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(109), T.int64(109)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 01:54:28 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 01:54:28 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(109), T.int64(109)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(109), T.int64(109)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            input_tile_local = T.alloc_buffer((T.int64(32), T.int64(3025), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(3025)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(3025), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(3025)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(95), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025) + ax0)
                            v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                            T.reads(p0[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(55) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps and v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps < T.int64(110) and T.int64(1) <= v_p % T.int64(55) * T.int64(2) + v_nu and v_p % T.int64(55) * T.int64(2) + v_nu < T.int64(110), p0[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(55) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025))
                                        v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025) + ax2)
                            v3 = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025) + ax3)
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(44), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(100), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(8800)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(22) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(4400))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(4400) // T.int64(1100))
                                    v2 = T.axis.spatial(T.int64(32), ci_0 * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(1100) // T.int64(275))
                                    v3 = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused % T.int64(11) * T.int64(275) + ax0_ax1_ax2_ax3_fused % T.int64(275))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(22) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(512))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(512) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(32), ci_0 * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(128) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(22) // T.int64(11) * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(4), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(11)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(22) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(50) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(22) // T.int64(11) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(50) // T.int64(25) * T.int64(16) + co_3 * T.int64(4) + co_4)
                                    v_p = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused % T.int64(11) * T.int64(275) + eps_1_nu_1_co_1_p_1_fused % T.int64(25) * T.int64(11) + p_3 * T.int64(11) + p_4)
                                    v_ci = T.axis.reduce(T.int64(32), ci_0 * T.int64(4) + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(16), T.int64(11)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(22) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(50) + ax0)
                                v1 = T.axis.spatial(T.int64(4), ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(22) // T.int64(11) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(50) // T.int64(25) * T.int64(16) + ax2)
                                v3 = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused % T.int64(11) * T.int64(275) + eps_1_nu_1_co_1_p_1_fused % T.int64(25) * T.int64(11) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1513), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3025) + ax0)
                                            v_p = T.axis.spatial(T.int64(3025), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3025) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1 < T.int64(193600))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3025))
                            v_h = T.axis.spatial(T.int64(109), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3025) // T.int64(55) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(109), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(55) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3025) // T.int64(55) * T.int64(2) + h_1 < T.int64(109) and (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(55) * T.int64(2) + w_1 < T.int64(109) and n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1 < T.int64(193600))
                            T.reads(inverse_local[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 4, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 2, 1, 4, 4])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[11, 25, 1, 1, 11])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[8, 4, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-04-29 01:54:28 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(109), T.int64(109)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(109), T.int64(109)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            input_tile_local = T.alloc_buffer((T.int64(32), T.int64(3025), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(3025)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(3025), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(3025)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(95), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025) + ax0)
                            v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                            T.reads(p0[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(55) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps and v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps < T.int64(110) and T.int64(1) <= v_p % T.int64(55) * T.int64(2) + v_nu and v_p % T.int64(55) * T.int64(2) + v_nu < T.int64(110), p0[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(55) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025))
                                        v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025) + ax2)
                            v3 = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025) + ax3)
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(44), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(100), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(8800)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(22) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(4400))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(4400) // T.int64(1100))
                                    v2 = T.axis.spatial(T.int64(32), ci_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(1100) // T.int64(275))
                                    v3 = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused % T.int64(11) * T.int64(275) + ax0_ax1_ax2_ax3_fused % T.int64(275))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(22) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(512))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(512) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(32), ci_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(128) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(22) // T.int64(11) * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(4), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(11)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(22) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(50) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(22) // T.int64(11) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(50) // T.int64(25) * T.int64(16) + co_3 * T.int64(4) + co_4)
                                    v_p = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused % T.int64(11) * T.int64(275) + eps_1_nu_1_co_1_p_1_fused % T.int64(25) * T.int64(11) + p_3 * T.int64(11) + p_4)
                                    v_ci = T.axis.reduce(T.int64(32), ci_0_fused * T.int64(4) + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(16), T.int64(11)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(22) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(50) + ax0)
                                v1 = T.axis.spatial(T.int64(4), ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(22) // T.int64(11) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(50) // T.int64(25) * T.int64(16) + ax2)
                                v3 = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused % T.int64(11) * T.int64(275) + eps_1_nu_1_co_1_p_1_fused % T.int64(25) * T.int64(11) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(6050), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(3025) + ax0)
                                            v_p = T.axis.spatial(T.int64(3025), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(3025) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(3025))
                            v_h = T.axis.spatial(T.int64(109), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(3025) // T.int64(55) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(109), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(55) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(3025) // T.int64(55) * T.int64(2) + h_1 < T.int64(109) and (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(55) * T.int64(2) + w_1 < T.int64(109))
                            T.reads(inverse_local[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 4, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 2, 1, 4, 4])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[11, 25, 1, 1, 11])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[8, 4, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-29 01:54:28 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(109), T.int64(109)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(109), T.int64(109)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(32), T.int64(3025), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(3025)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(3025), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(3025)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(95), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025) + ax0)
                            v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                            T.reads(p0[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(55) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps and v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps < T.int64(110) and T.int64(1) <= v_p % T.int64(55) * T.int64(2) + v_nu and v_p % T.int64(55) * T.int64(2) + v_nu < T.int64(110), p0[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(55) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025))
                                        v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025) + ax2)
                            v3 = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025) + ax3)
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(44), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(100), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(8800)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(22) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(4400))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(4400) // T.int64(1100))
                                    v2 = T.axis.spatial(T.int64(32), ci_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(1100) // T.int64(275))
                                    v3 = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused % T.int64(11) * T.int64(275) + ax0_ax1_ax2_ax3_fused % T.int64(275))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(22) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(512))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(512) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(32), ci_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(128) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(22) // T.int64(11) * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(4), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(11)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(22) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(50) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(22) // T.int64(11) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(50) // T.int64(25) * T.int64(16) + co_3 * T.int64(4) + co_4)
                                    v_p = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused % T.int64(11) * T.int64(275) + eps_1_nu_1_co_1_p_1_fused % T.int64(25) * T.int64(11) + p_3 * T.int64(11) + p_4)
                                    v_ci = T.axis.reduce(T.int64(32), ci_0_fused * T.int64(4) + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(16), T.int64(11)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(22) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(50) + ax0)
                                v1 = T.axis.spatial(T.int64(4), ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_0_nu_0_co_0_p_0_fused % T.int64(22) // T.int64(11) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(50) // T.int64(25) * T.int64(16) + ax2)
                                v3 = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused % T.int64(11) * T.int64(275) + eps_1_nu_1_co_1_p_1_fused % T.int64(25) * T.int64(11) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(3025), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3025) + ax0)
                                            v_p = T.axis.spatial(T.int64(3025), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3025) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3025))
                            v_h = T.axis.spatial(T.int64(109), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3025) // T.int64(55) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(109), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(55) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3025) // T.int64(55) * T.int64(2) + h_1 < T.int64(109) and (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(55) * T.int64(2) + w_1 < T.int64(109))
                            T.reads(inverse_local[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 4, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 2, 1, 4, 4])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[11, 25, 1, 1, 11])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[8, 4, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-29 03:19:26 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:19:26 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:19:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 494 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 03:19:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 994 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 03:19:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 1486 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 03:19:45 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-29 03:19:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 120 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 03:20:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 03:20:20 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 03:20:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 03:20:32 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9993  0.9991  0.9987  0.9980  0.9963  0.9961  0.9958  0.9955  0.9954  0.9947  0.9941  0.9922  0.9921  0.9918  0.9915
[17 : 32]:	0.9913  0.9912  0.9911  0.9907  0.9906  0.9899  0.9888  0.9876  0.9872  0.9867  0.9864  0.9862  0.9852  0.9849  0.9839  0.9810
[33 : 48]:	0.9809  0.9785  0.9773  0.9771  0.9763  0.9761  0.9759  0.9759  0.9758  0.9757  0.9755  0.9743  0.9734  0.9732  0.9731  0.9728
[49 : 64]:	0.9724  0.9719  0.9715  0.9702  0.9695  0.9678  0.9677  0.9677  0.9677  0.9675  0.9672  0.9665  0.9655  0.9627  0.9621  0.9614
2024-04-29 03:20:32 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:20:32 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #1: GFLOPs: 3142.3492. Time: 99.0599 us. Best GFLOPs: 3142.3492
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #2: GFLOPs: 1389.6353. Time: 224.0018 us. Best GFLOPs: 3142.3492
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #3: GFLOPs: 3536.5974. Time: 88.0170 us. Best GFLOPs: 3536.5974
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #4: GFLOPs: 3503.8682. Time: 88.8392 us. Best GFLOPs: 3536.5974
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #5: GFLOPs: 1063.1242. Time: 292.7981 us. Best GFLOPs: 3536.5974
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #6: GFLOPs: 3523.1445. Time: 88.3531 us. Best GFLOPs: 3536.5974
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #7: GFLOPs: 4418.0558. Time: 70.4565 us. Best GFLOPs: 4418.0558
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #8: GFLOPs: 5025.4877. Time: 61.9404 us. Best GFLOPs: 5025.4877
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #9: GFLOPs: 281.1302. Time: 1107.2478 us. Best GFLOPs: 5025.4877
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #10: GFLOPs: 2186.3674. Time: 142.3735 us. Best GFLOPs: 5025.4877
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #11: GFLOPs: 4301.0386. Time: 72.3734 us. Best GFLOPs: 5025.4877
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #12: GFLOPs: 108.2777. Time: 2874.8361 us. Best GFLOPs: 5025.4877
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #13: GFLOPs: 3503.7657. Time: 88.8418 us. Best GFLOPs: 5025.4877
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #14: GFLOPs: 7434.7932. Time: 41.8681 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #15: GFLOPs: 733.5324. Time: 424.3586 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #16: GFLOPs: 3913.1335. Time: 79.5477 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #17: GFLOPs: 625.2448. Time: 497.8542 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #18: GFLOPs: 3981.9434. Time: 78.1731 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #19: GFLOPs: 464.9086. Time: 669.5527 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #20: GFLOPs: 2754.5553. Time: 113.0058 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #21: GFLOPs: 4467.3885. Time: 69.6785 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #22: GFLOPs: 474.0424. Time: 656.6517 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #23: GFLOPs: 386.9525. Time: 804.4417 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #24: GFLOPs: 3516.0230. Time: 88.5321 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #25: GFLOPs: 1616.0909. Time: 192.6134 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #26: GFLOPs: 876.8913. Time: 354.9822 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #27: GFLOPs: 3206.3389. Time: 97.0829 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #28: GFLOPs: 189.6561. Time: 1641.2904 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #29: GFLOPs: 3004.2535. Time: 103.6134 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #30: GFLOPs: 2641.0576. Time: 117.8622 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #31: GFLOPs: 3056.9734. Time: 101.8265 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #32: GFLOPs: 137.5872. Time: 2262.4256 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #33: GFLOPs: 226.7722. Time: 1372.6582 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #34: GFLOPs: 1407.6097. Time: 221.1414 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #35: GFLOPs: 522.3270. Time: 595.9500 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #36: GFLOPs: 379.7332. Time: 819.7354 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #37: GFLOPs: 790.9246. Time: 393.5657 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #38: GFLOPs: 2458.6042. Time: 126.6087 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #39: GFLOPs: 2748.6849. Time: 113.2472 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #40: GFLOPs: 2639.2195. Time: 117.9443 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #41: GFLOPs: 3359.0510. Time: 92.6693 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #42: GFLOPs: 720.8476. Time: 431.8260 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #43: GFLOPs: 1397.6773. Time: 222.7129 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #44: GFLOPs: 2606.9923. Time: 119.4023 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #45: GFLOPs: 1317.4187. Time: 236.2808 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #46: GFLOPs: 4969.3117. Time: 62.6406 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #47: GFLOPs: 3933.6749. Time: 79.1323 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #48: GFLOPs: 4807.6917. Time: 64.7464 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #49: GFLOPs: 843.8386. Time: 368.8866 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #50: GFLOPs: 429.6351. Time: 724.5236 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #51: GFLOPs: 2008.1107. Time: 155.0118 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #52: GFLOPs: 186.4808. Time: 1669.2375 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #53: GFLOPs: 1403.4851. Time: 221.7913 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #54: GFLOPs: 4595.9284. Time: 67.7297 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #55: GFLOPs: 4890.5263. Time: 63.6497 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #56: GFLOPs: 873.0735. Time: 356.5345 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #57: GFLOPs: 2749.8575. Time: 113.1989 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #58: GFLOPs: 1398.5112. Time: 222.5801 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #59: GFLOPs: 773.5187. Time: 402.4218 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #60: GFLOPs: 1221.8191. Time: 254.7683 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #61: GFLOPs: 3848.7834. Time: 80.8777 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #62: GFLOPs: 1922.6127. Time: 161.9051 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #63: GFLOPs: 2021.6192. Time: 153.9760 us. Best GFLOPs: 7434.7932
2024-04-29 04:02:56 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #64: GFLOPs: 4053.5561. Time: 76.7920 us. Best GFLOPs: 7434.7932
2024-04-29 05:25:08 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 05:25:10 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-29 05:25:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 435 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 05:25:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 867 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 05:25:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 1303 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 05:25:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 1733 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 05:25:32 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2024-04-29 05:25:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 05:26:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 140 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 05:26:17 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 05:26:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 05:26:38 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.7538  2.7482  2.1145  2.0644  2.0272  1.9234  1.9213  1.9196  1.9076  1.9058  1.8154  1.7915  1.7025  1.6863  1.6728  1.6518
[17 : 32]:	1.5333  1.5184  1.5024  1.4894  1.4821  1.4805  1.4766  1.4334  1.4107  1.4065  1.4038  1.3996  1.3961  1.3889  1.3887  1.3794
[33 : 48]:	1.3732  1.3722  1.3709  1.3691  1.3690  1.3666  1.3666  1.3636  1.3601  1.3566  1.3560  1.3552  1.3483  1.3347  1.3336  1.3264
[49 : 64]:	1.3250  1.3250  1.3220  1.3128  1.3030  1.3028  1.2987  1.2960  1.2910  1.2871  1.2868  1.2839  1.2756  1.2743  1.2645  1.2643
2024-04-29 05:26:38 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 05:26:38 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #65: GFLOPs: 390.8175. Time: 796.4863 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #66: GFLOPs: 391.3372. Time: 795.4286 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #67: GFLOPs: 918.7566. Time: 338.8066 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #68: GFLOPs: 974.9046. Time: 319.2936 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #69: GFLOPs: 974.8638. Time: 319.3069 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #70: GFLOPs: 696.2732. Time: 447.0670 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #71: GFLOPs: 696.2654. Time: 447.0720 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #72: GFLOPs: 975.7556. Time: 319.0151 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #73: GFLOPs: 697.0209. Time: 446.5874 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #74: GFLOPs: 964.5964. Time: 322.7057 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #75: GFLOPs: 700.7789. Time: 444.1925 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #76: GFLOPs: 694.5954. Time: 448.1469 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #77: GFLOPs: 765.6821. Time: 406.5405 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #78: GFLOPs: 749.1503. Time: 415.5118 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #79: GFLOPs: 999.5187. Time: 311.4306 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #80: GFLOPs: 871.6287. Time: 357.1254 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #81: GFLOPs: 932.0070. Time: 333.9897 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #82: GFLOPs: 982.5207. Time: 316.8185 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #83: GFLOPs: 762.1923. Time: 408.4019 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #84: GFLOPs: 981.0251. Time: 317.3015 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #85: GFLOPs: 550.1290. Time: 565.8323 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #86: GFLOPs: 879.4711. Time: 353.9409 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #87: GFLOPs: 982.8140. Time: 316.7240 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #88: GFLOPs: 3834.8791. Time: 81.1709 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #89: GFLOPs: 975.1973. Time: 319.1977 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #90: GFLOPs: 3251.7718. Time: 95.7265 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #91: GFLOPs: 1020.9152. Time: 304.9037 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #92: GFLOPs: 2894.2247. Time: 107.5524 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #93: GFLOPs: 3015.6282. Time: 103.2225 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #94: GFLOPs: 867.9200. Time: 358.6515 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #95: GFLOPs: 1017.9301. Time: 305.7978 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #96: GFLOPs: 1019.1600. Time: 305.4288 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #97: GFLOPs: 976.4572. Time: 318.7859 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #98: GFLOPs: 4609.1394. Time: 67.5356 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #99: GFLOPs: 1021.0670. Time: 304.8583 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #100: GFLOPs: 545.7063. Time: 570.4181 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #101: GFLOPs: 975.2404. Time: 319.1836 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #102: GFLOPs: 1020.3303. Time: 305.0784 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #103: GFLOPs: 1020.9588. Time: 304.8906 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #104: GFLOPs: 3292.8588. Time: 94.5321 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #105: GFLOPs: 934.6505. Time: 333.0451 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #106: GFLOPs: 975.1019. Time: 319.2290 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #107: GFLOPs: 933.7699. Time: 333.3592 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #108: GFLOPs: 968.9133. Time: 321.2679 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #109: GFLOPs: 1027.5297. Time: 302.9409 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #110: GFLOPs: 923.0505. Time: 337.2305 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #111: GFLOPs: 710.6698. Time: 438.0104 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #112: GFLOPs: 3732.1250. Time: 83.4058 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #113: GFLOPs: 868.0263. Time: 358.6075 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:31 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #114: GFLOPs: 868.0097. Time: 358.6144 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:31 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #115: GFLOPs: 2553.0065. Time: 121.9271 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:31 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #116: GFLOPs: 3117.9354. Time: 99.8355 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:31 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #117: GFLOPs: 444.3059. Time: 700.6001 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:31 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #118: GFLOPs: 787.4110. Time: 395.3219 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:31 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #119: GFLOPs: 4410.7110. Time: 70.5738 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:31 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #120: GFLOPs: 737.2690. Time: 422.2078 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:31 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #121: GFLOPs: 868.3852. Time: 358.4593 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:31 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #122: GFLOPs: 695.2858. Time: 447.7019 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:31 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #123: GFLOPs: 913.5296. Time: 340.7451 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:31 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #124: GFLOPs: 2820.0510. Time: 110.3813 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:31 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #125: GFLOPs: 694.9467. Time: 447.9204 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:31 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #126: GFLOPs: 1558.1888. Time: 199.7709 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:31 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #127: GFLOPs: 2876.5114. Time: 108.2147 us. Best GFLOPs: 7434.7932
2024-04-29 05:28:31 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #128: GFLOPs: 62.7914. Time: 4957.3760 us. Best GFLOPs: 7434.7932
2024-04-29 06:49:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:49:35 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 06:49:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 397 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 06:49:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 798 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 06:49:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 1195 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 06:49:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 1593 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 06:50:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 1991 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 06:50:00 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2024-04-29 06:50:13 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 06:50:28 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 06:50:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 06:50:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 128 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 06:51:04 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.8342  1.7210  1.6432  1.6024  1.5815  1.5759  1.5710  1.5518  1.5369  1.5206  1.4903  1.4879  1.4876  1.4856  1.4849  1.4846
[17 : 32]:	1.4520  1.4476  1.4471  1.4415  1.4280  1.4264  1.4263  1.4198  1.4125  1.4006  1.3996  1.3990  1.3922  1.3831  1.3819  1.3637
[33 : 48]:	1.3615  1.3567  1.3556  1.3545  1.3544  1.3220  1.3191  1.3115  1.3101  1.3029  1.2963  1.2955  1.2914  1.2744  1.2736  1.2718
[49 : 64]:	1.2637  1.2635  1.2602  1.2591  1.2588  1.2523  1.2470  1.2438  1.2417  1.2386  1.2386  1.2372  1.2360  1.2207  1.2154  1.2104
2024-04-29 06:51:04 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:51:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:121] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #129: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(109), T.int64(109)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(109), T.int64(109)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(32), T.int64(3025), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(3025)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(3025), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(3025)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(1513), thread="blockIdx.x"):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(3025) + ax0)
                        v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(3025) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(96800))
                        T.reads(p0[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(55) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps and v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps < T.int64(110) and T.int64(1) <= v_p % T.int64(55) * T.int64(2) + v_nu and v_p % T.int64(55) * T.int64(2) + v_nu < T.int64(110), p0[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(55) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(3025))
                            v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(3025))
                            T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(96800))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(3025))
                                    v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(3025))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(96800))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(3025) + ax2)
                        v3 = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(3025) + ax3)
                        T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(96800))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(440), thread="blockIdx.x"):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(55), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(220) * T.int64(2) + eps_3_init * T.int64(2) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(220) // T.int64(55) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(32) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused % T.int64(55) * T.int64(55) + eps_2_nu_2_co_2_p_2_fused + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(2)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(55), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(220) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(55) + ax0_ax1_ax2_ax3_fused_1) // T.int64(880))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(220) // T.int64(55))
                                    v2 = T.axis.spatial(T.int64(32), ci_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(55) + ax0_ax1_ax2_ax3_fused_1) % T.int64(880) // T.int64(55))
                                    v3 = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused % T.int64(55) * T.int64(55) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(55) + ax0_ax1_ax2_ax3_fused_1) % T.int64(55))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(38)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(55), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(220) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(55) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1024))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(220) // T.int64(55))
                                    v2 = T.axis.spatial(T.int64(32), ci_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(55) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1024) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(55) + ax0_ax1_ax2_ax3_fused_1) % T.int64(64))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(55) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2048))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(220) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(220) // T.int64(55) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(32) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused % T.int64(55) * T.int64(55) + eps_2_nu_2_co_2_p_2_fused + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(32), ci_0 * T.int64(16) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(32), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(220) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(220) // T.int64(55) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(32) + ax2)
                            v3 = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused % T.int64(55) * T.int64(55) + eps_2_nu_2_co_2_p_2_fused + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(3025), thread="blockIdx.x"):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3025) + ax0)
                                v_p = T.axis.spatial(T.int64(3025), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3025) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3025) + ax0)
                                        v_p = T.axis.spatial(T.int64(3025), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3025) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3025))
                        v_h = T.axis.spatial(T.int64(109), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3025) // T.int64(55) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(109), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(55) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3025) // T.int64(55) * T.int64(2) + h_1 < T.int64(109) and (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(55) * T.int64(2) + w_1 < T.int64(109))
                        T.reads(inverse_local[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 2, 1, 32, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[55, 1, 55, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[2, 16, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136 = sch.split(loop=l134, factors=[None, 55], preserve_unit_iters=True)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b108)
l142, l143 = sch.split(loop=l141, factors=[None, 55], preserve_unit_iters=True)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177 = sch.get_loops(block=b148)
l178, l179, l180, l181, l182, l183 = sch.get_loops(block=b149)
l184, l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197 = sch.get_loops(block=b150)
l198, l199, l200, l201, l202, l203, l204 = sch.get_loops(block=b151)
l205, l206, l207, l208, l209, l210, l211, l212 = sch.get_loops(block=b152)
l213, l214, l215, l216 = sch.get_loops(block=b153)
b217 = sch.get_block(name="data_pack", func_name="main")
l218, l219, l220, l221, l222, l223 = sch.get_loops(block=b217)
b224 = sch.decompose_reduction(block=b217, loop=l222)
b225 = sch.get_block(name="bgemm", func_name="main")
l226, l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239 = sch.get_loops(block=b225)
b240 = sch.decompose_reduction(block=b225, loop=l229)
b241 = sch.get_block(name="inverse", func_name="main")
l242, l243, l244, l245, l246, l247, l248, l249 = sch.get_loops(block=b241)
b250 = sch.decompose_reduction(block=b241, loop=l248)
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #130: GFLOPs: 3509.3889. Time: 88.6994 us. Best GFLOPs: 7434.7932
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #131: GFLOPs: 7591.7487. Time: 41.0025 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #132: GFLOPs: 3869.7244. Time: 80.4400 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #133: GFLOPs: 3109.3603. Time: 100.1109 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #134: GFLOPs: 5890.9396. Time: 52.8406 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #135: GFLOPs: 4896.2133. Time: 63.5758 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #136: GFLOPs: 6279.3403. Time: 49.5722 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #137: GFLOPs: 6015.5629. Time: 51.7459 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #138: GFLOPs: 4465.9633. Time: 69.7007 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #139: GFLOPs: 6026.4256. Time: 51.6526 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #140: GFLOPs: 2283.1305. Time: 136.3395 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #141: GFLOPs: 5913.1968. Time: 52.6417 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #142: GFLOPs: 5493.4373. Time: 56.6641 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #143: GFLOPs: 6173.2125. Time: 50.4244 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #144: GFLOPs: 5918.9642. Time: 52.5904 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #145: GFLOPs: 5819.1702. Time: 53.4923 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #146: GFLOPs: 4072.4956. Time: 76.4349 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #147: GFLOPs: 4210.0777. Time: 73.9371 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #148: GFLOPs: 5607.4890. Time: 55.5116 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #149: GFLOPs: 4099.2739. Time: 75.9356 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #150: GFLOPs: 7146.5742. Time: 43.5566 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #151: GFLOPs: 5913.7164. Time: 52.6371 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #152: GFLOPs: 4095.0506. Time: 76.0139 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #153: GFLOPs: 4658.0080. Time: 66.8270 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #154: GFLOPs: 5746.2944. Time: 54.1707 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #155: GFLOPs: 3301.6594. Time: 94.2801 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #156: GFLOPs: 3193.0186. Time: 97.4879 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #157: GFLOPs: 1798.0845. Time: 173.1180 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #158: GFLOPs: 3110.6004. Time: 100.0710 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #159: GFLOPs: 3839.6920. Time: 81.0692 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #160: GFLOPs: 4838.9775. Time: 64.3278 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #161: GFLOPs: 4730.4285. Time: 65.8039 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #162: GFLOPs: 7196.5726. Time: 43.2540 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #163: GFLOPs: 6284.0110. Time: 49.5354 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #164: GFLOPs: 1040.3695. Time: 299.2021 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #165: GFLOPs: 6138.3874. Time: 50.7105 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #166: GFLOPs: 6963.8221. Time: 44.6997 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #167: GFLOPs: 3960.0210. Time: 78.6058 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #168: GFLOPs: 3974.3471. Time: 78.3225 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #169: GFLOPs: 6696.4850. Time: 46.4842 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #170: GFLOPs: 4078.4164. Time: 76.3239 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #171: GFLOPs: 4787.2119. Time: 65.0234 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #172: GFLOPs: 4666.1067. Time: 66.7110 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #173: GFLOPs: 4920.9760. Time: 63.2559 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #174: GFLOPs: 714.9154. Time: 435.4093 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #175: GFLOPs: 479.4595. Time: 649.2327 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #176: GFLOPs: 1191.5354. Time: 261.2434 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #177: GFLOPs: 713.1579. Time: 436.4822 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #178: GFLOPs: 4181.8305. Time: 74.4365 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #179: GFLOPs: 3371.9404. Time: 92.3150 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #180: GFLOPs: 731.5109. Time: 425.5313 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #181: GFLOPs: 4849.5054. Time: 64.1881 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #182: GFLOPs: 714.3164. Time: 435.7743 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #183: GFLOPs: 4866.7686. Time: 63.9605 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #184: GFLOPs: 4384.1558. Time: 71.0013 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #185: GFLOPs: 4038.6119. Time: 77.0762 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:121] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #186: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(109), T.int64(109)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(109), T.int64(109)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(32), T.int64(3025), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(3025)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(3025), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(3025)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(1513), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(3025) + ax0)
                        v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(3025) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(96800))
                        T.reads(p0[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(55) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps and v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps < T.int64(110) and T.int64(1) <= v_p % T.int64(55) * T.int64(2) + v_nu and v_p % T.int64(55) * T.int64(2) + v_nu < T.int64(110), p0[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(55) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(3025))
                            v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(3025))
                            T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(96800))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(3025))
                                    v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(3025))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(96800))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(3025) + ax2)
                        v3 = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(3025) + ax3)
                        T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(96800))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(55), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(55)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_3_init * T.int64(2) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused * T.int64(55) + p_3_init * T.int64(55) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(28)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(220))
                                    v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(220) // T.int64(55))
                                    v2 = T.axis.spatial(T.int64(32), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused * T.int64(55) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(55))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(880))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(256))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(32), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(55)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_3 * T.int64(2) + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused * T.int64(55) + p_3 * T.int64(55) + p_4)
                                v_ci = T.axis.reduce(T.int64(32), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(1), T.int64(4), T.int64(55)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused * T.int64(55) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(6050), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(3025) + ax0)
                                v_p = T.axis.spatial(T.int64(3025), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(3025) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(3025) + ax0)
                                        v_p = T.axis.spatial(T.int64(3025), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(3025) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(3025))
                        v_h = T.axis.spatial(T.int64(109), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(3025) // T.int64(55) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(109), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(55) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(3025) // T.int64(55) * T.int64(2) + h_1 < T.int64(109) and (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(55) * T.int64(2) + w_1 < T.int64(109))
                        T.reads(inverse_local[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 16, 4, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[55, 1, 1, 1, 55])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[32, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #187: GFLOPs: 731.6427. Time: 425.4546 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #188: GFLOPs: 3661.3232. Time: 85.0187 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #189: GFLOPs: 4072.6817. Time: 76.4314 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #190: GFLOPs: 138.3762. Time: 2249.5261 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #191: GFLOPs: 430.7927. Time: 722.5767 us. Best GFLOPs: 7591.7487
2024-04-29 06:53:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #192: GFLOPs: 5540.6019. Time: 56.1818 us. Best GFLOPs: 7591.7487
2024-04-29 07:57:20 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:57:24 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 07:57:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 396 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 07:57:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 792 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 07:57:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 1186 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 07:57:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 1584 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 07:57:44 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-04-29 07:57:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 115 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 07:58:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 07:58:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 07:58:44 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5215048)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3348598)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x7c55a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8770528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb49a888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb24e2b8)]: 80 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x7c55f28)]: 0 failure(s)
2024-04-29 07:58:49 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.7701  1.7672  1.7216  1.6645  1.6335  1.6217  1.6188  1.5819  1.5682  1.5653  1.5631  1.5631  1.5580  1.5465  1.4532  1.4261
[17 : 32]:	1.3594  1.3390  1.3195  1.3137  1.2898  1.2778  1.2595  1.2339  1.2220  1.2199  1.2073  1.1912  1.1890  1.1788  1.1469  1.1437
[33 : 48]:	1.1429  1.1406  1.1382  1.1329  1.1277  1.1255  1.1224  1.1181  1.1144  1.1107  1.0927  1.0901  1.0901  1.0849  1.0783  1.0774
[49 : 64]:	1.0741  1.0704  1.0638  1.0579  1.0537  1.0502  1.0482  1.0458  1.0422  1.0407  1.0385  1.0191  1.0189  1.0094  1.0011  0.9894
2024-04-29 07:58:49 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:58:49 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #193: GFLOPs: 4257.8013. Time: 73.1083 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #194: GFLOPs: 4611.2342. Time: 67.5049 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #195: GFLOPs: 4981.7846. Time: 62.4838 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #196: GFLOPs: 4847.3455. Time: 64.2167 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #197: GFLOPs: 3472.7560. Time: 89.6351 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #198: GFLOPs: 4492.9973. Time: 69.2813 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #199: GFLOPs: 3069.0805. Time: 101.4248 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #200: GFLOPs: 5000.5948. Time: 62.2487 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #201: GFLOPs: 4999.6747. Time: 62.2602 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #202: GFLOPs: 4425.3462. Time: 70.3404 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #203: GFLOPs: 4430.9647. Time: 70.2512 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #204: GFLOPs: 4428.9931. Time: 70.2825 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #205: GFLOPs: 4656.1561. Time: 66.8536 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #206: GFLOPs: 4426.5777. Time: 70.3209 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #207: GFLOPs: 4499.4412. Time: 69.1821 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #208: GFLOPs: 5335.2205. Time: 58.3445 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #209: GFLOPs: 4531.8431. Time: 68.6875 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #210: GFLOPs: 7452.4812. Time: 41.7687 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #211: GFLOPs: 4354.6566. Time: 71.4823 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #212: GFLOPs: 2964.7127. Time: 104.9953 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #213: GFLOPs: 2949.5950. Time: 105.5334 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #214: GFLOPs: 2990.4264. Time: 104.0924 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #215: GFLOPs: 5880.3091. Time: 52.9361 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #216: GFLOPs: 6751.7614. Time: 46.1036 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #217: GFLOPs: 4912.7203. Time: 63.3622 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #218: GFLOPs: 3930.2835. Time: 79.2006 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #219: GFLOPs: 4870.9749. Time: 63.9052 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #220: GFLOPs: 4845.2237. Time: 64.2449 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #221: GFLOPs: 3908.0915. Time: 79.6503 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #222: GFLOPs: 4958.9153. Time: 62.7719 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #223: GFLOPs: 3947.4251. Time: 78.8567 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #224: GFLOPs: 5809.4471. Time: 53.5818 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #225: GFLOPs: 3206.6976. Time: 97.0721 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #226: GFLOPs: 2904.1236. Time: 107.1858 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #227: GFLOPs: 4028.3511. Time: 77.2725 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #228: GFLOPs: 4377.2050. Time: 71.1140 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #229: GFLOPs: 4457.7690. Time: 69.8288 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #230: GFLOPs: 1252.4789. Time: 248.5317 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #231: GFLOPs: 2939.5647. Time: 105.8935 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #232: GFLOPs: 1609.1004. Time: 193.4502 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #233: GFLOPs: 2911.4620. Time: 106.9156 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #234: GFLOPs: 4401.4291. Time: 70.7227 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #235: GFLOPs: 2638.4556. Time: 117.9784 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #236: GFLOPs: 4345.2174. Time: 71.6376 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #237: GFLOPs: 4356.5024. Time: 71.4520 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #238: GFLOPs: 3080.9956. Time: 101.0325 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #239: GFLOPs: 901.3396. Time: 345.3535 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #240: GFLOPs: 2720.5114. Time: 114.4199 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #241: GFLOPs: 3134.5534. Time: 99.3063 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #242: GFLOPs: 1318.0255. Time: 236.1720 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #243: GFLOPs: 3961.9190. Time: 78.5682 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #244: GFLOPs: 2722.6806. Time: 114.3288 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #245: GFLOPs: 4890.4789. Time: 63.6504 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #246: GFLOPs: 3400.9268. Time: 91.5282 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #247: GFLOPs: 4063.6638. Time: 76.6010 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #248: GFLOPs: 4400.3643. Time: 70.7398 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #249: GFLOPs: 1488.5270. Time: 209.1200 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #250: GFLOPs: 3072.3441. Time: 101.3170 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #251: GFLOPs: 5622.7269. Time: 55.3612 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #252: GFLOPs: 4350.9069. Time: 71.5439 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #253: GFLOPs: 7235.9097. Time: 43.0189 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #254: GFLOPs: 1065.9221. Time: 292.0296 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #255: GFLOPs: 134.1445. Time: 2320.4879 us. Best GFLOPs: 7591.7487
2024-04-29 08:00:22 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #256: GFLOPs: 1763.3629. Time: 176.5268 us. Best GFLOPs: 7591.7487
2024-05-01 15:10:05 [INFO] [task_scheduler.cc:160] Initializing Task #47: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4"
2024-05-01 15:10:05 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(109), T.int64(109)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(109), T.int64(109)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(111), T.int64(111)))
        input_tile = T.alloc_buffer((T.int64(32), T.int64(3025), T.int64(4), T.int64(4)))
        B = T.alloc_buffer((T.int64(4), T.int64(4)))
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(3025)))
        A = T.alloc_buffer((T.int64(4), T.int64(2)))
        inverse = T.alloc_buffer((T.int64(64), T.int64(3025), T.int64(2), T.int64(2)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(109), T.int64(109)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(109), T.int64(109)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(32), T.int64(111), T.int64(111)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(110) and T.int64(1) <= v_i3 and v_i3 < T.int64(110), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(32), T.int64(3025), T.int64(4), T.int64(4)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps, v_p % T.int64(55) * T.int64(2) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps, v_p % T.int64(55) * T.int64(2) + v_nu]
        for i, j in T.grid(T.int64(4), T.int64(4)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(32), T.int64(3025), T.int64(4), T.int64(4)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(4), T.int64(4), T.int64(64), T.int64(3025), T.int64(32)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(4), T.int64(2)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(64), T.int64(3025), T.int64(2), T.int64(2), T.int64(4), T.int64(4)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(64), T.int64(109), T.int64(109)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(109), T.int64(109)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(109), T.int64(109)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-05-01 15:10:05 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-05-01 15:10:05 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(109), T.int64(109)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(109), T.int64(109)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(32), T.int64(3025), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(3025)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(3025), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(3025)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(95), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025) + ax0)
                            v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                            T.reads(p0[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(55) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps and v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps < T.int64(110) and T.int64(1) <= v_p % T.int64(55) * T.int64(2) + v_nu and v_p % T.int64(55) * T.int64(2) + v_nu < T.int64(110), p0[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(55) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025))
                                        v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025) + ax2)
                            v3 = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025) + ax3)
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(5), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(44), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(154880)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(38720))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(38720) // T.int64(9680))
                                    v2 = T.axis.spatial(T.int64(32), ci_0 * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(9680) // T.int64(605))
                                    v3 = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused * T.int64(605) + ax0_ax1_ax2_ax3_fused % T.int64(605))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(16384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(4096))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(4096) // T.int64(1024))
                                    v2 = T.axis.spatial(T.int64(32), ci_0 * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(1024) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(11), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(5)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(8) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), nu_3 * T.int64(4) + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(8) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused // T.int64(11) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused * T.int64(605) + eps_2_nu_2_co_2_p_2_fused % T.int64(11) * T.int64(55) + p_3 * T.int64(5) + p_4)
                                    v_ci = T.axis.reduce(T.int64(32), ci_0 * T.int64(16) + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(55)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(8) + ax0)
                                v1 = T.axis.spatial(T.int64(4), ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(8) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused // T.int64(11) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused * T.int64(605) + eps_2_nu_2_co_2_p_2_fused % T.int64(11) * T.int64(55) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(6050), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(3025) + ax0)
                                            v_p = T.axis.spatial(T.int64(3025), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(3025) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(3025))
                            v_h = T.axis.spatial(T.int64(109), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(3025) // T.int64(55) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(109), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(55) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(3025) // T.int64(55) * T.int64(2) + h_1 < T.int64(109) and (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(55) * T.int64(2) + w_1 < T.int64(109))
                            T.reads(inverse_local[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 4, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 4])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 8, 4, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[5, 1, 11, 11, 5])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[2, 16, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-05-01 15:10:05 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(109), T.int64(109)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(109), T.int64(109)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(32), T.int64(3025), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(3025)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(3025), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(3025)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(95), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025) + ax0)
                            v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                            T.reads(p0[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(55) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps and v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps < T.int64(110) and T.int64(1) <= v_p % T.int64(55) * T.int64(2) + v_nu and v_p % T.int64(55) * T.int64(2) + v_nu < T.int64(110), p0[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(55) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025))
                                        v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025) + ax2)
                            v3 = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025) + ax3)
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(5), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(44), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(154880)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(38720))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(38720) // T.int64(9680))
                                    v2 = T.axis.spatial(T.int64(32), ci_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(9680) // T.int64(605))
                                    v3 = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused * T.int64(605) + ax0_ax1_ax2_ax3_fused % T.int64(605))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(16384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(4096))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(4096) // T.int64(1024))
                                    v2 = T.axis.spatial(T.int64(32), ci_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(1024) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(11), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(5)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(8) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), nu_3 * T.int64(4) + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(8) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused // T.int64(11) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused * T.int64(605) + eps_2_nu_2_co_2_p_2_fused % T.int64(11) * T.int64(55) + p_3 * T.int64(5) + p_4)
                                    v_ci = T.axis.reduce(T.int64(32), ci_0_fused * T.int64(16) + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(55)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(8) + ax0)
                                v1 = T.axis.spatial(T.int64(4), ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(8) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused // T.int64(11) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused * T.int64(605) + eps_2_nu_2_co_2_p_2_fused % T.int64(11) * T.int64(55) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1513), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3025) + ax0)
                                            v_p = T.axis.spatial(T.int64(3025), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3025) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1 < T.int64(193600))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3025))
                            v_h = T.axis.spatial(T.int64(109), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3025) // T.int64(55) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(109), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(55) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3025) // T.int64(55) * T.int64(2) + h_1 < T.int64(109) and (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(55) * T.int64(2) + w_1 < T.int64(109) and n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1 < T.int64(193600))
                            T.reads(inverse_local[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 4, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 4])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 8, 4, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[5, 1, 11, 11, 5])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[2, 16, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-05-01 15:10:05 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(109), T.int64(109)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(109), T.int64(109)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            input_tile_local = T.alloc_buffer((T.int64(32), T.int64(3025), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(3025)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(3025), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(3025)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(95), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025) + ax0)
                            v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                            T.reads(p0[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(55) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps and v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps < T.int64(110) and T.int64(1) <= v_p % T.int64(55) * T.int64(2) + v_nu and v_p % T.int64(55) * T.int64(2) + v_nu < T.int64(110), p0[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(55) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025))
                                        v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025) + ax2)
                            v3 = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025) + ax3)
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(5), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(44), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(154880)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(38720))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(38720) // T.int64(9680))
                                    v2 = T.axis.spatial(T.int64(32), ci_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(9680) // T.int64(605))
                                    v3 = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused * T.int64(605) + ax0_ax1_ax2_ax3_fused % T.int64(605))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(16384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(4096))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(4096) // T.int64(1024))
                                    v2 = T.axis.spatial(T.int64(32), ci_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(1024) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(11), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(5)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(8) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), nu_3 * T.int64(4) + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(8) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused // T.int64(11) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused * T.int64(605) + eps_2_nu_2_co_2_p_2_fused % T.int64(11) * T.int64(55) + p_3 * T.int64(5) + p_4)
                                    v_ci = T.axis.reduce(T.int64(32), ci_0_fused * T.int64(16) + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(55)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(8) + ax0)
                                v1 = T.axis.spatial(T.int64(4), ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused % T.int64(8) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused // T.int64(11) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused * T.int64(605) + eps_2_nu_2_co_2_p_2_fused % T.int64(11) * T.int64(55) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1513), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3025) + ax0)
                                            v_p = T.axis.spatial(T.int64(3025), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3025) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1 < T.int64(193600))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3025))
                            v_h = T.axis.spatial(T.int64(109), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3025) // T.int64(55) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(109), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(55) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3025) // T.int64(55) * T.int64(2) + h_1 < T.int64(109) and (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(55) * T.int64(2) + w_1 < T.int64(109) and n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1 < T.int64(193600))
                            T.reads(inverse_local[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 4, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 4])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 8, 4, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[5, 1, 11, 11, 5])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[2, 16, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-05-01 16:11:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 16:11:30 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-05-01 16:11:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 395 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 16:11:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 797 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 16:11:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 1195 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 16:11:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 1585 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 16:11:50 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-05-01 16:12:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 16:12:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 16:12:24 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 116 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 16:12:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 16:12:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9993  0.9986  0.9980  0.9972  0.9971  0.9967  0.9967  0.9946  0.9910  0.9902  0.9901  0.9896  0.9893  0.9892  0.9891
[17 : 32]:	0.9889  0.9883  0.9882  0.9876  0.9871  0.9860  0.9858  0.9855  0.9853  0.9833  0.9833  0.9816  0.9806  0.9802  0.9800  0.9798
[33 : 48]:	0.9792  0.9791  0.9785  0.9785  0.9782  0.9779  0.9772  0.9769  0.9754  0.9750  0.9747  0.9744  0.9735  0.9726  0.9712  0.9711
[49 : 64]:	0.9706  0.9703  0.9698  0.9688  0.9685  0.9680  0.9677  0.9675  0.9675  0.9669  0.9665  0.9657  0.9650  0.9648  0.9648  0.9646
2024-05-01 16:12:36 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 16:12:36 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #1: GFLOPs: 4481.4891. Time: 69.4592 us. Best GFLOPs: 4481.4891
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #2: GFLOPs: 3817.4252. Time: 81.5421 us. Best GFLOPs: 4481.4891
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #3: GFLOPs: 5134.9762. Time: 60.6197 us. Best GFLOPs: 5134.9762
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #4: GFLOPs: 3819.4469. Time: 81.4989 us. Best GFLOPs: 5134.9762
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #5: GFLOPs: 2970.7244. Time: 104.7828 us. Best GFLOPs: 5134.9762
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #6: GFLOPs: 1525.1880. Time: 204.0934 us. Best GFLOPs: 5134.9762
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #7: GFLOPs: 1372.2568. Time: 226.8386 us. Best GFLOPs: 5134.9762
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #8: GFLOPs: 5911.3195. Time: 52.6584 us. Best GFLOPs: 5911.3195
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #9: GFLOPs: 2144.0392. Time: 145.1843 us. Best GFLOPs: 5911.3195
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #10: GFLOPs: 4148.1001. Time: 75.0418 us. Best GFLOPs: 5911.3195
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #11: GFLOPs: 5061.1006. Time: 61.5046 us. Best GFLOPs: 5911.3195
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #12: GFLOPs: 3226.8771. Time: 96.4650 us. Best GFLOPs: 5911.3195
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #13: GFLOPs: 4936.0749. Time: 63.0624 us. Best GFLOPs: 5911.3195
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #14: GFLOPs: 4155.9321. Time: 74.9003 us. Best GFLOPs: 5911.3195
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #15: GFLOPs: 1891.1887. Time: 164.5953 us. Best GFLOPs: 5911.3195
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:121] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #16: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(109), T.int64(109)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(109), T.int64(109)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(32), T.int64(3025), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(3025)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(3025), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(3025)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(3025)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(95), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025) + ax0)
                        v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                        T.reads(p0[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(55) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps and v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps < T.int64(110) and T.int64(1) <= v_p % T.int64(55) * T.int64(2) + v_nu and v_p % T.int64(55) * T.int64(2) + v_nu < T.int64(110), p0[v_p // T.int64(3025), v_ci, v_p % T.int64(3025) // T.int64(55) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(55) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025))
                            v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025))
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025))
                                    v_p = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(32), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(3025) + ax2)
                        v3 = T.axis.spatial(T.int64(3025), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(3025) + ax3)
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(96800))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(22), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(80), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(110), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_3_init * T.int64(2) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(11) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused // T.int64(5) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused // T.int64(55) * T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused % T.int64(11) * T.int64(275) + eps_1_nu_1_co_1_p_1_fused % T.int64(5) * T.int64(55) + eps_2_nu_2_co_2_p_2_fused % T.int64(55) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(8)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(80)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(110), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(110) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2200))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(11) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(110) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2200) // T.int64(1100))
                                    v2 = T.axis.spatial(T.int64(32), ci_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(110) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1100) // T.int64(275))
                                    v3 = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused % T.int64(11) * T.int64(275) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(110) + ax0_ax1_ax2_ax3_fused_1) % T.int64(275))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(110), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(110) + ax0_ax1_ax2_ax3_fused_1) // T.int64(512))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(11) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(110) + ax0_ax1_ax2_ax3_fused_1) % T.int64(512) // T.int64(256))
                                    v2 = T.axis.spatial(T.int64(32), ci_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(110) + ax0_ax1_ax2_ax3_fused_1) % T.int64(256) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(110) + ax0_ax1_ax2_ax3_fused_1) % T.int64(64))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(110) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2048))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(4), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_3 * T.int64(2) + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(11) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused // T.int64(5) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused // T.int64(55) * T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused % T.int64(11) * T.int64(275) + eps_1_nu_1_co_1_p_1_fused % T.int64(5) * T.int64(55) + eps_2_nu_2_co_2_p_2_fused % T.int64(55) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(32), ci_0 * T.int64(4) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(11) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused // T.int64(5) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused // T.int64(55) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(3025), eps_0_nu_0_co_0_p_0_fused % T.int64(11) * T.int64(275) + eps_1_nu_1_co_1_p_1_fused % T.int64(5) * T.int64(55) + eps_2_nu_2_co_2_p_2_fused % T.int64(55) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1513), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3025) + ax0)
                                v_p = T.axis.spatial(T.int64(3025), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3025) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1 < T.int64(193600))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3025) + ax0)
                                        v_p = T.axis.spatial(T.int64(3025), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3025) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1 < T.int64(193600))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3025))
                        v_h = T.axis.spatial(T.int64(109), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3025) // T.int64(55) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(109), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(55) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3025) // T.int64(55) * T.int64(2) + h_1 < T.int64(109) and (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(55) * T.int64(2) + w_1 < T.int64(109) and n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1 < T.int64(193600))
                        T.reads(inverse_local[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3025) + v_h // T.int64(2) * T.int64(55) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 16, 2, 2, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[11, 5, 55, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[8, 4, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136 = sch.split(loop=l134, factors=[None, 110], preserve_unit_iters=True)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b108)
l142, l143 = sch.split(loop=l141, factors=[None, 110], preserve_unit_iters=True)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
sch.annotate(block_or_loop=l160, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l160, ann_key="pragma_unroll_explicit", ann_val=1)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177 = sch.get_loops(block=b148)
l178, l179, l180, l181, l182, l183 = sch.get_loops(block=b149)
l184, l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197 = sch.get_loops(block=b150)
sch.annotate(block_or_loop=l184, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l184, ann_key="pragma_unroll_explicit", ann_val=1)
l198, l199, l200, l201, l202, l203, l204 = sch.get_loops(block=b151)
l205, l206, l207, l208, l209, l210, l211, l212 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l205, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l205, ann_key="pragma_unroll_explicit", ann_val=1)
l213, l214, l215, l216 = sch.get_loops(block=b153)
b217 = sch.get_block(name="data_pack", func_name="main")
l218, l219, l220, l221, l222, l223 = sch.get_loops(block=b217)
b224 = sch.decompose_reduction(block=b217, loop=l222)
b225 = sch.get_block(name="bgemm", func_name="main")
l226, l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239 = sch.get_loops(block=b225)
b240 = sch.decompose_reduction(block=b225, loop=l229)
b241 = sch.get_block(name="inverse", func_name="main")
l242, l243, l244, l245, l246, l247, l248, l249 = sch.get_loops(block=b241)
b250 = sch.decompose_reduction(block=b241, loop=l248)
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #17: GFLOPs: 4028.3334. Time: 77.2728 us. Best GFLOPs: 5911.3195
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #18: GFLOPs: 2888.9141. Time: 107.7501 us. Best GFLOPs: 5911.3195
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #19: GFLOPs: 6243.1434. Time: 49.8596 us. Best GFLOPs: 6243.1434
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #20: GFLOPs: 4236.2078. Time: 73.4810 us. Best GFLOPs: 6243.1434
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #21: GFLOPs: 6297.3879. Time: 49.4301 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #22: GFLOPs: 4473.2980. Time: 69.5864 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #23: GFLOPs: 127.5719. Time: 2440.0421 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #24: GFLOPs: 4968.0265. Time: 62.6568 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #25: GFLOPs: 3746.5660. Time: 83.0843 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #26: GFLOPs: 4541.7367. Time: 68.5378 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #27: GFLOPs: 2490.0357. Time: 125.0106 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #28: GFLOPs: 4573.8742. Time: 68.0563 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #29: GFLOPs: 4460.4390. Time: 69.7870 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #30: GFLOPs: 66.3328. Time: 4692.7129 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #31: GFLOPs: 3087.9229. Time: 100.8059 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #32: GFLOPs: 4094.7324. Time: 76.0198 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #33: GFLOPs: 5547.7205. Time: 56.1097 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #34: GFLOPs: 2225.0997. Time: 139.8952 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #35: GFLOPs: 4712.1762. Time: 66.0588 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #36: GFLOPs: 4908.4774. Time: 63.4170 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #37: GFLOPs: 4457.7304. Time: 69.8294 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #38: GFLOPs: 4765.0607. Time: 65.3257 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #39: GFLOPs: 5198.6287. Time: 59.8775 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #40: GFLOPs: 27.3216. Time: 11393.2289 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #41: GFLOPs: 5872.4422. Time: 53.0070 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #42: GFLOPs: 2459.0438. Time: 126.5861 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #43: GFLOPs: 5569.9014. Time: 55.8862 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #44: GFLOPs: 4225.5521. Time: 73.6663 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #45: GFLOPs: 4139.5608. Time: 75.1966 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #46: GFLOPs: 4440.0948. Time: 70.1068 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #47: GFLOPs: 4434.0984. Time: 70.2016 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #48: GFLOPs: 3613.1152. Time: 86.1530 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #49: GFLOPs: 4841.5293. Time: 64.2939 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #50: GFLOPs: 4985.9282. Time: 62.4319 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #51: GFLOPs: 5840.7059. Time: 53.2951 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #52: GFLOPs: 3832.8438. Time: 81.2140 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #53: GFLOPs: 713.6602. Time: 436.1750 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #54: GFLOPs: 4522.3945. Time: 68.8310 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #55: GFLOPs: 4061.8108. Time: 76.6360 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #56: GFLOPs: 4559.3609. Time: 68.2729 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #57: GFLOPs: 5906.2626. Time: 52.7035 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #58: GFLOPs: 84.9275. Time: 3665.2542 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #59: GFLOPs: 4284.6175. Time: 72.6508 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #60: GFLOPs: 411.3152. Time: 756.7937 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #61: GFLOPs: 393.2234. Time: 791.6131 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #62: GFLOPs: 2657.6880. Time: 117.1246 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #63: GFLOPs: 302.4789. Time: 1029.0991 us. Best GFLOPs: 6297.3879
2024-05-01 16:38:13 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #64: GFLOPs: 5700.1717. Time: 54.6090 us. Best GFLOPs: 6297.3879
2024-05-01 17:11:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 17:11:21 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-05-01 17:11:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 17:11:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 803 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 17:11:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 1203 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 17:11:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 1600 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 17:11:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 1998 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 17:11:45 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-05-01 17:11:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 135 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 17:12:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 17:12:26 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 17:12:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 17:12:45 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	3.1829  3.1635  2.5827  2.5661  2.5126  2.4254  2.3254  2.2989  2.2796  2.2667  2.2392  2.2392  2.2334  2.2093  2.2057  2.1957
[17 : 32]:	2.1945  2.1842  2.1751  2.1514  2.1507  2.1495  2.1491  2.1449  2.1365  2.1210  2.1202  2.1176  2.1152  2.1144  2.1144  2.1144
[33 : 48]:	2.1056  2.0998  2.0941  2.0922  2.0831  2.0707  2.0683  2.0675  2.0650  2.0629  2.0592  2.0577  2.0575  2.0503  2.0201  2.0194
[49 : 64]:	1.9958  1.9925  1.9848  1.9813  1.9778  1.9533  1.9478  1.9469  1.9342  1.9332  1.9332  1.9308  1.9225  1.9180  1.9143  1.9061
2024-05-01 17:12:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 17:12:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #65: GFLOPs: 7283.6637. Time: 42.7368 us. Best GFLOPs: 7283.6637
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #66: GFLOPs: 7281.6022. Time: 42.7489 us. Best GFLOPs: 7283.6637
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #67: GFLOPs: 7008.7354. Time: 44.4133 us. Best GFLOPs: 7283.6637
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #68: GFLOPs: 7288.7692. Time: 42.7069 us. Best GFLOPs: 7288.7692
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #69: GFLOPs: 7284.6466. Time: 42.7311 us. Best GFLOPs: 7288.7692
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #70: GFLOPs: 6846.0058. Time: 45.4690 us. Best GFLOPs: 7288.7692
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #71: GFLOPs: 7122.5930. Time: 43.7033 us. Best GFLOPs: 7288.7692
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #72: GFLOPs: 7129.3080. Time: 43.6621 us. Best GFLOPs: 7288.7692
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #73: GFLOPs: 7703.3093. Time: 40.4087 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #74: GFLOPs: 4993.8408. Time: 62.3329 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #75: GFLOPs: 7117.2153. Time: 43.7363 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #76: GFLOPs: 7116.5284. Time: 43.7405 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #77: GFLOPs: 7065.5329. Time: 44.0562 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #78: GFLOPs: 7012.4846. Time: 44.3895 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #79: GFLOPs: 7323.0350. Time: 42.5071 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #80: GFLOPs: 7089.2837. Time: 43.9086 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #81: GFLOPs: 6850.5452. Time: 45.4388 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #82: GFLOPs: 7078.0190. Time: 43.9785 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #83: GFLOPs: 6955.2060. Time: 44.7551 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #84: GFLOPs: 7105.5969. Time: 43.8078 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #85: GFLOPs: 7094.1506. Time: 43.8785 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #86: GFLOPs: 6860.4691. Time: 45.3731 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #87: GFLOPs: 5088.9253. Time: 61.1683 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #88: GFLOPs: 7121.1742. Time: 43.7120 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #89: GFLOPs: 7044.3373. Time: 44.1888 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #90: GFLOPs: 7107.7765. Time: 43.7944 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #91: GFLOPs: 7099.2039. Time: 43.8473 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #92: GFLOPs: 7520.6406. Time: 41.3902 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #93: GFLOPs: 7060.5532. Time: 44.0873 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #94: GFLOPs: 7109.8717. Time: 43.7815 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #95: GFLOPs: 7202.4988. Time: 43.2184 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #96: GFLOPs: 7202.0380. Time: 43.2212 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #97: GFLOPs: 7152.5912. Time: 43.5200 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #98: GFLOPs: 7201.4525. Time: 43.2247 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #99: GFLOPs: 6970.2097. Time: 44.6587 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #100: GFLOPs: 7221.0729. Time: 43.1073 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #101: GFLOPs: 7195.3773. Time: 43.2612 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #102: GFLOPs: 6665.2421. Time: 46.7021 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #103: GFLOPs: 7043.7741. Time: 44.1923 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #104: GFLOPs: 7186.7054. Time: 43.3134 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #105: GFLOPs: 6876.6971. Time: 45.2660 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #106: GFLOPs: 5270.7050. Time: 59.0587 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #107: GFLOPs: 7189.9904. Time: 43.2936 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #108: GFLOPs: 6380.8775. Time: 48.7834 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #109: GFLOPs: 6870.7370. Time: 45.3053 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #110: GFLOPs: 7146.9948. Time: 43.5541 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #111: GFLOPs: 5284.6155. Time: 58.9032 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #112: GFLOPs: 2559.9109. Time: 121.5983 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #113: GFLOPs: 7152.3415. Time: 43.5215 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #114: GFLOPs: 7145.2639. Time: 43.5646 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #115: GFLOPs: 5799.8286. Time: 53.6707 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #116: GFLOPs: 7222.1776. Time: 43.1007 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #117: GFLOPs: 6844.8153. Time: 45.4769 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #118: GFLOPs: 4549.3797. Time: 68.4227 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #119: GFLOPs: 7280.6206. Time: 42.7547 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #120: GFLOPs: 4449.1373. Time: 69.9643 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #121: GFLOPs: 4200.2790. Time: 74.1095 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #122: GFLOPs: 7253.2896. Time: 42.9158 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #123: GFLOPs: 7241.4064. Time: 42.9862 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #124: GFLOPs: 7237.5121. Time: 43.0094 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #125: GFLOPs: 6970.3423. Time: 44.6579 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #126: GFLOPs: 6015.5629. Time: 51.7459 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #127: GFLOPs: 1995.7069. Time: 155.9752 us. Best GFLOPs: 7703.3093
2024-05-01 17:14:30 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #128: GFLOPs: 17.1851. Time: 18113.3652 us. Best GFLOPs: 7703.3093
2024-05-01 18:34:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 18:34:39 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-05-01 18:34:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 400 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 18:34:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 802 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 18:34:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 1204 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 18:34:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 1599 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 18:35:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 1990 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 18:35:04 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2024-05-01 18:35:16 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 18:35:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 135 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 18:35:46 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 134 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 18:36:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a66c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x7c89988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb0320d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x56cfe68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x35fdde8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x86dd988)]: 151 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x86dd178)]: 0 failure(s)
2024-05-01 18:36:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.7949  2.6049  2.4590  2.4489  2.4481  2.4465  2.4463  2.4447  2.4319  2.4235  2.4218  2.4187  2.4171  2.4096  2.3512  2.3431
[17 : 32]:	2.3337  2.3306  2.3239  2.3234  2.3128  2.3121  2.3086  2.3051  2.3033  2.3013  2.2982  2.2906  2.2906  2.2905  2.2877  2.2859
[33 : 48]:	2.2843  2.2834  2.2830  2.2805  2.2801  2.2800  2.2785  2.2743  2.2697  2.2695  2.2693  2.2667  2.2649  2.2648  2.2645  2.2640
[49 : 64]:	2.2635  2.2623  2.2623  2.2617  2.2616  2.2585  2.2584  2.2579  2.2566  2.2561  2.2554  2.2550  2.2549  2.2547  2.2546  2.2538
2024-05-01 18:36:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 18:36:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #129: GFLOPs: 6374.1607. Time: 48.8348 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #130: GFLOPs: 6250.8029. Time: 49.7985 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #131: GFLOPs: 3711.6267. Time: 83.8664 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #132: GFLOPs: 6387.1556. Time: 48.7354 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #133: GFLOPs: 6264.0241. Time: 49.6934 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #134: GFLOPs: 6401.9440. Time: 48.6229 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #135: GFLOPs: 6184.0622. Time: 50.3360 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #136: GFLOPs: 6333.5275. Time: 49.1481 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #137: GFLOPs: 6263.8161. Time: 49.6951 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #138: GFLOPs: 6289.4400. Time: 49.4926 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #139: GFLOPs: 2452.2445. Time: 126.9371 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #140: GFLOPs: 5309.7836. Time: 58.6240 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #141: GFLOPs: 2452.6605. Time: 126.9156 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #142: GFLOPs: 6323.6250. Time: 49.2251 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #143: GFLOPs: 1625.0814. Time: 191.5478 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #144: GFLOPs: 6285.6722. Time: 49.5223 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #145: GFLOPs: 6289.5370. Time: 49.4918 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #146: GFLOPs: 6130.0707. Time: 50.7793 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #147: GFLOPs: 6569.0995. Time: 47.3856 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #148: GFLOPs: 6621.9238. Time: 47.0076 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #149: GFLOPs: 3651.2002. Time: 85.2544 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #150: GFLOPs: 2475.6951. Time: 125.7347 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #151: GFLOPs: 6301.0511. Time: 49.4014 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #152: GFLOPs: 6247.3798. Time: 49.8258 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #153: GFLOPs: 6286.5356. Time: 49.5155 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #154: GFLOPs: 6146.5542. Time: 50.6431 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #155: GFLOPs: 6413.3609. Time: 48.5363 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #156: GFLOPs: 4453.9068. Time: 69.8894 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #157: GFLOPs: 4454.3685. Time: 69.8821 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #158: GFLOPs: 6384.7191. Time: 48.7540 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #159: GFLOPs: 4299.2446. Time: 72.4036 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #160: GFLOPs: 4302.3578. Time: 72.3512 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #161: GFLOPs: 6440.3034. Time: 48.3332 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #162: GFLOPs: 2755.2899. Time: 112.9757 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #163: GFLOPs: 5592.7150. Time: 55.6583 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #164: GFLOPs: 6089.5577. Time: 51.1171 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #165: GFLOPs: 5990.5840. Time: 51.9617 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #166: GFLOPs: 6040.3213. Time: 51.5338 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #167: GFLOPs: 4665.4061. Time: 66.7210 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #168: GFLOPs: 5631.7289. Time: 55.2727 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #169: GFLOPs: 5538.6341. Time: 56.2017 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #170: GFLOPs: 5946.3444. Time: 52.3483 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #171: GFLOPs: 6332.3373. Time: 49.1573 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #172: GFLOPs: 5228.4945. Time: 59.5354 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #173: GFLOPs: 4764.8546. Time: 65.3285 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #174: GFLOPs: 4337.1434. Time: 71.7709 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #175: GFLOPs: 5989.5567. Time: 51.9706 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #176: GFLOPs: 6272.3748. Time: 49.6273 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #177: GFLOPs: 4300.0982. Time: 72.3892 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #178: GFLOPs: 4420.8541. Time: 70.4119 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #179: GFLOPs: 4421.3698. Time: 70.4037 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #180: GFLOPs: 6067.4469. Time: 51.3034 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #181: GFLOPs: 6121.5718. Time: 50.8498 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #182: GFLOPs: 6095.7283. Time: 51.0654 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #183: GFLOPs: 5972.2777. Time: 52.1209 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #184: GFLOPs: 3292.1361. Time: 94.5528 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #185: GFLOPs: 6032.4848. Time: 51.6008 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #186: GFLOPs: 5276.6965. Time: 58.9916 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #187: GFLOPs: 6101.9266. Time: 51.0135 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #188: GFLOPs: 6085.2960. Time: 51.1529 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #189: GFLOPs: 6526.1705. Time: 47.6973 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #190: GFLOPs: 864.6023. Time: 360.0277 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #191: GFLOPs: 3622.1465. Time: 85.9382 us. Best GFLOPs: 7703.3093
2024-05-01 18:37:26 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_4] Trial #192: GFLOPs: 764.0204. Time: 407.4247 us. Best GFLOPs: 7703.3093
