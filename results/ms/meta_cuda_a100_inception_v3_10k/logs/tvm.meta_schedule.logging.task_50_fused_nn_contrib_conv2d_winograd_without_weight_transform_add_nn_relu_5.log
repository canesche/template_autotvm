2024-04-29 01:54:29 [INFO] [task_scheduler.cc:160] Initializing Task #50: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5"
2024-04-29 01:54:29 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)))
        input_tile = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)))
        B = T.alloc_buffer((T.int64(4), T.int64(4)))
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
        A = T.alloc_buffer((T.int64(4), T.int64(2)))
        inverse = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(80), T.int64(54), T.int64(54)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for ci, p, eps, nu in T.grid(T.int64(80), T.int64(676), T.int64(4), T.int64(4)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
        for i, j in T.grid(T.int64(4), T.int64(4)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(80), T.int64(676), T.int64(4), T.int64(4)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(4), T.int64(4), T.int64(192), T.int64(676), T.int64(80)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(4), T.int64(2)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(192), T.int64(676), T.int64(2), T.int64(2), T.int64(4), T.int64(4)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(192), T.int64(52), T.int64(52)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(52), T.int64(52)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(52), T.int64(52)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 01:54:29 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 01:54:29 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
            inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(212), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(676) + ax0)
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(676) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(54080))
                            T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(676))
                                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(676))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(54080))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(676) + ax2)
                            v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(676) + ax3)
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(54080))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(104), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(108160)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(27040))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(27040) // T.int64(13520))
                                    v2 = T.axis.spatial(T.int64(80), ci_0 * T.int64(20) + ax0_ax1_ax2_ax3_fused % T.int64(13520) // T.int64(676))
                                    v3 = T.axis.spatial(T.int64(676), ax0_ax1_ax2_ax3_fused % T.int64(676))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(15360)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(3840))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(3840) // T.int64(1920))
                                    v2 = T.axis.spatial(T.int64(80), ci_0 * T.int64(20) + ax0_ax1_ax2_ax3_fused % T.int64(1920) // T.int64(96))
                                    v3 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(10), T.int64(2), T.int64(1), T.int64(3), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(26) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(96) + eps_1_nu_1_co_1_p_1_fused // T.int64(26) * T.int64(24) + co_3 * T.int64(3) + co_4)
                                    v_p = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(26) * T.int64(26) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(80), ci_0 * T.int64(20) + ci_1 * T.int64(10) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(24), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(26) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(96) + eps_1_nu_1_co_1_p_1_fused // T.int64(26) * T.int64(24) + ax2)
                                v3 = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(26) * T.int64(26) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1014), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                            v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(676))
                            v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 4, 1, 8, 3])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 26, 26, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[4, 2, 10])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-04-29 01:54:29 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
            inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(212), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(676) + ax0)
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(676) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(54080))
                            T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(676))
                                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(676))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(54080))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(676) + ax2)
                            v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(676) + ax3)
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(54080))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(104), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(108160)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(27040))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(27040) // T.int64(13520))
                                    v2 = T.axis.spatial(T.int64(80), ci_0_fused * T.int64(20) + ax0_ax1_ax2_ax3_fused % T.int64(13520) // T.int64(676))
                                    v3 = T.axis.spatial(T.int64(676), ax0_ax1_ax2_ax3_fused % T.int64(676))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(15360)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(3840))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(3840) // T.int64(1920))
                                    v2 = T.axis.spatial(T.int64(80), ci_0_fused * T.int64(20) + ax0_ax1_ax2_ax3_fused % T.int64(1920) // T.int64(96))
                                    v3 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(10), T.int64(2), T.int64(1), T.int64(3), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(26) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(96) + eps_1_nu_1_co_1_p_1_fused // T.int64(26) * T.int64(24) + co_3 * T.int64(3) + co_4)
                                    v_p = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(26) * T.int64(26) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(80), ci_0_fused * T.int64(20) + ci_1 * T.int64(10) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(24), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(26) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(96) + eps_1_nu_1_co_1_p_1_fused // T.int64(26) * T.int64(24) + ax2)
                                v3 = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(26) * T.int64(26) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(254), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                            v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(129792))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(676))
                            v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                            T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(129792))
                            T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 4, 1, 8, 3])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 26, 26, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[4, 2, 10])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-29 01:54:29 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
            inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(212), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(676) + ax0)
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(676) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(54080))
                            T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(676))
                                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(676))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(54080))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(676) + ax2)
                            v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(676) + ax3)
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(54080))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(104), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(108160)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(27040))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(27040) // T.int64(13520))
                                    v2 = T.axis.spatial(T.int64(80), ci_0_fused * T.int64(20) + ax0_ax1_ax2_ax3_fused % T.int64(13520) // T.int64(676))
                                    v3 = T.axis.spatial(T.int64(676), ax0_ax1_ax2_ax3_fused % T.int64(676))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(15360)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(3840))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(3840) // T.int64(1920))
                                    v2 = T.axis.spatial(T.int64(80), ci_0_fused * T.int64(20) + ax0_ax1_ax2_ax3_fused % T.int64(1920) // T.int64(96))
                                    v3 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(10), T.int64(2), T.int64(1), T.int64(3), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(26) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(96) + eps_1_nu_1_co_1_p_1_fused // T.int64(26) * T.int64(24) + co_3 * T.int64(3) + co_4)
                                    v_p = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(26) * T.int64(26) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(80), ci_0_fused * T.int64(20) + ci_1 * T.int64(10) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(24), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(26) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(96) + eps_1_nu_1_co_1_p_1_fused // T.int64(26) * T.int64(24) + ax2)
                                v3 = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(26) * T.int64(26) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(254), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                            v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(129792))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(676))
                            v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                            T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(129792))
                            T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 4, 1, 8, 3])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 26, 26, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[4, 2, 10])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-29 03:28:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:28:41 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:28:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 504 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 03:28:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 999 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 03:28:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 1499 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 03:29:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 1997 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 03:29:00 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-29 03:29:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 148 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 03:29:17 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 03:29:26 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 149 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 03:29:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 142 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 03:29:35 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9990  0.9990  0.9966  0.9965  0.9936  0.9928  0.9928  0.9921  0.9921  0.9918  0.9916  0.9915  0.9913  0.9892  0.9886
[17 : 32]:	0.9885  0.9884  0.9884  0.9883  0.9876  0.9874  0.9871  0.9868  0.9864  0.9859  0.9850  0.9844  0.9833  0.9829  0.9828  0.9826
[33 : 48]:	0.9824  0.9817  0.9814  0.9814  0.9813  0.9813  0.9812  0.9806  0.9801  0.9790  0.9783  0.9772  0.9767  0.9766  0.9764  0.9753
[49 : 64]:	0.9734  0.9731  0.9728  0.9722  0.9721  0.9712  0.9706  0.9702  0.9701  0.9689  0.9677  0.9668  0.9652  0.9651  0.9644  0.9641
2024-04-29 03:29:35 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:29:35 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #1: GFLOPs: 2479.4414. Time: 161.2296 us. Best GFLOPs: 2479.4414
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #2: GFLOPs: 402.4041. Time: 993.4277 us. Best GFLOPs: 2479.4414
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:121] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #3: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
        inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(845), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(676) + ax0)
                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(676) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(676))
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(676))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(676))
                                    v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(676))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(676) + ax2)
                        v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(676) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(26), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(104), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(52) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(48) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused % T.int64(52) // T.int64(26) * T.int64(96) + eps_2_nu_2_co_2_p_2_fused % T.int64(48) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(52) + eps_1_nu_1_co_1_p_1_fused % T.int64(26) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(80), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1) // T.int64(104))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1) % T.int64(104) // T.int64(52))
                                    v2 = T.axis.spatial(T.int64(80), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(52) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1) % T.int64(52))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 < T.int64(416))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(192))
                                        v2 = T.axis.spatial(T.int64(80), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(192), (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(192))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(52) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(48) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused % T.int64(52) // T.int64(26) * T.int64(96) + eps_2_nu_2_co_2_p_2_fused % T.int64(48) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(52) + eps_1_nu_1_co_1_p_1_fused % T.int64(26) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(80), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(52) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(48) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(13) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused % T.int64(52) // T.int64(26) * T.int64(96) + eps_2_nu_2_co_2_p_2_fused % T.int64(48) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(52) + eps_1_nu_1_co_1_p_1_fused % T.int64(26) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(4056), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                        v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(676))
                        v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 2, 48, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[13, 26, 1, 1, 2])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[80, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 96], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 96, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #4: GFLOPs: 4189.0788. Time: 95.4289 us. Best GFLOPs: 4189.0788
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #5: GFLOPs: 829.2594. Time: 482.0679 us. Best GFLOPs: 4189.0788
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #6: GFLOPs: 4667.9561. Time: 85.6391 us. Best GFLOPs: 4667.9561
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #7: GFLOPs: 2820.5901. Time: 141.7290 us. Best GFLOPs: 4667.9561
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #8: GFLOPs: 454.9721. Time: 878.6459 us. Best GFLOPs: 4667.9561
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #9: GFLOPs: 1335.1231. Time: 299.4176 us. Best GFLOPs: 4667.9561
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #10: GFLOPs: 825.5138. Time: 484.2552 us. Best GFLOPs: 4667.9561
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #11: GFLOPs: 830.3848. Time: 481.4146 us. Best GFLOPs: 4667.9561
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #12: GFLOPs: 2790.5564. Time: 143.2544 us. Best GFLOPs: 4667.9561
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #13: GFLOPs: 14.9419. Time: 26754.3047 us. Best GFLOPs: 4667.9561
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #14: GFLOPs: 6175.8653. Time: 64.7293 us. Best GFLOPs: 6175.8653
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #15: GFLOPs: 5404.1889. Time: 73.9721 us. Best GFLOPs: 6175.8653
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #16: GFLOPs: 2605.8875. Time: 153.4062 us. Best GFLOPs: 6175.8653
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #17: GFLOPs: 32.8031. Time: 12186.6242 us. Best GFLOPs: 6175.8653
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #18: GFLOPs: 4602.4639. Time: 86.8577 us. Best GFLOPs: 6175.8653
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #19: GFLOPs: 5584.4481. Time: 71.5844 us. Best GFLOPs: 6175.8653
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #20: GFLOPs: 773.0691. Time: 517.1069 us. Best GFLOPs: 6175.8653
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #21: GFLOPs: 1479.4658. Time: 270.2052 us. Best GFLOPs: 6175.8653
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #22: GFLOPs: 5289.2582. Time: 75.5795 us. Best GFLOPs: 6175.8653
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #23: GFLOPs: 804.6813. Time: 496.7922 us. Best GFLOPs: 6175.8653
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #24: GFLOPs: 4956.9589. Time: 80.6461 us. Best GFLOPs: 6175.8653
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #25: GFLOPs: 4899.4490. Time: 81.5927 us. Best GFLOPs: 6175.8653
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #26: GFLOPs: 5239.2267. Time: 76.3012 us. Best GFLOPs: 6175.8653
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #27: GFLOPs: 2546.2821. Time: 156.9973 us. Best GFLOPs: 6175.8653
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:121] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #28: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
        inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(106), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(676) + ax0)
                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(676) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(54080))
                        T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(676))
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(676))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(54080))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(676))
                                    v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(676))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(54080))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(676) + ax2)
                        v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(676) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(54080))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(52)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(26) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(48) + eps_1_nu_1_co_1_p_1_fused * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) * T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(676), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(52) + p_3_init * T.int64(52) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(40)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(52)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2704))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2704) // T.int64(1352))
                                        v2 = T.axis.spatial(T.int64(80), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1352) // T.int64(676))
                                        v3 = T.axis.spatial(T.int64(676), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(676))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(104) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(192))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(104) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(192) // T.int64(96))
                                        v2 = T.axis.spatial(T.int64(80), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(104) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96) // T.int64(48))
                                        v3 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(48) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(104) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(48))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(768))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(52)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(26) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(48) + eps_1_nu_1_co_1_p_1_fused * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) * T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(676), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(52) + p_3 * T.int64(52) + p_4)
                                v_ci = T.axis.reduce(T.int64(80), ci_0 * T.int64(2) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(4), T.int64(52)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(26) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(48) + eps_1_nu_1_co_1_p_1_fused * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(676), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(52) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(2028), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                        v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(676))
                        v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 2, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 6, 2, 4, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 13, 1, 52])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[40, 2, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 52, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 52, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #29: GFLOPs: 4723.6955. Time: 84.6285 us. Best GFLOPs: 6175.8653
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #30: GFLOPs: 6750.8871. Time: 59.2158 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #31: GFLOPs: 4149.6874. Time: 96.3348 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #32: GFLOPs: 645.5395. Time: 619.2640 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #33: GFLOPs: 4473.9638. Time: 89.3524 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #34: GFLOPs: 2672.4974. Time: 149.5827 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:121] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #35: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
        inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(212), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(676) + ax0)
                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(676) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(54080))
                        T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(676))
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(676))
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(54080))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(676))
                                    v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(676))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(54080))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(676) + ax2)
                        v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(676) + ax3)
                        T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(54080))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(104), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(26)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(16) * T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(26) * T.int64(96) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(3) + co_3_init * T.int64(3) + co_4_init)
                            v_p = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(26) * T.int64(26) + p_3_init * T.int64(26) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(40), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(13)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(208))
                                    v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(208) // T.int64(52))
                                    v2 = T.axis.spatial(T.int64(80), ci_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(52) // T.int64(26))
                                    v3 = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(26) * T.int64(26) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(26))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(48)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(768))
                                    v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(768) // T.int64(192))
                                    v2 = T.axis.spatial(T.int64(80), ci_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(192) // T.int64(96))
                                    v3 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(26) * T.int64(96) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(96))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(26)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(16) * T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(26) * T.int64(96) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(3) + co_3 * T.int64(3) + co_4)
                                v_p = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(26) * T.int64(26) + p_3 * T.int64(26) + p_4)
                                v_ci = T.axis.reduce(T.int64(80), ci_0_fused * T.int64(2) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(3), T.int64(26)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(16) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(26) * T.int64(96) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(3) + ax2)
                            v3 = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(26) * T.int64(26) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(254), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(129792))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                        v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(129792))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(676))
                        v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                        T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(129792))
                        T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 2, 2, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 2, 16, 1, 3])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[26, 1, 1, 1, 26])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[40, 1, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144 = sch.split(loop=l142, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b150)
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l185, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l185, ann_key="pragma_unroll_explicit", ann_val=1)
l199, l200, l201, l202, l203, l204, l205 = sch.get_loops(block=b152)
l206, l207, l208, l209, l210, l211, l212, l213 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l206, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l206, ann_key="pragma_unroll_explicit", ann_val=1)
l214, l215, l216, l217 = sch.get_loops(block=b154)
b218 = sch.get_block(name="data_pack", func_name="main")
l219, l220, l221, l222, l223, l224 = sch.get_loops(block=b218)
b225 = sch.decompose_reduction(block=b218, loop=l223)
b226 = sch.get_block(name="bgemm", func_name="main")
l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240 = sch.get_loops(block=b226)
b241 = sch.decompose_reduction(block=b226, loop=l230)
b242 = sch.get_block(name="inverse", func_name="main")
l243, l244, l245, l246, l247, l248, l249, l250 = sch.get_loops(block=b242)
b251 = sch.decompose_reduction(block=b242, loop=l249)
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #36: GFLOPs: 1016.7960. Time: 393.1559 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #37: GFLOPs: 4739.9260. Time: 84.3387 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #38: GFLOPs: 3290.4650. Time: 121.4902 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #39: GFLOPs: 4111.0687. Time: 97.2398 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #40: GFLOPs: 2236.0193. Time: 178.7817 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #41: GFLOPs: 1852.7625. Time: 215.7640 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:121] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #42: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
        inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(423), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(676) + ax0)
                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(676) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(54080))
                        T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(676))
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(676))
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(54080))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(676))
                                    v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(676))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(54080))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(676) + ax2)
                        v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(676) + ax3)
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(54080))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(104), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(13), T.int64(1), T.int64(1), T.int64(3), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(16) * T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(26) * T.int64(96) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(3) + co_3_init * T.int64(3) + co_4_init)
                            v_p = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(26) * T.int64(26) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(40), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(13)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(208))
                                    v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(208) // T.int64(52))
                                    v2 = T.axis.spatial(T.int64(80), ci_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(52) // T.int64(26))
                                    v3 = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(26) * T.int64(26) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(26))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(48)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(768))
                                    v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(768) // T.int64(192))
                                    v2 = T.axis.spatial(T.int64(80), ci_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(192) // T.int64(96))
                                    v3 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(26) * T.int64(96) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(96))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(13), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(16) * T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(26) * T.int64(96) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(3) + co_3 * T.int64(3) + co_4)
                                v_p = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(26) * T.int64(26) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(80), ci_0_fused * T.int64(2) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(3), T.int64(26)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(16) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(26) * T.int64(96) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(3) + ax2)
                            v3 = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(26) * T.int64(26) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(254), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(129792))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                        v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(129792))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(676))
                        v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                        T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(129792))
                        T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 2, 2, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 2, 16, 1, 3])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[26, 1, 1, 13, 2])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[40, 1, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144 = sch.split(loop=l142, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b150)
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l185, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l185, ann_key="pragma_unroll_explicit", ann_val=1)
l199, l200, l201, l202, l203, l204, l205 = sch.get_loops(block=b152)
l206, l207, l208, l209, l210, l211, l212, l213 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l206, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l206, ann_key="pragma_unroll_explicit", ann_val=1)
l214, l215, l216, l217 = sch.get_loops(block=b154)
b218 = sch.get_block(name="data_pack", func_name="main")
l219, l220, l221, l222, l223, l224 = sch.get_loops(block=b218)
b225 = sch.decompose_reduction(block=b218, loop=l223)
b226 = sch.get_block(name="bgemm", func_name="main")
l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240 = sch.get_loops(block=b226)
b241 = sch.decompose_reduction(block=b226, loop=l230)
b242 = sch.get_block(name="inverse", func_name="main")
l243, l244, l245, l246, l247, l248, l249, l250 = sch.get_loops(block=b242)
b251 = sch.decompose_reduction(block=b242, loop=l249)
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #43: GFLOPs: 4147.4059. Time: 96.3878 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #44: GFLOPs: 6.5498. Time: 61033.8133 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #45: GFLOPs: 190.1868. Time: 2101.9306 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #46: GFLOPs: 2050.8554. Time: 194.9232 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #47: GFLOPs: 1160.7358. Time: 344.4017 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #48: GFLOPs: 63.2168. Time: 6323.6218 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #49: GFLOPs: 2235.3692. Time: 178.8337 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #50: GFLOPs: 829.4885. Time: 481.9348 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #51: GFLOPs: 194.6132. Time: 2054.1231 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #52: GFLOPs: 106.0010. Time: 3771.2781 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #53: GFLOPs: 252.2943. Time: 1584.4960 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:121] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #54: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
        inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(212), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(676) + ax0)
                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(676) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(54080))
                        T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(676))
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(676))
                            T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(54080))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(676))
                                    v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(676))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(54080))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(676) + ax2)
                        v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(676) + ax3)
                        T.where(ci_p_fused_0 * T.int64(256) + ci_p_fused_1 < T.int64(54080))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(24), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(13), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(6) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), nu_3_init * T.int64(4) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(64) + eps_1_nu_1_co_1_p_1_fused * T.int64(8) + eps_2_nu_2_co_2_p_2_fused // T.int64(26) * T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) * T.int64(13) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(80), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(26)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(6))
                                    v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) // T.int64(338))
                                    v2 = T.axis.spatial(T.int64(80), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(338) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) % T.int64(338))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(6))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(80), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(64) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(256))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(13), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(6) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), nu_3 * T.int64(4) + nu_4)
                                v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(64) + eps_1_nu_1_co_1_p_1_fused * T.int64(8) + eps_2_nu_2_co_2_p_2_fused // T.int64(26) * T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) * T.int64(13) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(80), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(13)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(6) + ax0)
                            v1 = T.axis.spatial(T.int64(4), ax1)
                            v2 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(6) // T.int64(2) * T.int64(64) + eps_1_nu_1_co_1_p_1_fused * T.int64(8) + eps_2_nu_2_co_2_p_2_fused // T.int64(26) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) * T.int64(13) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(4056), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                        v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(676))
                        v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 4])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[3, 8, 2, 4, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 26, 13, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[80, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 52], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 52, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #55: GFLOPs: 6502.2524. Time: 61.4801 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #56: GFLOPs: 3199.8245. Time: 124.9317 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #57: GFLOPs: 2207.6931. Time: 181.0756 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #58: GFLOPs: 3342.0564. Time: 119.6148 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #59: GFLOPs: 123.1061. Time: 3247.2747 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #60: GFLOPs: 3085.5729. Time: 129.5576 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #61: GFLOPs: 3441.1125. Time: 116.1715 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #62: GFLOPs: 3392.4466. Time: 117.8381 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #63: GFLOPs: 4298.6137. Time: 92.9973 us. Best GFLOPs: 6750.8871
2024-04-29 04:03:07 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #64: GFLOPs: 453.1422. Time: 882.1940 us. Best GFLOPs: 6750.8871
2024-04-29 04:55:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:55:30 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-29 04:55:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 439 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 04:55:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 882 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 04:55:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 1328 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 04:55:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 1773 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 04:55:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 2215 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 04:55:50 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-04-29 04:55:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 04:56:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 137 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 04:56:20 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 04:56:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 04:56:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.6049  2.0168  2.0128  1.9939  1.9849  1.9747  1.9624  1.9497  1.9491  1.9468  1.9464  1.9028  1.9027  1.9002  1.8773  1.8546
[17 : 32]:	1.8369  1.8223  1.7625  1.7599  1.7551  1.7536  1.7276  1.7249  1.7183  1.6944  1.6938  1.6799  1.6792  1.6711  1.6581  1.6516
[33 : 48]:	1.6492  1.6491  1.6491  1.6484  1.6466  1.6378  1.6371  1.6307  1.6188  1.6188  1.6070  1.6003  1.5957  1.5842  1.5841  1.5838
[49 : 64]:	1.5796  1.5767  1.5516  1.5509  1.5420  1.5413  1.5392  1.5237  1.5133  1.5084  1.5059  1.5037  1.5008  1.4992  1.4971  1.4971
2024-04-29 04:56:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:56:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #65: GFLOPs: 1821.1029. Time: 219.5150 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #66: GFLOPs: 3612.9428. Time: 110.6465 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #67: GFLOPs: 1926.0590. Time: 207.5530 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #68: GFLOPs: 1637.5093. Time: 244.1265 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #69: GFLOPs: 3798.6254. Time: 105.2379 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #70: GFLOPs: 3612.9479. Time: 110.6463 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #71: GFLOPs: 2132.7841. Time: 187.4355 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #72: GFLOPs: 1638.7838. Time: 243.9366 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #73: GFLOPs: 1642.2144. Time: 243.4270 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #74: GFLOPs: 1765.2588. Time: 226.4594 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #75: GFLOPs: 1679.3495. Time: 238.0442 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #76: GFLOPs: 1773.3535. Time: 225.4257 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #77: GFLOPs: 3861.4118. Time: 103.5267 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #78: GFLOPs: 1643.5286. Time: 243.2324 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #79: GFLOPs: 2135.3127. Time: 187.2135 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #80: GFLOPs: 1683.9141. Time: 237.3989 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #81: GFLOPs: 1592.7270. Time: 250.9905 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #82: GFLOPs: 1979.5744. Time: 201.9421 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #83: GFLOPs: 1991.7477. Time: 200.7078 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #84: GFLOPs: 1564.3767. Time: 255.5391 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #85: GFLOPs: 3783.8762. Time: 105.6481 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #86: GFLOPs: 1672.8217. Time: 238.9731 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #87: GFLOPs: 4253.7557. Time: 93.9780 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #88: GFLOPs: 4120.8297. Time: 97.0094 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #89: GFLOPs: 3687.5106. Time: 108.4090 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #90: GFLOPs: 3669.9678. Time: 108.9272 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #91: GFLOPs: 2996.3208. Time: 133.4167 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #92: GFLOPs: 4254.0004. Time: 93.9726 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #93: GFLOPs: 3784.0302. Time: 105.6438 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #94: GFLOPs: 682.9646. Time: 585.3296 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #95: GFLOPs: 4116.9504. Time: 97.1008 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #96: GFLOPs: 2996.6871. Time: 133.4004 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #97: GFLOPs: 4167.5248. Time: 95.9225 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #98: GFLOPs: 4120.9803. Time: 97.0059 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #99: GFLOPs: 3882.2156. Time: 102.9720 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #100: GFLOPs: 3743.2492. Time: 106.7947 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #101: GFLOPs: 3976.6884. Time: 100.5257 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #102: GFLOPs: 4253.4678. Time: 93.9843 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #103: GFLOPs: 3783.0751. Time: 105.6705 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #104: GFLOPs: 3833.9977. Time: 104.2670 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #105: GFLOPs: 4103.7353. Time: 97.4135 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #106: GFLOPs: 4104.2146. Time: 97.4022 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #107: GFLOPs: 4120.0711. Time: 97.0273 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #108: GFLOPs: 657.1216. Time: 608.3491 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #109: GFLOPs: 3952.8645. Time: 101.1316 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #110: GFLOPs: 4150.7270. Time: 96.3107 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #111: GFLOPs: 4042.0803. Time: 98.8994 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #112: GFLOPs: 3996.6353. Time: 100.0240 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #113: GFLOPs: 3705.5187. Time: 107.8822 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #114: GFLOPs: 4042.3917. Time: 98.8918 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #115: GFLOPs: 4750.8008. Time: 84.1457 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #116: GFLOPs: 452.0645. Time: 884.2971 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #117: GFLOPs: 4315.0060. Time: 92.6440 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #118: GFLOPs: 3828.1406. Time: 104.4265 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #119: GFLOPs: 4259.0948. Time: 93.8602 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #120: GFLOPs: 3113.7961. Time: 128.3833 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #121: GFLOPs: 3872.1238. Time: 103.2403 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #122: GFLOPs: 4151.6041. Time: 96.2903 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #123: GFLOPs: 4023.7466. Time: 99.3500 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #124: GFLOPs: 3699.6405. Time: 108.0536 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #125: GFLOPs: 3293.6154. Time: 121.3740 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #126: GFLOPs: 1086.0819. Time: 368.0748 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #127: GFLOPs: 50.7817. Time: 7872.1184 us. Best GFLOPs: 6750.8871
2024-04-29 04:58:10 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #128: GFLOPs: 38.6881. Time: 10332.8765 us. Best GFLOPs: 6750.8871
2024-04-29 06:05:21 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:05:23 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 06:05:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 06:05:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 806 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 06:05:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 1205 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 06:05:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 1607 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 06:05:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 2009 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 06:05:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 2408 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 06:05:46 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-29 06:05:54 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 06:06:05 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 06:06:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 06:06:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 06:06:28 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.5939  1.5808  1.5131  1.5042  1.4989  1.4903  1.4701  1.4543  1.4543  1.4536  1.4445  1.4262  1.4243  1.4191  1.4167  1.4043
[17 : 32]:	1.4014  1.3925  1.3873  1.3537  1.3524  1.3504  1.3491  1.3442  1.3396  1.3305  1.3041  1.3027  1.3011  1.2974  1.2962  1.2962
[33 : 48]:	1.2882  1.2859  1.2859  1.2852  1.2835  1.2797  1.2777  1.2762  1.2762  1.2746  1.2688  1.2687  1.2638  1.2636  1.2560  1.2525
[49 : 64]:	1.2490  1.2468  1.2455  1.2381  1.2290  1.2266  1.2262  1.2256  1.2252  1.2249  1.2235  1.2230  1.2211  1.2148  1.2142  1.2140
2024-04-29 06:06:28 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:06:28 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #129: GFLOPs: 3442.1705. Time: 116.1358 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #130: GFLOPs: 4415.5199. Time: 90.5351 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #131: GFLOPs: 6598.8153. Time: 60.5805 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #132: GFLOPs: 3877.6157. Time: 103.0941 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #133: GFLOPs: 6519.8606. Time: 61.3141 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #134: GFLOPs: 4375.4511. Time: 91.3641 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #135: GFLOPs: 6519.9454. Time: 61.3133 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #136: GFLOPs: 4377.2870. Time: 91.3258 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #137: GFLOPs: 4378.3895. Time: 91.3028 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #138: GFLOPs: 6561.5594. Time: 60.9244 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #139: GFLOPs: 3142.5108. Time: 127.2102 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #140: GFLOPs: 4078.6526. Time: 98.0126 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #141: GFLOPs: 3988.9661. Time: 100.2163 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #142: GFLOPs: 4126.2998. Time: 96.8808 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #143: GFLOPs: 3872.4939. Time: 103.2305 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #144: GFLOPs: 6356.0641. Time: 62.8942 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #145: GFLOPs: 527.1186. Time: 758.3860 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #146: GFLOPs: 3807.7905. Time: 104.9846 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #147: GFLOPs: 2853.7026. Time: 140.0844 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #148: GFLOPs: 3930.6406. Time: 101.7034 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #149: GFLOPs: 6554.1979. Time: 60.9929 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #150: GFLOPs: 6690.4665. Time: 59.7506 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #151: GFLOPs: 2810.4092. Time: 142.2424 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #152: GFLOPs: 3831.0598. Time: 104.3469 us. Best GFLOPs: 6750.8871
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #153: GFLOPs: 7001.5428. Time: 57.0959 us. Best GFLOPs: 7001.5428
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #154: GFLOPs: 6523.8614. Time: 61.2765 us. Best GFLOPs: 7001.5428
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #155: GFLOPs: 3178.2531. Time: 125.7796 us. Best GFLOPs: 7001.5428
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #156: GFLOPs: 5985.4575. Time: 66.7884 us. Best GFLOPs: 7001.5428
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #157: GFLOPs: 5725.3386. Time: 69.8228 us. Best GFLOPs: 7001.5428
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #158: GFLOPs: 6941.8430. Time: 57.5869 us. Best GFLOPs: 7001.5428
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #159: GFLOPs: 5857.1843. Time: 68.2511 us. Best GFLOPs: 7001.5428
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #160: GFLOPs: 5883.4799. Time: 67.9461 us. Best GFLOPs: 7001.5428
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #161: GFLOPs: 7189.9630. Time: 55.5996 us. Best GFLOPs: 7189.9630
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #162: GFLOPs: 5582.6262. Time: 71.6078 us. Best GFLOPs: 7189.9630
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #163: GFLOPs: 6837.3961. Time: 58.4666 us. Best GFLOPs: 7189.9630
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #164: GFLOPs: 4226.5696. Time: 94.5825 us. Best GFLOPs: 7189.9630
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #165: GFLOPs: 3409.8615. Time: 117.2362 us. Best GFLOPs: 7189.9630
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #166: GFLOPs: 8536.2579. Time: 46.8307 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #167: GFLOPs: 6900.6791. Time: 57.9304 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #168: GFLOPs: 5573.2256. Time: 71.7285 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #169: GFLOPs: 5581.8170. Time: 71.6181 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #170: GFLOPs: 5734.2892. Time: 69.7138 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #171: GFLOPs: 716.2098. Time: 558.1596 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #172: GFLOPs: 5954.7439. Time: 67.1329 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #173: GFLOPs: 5018.2808. Time: 79.6606 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #174: GFLOPs: 6659.0289. Time: 60.0327 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #175: GFLOPs: 5706.8922. Time: 70.0485 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #176: GFLOPs: 3886.1243. Time: 102.8684 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #177: GFLOPs: 4065.6999. Time: 98.3249 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #178: GFLOPs: 6926.4690. Time: 57.7147 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #179: GFLOPs: 6381.0420. Time: 62.6480 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #180: GFLOPs: 7839.4677. Time: 50.9932 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #181: GFLOPs: 7716.7079. Time: 51.8044 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #182: GFLOPs: 7593.5913. Time: 52.6443 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #183: GFLOPs: 6675.2614. Time: 59.8867 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #184: GFLOPs: 3954.7870. Time: 101.0824 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #185: GFLOPs: 3723.8570. Time: 107.3509 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #186: GFLOPs: 4956.1861. Time: 80.6587 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #187: GFLOPs: 6459.2593. Time: 61.8894 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #188: GFLOPs: 3612.0989. Time: 110.6723 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #189: GFLOPs: 5265.6370. Time: 75.9185 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #190: GFLOPs: 4503.7527. Time: 88.7614 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #191: GFLOPs: 55.3829. Time: 7218.1026 us. Best GFLOPs: 8536.2579
2024-04-29 06:08:37 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #192: GFLOPs: 2157.5648. Time: 185.2827 us. Best GFLOPs: 8536.2579
2024-04-29 07:23:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:23:43 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 07:23:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 398 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 07:23:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 796 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 07:23:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 1198 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 07:23:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 1603 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 07:24:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 2005 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 07:24:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 2403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 07:24:06 [INFO] [evolutionary_search.cc:723] Sampled 57 candidate(s)
2024-04-29 07:24:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 07:24:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 07:24:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 118 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 07:24:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ba6028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x35df148)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb48cea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6d2f768)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6cef6d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3dfd68)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x33f92c8)]: 0 failure(s)
2024-04-29 07:24:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.4357  2.1852  2.1014  2.0964  2.0697  2.0384  2.0384  2.0272  2.0243  2.0222  1.9359  1.9316  1.9173  1.9066  1.8798  1.8690
[17 : 32]:	1.8377  1.8373  1.7876  1.7225  1.7028  1.6933  1.6686  1.6651  1.6587  1.6552  1.6536  1.6526  1.6492  1.6488  1.6438  1.6378
[33 : 48]:	1.6277  1.6260  1.6255  1.6234  1.6214  1.6176  1.6173  1.6158  1.6156  1.6063  1.6025  1.6014  1.5905  1.5873  1.5864  1.5799
[49 : 64]:	1.5784  1.5755  1.5721  1.5716  1.5684  1.5635  1.5566  1.5566  1.5478  1.5473  1.5439  1.5406  1.5343  1.5174  1.5102  1.5086
2024-04-29 07:24:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:24:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #193: GFLOPs: 3898.7554. Time: 102.5351 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #194: GFLOPs: 6775.7910. Time: 58.9982 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #195: GFLOPs: 7605.2292. Time: 52.5637 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #196: GFLOPs: 7745.0650. Time: 51.6147 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #197: GFLOPs: 8320.3133. Time: 48.0462 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #198: GFLOPs: 5662.7325. Time: 70.5948 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #199: GFLOPs: 5656.2517. Time: 70.6757 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #200: GFLOPs: 5930.7167. Time: 67.4049 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #201: GFLOPs: 8328.4495. Time: 47.9993 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #202: GFLOPs: 8439.8052. Time: 47.3659 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #203: GFLOPs: 4822.5255. Time: 82.8942 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #204: GFLOPs: 7851.3994. Time: 50.9157 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #205: GFLOPs: 7858.5440. Time: 50.8694 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #206: GFLOPs: 5086.8296. Time: 78.5871 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #207: GFLOPs: 7292.4496. Time: 54.8183 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #208: GFLOPs: 5872.3238. Time: 68.0752 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #209: GFLOPs: 3958.3621. Time: 100.9911 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #210: GFLOPs: 5532.8622. Time: 72.2518 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #211: GFLOPs: 5099.3214. Time: 78.3946 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #212: GFLOPs: 6370.7986. Time: 62.7487 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #213: GFLOPs: 6300.1045. Time: 63.4528 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #214: GFLOPs: 5282.3470. Time: 75.6784 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #215: GFLOPs: 6463.1081. Time: 61.8525 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #216: GFLOPs: 5212.0570. Time: 76.6990 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #217: GFLOPs: 5273.1606. Time: 75.8102 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #218: GFLOPs: 5281.1230. Time: 75.6959 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #219: GFLOPs: 7575.5396. Time: 52.7698 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #220: GFLOPs: 1023.1140. Time: 390.7281 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #221: GFLOPs: 7588.9029. Time: 52.6768 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #222: GFLOPs: 7554.3999. Time: 52.9174 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #223: GFLOPs: 4479.7281. Time: 89.2374 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #224: GFLOPs: 7206.7513. Time: 55.4701 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #225: GFLOPs: 4446.3272. Time: 89.9078 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #226: GFLOPs: 6370.2792. Time: 62.7538 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #227: GFLOPs: 5750.0427. Time: 69.5229 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #228: GFLOPs: 5615.6014. Time: 71.1873 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #229: GFLOPs: 5042.5091. Time: 79.2779 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #230: GFLOPs: 5751.2640. Time: 69.5081 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #231: GFLOPs: 4297.0392. Time: 93.0313 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #232: GFLOPs: 4526.5036. Time: 88.3153 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #233: GFLOPs: 5872.6413. Time: 68.0715 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #234: GFLOPs: 6294.9273. Time: 63.5050 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #235: GFLOPs: 4454.0578. Time: 89.7517 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #236: GFLOPs: 6271.3843. Time: 63.7434 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #237: GFLOPs: 3677.0045. Time: 108.7188 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #238: GFLOPs: 5800.7986. Time: 68.9145 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #239: GFLOPs: 3788.7044. Time: 105.5135 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #240: GFLOPs: 4474.6259. Time: 89.3392 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #241: GFLOPs: 6641.8195. Time: 60.1882 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #242: GFLOPs: 1246.6348. Time: 320.6708 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #243: GFLOPs: 4364.6397. Time: 91.5905 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #244: GFLOPs: 7610.2522. Time: 52.5291 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #245: GFLOPs: 4947.9243. Time: 80.7933 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #246: GFLOPs: 3779.0729. Time: 105.7824 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #247: GFLOPs: 1246.6879. Time: 320.6571 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #248: GFLOPs: 7764.0250. Time: 51.4887 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #249: GFLOPs: 4216.2220. Time: 94.8146 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #250: GFLOPs: 6442.7816. Time: 62.0476 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #251: GFLOPs: 4218.7593. Time: 94.7576 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #252: GFLOPs: 4219.9015. Time: 94.7319 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #253: GFLOPs: 4937.2199. Time: 80.9685 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #254: GFLOPs: 489.1009. Time: 817.3352 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #255: GFLOPs: 2868.7277. Time: 139.3508 us. Best GFLOPs: 8536.2579
2024-04-29 07:26:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #256: GFLOPs: 58.2121. Time: 6867.2851 us. Best GFLOPs: 8536.2579
2024-05-01 15:10:06 [INFO] [task_scheduler.cc:160] Initializing Task #50: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5"
2024-05-01 15:10:06 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)))
        input_tile = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)))
        B = T.alloc_buffer((T.int64(4), T.int64(4)))
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
        A = T.alloc_buffer((T.int64(4), T.int64(2)))
        inverse = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(80), T.int64(54), T.int64(54)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for ci, p, eps, nu in T.grid(T.int64(80), T.int64(676), T.int64(4), T.int64(4)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
        for i, j in T.grid(T.int64(4), T.int64(4)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(80), T.int64(676), T.int64(4), T.int64(4)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(4), T.int64(4), T.int64(192), T.int64(676), T.int64(80)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(4), T.int64(2)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(192), T.int64(676), T.int64(2), T.int64(2), T.int64(4), T.int64(4)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(192), T.int64(52), T.int64(52)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(52), T.int64(52)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(52), T.int64(52)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-05-01 15:10:06 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-05-01 15:10:06 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
            inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(1690), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(676) + ax0)
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(676) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(676))
                                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(676))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(676) + ax2)
                            v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(676) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(104), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(104), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(13520)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(6760))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(6760) // T.int64(1690))
                                    v2 = T.axis.spatial(T.int64(80), ci_0 * T.int64(5) + ax0_ax1_ax2_ax3_fused % T.int64(1690) // T.int64(338))
                                    v3 = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(338) + ax0_ax1_ax2_ax3_fused % T.int64(338))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3840)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(1920))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(1920) // T.int64(480))
                                    v2 = T.axis.spatial(T.int64(80), ci_0 * T.int64(5) + ax0_ax1_ax2_ax3_fused % T.int64(480) // T.int64(96))
                                    v3 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(5), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(52) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(52) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(52) // T.int64(26) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(96) + eps_1_nu_1_co_1_p_1_fused % T.int64(52) // T.int64(13) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) * T.int64(12) + co_3 * T.int64(4) + co_4)
                                    v_p = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(338) + eps_1_nu_1_co_1_p_1_fused % T.int64(13) * T.int64(26) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(2) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(80), ci_0 * T.int64(5) + ci_1 * T.int64(5) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(12), T.int64(2)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(52) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(52) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(52) // T.int64(26) + ax1)
                                v2 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(96) + eps_1_nu_1_co_1_p_1_fused % T.int64(52) // T.int64(13) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) * T.int64(12) + ax2)
                                v3 = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(338) + eps_1_nu_1_co_1_p_1_fused % T.int64(13) * T.int64(26) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(2) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(254), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                            v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(129792))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(676))
                            v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                            T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(129792))
                            T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 4, 2, 3, 4])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 13, 13, 2, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 1, 5])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-05-01 15:10:06 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
            inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(1690), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(676) + ax0)
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(676) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(676))
                                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(676))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(676) + ax2)
                            v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(676) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(104), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(104), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(13520)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(6760))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(6760) // T.int64(1690))
                                    v2 = T.axis.spatial(T.int64(80), ci_0_fused * T.int64(5) + ax0_ax1_ax2_ax3_fused % T.int64(1690) // T.int64(338))
                                    v3 = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(338) + ax0_ax1_ax2_ax3_fused % T.int64(338))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3840)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(1920))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(1920) // T.int64(480))
                                    v2 = T.axis.spatial(T.int64(80), ci_0_fused * T.int64(5) + ax0_ax1_ax2_ax3_fused % T.int64(480) // T.int64(96))
                                    v3 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(5), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(52) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(52) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(52) // T.int64(26) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(96) + eps_1_nu_1_co_1_p_1_fused % T.int64(52) // T.int64(13) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) * T.int64(12) + co_3 * T.int64(4) + co_4)
                                    v_p = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(338) + eps_1_nu_1_co_1_p_1_fused % T.int64(13) * T.int64(26) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(2) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(80), ci_0_fused * T.int64(5) + ci_1 * T.int64(5) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(12), T.int64(2)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(52) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(52) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(52) // T.int64(26) + ax1)
                                v2 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(96) + eps_1_nu_1_co_1_p_1_fused % T.int64(52) // T.int64(13) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) * T.int64(12) + ax2)
                                v3 = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(338) + eps_1_nu_1_co_1_p_1_fused % T.int64(13) * T.int64(26) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(2) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(127), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                            v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(129792))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(676))
                            v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                            T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(129792))
                            T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 4, 2, 3, 4])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 13, 13, 2, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 1, 5])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-05-01 15:10:06 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
            inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(1690), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(676) + ax0)
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(676) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(676))
                                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(676))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(676) + ax2)
                            v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(676) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(104), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(104), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(13520)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(6760))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(6760) // T.int64(1690))
                                    v2 = T.axis.spatial(T.int64(80), ci_0_fused * T.int64(5) + ax0_ax1_ax2_ax3_fused % T.int64(1690) // T.int64(338))
                                    v3 = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(338) + ax0_ax1_ax2_ax3_fused % T.int64(338))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3840)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(1920))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(1920) // T.int64(480))
                                    v2 = T.axis.spatial(T.int64(80), ci_0_fused * T.int64(5) + ax0_ax1_ax2_ax3_fused % T.int64(480) // T.int64(96))
                                    v3 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(5), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(52) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(52) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(52) // T.int64(26) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(96) + eps_1_nu_1_co_1_p_1_fused % T.int64(52) // T.int64(13) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) * T.int64(12) + co_3 * T.int64(4) + co_4)
                                    v_p = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(338) + eps_1_nu_1_co_1_p_1_fused % T.int64(13) * T.int64(26) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(2) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(80), ci_0_fused * T.int64(5) + ci_1 * T.int64(5) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(12), T.int64(2)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(52) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(52) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(52) // T.int64(26) + ax1)
                                v2 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(4) // T.int64(2) * T.int64(96) + eps_1_nu_1_co_1_p_1_fused % T.int64(52) // T.int64(13) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) * T.int64(12) + ax2)
                                v3 = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(338) + eps_1_nu_1_co_1_p_1_fused % T.int64(13) * T.int64(26) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(2) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(4056), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                            v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(676))
                            v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 4, 2, 3, 4])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 13, 13, 2, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 1, 5])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-05-01 16:17:30 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 16:17:32 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-05-01 16:17:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 16:17:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 804 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 16:17:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 1208 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 16:17:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 1614 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 16:17:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 2019 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 16:17:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 2421 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 16:17:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 2820 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 16:17:56 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-05-01 16:18:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 147 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 16:18:14 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 138 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 16:18:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 16:18:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 16:18:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9992  0.9990  0.9990  0.9989  0.9987  0.9987  0.9982  0.9979  0.9976  0.9976  0.9973  0.9969  0.9968  0.9958  0.9937
[17 : 32]:	0.9935  0.9919  0.9908  0.9906  0.9888  0.9887  0.9886  0.9883  0.9852  0.9843  0.9839  0.9833  0.9831  0.9829  0.9803  0.9801
[33 : 48]:	0.9792  0.9782  0.9780  0.9779  0.9776  0.9776  0.9774  0.9773  0.9766  0.9765  0.9760  0.9739  0.9738  0.9734  0.9732  0.9729
[49 : 64]:	0.9726  0.9716  0.9713  0.9713  0.9691  0.9675  0.9670  0.9669  0.9666  0.9662  0.9646  0.9645  0.9644  0.9642  0.9640  0.9633
2024-05-01 16:18:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 16:18:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #1: GFLOPs: 88.0149. Time: 4541.9521 us. Best GFLOPs: 88.0149
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #2: GFLOPs: 4287.7694. Time: 93.2325 us. Best GFLOPs: 4287.7694
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #3: GFLOPs: 5631.9088. Time: 70.9811 us. Best GFLOPs: 5631.9088
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #4: GFLOPs: 3096.2396. Time: 129.1112 us. Best GFLOPs: 5631.9088
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #5: GFLOPs: 3743.0450. Time: 106.8006 us. Best GFLOPs: 5631.9088
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #6: GFLOPs: 5512.3407. Time: 72.5208 us. Best GFLOPs: 5631.9088
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #7: GFLOPs: 4747.6038. Time: 84.2023 us. Best GFLOPs: 5631.9088
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #8: GFLOPs: 5158.9755. Time: 77.4881 us. Best GFLOPs: 5631.9088
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #9: GFLOPs: 7005.8791. Time: 57.0606 us. Best GFLOPs: 7005.8791
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #10: GFLOPs: 4333.5221. Time: 92.2481 us. Best GFLOPs: 7005.8791
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #11: GFLOPs: 4401.2925. Time: 90.8277 us. Best GFLOPs: 7005.8791
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #12: GFLOPs: 4650.5542. Time: 85.9595 us. Best GFLOPs: 7005.8791
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #13: GFLOPs: 805.9465. Time: 496.0123 us. Best GFLOPs: 7005.8791
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #14: GFLOPs: 1980.7634. Time: 201.8209 us. Best GFLOPs: 7005.8791
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #15: GFLOPs: 5940.0041. Time: 67.2995 us. Best GFLOPs: 7005.8791
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #16: GFLOPs: 7357.9201. Time: 54.3305 us. Best GFLOPs: 7357.9201
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #17: GFLOPs: 4208.6774. Time: 94.9846 us. Best GFLOPs: 7357.9201
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #18: GFLOPs: 213.8282. Time: 1869.5348 us. Best GFLOPs: 7357.9201
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #19: GFLOPs: 6768.1519. Time: 59.0648 us. Best GFLOPs: 7357.9201
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #20: GFLOPs: 52.5419. Time: 7608.3929 us. Best GFLOPs: 7357.9201
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:121] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #21: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
        inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(53), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676) + ax0)
                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(348) + ci_p_fused_1) % T.int64(676) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                        T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676))
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(676))
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676))
                                    v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(676))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676) + ax2)
                        v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(348) + ci_p_fused_1) % T.int64(676) + ax3)
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(24), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(13), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(6) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(2) * T.int64(24) + eps_1_nu_1_co_1_p_1_fused % T.int64(6) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused // T.int64(26) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) * T.int64(13) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(80)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(13)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(676))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(676) // T.int64(338))
                                        v2 = T.axis.spatial(T.int64(80), ci_0)
                                        v3 = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(338) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(338))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(48))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(48) // T.int64(24))
                                        v2 = T.axis.spatial(T.int64(80), ci_0)
                                        v3 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(2) * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(24))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(192))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(13), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(6) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(2) * T.int64(24) + eps_1_nu_1_co_1_p_1_fused % T.int64(6) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused // T.int64(26) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) * T.int64(13) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(80), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(13)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(6) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(2) * T.int64(24) + eps_1_nu_1_co_1_p_1_fused % T.int64(6) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused // T.int64(26) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(676), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) * T.int64(13) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(127), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(129792))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                        v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(129792))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(676))
                        v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                        T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(129792))
                        T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 4, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[8, 6, 2, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 26, 13, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[80, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 52, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 52, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #22: GFLOPs: 4468.4351. Time: 89.4629 us. Best GFLOPs: 7357.9201
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #23: GFLOPs: 4351.2408. Time: 91.8725 us. Best GFLOPs: 7357.9201
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #24: GFLOPs: 1496.0063. Time: 267.2177 us. Best GFLOPs: 7357.9201
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #25: GFLOPs: 4182.7855. Time: 95.5725 us. Best GFLOPs: 7357.9201
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #26: GFLOPs: 5820.5652. Time: 68.6805 us. Best GFLOPs: 7357.9201
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #27: GFLOPs: 113.8289. Time: 3511.9316 us. Best GFLOPs: 7357.9201
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #28: GFLOPs: 7861.1318. Time: 50.8526 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #29: GFLOPs: 6514.6621. Time: 61.3630 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #30: GFLOPs: 5993.0145. Time: 66.7042 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #31: GFLOPs: 56.8722. Time: 7029.0771 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #32: GFLOPs: 5990.3148. Time: 66.7343 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #33: GFLOPs: 606.9256. Time: 658.6628 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #34: GFLOPs: 5146.3743. Time: 77.6779 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #35: GFLOPs: 2663.4909. Time: 150.0885 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #36: GFLOPs: 1974.9060. Time: 202.4194 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #37: GFLOPs: 7248.1673. Time: 55.1532 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #38: GFLOPs: 4639.9811. Time: 86.1554 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #39: GFLOPs: 6092.4873. Time: 65.6151 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #40: GFLOPs: 2910.8069. Time: 137.3363 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #41: GFLOPs: 6382.1788. Time: 62.6368 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #42: GFLOPs: 7500.7065. Time: 53.2962 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #43: GFLOPs: 7246.7159. Time: 55.1642 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #44: GFLOPs: 6972.8219. Time: 57.3311 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #45: GFLOPs: 815.9706. Time: 489.9188 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #46: GFLOPs: 4952.4225. Time: 80.7200 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #47: GFLOPs: 4857.8704. Time: 82.2911 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #48: GFLOPs: 7641.1599. Time: 52.3166 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #49: GFLOPs: 6960.0699. Time: 57.4361 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #50: GFLOPs: 1724.1371. Time: 231.8605 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #51: GFLOPs: 1890.1482. Time: 211.4963 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #52: GFLOPs: 155.5927. Time: 2569.2684 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #53: GFLOPs: 699.8374. Time: 571.2174 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #54: GFLOPs: 5904.9742. Time: 67.6987 us. Best GFLOPs: 7861.1318
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #55: GFLOPs: 8410.3338. Time: 47.5319 us. Best GFLOPs: 8410.3338
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #56: GFLOPs: 3960.2664. Time: 100.9425 us. Best GFLOPs: 8410.3338
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #57: GFLOPs: 5058.0004. Time: 79.0351 us. Best GFLOPs: 8410.3338
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #58: GFLOPs: 6914.7386. Time: 57.8126 us. Best GFLOPs: 8410.3338
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #59: GFLOPs: 4303.5193. Time: 92.8913 us. Best GFLOPs: 8410.3338
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #60: GFLOPs: 6170.0308. Time: 64.7905 us. Best GFLOPs: 8410.3338
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #61: GFLOPs: 3159.0653. Time: 126.5436 us. Best GFLOPs: 8410.3338
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #62: GFLOPs: 800.5345. Time: 499.3656 us. Best GFLOPs: 8410.3338
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #63: GFLOPs: 5676.4344. Time: 70.4244 us. Best GFLOPs: 8410.3338
2024-05-01 16:38:21 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #64: GFLOPs: 3195.7046. Time: 125.0927 us. Best GFLOPs: 8410.3338
2024-05-01 17:14:30 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 17:14:32 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-05-01 17:14:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 396 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 17:14:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 796 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 17:14:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 1196 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 17:14:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 1601 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 17:14:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 2003 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 17:14:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 2402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 17:14:53 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-05-01 17:15:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 118 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 17:15:14 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 17:15:26 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 17:15:37 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 17:15:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.3746  2.3695  2.3620  2.3340  2.3339  2.3323  2.3138  2.2387  2.2176  2.1952  2.1495  2.1323  2.1070  2.1070  2.0692  2.0555
[17 : 32]:	2.0454  2.0415  2.0406  2.0357  2.0274  2.0205  1.9801  1.9529  1.9361  1.9355  1.9168  1.9081  1.8789  1.7707  1.7283  1.6988
[33 : 48]:	1.6733  1.6662  1.6555  1.6552  1.6552  1.6409  1.6396  1.6186  1.6101  1.5954  1.5882  1.5793  1.5787  1.5769  1.5755  1.5594
[49 : 64]:	1.5584  1.5578  1.5292  1.5254  1.5192  1.5162  1.5150  1.5087  1.5087  1.5030  1.4966  1.4961  1.4916  1.4906  1.4888  1.4866
2024-05-01 17:15:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 17:15:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #65: GFLOPs: 5745.8351. Time: 69.5738 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #66: GFLOPs: 5813.4810. Time: 68.7642 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #67: GFLOPs: 5662.9284. Time: 70.5923 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #68: GFLOPs: 5600.4027. Time: 71.3805 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #69: GFLOPs: 5734.1391. Time: 69.7157 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #70: GFLOPs: 5101.9303. Time: 78.3545 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #71: GFLOPs: 5727.6250. Time: 69.7950 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #72: GFLOPs: 4946.8557. Time: 80.8108 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #73: GFLOPs: 4926.8643. Time: 81.1387 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #74: GFLOPs: 4840.5133. Time: 82.5861 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #75: GFLOPs: 5998.5731. Time: 66.6424 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #76: GFLOPs: 3436.0111. Time: 116.3440 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #77: GFLOPs: 2780.6234. Time: 143.7661 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #78: GFLOPs: 2715.2410. Time: 147.2279 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #79: GFLOPs: 5548.4974. Time: 72.0482 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #80: GFLOPs: 3424.2664. Time: 116.7431 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #81: GFLOPs: 2923.3179. Time: 136.7485 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #82: GFLOPs: 4959.4138. Time: 80.6062 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #83: GFLOPs: 3479.9616. Time: 114.8746 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #84: GFLOPs: 5562.9885. Time: 71.8605 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #85: GFLOPs: 3454.9088. Time: 115.7076 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #86: GFLOPs: 4959.0241. Time: 80.6125 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #87: GFLOPs: 3895.8813. Time: 102.6108 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #88: GFLOPs: 5522.9387. Time: 72.3816 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #89: GFLOPs: 4077.9982. Time: 98.0283 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #90: GFLOPs: 4146.1804. Time: 96.4163 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #91: GFLOPs: 5395.4467. Time: 74.0920 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #92: GFLOPs: 5517.9673. Time: 72.4469 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #93: GFLOPs: 5432.5870. Time: 73.5854 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #94: GFLOPs: 4778.2179. Time: 83.6629 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #95: GFLOPs: 3011.6097. Time: 132.7394 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #96: GFLOPs: 6003.2995. Time: 66.5899 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #97: GFLOPs: 5502.7784. Time: 72.6468 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #98: GFLOPs: 5622.1803. Time: 71.1040 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #99: GFLOPs: 5082.6351. Time: 78.6520 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #100: GFLOPs: 6351.0981. Time: 62.9433 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #101: GFLOPs: 6351.2302. Time: 62.9420 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #102: GFLOPs: 5440.8867. Time: 73.4732 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #103: GFLOPs: 3768.1610. Time: 106.0887 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #104: GFLOPs: 3770.5614. Time: 106.0212 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #105: GFLOPs: 4310.3314. Time: 92.7445 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #106: GFLOPs: 2095.5005. Time: 190.7703 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #107: GFLOPs: 5503.0264. Time: 72.6435 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #108: GFLOPs: 1970.9710. Time: 202.8236 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #109: GFLOPs: 1840.8026. Time: 217.1658 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #110: GFLOPs: 5879.8067. Time: 67.9885 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #111: GFLOPs: 1869.1741. Time: 213.8695 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #112: GFLOPs: 5359.7145. Time: 74.5859 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #113: GFLOPs: 1854.1687. Time: 215.6003 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #114: GFLOPs: 1462.6799. Time: 273.3061 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #115: GFLOPs: 2053.5190. Time: 194.6704 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #116: GFLOPs: 1451.4888. Time: 275.4133 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #117: GFLOPs: 5595.5902. Time: 71.4419 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #118: GFLOPs: 3727.5050. Time: 107.2458 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #119: GFLOPs: 3779.5775. Time: 105.7683 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #120: GFLOPs: 2448.3248. Time: 163.2787 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #121: GFLOPs: 3755.7969. Time: 106.4380 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #122: GFLOPs: 6971.3873. Time: 57.3429 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #123: GFLOPs: 6797.8295. Time: 58.8069 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #124: GFLOPs: 6797.0866. Time: 58.8133 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #125: GFLOPs: 3614.0010. Time: 110.6141 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #126: GFLOPs: 3823.4462. Time: 104.5547 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #127: GFLOPs: 325.3283. Time: 1228.7875 us. Best GFLOPs: 8410.3338
2024-05-01 17:17:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #128: GFLOPs: 809.8604. Time: 493.6151 us. Best GFLOPs: 8410.3338
2024-05-01 18:17:39 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 18:17:41 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-05-01 18:17:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 400 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 18:17:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 803 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 18:17:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 1207 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 18:17:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 1615 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 18:17:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 2019 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 18:18:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 2420 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 18:18:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 2822 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 18:18:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 3224 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 18:18:09 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-05-01 18:18:19 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 18:18:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 18:18:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 18:18:53 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 118 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 18:18:56 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.6375  1.6252  1.6214  1.6016  1.5589  1.5305  1.5130  1.5072  1.4764  1.4668  1.4633  1.4614  1.4575  1.4301  1.3882  1.3858
[17 : 32]:	1.3832  1.3829  1.3822  1.3807  1.3806  1.3795  1.3730  1.3712  1.3710  1.3707  1.3703  1.3672  1.3664  1.3644  1.3619  1.3607
[33 : 48]:	1.3591  1.3570  1.3566  1.3548  1.3516  1.3501  1.3492  1.3471  1.3447  1.3410  1.3374  1.3373  1.3350  1.3321  1.3279  1.3271
[49 : 64]:	1.3271  1.3247  1.3230  1.3216  1.3208  1.3203  1.3201  1.3183  1.3106  1.3080  1.3080  1.3071  1.3064  1.3054  1.3044  1.3034
2024-05-01 18:18:57 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 18:18:57 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #129: GFLOPs: 8595.5088. Time: 46.5079 us. Best GFLOPs: 8595.5088
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #130: GFLOPs: 8398.5996. Time: 47.5983 us. Best GFLOPs: 8595.5088
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #131: GFLOPs: 7404.1403. Time: 53.9913 us. Best GFLOPs: 8595.5088
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #132: GFLOPs: 6612.5292. Time: 60.4548 us. Best GFLOPs: 8595.5088
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #133: GFLOPs: 6633.7644. Time: 60.2613 us. Best GFLOPs: 8595.5088
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #134: GFLOPs: 1637.9363. Time: 244.0628 us. Best GFLOPs: 8595.5088
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #135: GFLOPs: 8706.1668. Time: 45.9168 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #136: GFLOPs: 3686.3029. Time: 108.4445 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #137: GFLOPs: 4181.4706. Time: 95.6026 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #138: GFLOPs: 3428.5111. Time: 116.5985 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #139: GFLOPs: 6466.4350. Time: 61.8207 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #140: GFLOPs: 4225.7455. Time: 94.6009 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #141: GFLOPs: 5606.2626. Time: 71.3059 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #142: GFLOPs: 5743.9223. Time: 69.5969 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #143: GFLOPs: 6156.4423. Time: 64.9335 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #144: GFLOPs: 7002.0469. Time: 57.0918 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #145: GFLOPs: 7774.9732. Time: 51.4162 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #146: GFLOPs: 7005.0678. Time: 57.0672 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #147: GFLOPs: 7740.6335. Time: 51.6443 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #148: GFLOPs: 6130.6137. Time: 65.2071 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #149: GFLOPs: 7495.7748. Time: 53.3313 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #150: GFLOPs: 6815.0627. Time: 58.6582 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #151: GFLOPs: 7215.3443. Time: 55.4041 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #152: GFLOPs: 7235.4610. Time: 55.2500 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #153: GFLOPs: 7450.0245. Time: 53.6588 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #154: GFLOPs: 7627.0981. Time: 52.4130 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #155: GFLOPs: 7582.4384. Time: 52.7217 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #156: GFLOPs: 7582.7927. Time: 52.7193 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #157: GFLOPs: 6910.1863. Time: 57.8507 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #158: GFLOPs: 6869.7610. Time: 58.1912 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #159: GFLOPs: 7862.0864. Time: 50.8465 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #160: GFLOPs: 6342.1871. Time: 63.0318 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #161: GFLOPs: 6909.1086. Time: 57.8598 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #162: GFLOPs: 7014.2202. Time: 56.9927 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #163: GFLOPs: 1665.5990. Time: 240.0094 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #164: GFLOPs: 1667.1175. Time: 239.7907 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #165: GFLOPs: 4785.9111. Time: 83.5284 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #166: GFLOPs: 4726.9391. Time: 84.5704 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #167: GFLOPs: 7414.8025. Time: 53.9137 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #168: GFLOPs: 4822.1329. Time: 82.9009 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #169: GFLOPs: 7672.9257. Time: 52.1000 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #170: GFLOPs: 5269.8667. Time: 75.8576 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #171: GFLOPs: 4940.2893. Time: 80.9182 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #172: GFLOPs: 6341.0457. Time: 63.0431 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #173: GFLOPs: 8074.8740. Time: 49.5066 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #174: GFLOPs: 4797.1492. Time: 83.3327 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #175: GFLOPs: 7642.1889. Time: 52.3095 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #176: GFLOPs: 7733.1826. Time: 51.6940 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #177: GFLOPs: 7739.7641. Time: 51.6501 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #178: GFLOPs: 7472.5812. Time: 53.4968 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #179: GFLOPs: 6230.9418. Time: 64.1571 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #180: GFLOPs: 6888.2371. Time: 58.0351 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #181: GFLOPs: 7393.8843. Time: 54.0662 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #182: GFLOPs: 7687.8581. Time: 51.9988 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #183: GFLOPs: 7469.7203. Time: 53.5173 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #184: GFLOPs: 7804.7191. Time: 51.2202 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #185: GFLOPs: 5890.8058. Time: 67.8616 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #186: GFLOPs: 7906.9251. Time: 50.5581 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #187: GFLOPs: 5519.8865. Time: 72.4217 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #188: GFLOPs: 7750.7404. Time: 51.5769 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #189: GFLOPs: 7937.7520. Time: 50.3618 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #190: GFLOPs: 6077.6935. Time: 65.7748 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #191: GFLOPs: 489.9343. Time: 815.9448 us. Best GFLOPs: 8706.1668
2024-05-01 18:20:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #192: GFLOPs: 2448.8789. Time: 163.2418 us. Best GFLOPs: 8706.1668
2024-05-01 19:23:32 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 19:23:35 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-05-01 19:23:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 405 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 19:23:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 797 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 19:23:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 1197 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 19:23:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 1597 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 19:23:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 2002 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 19:23:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 2396 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 19:23:56 [INFO] [evolutionary_search.cc:723] Sampled 64 candidate(s)
2024-05-01 19:24:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 19:24:17 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 19:24:28 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 19:24:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb4c38a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86ee988)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8730288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x333c218)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x46dae68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb032508)]: 116 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb0dcd68)]: 0 failure(s)
2024-05-01 19:24:43 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.0493  1.9704  1.9672  1.8924  1.8349  1.8032  1.7997  1.7968  1.7843  1.7821  1.7810  1.7806  1.7794  1.7587  1.7527  1.7404
[17 : 32]:	1.7243  1.7176  1.7170  1.7121  1.6691  1.6540  1.6520  1.6363  1.6349  1.6319  1.6229  1.6221  1.6210  1.6190  1.6126  1.6122
[33 : 48]:	1.6075  1.5988  1.5964  1.5924  1.5924  1.5894  1.5888  1.5865  1.5850  1.5786  1.5662  1.5621  1.5588  1.5563  1.5514  1.5499
[49 : 64]:	1.5495  1.5410  1.5238  1.5194  1.5004  1.4943  1.4937  1.4796  1.4698  1.4667  1.4645  1.4623  1.4590  1.4561  1.4537  1.4422
2024-05-01 19:24:43 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 19:24:43 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #193: GFLOPs: 6947.4323. Time: 57.5406 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #194: GFLOPs: 7074.7196. Time: 56.5053 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #195: GFLOPs: 6934.2396. Time: 57.6501 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #196: GFLOPs: 4826.2919. Time: 82.8295 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #197: GFLOPs: 4710.4878. Time: 84.8658 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #198: GFLOPs: 5077.9161. Time: 78.7251 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #199: GFLOPs: 4981.7512. Time: 80.2447 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #200: GFLOPs: 7614.1364. Time: 52.5023 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #201: GFLOPs: 4669.7316. Time: 85.6065 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #202: GFLOPs: 4695.2795. Time: 85.1407 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #203: GFLOPs: 4694.7033. Time: 85.1511 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #204: GFLOPs: 7085.5401. Time: 56.4190 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #205: GFLOPs: 6767.8780. Time: 59.0672 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #206: GFLOPs: 5273.3278. Time: 75.8078 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #207: GFLOPs: 4494.7220. Time: 88.9397 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #208: GFLOPs: 7228.3946. Time: 55.3040 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #209: GFLOPs: 4527.5653. Time: 88.2946 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #210: GFLOPs: 4853.0648. Time: 82.3726 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #211: GFLOPs: 6577.5047. Time: 60.7768 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #212: GFLOPs: 6714.9784. Time: 59.5325 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #213: GFLOPs: 5494.8031. Time: 72.7523 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #214: GFLOPs: 7540.7011. Time: 53.0136 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #215: GFLOPs: 1406.2393. Time: 284.2755 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #216: GFLOPs: 7510.1800. Time: 53.2290 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #217: GFLOPs: 7118.9388. Time: 56.1543 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #218: GFLOPs: 7538.5584. Time: 53.0286 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #219: GFLOPs: 4906.2063. Time: 81.4803 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #220: GFLOPs: 7260.7981. Time: 55.0572 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #221: GFLOPs: 3358.9119. Time: 119.0145 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #222: GFLOPs: 7506.5857. Time: 53.2545 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #223: GFLOPs: 7118.5582. Time: 56.1573 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #224: GFLOPs: 4536.4376. Time: 88.1219 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #225: GFLOPs: 7593.1590. Time: 52.6473 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #226: GFLOPs: 7525.8596. Time: 53.1181 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #227: GFLOPs: 7744.4087. Time: 51.6191 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #228: GFLOPs: 3297.2300. Time: 121.2410 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #229: GFLOPs: 3297.6133. Time: 121.2269 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #230: GFLOPs: 2704.7080. Time: 147.8013 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #231: GFLOPs: 4652.5060. Time: 85.9234 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #232: GFLOPs: 4814.3170. Time: 83.0355 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #233: GFLOPs: 5147.9486. Time: 77.6541 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #234: GFLOPs: 20.8467. Time: 19176.1067 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #235: GFLOPs: 5276.6525. Time: 75.7600 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #236: GFLOPs: 4586.9127. Time: 87.1522 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #237: GFLOPs: 20.9487. Time: 19082.7522 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #238: GFLOPs: 277.0127. Time: 1443.1086 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #239: GFLOPs: 5340.2714. Time: 74.8575 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #240: GFLOPs: 20.9791. Time: 19055.1045 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #241: GFLOPs: 7451.0381. Time: 53.6515 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #242: GFLOPs: 4539.9375. Time: 88.0539 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #243: GFLOPs: 6973.4556. Time: 57.3259 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #244: GFLOPs: 6921.6740. Time: 57.7547 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #245: GFLOPs: 5472.4176. Time: 73.0499 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #246: GFLOPs: 6823.5132. Time: 58.5856 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #247: GFLOPs: 5011.8894. Time: 79.7622 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #248: GFLOPs: 5412.9521. Time: 73.8524 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #249: GFLOPs: 7442.9283. Time: 53.7100 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #250: GFLOPs: 7440.4289. Time: 53.7280 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #251: GFLOPs: 6541.9459. Time: 61.1071 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #252: GFLOPs: 7559.4369. Time: 52.8822 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #253: GFLOPs: 6727.9435. Time: 59.4178 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #254: GFLOPs: 224.8995. Time: 1777.5024 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #255: GFLOPs: 845.4575. Time: 472.8320 us. Best GFLOPs: 8706.1668
2024-05-01 19:26:13 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #256: GFLOPs: 3921.2551. Time: 101.9468 us. Best GFLOPs: 8706.1668
