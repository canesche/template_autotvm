2024-04-29 01:54:28 [INFO] [task_scheduler.cc:160] Initializing Task #49: "fused_nn_conv2d_add_nn_relu_28"
2024-04-29 01:54:28 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(64), T.int64(54), T.int64(54)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(80), T.int64(54), T.int64(54), T.int64(64), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(80), T.int64(54), T.int64(54)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(80), T.int64(54), T.int64(54)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 01:54:28 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 01:54:28 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(9), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(93312)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(64), rc_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(2916))
                                    v2 = T.axis.spatial(T.int64(54), ax0_ax1_ax2_ax3_fused % T.int64(2916) // T.int64(54))
                                    v3 = T.axis.spatial(T.int64(54), ax0_ax1_ax2_ax3_fused % T.int64(54))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(640)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(80), nn_0_ff_0_yy_0_xx_0_fused * T.int64(20) + ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(64), rc_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(18), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(10), T.int64(9), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(80), nn_0_ff_0_yy_0_xx_0_fused * T.int64(20) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(10) + ff_3 * T.int64(10) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused // T.int64(3) * T.int64(18) + yy_3 * T.int64(9) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(18) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(64), rc_0 * T.int64(32) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(10), T.int64(18), T.int64(18)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(80), nn_0_ff_0_yy_0_xx_0_fused * T.int64(20) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(10) + ax1)
                                v2 = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused // T.int64(3) * T.int64(18) + ax2)
                                v3 = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(18) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 2, 1, 10])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 3, 1, 2, 9])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 3, 1, 18, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 16, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 01:54:28 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(9), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(93312)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(2916))
                                    v2 = T.axis.spatial(T.int64(54), ax0_ax1_ax2_ax3_fused % T.int64(2916) // T.int64(54))
                                    v3 = T.axis.spatial(T.int64(54), ax0_ax1_ax2_ax3_fused % T.int64(54))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(640)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(80), nn_0_ff_0_yy_0_xx_0_fused * T.int64(20) + ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(18), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(10), T.int64(9), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(80), nn_0_ff_0_yy_0_xx_0_fused * T.int64(20) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(10) + ff_3 * T.int64(10) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused // T.int64(3) * T.int64(18) + yy_3 * T.int64(9) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(18) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(32) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(10), T.int64(18), T.int64(18)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(80), nn_0_ff_0_yy_0_xx_0_fused * T.int64(20) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(10) + ax1)
                                v2 = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused // T.int64(3) * T.int64(18) + ax2)
                                v3 = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(18) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 2, 1, 10])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 3, 1, 2, 9])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 3, 1, 18, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 16, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 01:54:28 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(9), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(93312)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(2916))
                                    v2 = T.axis.spatial(T.int64(54), ax0_ax1_ax2_ax3_fused % T.int64(2916) // T.int64(54))
                                    v3 = T.axis.spatial(T.int64(54), ax0_ax1_ax2_ax3_fused % T.int64(54))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(640)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(80), nn_0_ff_0_yy_0_xx_0_fused * T.int64(20) + ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(18), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(10), T.int64(9), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(80), nn_0_ff_0_yy_0_xx_0_fused * T.int64(20) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(10) + ff_3 * T.int64(10) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused // T.int64(3) * T.int64(18) + yy_3 * T.int64(9) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(18) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(32) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(10), T.int64(18), T.int64(18)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(80), nn_0_ff_0_yy_0_xx_0_fused * T.int64(20) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(10) + ax1)
                                v2 = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused // T.int64(3) * T.int64(18) + ax2)
                                v3 = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(18) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 2, 1, 10])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 3, 1, 2, 9])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 3, 1, 18, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 16, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 03:26:01 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:26:01 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:26:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb229ba8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x33477d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb24a4e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x32da478)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb47a048)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xaaf2748)]: 474 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb3dfda8)]: 0 failure(s)
2024-04-29 03:26:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb229ba8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x33477d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb24a4e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x32da478)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb47a048)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xaaf2748)]: 947 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb3dfda8)]: 0 failure(s)
2024-04-29 03:26:05 [INFO] [evolutionary_search.cc:723] Sampled 77 candidate(s)
2024-04-29 03:26:08 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb229ba8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x33477d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb24a4e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x32da478)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb47a048)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xaaf2748)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb3dfda8)]: 0 failure(s)
2024-04-29 03:26:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb229ba8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x33477d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb24a4e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x32da478)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb47a048)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xaaf2748)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb3dfda8)]: 0 failure(s)
2024-04-29 03:26:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb229ba8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x33477d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb24a4e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x32da478)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb47a048)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xaaf2748)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb3dfda8)]: 0 failure(s)
2024-04-29 03:26:16 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb229ba8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x33477d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb24a4e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x32da478)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb47a048)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xaaf2748)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb3dfda8)]: 0 failure(s)
2024-04-29 03:26:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9996  0.9985  0.9981  0.9973  0.9964  0.9959  0.9958  0.9956  0.9939  0.9920  0.9918  0.9914  0.9914  0.9913  0.9907
[17 : 32]:	0.9902  0.9894  0.9890  0.9890  0.9887  0.9878  0.9863  0.9847  0.9844  0.9835  0.9821  0.9820  0.9818  0.9816  0.9807  0.9805
[33 : 48]:	0.9799  0.9797  0.9796  0.9787  0.9783  0.9773  0.9772  0.9769  0.9761  0.9758  0.9749  0.9739  0.9735  0.9728  0.9727  0.9716
[49 : 64]:	0.9712  0.9709  0.9708  0.9700  0.9692  0.9691  0.9678  0.9672  0.9669  0.9668  0.9667  0.9664  0.9663  0.9655  0.9647  0.9646
2024-04-29 03:26:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:26:16 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #1: GFLOPs: 958.4776. Time: 31.6402 us. Best GFLOPs: 958.4776
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #2: GFLOPs: 187.2249. Time: 161.9785 us. Best GFLOPs: 958.4776
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #3: GFLOPs: 722.4411. Time: 41.9777 us. Best GFLOPs: 958.4776
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #4: GFLOPs: 102.1931. Time: 296.7560 us. Best GFLOPs: 958.4776
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #5: GFLOPs: 212.8795. Time: 142.4581 us. Best GFLOPs: 958.4776
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #6: GFLOPs: 827.6369. Time: 36.6422 us. Best GFLOPs: 958.4776
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #7: GFLOPs: 1062.8342. Time: 28.5335 us. Best GFLOPs: 1062.8342
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #8: GFLOPs: 188.7797. Time: 160.6444 us. Best GFLOPs: 1062.8342
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #9: GFLOPs: 66.5728. Time: 455.5374 us. Best GFLOPs: 1062.8342
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #10: GFLOPs: 23.2758. Time: 1302.9136 us. Best GFLOPs: 1062.8342
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #11: GFLOPs: 760.1571. Time: 39.8949 us. Best GFLOPs: 1062.8342
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #12: GFLOPs: 1061.6245. Time: 28.5660 us. Best GFLOPs: 1062.8342
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #13: GFLOPs: 1679.2626. Time: 18.0594 us. Best GFLOPs: 1679.2626
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #14: GFLOPs: 224.9323. Time: 134.8246 us. Best GFLOPs: 1679.2626
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #15: GFLOPs: 419.1234. Time: 72.3567 us. Best GFLOPs: 1679.2626
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #16: GFLOPs: 691.3565. Time: 43.8651 us. Best GFLOPs: 1679.2626
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #17: GFLOPs: 438.3144. Time: 69.1887 us. Best GFLOPs: 1679.2626
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #18: GFLOPs: 2119.7297. Time: 14.3067 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #19: GFLOPs: 764.5846. Time: 39.6639 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #20: GFLOPs: 1120.1143. Time: 27.0744 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #21: GFLOPs: 1114.6485. Time: 27.2071 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #22: GFLOPs: 1064.8999. Time: 28.4782 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #23: GFLOPs: 39.0509. Time: 776.5855 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:121] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #24: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(3), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(54), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(36), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(80), nn_1_ff_1_yy_1_xx_1_fused // T.int64(27) * T.int64(40) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(18) * T.int64(20) + ff_3_init * T.int64(5) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(27) * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused * T.int64(18) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(18) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(14)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(36), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(972))
                                        v2 = T.axis.spatial(T.int64(54), (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(972) // T.int64(18))
                                        v3 = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused * T.int64(18) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(18))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(36) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1944))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(36), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(80), (ax0_ax1_ax2_ax3_fused_0 * T.int64(72) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(72) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(36) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(160))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(80), nn_1_ff_1_yy_1_xx_1_fused // T.int64(27) * T.int64(40) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(18) * T.int64(20) + ff_3 * T.int64(5) + ff_4)
                                v_yy = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(27) * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused * T.int64(18) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(18) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(2) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(20), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(80), nn_1_ff_1_yy_1_xx_1_fused // T.int64(27) * T.int64(40) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(18) * T.int64(20) + ax1)
                            v2 = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(27) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused * T.int64(18) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(18) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 2, 4, 5])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 27, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[3, 1, 18, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 1, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 36, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 36, 2], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #25: GFLOPs: 25.4868. Time: 1189.8880 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #26: GFLOPs: 1289.5699. Time: 23.5167 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #27: GFLOPs: 377.9780. Time: 80.2332 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #28: GFLOPs: 0.6775. Time: 44761.7693 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #29: GFLOPs: 113.5561. Time: 267.0609 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #30: GFLOPs: 205.2042. Time: 147.7865 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #31: GFLOPs: 2066.8083. Time: 14.6731 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #32: GFLOPs: 1324.6675. Time: 22.8936 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #33: GFLOPs: 799.4271. Time: 37.9352 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #34: GFLOPs: 30.0750. Time: 1008.3584 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #35: GFLOPs: 671.7473. Time: 45.1455 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #36: GFLOPs: 1314.3858. Time: 23.0727 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #37: GFLOPs: 1302.5501. Time: 23.2823 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #38: GFLOPs: 381.9412. Time: 79.4007 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #39: GFLOPs: 926.4160. Time: 32.7352 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #40: GFLOPs: 1730.5903. Time: 17.5237 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #41: GFLOPs: 2072.6489. Time: 14.6317 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #42: GFLOPs: 1709.0099. Time: 17.7450 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #43: GFLOPs: 1133.2317. Time: 26.7610 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #44: GFLOPs: 1576.7930. Time: 19.2330 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #45: GFLOPs: 833.8599. Time: 36.3687 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #46: GFLOPs: 39.3845. Time: 770.0086 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #47: GFLOPs: 1403.7530. Time: 21.6038 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #48: GFLOPs: 27.2058. Time: 1114.7036 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #49: GFLOPs: 1092.4663. Time: 27.7596 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:121] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #50: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(18), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(40), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(18), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(80), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused * T.int64(18) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused * T.int64(3) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(64), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(40), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused)
                                        v2 = T.axis.spatial(T.int64(54), (ax0_ax1_ax2_ax3_fused_0 * T.int64(120) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(120) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(40) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(162))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(40), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(80), ax0_ax1_ax2_ax3_fused_0 * T.int64(160) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2)
                                        v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused)
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(40) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(80))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(18), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(80), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused * T.int64(18) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused * T.int64(3) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(64), rc_0_ry_0_rx_0_fused + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(18), T.int64(3)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(80), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused * T.int64(18) + ax2)
                            v3 = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused * T.int64(3) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 40, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 3, 1, 18, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[18, 1, 1, 3, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 40, 3], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 40, 4], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:121] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #51: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(90), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(54), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(80), nn_0_ff_0_yy_0_xx_0_fused // T.int64(18) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(27) * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(54), nn_2_ff_2_yy_2_xx_2_fused % T.int64(27) * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused % T.int64(18) * T.int64(3) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(54), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(162) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(162))
                                        v2 = T.axis.spatial(T.int64(54), (ax0_ax1_ax2_ax3_fused_0 * T.int64(162) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(162) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused % T.int64(18) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(162) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(54), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(80), nn_0_ff_0_yy_0_xx_0_fused // T.int64(18) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(54) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2))
                                    v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(54) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(54) + ax0_ax1_ax2_ax3_fused_1 < T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(3), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(80), nn_0_ff_0_yy_0_xx_0_fused // T.int64(18) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(27) * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(54), nn_2_ff_2_yy_2_xx_2_fused % T.int64(27) * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused % T.int64(18) * T.int64(3) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(2) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(3)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(80), nn_0_ff_0_yy_0_xx_0_fused // T.int64(18) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(27) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(54), nn_2_ff_2_yy_2_xx_2_fused % T.int64(27) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused % T.int64(18) * T.int64(3) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[5, 4, 2, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 27, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[18, 1, 1, 3, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 1, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 54, 3], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116 = sch.split(loop=l114, factors=[None, 54], preserve_unit_iters=True)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b118)
l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:121] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #52: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(54), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(5), T.int64(9), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(80), nn_2_ff_2_yy_2_xx_2_fused // T.int64(27) * T.int64(40) + ff_3_init * T.int64(8) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused // T.int64(3) * T.int64(27) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(27) // T.int64(9) * T.int64(9) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(18) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(9) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(16), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(72)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(54), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(64), rc_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(162) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2916))
                                        v2 = T.axis.spatial(T.int64(54), (ax0_ax1_ax2_ax3_fused_0 * T.int64(162) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2916) // T.int64(54))
                                        v3 = T.axis.spatial(T.int64(54), (ax0_ax1_ax2_ax3_fused_0 * T.int64(162) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(54))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(54), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(80), (ax0_ax1_ax2_ax3_fused_0 * T.int64(54) + ax0_ax1_ax2_ax3_fused_1) // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(64), rc_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(54) + ax0_ax1_ax2_ax3_fused_1) % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(54) + ax0_ax1_ax2_ax3_fused_1 < T.int64(320))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(9), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(80), nn_2_ff_2_yy_2_xx_2_fused // T.int64(27) * T.int64(40) + ff_3 * T.int64(8) + ff_4)
                                v_yy = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused // T.int64(3) * T.int64(27) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(27) // T.int64(9) * T.int64(9) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(18) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(9) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(64), rc_0 * T.int64(4) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(40), T.int64(9), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(80), nn_2_ff_2_yy_2_xx_2_fused // T.int64(27) * T.int64(40) + ax1)
                            v2 = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused // T.int64(3) * T.int64(27) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(27) // T.int64(9) * T.int64(9) + ax2)
                            v3 = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(18) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(9) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 2, 5, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 3, 9, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 3, 9, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[16, 2, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 54, 3], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119 = sch.split(loop=l117, factors=[None, 54], preserve_unit_iters=True)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b121)
l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b122)
l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b123)
l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b124)
b169 = sch.get_block(name="conv2d_nchw", func_name="main")
l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189 = sch.get_loops(block=b169)
b190 = sch.decompose_reduction(block=b169, loop=l173)
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:121] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #53: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(108), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(60), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(80), nn_1_ff_1_yy_1_xx_1_fused // T.int64(3) * T.int64(40) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(3) * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused // T.int64(6) * T.int64(3) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused % T.int64(6) * T.int64(9) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(3) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(60), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(64), rc_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(180) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(27))
                                        v2 = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused // T.int64(6) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(180) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(27) // T.int64(9))
                                        v3 = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused % T.int64(6) * T.int64(9) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(180) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(60) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(432))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(11)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(60), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(80), (ax0_ax1_ax2_ax3_fused_0 * T.int64(120) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(16))
                                        v1 = T.axis.spatial(T.int64(64), rc_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(120) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(60) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1280))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(80), nn_1_ff_1_yy_1_xx_1_fused // T.int64(3) * T.int64(40) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(3) * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused // T.int64(6) * T.int64(3) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused % T.int64(6) * T.int64(9) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(3) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(64), rc_0 * T.int64(16) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(3), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(80), nn_1_ff_1_yy_1_xx_1_fused // T.int64(3) * T.int64(40) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(3) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused // T.int64(6) * T.int64(3) + ax2)
                            v3 = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused % T.int64(6) * T.int64(9) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(3) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 20, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[18, 1, 1, 3, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[6, 3, 3, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 8, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 60, 3], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119, l120 = sch.split(loop=l117, factors=[None, 60, 2], preserve_unit_iters=True)
sch.vectorize(loop=l120)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b121 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b121, ann_key="meta_schedule.unroll_explicit")
b122, b123, b124, b125 = sch.get_child_blocks(b121)
l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b122)
l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b123)
l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163 = sch.get_loops(block=b124)
sch.annotate(block_or_loop=l144, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l144, ann_key="pragma_unroll_explicit", ann_val=1)
l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b125)
b171 = sch.get_block(name="conv2d_nchw", func_name="main")
l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190, l191 = sch.get_loops(block=b171)
b192 = sch.decompose_reduction(block=b171, loop=l175)
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #54: GFLOPs: 644.8726. Time: 47.0270 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #55: GFLOPs: 96.2144. Time: 315.1960 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #56: GFLOPs: 1410.4992. Time: 21.5005 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #57: GFLOPs: 810.7353. Time: 37.4060 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #58: GFLOPs: 314.2635. Time: 96.4999 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #59: GFLOPs: 603.1782. Time: 50.2777 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #60: GFLOPs: 20.8144. Time: 1456.9888 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #61: GFLOPs: 1401.9243. Time: 21.6320 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #62: GFLOPs: 39.4395. Time: 768.9353 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #63: GFLOPs: 798.5691. Time: 37.9759 us. Best GFLOPs: 2119.7297
2024-04-29 04:03:03 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #64: GFLOPs: 89.7597. Time: 337.8620 us. Best GFLOPs: 2119.7297
2024-04-29 07:45:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:45:03 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-29 07:45:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb229ba8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x33477d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb24a4e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x32da478)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb47a048)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xaaf2748)]: 422 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb3dfda8)]: 0 failure(s)
2024-04-29 07:45:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb229ba8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x33477d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb24a4e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x32da478)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb47a048)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xaaf2748)]: 842 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb3dfda8)]: 0 failure(s)
2024-04-29 07:45:07 [INFO] [evolutionary_search.cc:723] Sampled 64 candidate(s)
2024-04-29 07:45:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb229ba8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x33477d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb24a4e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x32da478)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb47a048)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xaaf2748)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb3dfda8)]: 0 failure(s)
2024-04-29 07:45:14 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb229ba8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x33477d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb24a4e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x32da478)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb47a048)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xaaf2748)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb3dfda8)]: 0 failure(s)
2024-04-29 07:45:17 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb229ba8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x33477d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb24a4e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x32da478)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb47a048)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xaaf2748)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb3dfda8)]: 0 failure(s)
2024-04-29 07:45:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb229ba8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x33477d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb24a4e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x32da478)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb47a048)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xaaf2748)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb3dfda8)]: 0 failure(s)
2024-04-29 07:45:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.4733  2.4640  2.4457  2.3846  2.2970  2.2939  2.2781  2.2705  2.1494  2.1329  2.1149  2.0846  2.0482  2.0231  2.0020  1.9921
[17 : 32]:	1.9796  1.9540  1.9453  1.9244  1.9114  1.8609  1.8466  1.8327  1.8121  1.8081  1.7848  1.7763  1.7637  1.7605  1.7582  1.7576
[33 : 48]:	1.7556  1.7504  1.7432  1.7422  1.7373  1.7188  1.7167  1.6983  1.6966  1.6843  1.6701  1.6674  1.6648  1.6600  1.6561  1.6534
[49 : 64]:	1.6534  1.6428  1.6423  1.6378  1.6245  1.6185  1.6166  1.6127  1.6002  1.5978  1.5966  1.5946  1.5945  1.5944  1.5944  1.5920
2024-04-29 07:45:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:45:22 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #65: GFLOPs: 1128.4594. Time: 26.8742 us. Best GFLOPs: 2119.7297
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #66: GFLOPs: 1121.8102. Time: 27.0335 us. Best GFLOPs: 2119.7297
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #67: GFLOPs: 1128.6745. Time: 26.8690 us. Best GFLOPs: 2119.7297
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #68: GFLOPs: 1130.0419. Time: 26.8365 us. Best GFLOPs: 2119.7297
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #69: GFLOPs: 1587.2025. Time: 19.1068 us. Best GFLOPs: 2119.7297
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #70: GFLOPs: 1493.6016. Time: 20.3042 us. Best GFLOPs: 2119.7297
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #71: GFLOPs: 867.7796. Time: 34.9471 us. Best GFLOPs: 2119.7297
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #72: GFLOPs: 1588.1240. Time: 19.0957 us. Best GFLOPs: 2119.7297
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #73: GFLOPs: 842.7326. Time: 35.9858 us. Best GFLOPs: 2119.7297
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #74: GFLOPs: 3063.7925. Time: 9.8983 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #75: GFLOPs: 1915.5351. Time: 15.8318 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #76: GFLOPs: 1534.9368. Time: 19.7574 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #77: GFLOPs: 1291.9886. Time: 23.4727 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #78: GFLOPs: 1368.5967. Time: 22.1588 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #79: GFLOPs: 862.1619. Time: 35.1748 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #80: GFLOPs: 829.7794. Time: 36.5475 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #81: GFLOPs: 920.7799. Time: 32.9356 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #82: GFLOPs: 932.5756. Time: 32.5190 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #83: GFLOPs: 947.0308. Time: 32.0226 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #84: GFLOPs: 1971.9194. Time: 15.3791 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #85: GFLOPs: 2100.4268. Time: 14.4382 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #86: GFLOPs: 1815.8307. Time: 16.7011 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #87: GFLOPs: 2663.5798. Time: 11.3856 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #88: GFLOPs: 2289.1546. Time: 13.2479 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #89: GFLOPs: 2226.6205. Time: 13.6199 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #90: GFLOPs: 2262.5640. Time: 13.4036 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #91: GFLOPs: 975.4302. Time: 31.0903 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #92: GFLOPs: 2321.1427. Time: 13.0653 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #93: GFLOPs: 1380.1893. Time: 21.9726 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #94: GFLOPs: 2115.8572. Time: 14.3329 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #95: GFLOPs: 1217.5470. Time: 24.9078 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #96: GFLOPs: 1582.4786. Time: 19.1639 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #97: GFLOPs: 984.0409. Time: 30.8182 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #98: GFLOPs: 1075.2138. Time: 28.2050 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #99: GFLOPs: 2363.9810. Time: 12.8285 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #100: GFLOPs: 2342.6164. Time: 12.9455 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #101: GFLOPs: 1820.3039. Time: 16.6601 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #102: GFLOPs: 1442.7356. Time: 21.0201 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #103: GFLOPs: 2062.4116. Time: 14.7043 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #104: GFLOPs: 2301.8425. Time: 13.1748 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #105: GFLOPs: 2185.6435. Time: 13.8753 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #106: GFLOPs: 1769.4053. Time: 17.1393 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #107: GFLOPs: 1869.8073. Time: 16.2190 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #108: GFLOPs: 1500.3891. Time: 20.2124 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #109: GFLOPs: 2343.7713. Time: 12.9391 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #110: GFLOPs: 1955.9422. Time: 15.5048 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #111: GFLOPs: 1932.7740. Time: 15.6906 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #112: GFLOPs: 2303.2769. Time: 13.1666 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #113: GFLOPs: 1348.8058. Time: 22.4839 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #114: GFLOPs: 992.2903. Time: 30.5620 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #115: GFLOPs: 991.9238. Time: 30.5733 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #116: GFLOPs: 1719.5403. Time: 17.6363 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #117: GFLOPs: 1321.9530. Time: 22.9406 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #118: GFLOPs: 2318.8163. Time: 13.0784 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #119: GFLOPs: 2188.9925. Time: 13.8540 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #120: GFLOPs: 2191.1220. Time: 13.8406 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #121: GFLOPs: 1959.7924. Time: 15.4743 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #122: GFLOPs: 1928.3385. Time: 15.7267 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #123: GFLOPs: 1997.0824. Time: 15.1854 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #124: GFLOPs: 1707.6493. Time: 17.7591 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #125: GFLOPs: 1781.2474. Time: 17.0254 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #126: GFLOPs: 1166.5095. Time: 25.9976 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #127: GFLOPs: 1453.2187. Time: 20.8684 us. Best GFLOPs: 3063.7925
2024-04-29 07:46:57 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #128: GFLOPs: 682.4256. Time: 44.4391 us. Best GFLOPs: 3063.7925
2024-05-01 15:10:06 [INFO] [task_scheduler.cc:160] Initializing Task #49: "fused_nn_conv2d_add_nn_relu_28"
2024-05-01 15:10:06 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(64), T.int64(54), T.int64(54)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(80), T.int64(54), T.int64(54), T.int64(64), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(80), T.int64(54), T.int64(54)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(80), T.int64(54), T.int64(54)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-05-01 15:10:06 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-05-01 15:10:06 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(12), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(90), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(64), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2916)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(64), rc_0)
                                    v2 = T.axis.spatial(T.int64(54), ax0_ax1_ax2_ax3_fused // T.int64(54))
                                    v3 = T.axis.spatial(T.int64(54), ax0_ax1_ax2_ax3_fused % T.int64(54))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(80)):
                                with T.block("p1_shared"):
                                    v0, v1 = T.axis.remap("SS", [ax0_ax1_ax2_ax3_fused, rc_0])
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(9), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(80), nn_1_ff_1_yy_1_xx_1_fused // T.int64(6) * T.int64(40) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(18) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(6) // T.int64(3) * T.int64(27) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(18) // T.int64(2) * T.int64(3) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(18) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(9) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(64), rc_0 + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(3), T.int64(9)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(80), nn_1_ff_1_yy_1_xx_1_fused // T.int64(6) * T.int64(40) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(18) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(6) // T.int64(3) * T.int64(27) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(18) // T.int64(2) * T.int64(3) + ax2)
                                v3 = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(18) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(9) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 5, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 9, 3, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 3, 2, 9, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-05-01 15:10:06 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(12), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(90), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(64), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2916)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused)
                                    v2 = T.axis.spatial(T.int64(54), ax0_ax1_ax2_ax3_fused // T.int64(54))
                                    v3 = T.axis.spatial(T.int64(54), ax0_ax1_ax2_ax3_fused % T.int64(54))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(80)):
                                with T.block("p1_shared"):
                                    v0, v1 = T.axis.remap("SS", [ax0_ax1_ax2_ax3_fused, rc_0_ry_0_rx_0_fused])
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(9), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(80), nn_1_ff_1_yy_1_xx_1_fused // T.int64(6) * T.int64(40) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(18) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(6) // T.int64(3) * T.int64(27) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(18) // T.int64(2) * T.int64(3) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(18) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(9) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(64), rc_0_ry_0_rx_0_fused + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(3), T.int64(9)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(80), nn_1_ff_1_yy_1_xx_1_fused // T.int64(6) * T.int64(40) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(18) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(6) // T.int64(3) * T.int64(27) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(18) // T.int64(2) * T.int64(3) + ax2)
                                v3 = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(18) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(9) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 5, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 9, 3, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 3, 2, 9, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-05-01 15:10:06 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(12), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(90), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(64), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2916)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused)
                                    v2 = T.axis.spatial(T.int64(54), ax0_ax1_ax2_ax3_fused // T.int64(54))
                                    v3 = T.axis.spatial(T.int64(54), ax0_ax1_ax2_ax3_fused % T.int64(54))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(80)):
                                with T.block("p1_shared"):
                                    v0, v1 = T.axis.remap("SS", [ax0_ax1_ax2_ax3_fused, rc_0_ry_0_rx_0_fused])
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(9), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(80), nn_1_ff_1_yy_1_xx_1_fused // T.int64(6) * T.int64(40) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(18) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(6) // T.int64(3) * T.int64(27) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(18) // T.int64(2) * T.int64(3) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(18) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(9) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(64), rc_0_ry_0_rx_0_fused + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(3), T.int64(9)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(80), nn_1_ff_1_yy_1_xx_1_fused // T.int64(6) * T.int64(40) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(18) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(6) // T.int64(3) * T.int64(27) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(18) // T.int64(2) * T.int64(3) + ax2)
                                v3 = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(18) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(9) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 5, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 9, 3, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 3, 2, 9, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-05-01 16:15:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 16:15:39 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-05-01 16:15:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4660a78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb25e9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x86ecfb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x38902b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x63efae8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3454368)]: 382 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb25e4f8)]: 0 failure(s)
2024-05-01 16:15:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4660a78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb25e9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x86ecfb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x38902b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x63efae8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3454368)]: 762 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb25e4f8)]: 0 failure(s)
2024-05-01 16:15:41 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-05-01 16:15:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4660a78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb25e9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x86ecfb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x38902b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x63efae8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3454368)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb25e4f8)]: 0 failure(s)
2024-05-01 16:15:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4660a78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb25e9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x86ecfb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x38902b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x63efae8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3454368)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb25e4f8)]: 0 failure(s)
2024-05-01 16:15:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4660a78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb25e9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x86ecfb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x38902b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x63efae8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3454368)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb25e4f8)]: 0 failure(s)
2024-05-01 16:15:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4660a78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xb25e9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x86ecfb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x38902b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x63efae8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3454368)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb25e4f8)]: 0 failure(s)
2024-05-01 16:15:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9983  0.9979  0.9979  0.9979  0.9972  0.9971  0.9968  0.9967  0.9944  0.9943  0.9937  0.9930  0.9923  0.9921  0.9909
[17 : 32]:	0.9906  0.9892  0.9887  0.9883  0.9875  0.9874  0.9874  0.9851  0.9851  0.9846  0.9836  0.9829  0.9827  0.9821  0.9810  0.9795
[33 : 48]:	0.9791  0.9786  0.9775  0.9774  0.9773  0.9766  0.9757  0.9755  0.9749  0.9744  0.9741  0.9736  0.9736  0.9734  0.9723  0.9717
[49 : 64]:	0.9717  0.9712  0.9710  0.9710  0.9705  0.9703  0.9702  0.9679  0.9666  0.9664  0.9655  0.9650  0.9649  0.9640  0.9633  0.9628
2024-05-01 16:15:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 16:15:52 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #1: GFLOPs: 499.3741. Time: 60.7288 us. Best GFLOPs: 499.3741
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #2: GFLOPs: 2824.7267. Time: 10.7360 us. Best GFLOPs: 2824.7267
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #3: GFLOPs: 1392.8044. Time: 21.7736 us. Best GFLOPs: 2824.7267
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #4: GFLOPs: 1780.4570. Time: 17.0329 us. Best GFLOPs: 2824.7267
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #5: GFLOPs: 946.3103. Time: 32.0470 us. Best GFLOPs: 2824.7267
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #6: GFLOPs: 39.1104. Time: 775.4054 us. Best GFLOPs: 2824.7267
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #7: GFLOPs: 1610.8918. Time: 18.8258 us. Best GFLOPs: 2824.7267
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #8: GFLOPs: 2210.8043. Time: 13.7174 us. Best GFLOPs: 2824.7267
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #9: GFLOPs: 910.7633. Time: 33.2978 us. Best GFLOPs: 2824.7267
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #10: GFLOPs: 1770.4699. Time: 17.1290 us. Best GFLOPs: 2824.7267
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #11: GFLOPs: 1014.1991. Time: 29.9018 us. Best GFLOPs: 2824.7267
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #12: GFLOPs: 1533.3536. Time: 19.7778 us. Best GFLOPs: 2824.7267
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #13: GFLOPs: 1824.1277. Time: 16.6252 us. Best GFLOPs: 2824.7267
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #14: GFLOPs: 190.7280. Time: 159.0034 us. Best GFLOPs: 2824.7267
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #15: GFLOPs: 1185.2888. Time: 25.5857 us. Best GFLOPs: 2824.7267
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:121] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #16: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(18), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(54), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(10), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(80), nn_1_ff_1_yy_1_xx_1_fused * T.int64(20) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(27) * T.int64(10) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(54), nn_2_ff_2_yy_2_xx_2_fused % T.int64(27) // T.int64(3) * T.int64(6) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused * T.int64(3) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": T.int64(1024), "meta_schedule.thread_extent_low_inclusive": T.int64(32), "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(64), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(54), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(64), rc_0)
                                    v2 = T.axis.spatial(T.int64(54), (ax0_ax1_ax2_ax3_fused_0 * T.int64(54) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(54) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(54), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(80), ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2)
                                        v1 = T.axis.spatial(T.int64(64), rc_0)
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(54) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(80))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(10), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(80), nn_1_ff_1_yy_1_xx_1_fused * T.int64(20) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(27) * T.int64(10) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(54), nn_2_ff_2_yy_2_xx_2_fused % T.int64(27) // T.int64(3) * T.int64(6) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused * T.int64(3) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(64), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": T.int64(1024), "meta_schedule.thread_extent_low_inclusive": T.int64(32), "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(10), T.int64(6), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(80), nn_1_ff_1_yy_1_xx_1_fused * T.int64(20) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(27) * T.int64(10) + ax1)
                            v2 = T.axis.spatial(T.int64(54), nn_2_ff_2_yy_2_xx_2_fused % T.int64(27) // T.int64(3) * T.int64(6) + ax2)
                            v3 = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused * T.int64(3) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 4, 2, 10, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 9, 6, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[18, 1, 3, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109 = sch.split(loop=l107, factors=[None, 54], preserve_unit_iters=True)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b87)
l117, l118, l119 = sch.split(loop=l116, factors=[None, 54, 4], preserve_unit_iters=True)
sch.vectorize(loop=l119)
sch.bind(loop=l118, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b121)
l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b122)
l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l142, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l142, ann_key="pragma_unroll_explicit", ann_val=1)
l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b124)
b169 = sch.get_block(name="conv2d_nchw", func_name="main")
l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189 = sch.get_loops(block=b169)
b190 = sch.decompose_reduction(block=b169, loop=l173)
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:121] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #17: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(80), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(54), T.int64(54)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(80), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(54), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(36), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(80), nn_1_ff_1_yy_1_xx_1_fused // T.int64(27) * T.int64(40) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(9) * T.int64(10) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused * T.int64(27) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(27) // T.int64(3) * T.int64(3) + yy_3_init * T.int64(3) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(18) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(9) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(16), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(162)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(36), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(64), rc_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(36) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1458))
                                    v2 = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused * T.int64(27) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(36) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1458) // T.int64(54))
                                    v3 = T.axis.spatial(T.int64(54), (ax0_ax1_ax2_ax3_fused_0 * T.int64(36) + ax0_ax1_ax2_ax3_fused_1) % T.int64(54))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(9)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(36), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(80), (ax0_ax1_ax2_ax3_fused_0 * T.int64(36) + ax0_ax1_ax2_ax3_fused_1) // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(64), rc_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(36) + ax0_ax1_ax2_ax3_fused_1) % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(36) + ax0_ax1_ax2_ax3_fused_1 < T.int64(320))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(80), nn_1_ff_1_yy_1_xx_1_fused // T.int64(27) * T.int64(40) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(9) * T.int64(10) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused * T.int64(27) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(27) // T.int64(3) * T.int64(3) + yy_3 * T.int64(3) + yy_4)
                                v_xx = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(18) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(9) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(64), rc_0 * T.int64(4) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(10), T.int64(3), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(80), nn_1_ff_1_yy_1_xx_1_fused // T.int64(27) * T.int64(40) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(9) * T.int64(10) + ax1)
                            v2 = T.axis.spatial(T.int64(54), nn_0_ff_0_yy_0_xx_0_fused * T.int64(27) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(27) // T.int64(3) * T.int64(3) + ax2)
                            v3 = T.axis.spatial(T.int64(54), nn_1_ff_1_yy_1_xx_1_fused % T.int64(3) * T.int64(18) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(9) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 4, 5, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 9, 1, 1, 3])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 3, 9, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[16, 2, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109 = sch.split(loop=l107, factors=[None, 36], preserve_unit_iters=True)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b87)
l117, l118 = sch.split(loop=l116, factors=[None, 36], preserve_unit_iters=True)
sch.bind(loop=l118, thread_axis="threadIdx.x")
b119 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b119, ann_key="meta_schedule.unroll_explicit")
b120, b121, b122, b123 = sch.get_child_blocks(b119)
l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b120)
l132, l133, l134, l135, l136, l137, l138, l139 = sch.get_loops(block=b121)
l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b122)
l160, l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b123)
b167 = sch.get_block(name="conv2d_nchw", func_name="main")
l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b167)
b188 = sch.decompose_reduction(block=b167, loop=l171)
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #18: GFLOPs: 1377.4709. Time: 22.0160 us. Best GFLOPs: 2824.7267
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #19: GFLOPs: 892.0190. Time: 33.9975 us. Best GFLOPs: 2824.7267
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #20: GFLOPs: 2040.5733. Time: 14.8617 us. Best GFLOPs: 2824.7267
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #21: GFLOPs: 2998.8872. Time: 10.1126 us. Best GFLOPs: 2998.8872
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #22: GFLOPs: 1082.5342. Time: 28.0143 us. Best GFLOPs: 2998.8872
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #23: GFLOPs: 214.0454. Time: 141.6821 us. Best GFLOPs: 2998.8872
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #24: GFLOPs: 727.9203. Time: 41.6617 us. Best GFLOPs: 2998.8872
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #25: GFLOPs: 53.8235. Time: 563.4416 us. Best GFLOPs: 2998.8872
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #26: GFLOPs: 1258.4680. Time: 24.0979 us. Best GFLOPs: 2998.8872
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #27: GFLOPs: 3173.2684. Time: 9.5568 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #28: GFLOPs: 825.8952. Time: 36.7194 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #29: GFLOPs: 1323.0499. Time: 22.9216 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #30: GFLOPs: 1902.0977. Time: 15.9437 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #31: GFLOPs: 1237.1084. Time: 24.5139 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #32: GFLOPs: 1745.8727. Time: 17.3703 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #33: GFLOPs: 2116.4781. Time: 14.3287 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #34: GFLOPs: 2805.7977. Time: 10.8085 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #35: GFLOPs: 1569.0310. Time: 19.3281 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #36: GFLOPs: 1013.1956. Time: 29.9314 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #37: GFLOPs: 8.1343. Time: 3728.2322 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #38: GFLOPs: 1710.9199. Time: 17.7252 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #39: GFLOPs: 2038.9854. Time: 14.8733 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #40: GFLOPs: 381.5252. Time: 79.4873 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #41: GFLOPs: 993.0821. Time: 30.5377 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #42: GFLOPs: 1537.4555. Time: 19.7251 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #43: GFLOPs: 961.5551. Time: 31.5389 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #44: GFLOPs: 836.3638. Time: 36.2598 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #45: GFLOPs: 1062.4151. Time: 28.5448 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #46: GFLOPs: 625.9483. Time: 48.4487 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #47: GFLOPs: 999.3865. Time: 30.3450 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #48: GFLOPs: 1876.7324. Time: 16.1591 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #49: GFLOPs: 1327.8881. Time: 22.8381 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #50: GFLOPs: 698.8452. Time: 43.3950 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #51: GFLOPs: 1833.8051. Time: 16.5374 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #52: GFLOPs: 971.6592. Time: 31.2109 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #53: GFLOPs: 121.4241. Time: 249.7560 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #54: GFLOPs: 2181.9054. Time: 13.8990 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #55: GFLOPs: 813.8214. Time: 37.2642 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #56: GFLOPs: 495.8321. Time: 61.1626 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #57: GFLOPs: 3039.2360. Time: 9.9783 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #58: GFLOPs: 4.1193. Time: 7361.9749 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #59: GFLOPs: 1090.2115. Time: 27.8170 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #60: GFLOPs: 488.6405. Time: 62.0628 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #61: GFLOPs: 2428.8074. Time: 12.4861 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #62: GFLOPs: 91.7451. Time: 330.5506 us. Best GFLOPs: 3173.2684
2024-05-01 16:38:18 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_conv2d_add_nn_relu_28] Trial #63: GFLOPs: 308.1956. Time: 98.3999 us. Best GFLOPs: 3173.2684
