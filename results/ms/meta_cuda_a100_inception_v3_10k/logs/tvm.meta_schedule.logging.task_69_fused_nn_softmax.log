2024-04-29 01:54:33 [INFO] [task_scheduler.cc:160] Initializing Task #69: "fused_nn_softmax"
2024-04-29 01:54:33 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
        T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
        T_softmax_expsum = T.alloc_buffer((T.int64(1),))
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_maxelem"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(p0[v_i0, v_k])
                T.writes(T_softmax_maxelem[v_i0])
                with T.init():
                    T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_exp"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                T.writes(T_softmax_exp[v_i0, v_i1])
                T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_expsum"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(T_softmax_exp[v_i0, v_k])
                T.writes(T_softmax_expsum[v_i0])
                with T.init():
                    T_softmax_expsum[v_i0] = T.float32(0)
                T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_norm"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                T.writes(T_softmax_norm[v_i0, v_i1])
                T.block_attr({"axis": 1})
                T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
2024-04-29 01:54:33 [INFO] [task_scheduler.cc:164] Total 4 design space(s) generated
2024-04-29 01:54:33 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0_i1_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for i0_i1_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(512) + i0_i1_fused_1)
                        T.where(i0_i1_fused_0 * T.int64(512) + i0_i1_fused_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v5)
l6, l7 = sch.get_loops(block=b3)
l8 = sch.fuse(l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13 = sch.get_loops(block=b2)
l14 = sch.fuse(l12, preserve_unit_iters=True)
l15, l16 = sch.split(loop=l14, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b0)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-04-29 01:54:33 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for k_0 in range(T.int64(250)):
                    for k_1 in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k_0 * T.int64(4) + k_1)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0_i1_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for i0_i1_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(512) + i0_i1_fused_1)
                        T.where(i0_i1_fused_0 * T.int64(512) + i0_i1_fused_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=0)
l6, l7 = sch.get_loops(block=b0)
l8, l9 = sch.split(loop=l7, factors=[None, v5], preserve_unit_iters=True)
sch.bind(loop=l9, thread_axis="threadIdx.x")
v10 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v10)
l11, l12 = sch.get_loops(block=b3)
l13 = sch.fuse(l11, l12, preserve_unit_iters=True)
v14 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
l15, l16 = sch.split(loop=l13, factors=[None, v14], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b2)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
l22, l23, l24 = sch.get_loops(block=b0)
l25 = sch.fuse(l22, preserve_unit_iters=True)
sch.bind(loop=l25, thread_axis="blockIdx.x")
2024-04-29 01:54:33 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(16)):
                    for ax1_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(64) + ax1_1)
                            T.where(ax1_0 * T.int64(64) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum_shared[v_i0])
                            with T.init():
                                T_softmax_expsum_shared[v_i0] = T.float32(0)
                            T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
                for i1_0 in range(T.int64(16)):
                    for i1_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("T_softmax_norm"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(64) + i1_1)
                            T.where(i1_0 * T.int64(64) + i1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum_shared[v_i0])
                            T.writes(T_softmax_norm[v_i0, v_i1])
                            T.block_attr({"axis": 1})
                            T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=4)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17, l18, l19 = sch.get_loops(block=b3)
l20 = sch.fuse(l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
l21, l22 = sch.get_loops(block=b0)
l23 = sch.fuse(l21, preserve_unit_iters=True)
l24, l25 = sch.split(loop=l23, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l24, thread_axis="blockIdx.x")
sch.bind(loop=l25, thread_axis="threadIdx.x")
2024-04-29 01:54:33 [INFO] [task_scheduler.cc:170] Design space #3:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(16)):
                    for ax1_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(64) + ax1_1)
                            T.where(ax1_0 * T.int64(64) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem_shared[v_i0])
                            with T.init():
                                T_softmax_maxelem_shared[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem_shared[v_i0] = T.max(T_softmax_maxelem_shared[v_i0], p0[v_i0, v_k])
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(16)):
                    for ax1_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(64) + ax1_1)
                            T.where(ax1_0 * T.int64(64) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem_shared[v_i0])
                            T.writes(T_softmax_expsum_shared[v_i0])
                            with T.init():
                                T_softmax_expsum_shared[v_i0] = T.float32(0)
                            T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem_shared[v_i0])
                for i1_0 in range(T.int64(16)):
                    for i1_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("T_softmax_norm"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(64) + i1_1)
                            T.where(i1_0 * T.int64(64) + i1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_i1], T_softmax_maxelem_shared[v_i0], T_softmax_expsum_shared[v_i0])
                            T.writes(T_softmax_norm[v_i0, v_i1])
                            T.block_attr({"axis": 1})
                            T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem_shared[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=4)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
b16, b17 = sch.get_consumers(block=b0)
l18, l19, l20, l21 = sch.get_loops(block=b16)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l22, l23, l24 = sch.get_loops(block=b0)
l25, l26 = sch.split(loop=l24, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l26, thread_axis="threadIdx.x")
v27 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v27)
l28, l29, l30 = sch.get_loops(block=b3)
l31 = sch.fuse(l28, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
2024-04-29 03:58:20 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:58:20 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:58:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3fc6b98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86a9ec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3def3d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5454f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb2c10e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x332d0f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3339378)]: 0 failure(s)
2024-04-29 03:58:21 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 03:58:21 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3fc6b98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86a9ec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3def3d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5454f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb2c10e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x332d0f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3339378)]: 0 failure(s)
2024-04-29 03:58:22 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3fc6b98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86a9ec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3def3d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5454f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb2c10e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x332d0f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3339378)]: 0 failure(s)
2024-04-29 03:58:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3fc6b98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86a9ec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3def3d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5454f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb2c10e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x332d0f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3339378)]: 0 failure(s)
2024-04-29 03:58:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3fc6b98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x86a9ec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3def3d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5454f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xb2c10e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x332d0f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3339378)]: 0 failure(s)
2024-04-29 03:58:23 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9955  0.9943  0.9913  0.9905  0.9890  0.9873  0.9819  0.9703  0.9698  0.9594  0.9593  0.9505  0.9405  0.9401  0.9334  0.9332
[17 : 32]:	0.9326  0.9324  0.9240  0.9239  0.9239  0.9239  0.9127  0.9111  0.9042  0.8957  0.8876  0.8869  0.8846  0.8840  0.8830  0.8826
[33 : 48]:	0.8795  0.8794  0.8782  0.8743  0.8679  0.8622  0.8589  0.8579  0.8545  0.8506  0.8504  0.8492  0.8488  0.8410  0.8404  0.8349
[49 : 64]:	0.8296  0.8282  0.8251  0.8232  0.8171  0.8153  0.8094  0.7958  0.7906  0.7733  0.7693  0.7647  0.7571  0.7559  0.7558  0.7550
2024-04-29 03:58:23 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 03:58:23 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #1: GFLOPs: 1.0439. Time: 3.8319 us. Best GFLOPs: 1.0439
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #2: GFLOPs: 0.2510. Time: 15.9345 us. Best GFLOPs: 1.0439
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #3: GFLOPs: 0.2385. Time: 16.7709 us. Best GFLOPs: 1.0439
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #4: GFLOPs: 1.1800. Time: 3.3899 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #5: GFLOPs: 0.1065. Time: 37.5607 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #6: GFLOPs: 0.1372. Time: 29.1570 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #7: GFLOPs: 0.4586. Time: 8.7214 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #8: GFLOPs: 0.6890. Time: 5.8053 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #9: GFLOPs: 0.1248. Time: 32.0534 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #10: GFLOPs: 0.0963. Time: 41.5398 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #11: GFLOPs: 0.0864. Time: 46.3188 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #12: GFLOPs: 0.2615. Time: 15.2939 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #13: GFLOPs: 0.1065. Time: 37.5523 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #14: GFLOPs: 0.1545. Time: 25.8951 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #15: GFLOPs: 0.2465. Time: 16.2285 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #16: GFLOPs: 0.2591. Time: 15.4387 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #17: GFLOPs: 0.1065. Time: 37.5572 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #18: GFLOPs: 0.2213. Time: 18.0786 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #19: GFLOPs: 0.1098. Time: 36.4253 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #20: GFLOPs: 0.0966. Time: 41.4088 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #21: GFLOPs: 0.1056. Time: 37.8643 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #22: GFLOPs: 0.1076. Time: 37.1873 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #23: GFLOPs: 0.1065. Time: 37.5621 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #24: GFLOPs: 0.1326. Time: 30.1594 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #25: GFLOPs: 1.1800. Time: 3.3898 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #26: GFLOPs: 0.1081. Time: 36.9912 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #27: GFLOPs: 0.1092. Time: 36.6436 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #28: GFLOPs: 0.1093. Time: 36.5805 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #29: GFLOPs: 0.1065. Time: 37.5636 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #30: GFLOPs: 0.1097. Time: 36.4608 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #31: GFLOPs: 0.1084. Time: 36.8882 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #32: GFLOPs: 0.1081. Time: 37.0012 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #33: GFLOPs: 0.0867. Time: 46.1574 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #34: GFLOPs: 0.1081. Time: 36.9933 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #35: GFLOPs: 0.0869. Time: 46.0077 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #36: GFLOPs: 0.1565. Time: 25.5598 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #37: GFLOPs: 0.1565. Time: 25.5661 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #38: GFLOPs: 0.2510. Time: 15.9378 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #39: GFLOPs: 0.2417. Time: 16.5486 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #40: GFLOPs: 0.1464. Time: 27.3293 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #41: GFLOPs: 0.0892. Time: 44.8185 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #42: GFLOPs: 0.2721. Time: 14.6985 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #43: GFLOPs: 0.1349. Time: 29.6566 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #44: GFLOPs: 0.1088. Time: 36.7811 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #45: GFLOPs: 0.2585. Time: 15.4721 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #46: GFLOPs: 0.1097. Time: 36.4714 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #47: GFLOPs: 0.1076. Time: 37.1905 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #48: GFLOPs: 0.1097. Time: 36.4524 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #49: GFLOPs: 0.1086. Time: 36.8489 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #50: GFLOPs: 0.1093. Time: 36.6060 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #51: GFLOPs: 0.1090. Time: 36.7056 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #52: GFLOPs: 0.1531. Time: 26.1331 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #53: GFLOPs: 0.1059. Time: 37.7867 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #54: GFLOPs: 0.1885. Time: 21.2179 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #55: GFLOPs: 0.2590. Time: 15.4420 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #56: GFLOPs: 0.1090. Time: 36.6996 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #57: GFLOPs: 0.1362. Time: 29.3748 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #58: GFLOPs: 0.1084. Time: 36.8893 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #59: GFLOPs: 0.0963. Time: 41.5406 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #60: GFLOPs: 0.1081. Time: 36.9902 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #61: GFLOPs: 0.0865. Time: 46.2673 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #62: GFLOPs: 0.1559. Time: 25.6554 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #63: GFLOPs: 0.1097. Time: 36.4701 us. Best GFLOPs: 1.1800
2024-04-29 04:04:24 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #64: GFLOPs: 0.0865. Time: 46.2585 us. Best GFLOPs: 1.1800
2024-05-01 15:10:11 [INFO] [task_scheduler.cc:160] Initializing Task #69: "fused_nn_softmax"
2024-05-01 15:10:11 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
        T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
        T_softmax_expsum = T.alloc_buffer((T.int64(1),))
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_maxelem"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(p0[v_i0, v_k])
                T.writes(T_softmax_maxelem[v_i0])
                with T.init():
                    T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_exp"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                T.writes(T_softmax_exp[v_i0, v_i1])
                T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_expsum"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(T_softmax_exp[v_i0, v_k])
                T.writes(T_softmax_expsum[v_i0])
                with T.init():
                    T_softmax_expsum[v_i0] = T.float32(0)
                T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_norm"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                T.writes(T_softmax_norm[v_i0, v_i1])
                T.block_attr({"axis": 1})
                T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
2024-05-01 15:10:11 [INFO] [task_scheduler.cc:164] Total 4 design space(s) generated
2024-05-01 15:10:11 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0_i1_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for i0_i1_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(512) + i0_i1_fused_1)
                        T.where(i0_i1_fused_0 * T.int64(512) + i0_i1_fused_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v5)
l6, l7 = sch.get_loops(block=b3)
l8 = sch.fuse(l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13 = sch.get_loops(block=b2)
l14 = sch.fuse(l12, preserve_unit_iters=True)
l15, l16 = sch.split(loop=l14, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b0)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-05-01 15:10:11 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for k_0 in range(T.int64(2)):
                    for k_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k_0 * T.int64(512) + k_1)
                            T.where(k_0 * T.int64(512) + k_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0_i1_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for i0_i1_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(512) + i0_i1_fused_1)
                        T.where(i0_i1_fused_0 * T.int64(512) + i0_i1_fused_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=7)
l6, l7 = sch.get_loops(block=b0)
l8, l9 = sch.split(loop=l7, factors=[None, v5], preserve_unit_iters=True)
sch.bind(loop=l9, thread_axis="threadIdx.x")
v10 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v10)
l11, l12 = sch.get_loops(block=b3)
l13 = sch.fuse(l11, l12, preserve_unit_iters=True)
v14 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
l15, l16 = sch.split(loop=l13, factors=[None, v14], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b2)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
l22, l23, l24 = sch.get_loops(block=b0)
l25 = sch.fuse(l22, preserve_unit_iters=True)
sch.bind(loop=l25, thread_axis="blockIdx.x")
2024-05-01 15:10:11 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(63)):
                    for ax1_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(16) + ax1_1)
                            T.where(ax1_0 * T.int64(16) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum_shared[v_i0])
                            with T.init():
                                T_softmax_expsum_shared[v_i0] = T.float32(0)
                            T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
                for i1_0 in range(T.int64(63)):
                    for i1_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("T_softmax_norm"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(16) + i1_1)
                            T.where(i1_0 * T.int64(16) + i1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum_shared[v_i0])
                            T.writes(T_softmax_norm[v_i0, v_i1])
                            T.block_attr({"axis": 1})
                            T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=2)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17, l18, l19 = sch.get_loops(block=b3)
l20 = sch.fuse(l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
l21, l22 = sch.get_loops(block=b0)
l23 = sch.fuse(l21, preserve_unit_iters=True)
l24, l25 = sch.split(loop=l23, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l24, thread_axis="blockIdx.x")
sch.bind(loop=l25, thread_axis="threadIdx.x")
2024-05-01 15:10:11 [INFO] [task_scheduler.cc:170] Design space #3:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(63)):
                    for ax1_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(16) + ax1_1)
                            T.where(ax1_0 * T.int64(16) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem_shared[v_i0])
                            with T.init():
                                T_softmax_maxelem_shared[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem_shared[v_i0] = T.max(T_softmax_maxelem_shared[v_i0], p0[v_i0, v_k])
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(63)):
                    for ax1_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(16) + ax1_1)
                            T.where(ax1_0 * T.int64(16) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem_shared[v_i0])
                            T.writes(T_softmax_expsum_shared[v_i0])
                            with T.init():
                                T_softmax_expsum_shared[v_i0] = T.float32(0)
                            T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem_shared[v_i0])
                for i1_0 in range(T.int64(63)):
                    for i1_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("T_softmax_norm"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(16) + i1_1)
                            T.where(i1_0 * T.int64(16) + i1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_i1], T_softmax_maxelem_shared[v_i0], T_softmax_expsum_shared[v_i0])
                            T.writes(T_softmax_norm[v_i0, v_i1])
                            T.block_attr({"axis": 1})
                            T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem_shared[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=2)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
b16, b17 = sch.get_consumers(block=b0)
l18, l19, l20, l21 = sch.get_loops(block=b16)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l22, l23, l24 = sch.get_loops(block=b0)
l25, l26 = sch.split(loop=l24, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l26, thread_axis="threadIdx.x")
v27 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v27)
l28, l29, l30 = sch.get_loops(block=b3)
l31 = sch.fuse(l28, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
2024-05-01 16:35:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 16:35:43 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-05-01 16:35:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7bf6598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xac637f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb396518)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7c40968)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5f03ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe5d1a08)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xac63318)]: 0 failure(s)
2024-05-01 16:35:43 [INFO] [evolutionary_search.cc:723] Sampled 448 candidate(s)
2024-05-01 16:35:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7bf6598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xac637f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb396518)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7c40968)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5f03ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe5d1a08)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xac63318)]: 0 failure(s)
2024-05-01 16:35:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7bf6598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xac637f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb396518)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7c40968)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5f03ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe5d1a08)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xac63318)]: 0 failure(s)
2024-05-01 16:35:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7bf6598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xac637f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb396518)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7c40968)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5f03ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe5d1a08)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xac63318)]: 0 failure(s)
2024-05-01 16:35:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7bf6598)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xac637f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb396518)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7c40968)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5f03ca8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xe5d1a08)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xac63318)]: 0 failure(s)
2024-05-01 16:35:45 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9989  0.9976  0.9958  0.9932  0.9923  0.9899  0.9855  0.9841  0.9777  0.9732  0.9716  0.9709  0.9678  0.9676  0.9667  0.9605
[17 : 32]:	0.9444  0.9341  0.9270  0.9206  0.9143  0.9141  0.9133  0.9129  0.9008  0.8953  0.8931  0.8876  0.8741  0.8732  0.8703  0.8687
[33 : 48]:	0.8650  0.8462  0.8447  0.8275  0.8261  0.8232  0.8214  0.8203  0.8165  0.8080  0.8044  0.8032  0.8002  0.7989  0.7979  0.7898
[49 : 64]:	0.7832  0.7806  0.7803  0.7788  0.7770  0.7756  0.7751  0.7726  0.7718  0.7716  0.7687  0.7652  0.7640  0.7630  0.7626  0.7564
2024-05-01 16:35:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 16:35:45 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #1: GFLOPs: 0.1057. Time: 37.8591 us. Best GFLOPs: 0.1057
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #2: GFLOPs: 0.1075. Time: 37.2248 us. Best GFLOPs: 0.1075
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #3: GFLOPs: 0.0963. Time: 41.5163 us. Best GFLOPs: 0.1075
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #4: GFLOPs: 0.1081. Time: 36.9989 us. Best GFLOPs: 0.1081
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #5: GFLOPs: 0.1092. Time: 36.6414 us. Best GFLOPs: 0.1092
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #6: GFLOPs: 0.1092. Time: 36.6317 us. Best GFLOPs: 0.1092
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #7: GFLOPs: 0.2326. Time: 17.1987 us. Best GFLOPs: 0.2326
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #8: GFLOPs: 0.1556. Time: 25.7077 us. Best GFLOPs: 0.2326
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #9: GFLOPs: 1.1044. Time: 3.6219 us. Best GFLOPs: 1.1044
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #10: GFLOPs: 0.1077. Time: 37.1291 us. Best GFLOPs: 1.1044
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #11: GFLOPs: 0.1089. Time: 36.7188 us. Best GFLOPs: 1.1044
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #12: GFLOPs: 0.2567. Time: 15.5826 us. Best GFLOPs: 1.1044
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #13: GFLOPs: 1.1360. Time: 3.5210 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #14: GFLOPs: 0.2585. Time: 15.4757 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #15: GFLOPs: 0.1091. Time: 36.6516 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #16: GFLOPs: 0.0959. Time: 41.7288 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #17: GFLOPs: 0.1058. Time: 37.8205 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #18: GFLOPs: 0.2755. Time: 14.5183 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #19: GFLOPs: 0.1088. Time: 36.7560 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #20: GFLOPs: 0.0720. Time: 55.5748 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #21: GFLOPs: 0.1065. Time: 37.5756 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #22: GFLOPs: 0.1051. Time: 38.0589 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #23: GFLOPs: 0.0865. Time: 46.2607 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #24: GFLOPs: 0.1445. Time: 27.6897 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #25: GFLOPs: 0.1091. Time: 36.6477 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #26: GFLOPs: 0.1082. Time: 36.9650 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #27: GFLOPs: 0.2067. Time: 19.3541 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #28: GFLOPs: 0.1551. Time: 25.7847 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #29: GFLOPs: 0.6701. Time: 5.9693 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #30: GFLOPs: 0.0864. Time: 46.2760 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #31: GFLOPs: 0.1081. Time: 36.9899 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #32: GFLOPs: 0.9026. Time: 4.4316 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #33: GFLOPs: 0.1086. Time: 36.8182 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #34: GFLOPs: 0.1051. Time: 38.0576 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #35: GFLOPs: 0.1203. Time: 33.2375 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #36: GFLOPs: 0.1088. Time: 36.7641 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #37: GFLOPs: 0.1541. Time: 25.9529 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #38: GFLOPs: 0.1093. Time: 36.6020 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #39: GFLOPs: 0.0864. Time: 46.2736 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #40: GFLOPs: 0.2506. Time: 15.9597 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #41: GFLOPs: 0.9029. Time: 4.4304 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #42: GFLOPs: 0.1053. Time: 37.9823 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #43: GFLOPs: 0.1092. Time: 36.6168 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #44: GFLOPs: 1.0766. Time: 3.7155 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #45: GFLOPs: 0.0864. Time: 46.3112 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #46: GFLOPs: 0.2275. Time: 17.5807 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #47: GFLOPs: 0.1082. Time: 36.9841 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #48: GFLOPs: 0.1451. Time: 27.5725 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #49: GFLOPs: 1.1350. Time: 3.5244 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #50: GFLOPs: 0.1092. Time: 36.6254 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #51: GFLOPs: 0.1051. Time: 38.0622 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #52: GFLOPs: 0.1532. Time: 26.1029 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #53: GFLOPs: 0.1091. Time: 36.6504 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #54: GFLOPs: 0.1091. Time: 36.6535 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #55: GFLOPs: 0.9042. Time: 4.4238 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #56: GFLOPs: 0.1060. Time: 37.7508 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #57: GFLOPs: 0.1251. Time: 31.9626 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #58: GFLOPs: 0.0579. Time: 69.0645 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #59: GFLOPs: 0.1074. Time: 37.2445 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #60: GFLOPs: 0.9022. Time: 4.4335 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #61: GFLOPs: 0.2198. Time: 18.1994 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #62: GFLOPs: 1.1322. Time: 3.5331 us. Best GFLOPs: 1.1360
2024-05-01 16:39:11 [INFO] [task_scheduler.cc:131] [Task #69: fused_nn_softmax] Trial #63: GFLOPs: 0.0855. Time: 46.7769 us. Best GFLOPs: 1.1360
