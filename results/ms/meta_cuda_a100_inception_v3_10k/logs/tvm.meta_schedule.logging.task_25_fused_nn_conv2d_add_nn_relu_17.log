2024-04-29 01:54:20 [INFO] [task_scheduler.cc:160] Initializing Task #25: "fused_nn_conv2d_add_nn_relu_17"
2024-04-29 01:54:20 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(18)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(128), T.int64(12), T.int64(18)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3)])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(3) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3)], T.float32(0))
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(128), T.int64(1), T.int64(7)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(12), T.int64(12)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(12), T.int64(12)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 01:54:20 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 01:54:20 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(18)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(6), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(24), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(32), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(240)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), rc_0 * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(60))
                                    v2 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused // T.int64(3) * T.int64(6) + ax0_ax1_ax2_ax3_fused % T.int64(60) // T.int64(10))
                                    v3 = T.axis.spatial(T.int64(18), nn_0_ff_0_yy_0_xx_0_fused % T.int64(3) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(10))
                                    T.reads(p0[v0, v1, v2, v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v3 and v3 < T.int64(15), p0[v0, v1, v2, v3 - T.int64(3)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5376)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v1 = T.axis.spatial(T.int64(128), rc_0 * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused // T.int64(3) * T.int64(6) + yy_3 * T.int64(3) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(3) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_0 * T.int64(4) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(6), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused // T.int64(3) * T.int64(6) + ax2)
                                v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(3) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 24, 1, 4, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 3])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[3, 1, 1, 2, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 1, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 01:54:20 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(18)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(6), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(24), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(240)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(60))
                                    v2 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused // T.int64(3) * T.int64(6) + ax0_ax1_ax2_ax3_fused % T.int64(60) // T.int64(10))
                                    v3 = T.axis.spatial(T.int64(18), nn_0_ff_0_yy_0_xx_0_fused % T.int64(3) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(10))
                                    T.reads(p0[v0, v1, v2, v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v3 and v3 < T.int64(15), p0[v0, v1, v2, v3 - T.int64(3)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5376)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused // T.int64(3) * T.int64(6) + yy_3 * T.int64(3) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(3) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(4) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(7), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(6), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused // T.int64(3) * T.int64(6) + ax2)
                                v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(3) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 24, 1, 4, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 3])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[3, 1, 1, 2, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 1, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 01:54:20 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(18)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(6), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(24), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(240)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(60))
                                    v2 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused // T.int64(3) * T.int64(6) + ax0_ax1_ax2_ax3_fused % T.int64(60) // T.int64(10))
                                    v3 = T.axis.spatial(T.int64(18), nn_0_ff_0_yy_0_xx_0_fused % T.int64(3) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(10))
                                    T.reads(p0[v0, v1, v2, v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v3 and v3 < T.int64(15), p0[v0, v1, v2, v3 - T.int64(3)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5376)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused // T.int64(3) * T.int64(6) + yy_3 * T.int64(3) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(3) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(4) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(7), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(6), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused // T.int64(3) * T.int64(6) + ax2)
                                v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(3) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 24, 1, 4, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 3])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[3, 1, 1, 2, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 1, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 02:39:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 02:39:27 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 02:39:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349c468)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3326828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb237dd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7672af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xab4d568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3326ee8)]: 485 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb236a08)]: 0 failure(s)
2024-04-29 02:39:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349c468)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3326828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb237dd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7672af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xab4d568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3326ee8)]: 973 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb236a08)]: 0 failure(s)
2024-04-29 02:39:31 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-29 02:39:35 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349c468)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3326828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb237dd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7672af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xab4d568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3326ee8)]: 129 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb236a08)]: 0 failure(s)
2024-04-29 02:39:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349c468)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3326828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb237dd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7672af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xab4d568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3326ee8)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb236a08)]: 0 failure(s)
2024-04-29 02:39:41 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349c468)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3326828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb237dd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7672af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xab4d568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3326ee8)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb236a08)]: 0 failure(s)
2024-04-29 02:39:44 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349c468)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3326828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb237dd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7672af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xab4d568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3326ee8)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb236a08)]: 0 failure(s)
2024-04-29 02:39:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9993  0.9975  0.9973  0.9968  0.9958  0.9953  0.9951  0.9937  0.9933  0.9917  0.9912  0.9906  0.9884  0.9882  0.9874  0.9870
[17 : 32]:	0.9864  0.9857  0.9856  0.9852  0.9839  0.9834  0.9831  0.9830  0.9823  0.9803  0.9797  0.9797  0.9787  0.9784  0.9783  0.9778
[33 : 48]:	0.9775  0.9773  0.9771  0.9771  0.9761  0.9755  0.9738  0.9735  0.9733  0.9733  0.9715  0.9714  0.9704  0.9703  0.9691  0.9690
[49 : 64]:	0.9688  0.9688  0.9677  0.9672  0.9668  0.9665  0.9654  0.9652  0.9643  0.9630  0.9629  0.9626  0.9621  0.9610  0.9604  0.9602
2024-04-29 02:39:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 02:39:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #1: GFLOPs: 1445.3918. Time: 34.3163 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #2: GFLOPs: 477.4997. Time: 103.8755 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #3: GFLOPs: 443.2219. Time: 111.9090 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #4: GFLOPs: 89.7624. Time: 552.5753 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #5: GFLOPs: 33.1499. Time: 1496.2474 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #6: GFLOPs: 225.4306. Time: 220.0256 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #7: GFLOPs: 254.4124. Time: 194.9611 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #8: GFLOPs: 113.6419. Time: 436.4633 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #9: GFLOPs: 93.5085. Time: 530.4387 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #10: GFLOPs: 19.7680. Time: 2509.1328 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #11: GFLOPs: 259.4759. Time: 191.1565 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #12: GFLOPs: 803.4732. Time: 61.7326 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #13: GFLOPs: 324.5474. Time: 152.8298 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #14: GFLOPs: 383.5397. Time: 129.3230 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #15: GFLOPs: 235.3892. Time: 210.7171 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #16: GFLOPs: 72.4219. Time: 684.8825 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #17: GFLOPs: 17.2820. Time: 2870.0673 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #18: GFLOPs: 96.1035. Time: 516.1157 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #19: GFLOPs: 314.6317. Time: 157.6463 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #20: GFLOPs: 176.0039. Time: 281.8149 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #21: GFLOPs: 647.0725. Time: 76.6537 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #22: GFLOPs: 193.9032. Time: 255.8004 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #23: GFLOPs: 247.4246. Time: 200.4672 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #24: GFLOPs: 140.1843. Time: 353.8236 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #25: GFLOPs: 258.8993. Time: 191.5822 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #26: GFLOPs: 436.1204. Time: 113.7312 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #27: GFLOPs: 34.5084. Time: 1437.3449 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #28: GFLOPs: 308.9676. Time: 160.5363 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #29: GFLOPs: 108.3287. Time: 457.8705 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #30: GFLOPs: 209.9788. Time: 236.2168 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #31: GFLOPs: 487.6849. Time: 101.7061 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #32: GFLOPs: 42.6623. Time: 1162.6305 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #33: GFLOPs: 312.7185. Time: 158.6108 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #34: GFLOPs: 29.5814. Time: 1676.7488 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #35: GFLOPs: 208.8862. Time: 237.4524 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #36: GFLOPs: 231.7638. Time: 214.0132 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #37: GFLOPs: 798.6855. Time: 62.1027 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #38: GFLOPs: 22.0634. Time: 2248.0896 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #39: GFLOPs: 509.0473. Time: 97.4379 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #40: GFLOPs: 805.2658. Time: 61.5952 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #41: GFLOPs: 84.7772. Time: 585.0689 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #42: GFLOPs: 60.6506. Time: 817.8070 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #43: GFLOPs: 161.6479. Time: 306.8430 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #44: GFLOPs: 267.1930. Time: 185.6355 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #45: GFLOPs: 16.2525. Time: 3051.8614 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #46: GFLOPs: 292.8601. Time: 169.3659 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #47: GFLOPs: 97.1238. Time: 510.6939 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #48: GFLOPs: 421.1726. Time: 117.7677 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #49: GFLOPs: 313.3853. Time: 158.2733 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #50: GFLOPs: 10.4784. Time: 4733.5798 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #51: GFLOPs: 332.6976. Time: 149.0859 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #52: GFLOPs: 185.0763. Time: 268.0003 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #53: GFLOPs: 163.8543. Time: 302.7110 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #54: GFLOPs: 583.2322. Time: 85.0442 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #55: GFLOPs: 270.4657. Time: 183.3893 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #56: GFLOPs: 10.0188. Time: 4950.7475 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #57: GFLOPs: 62.5082. Time: 793.5042 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #58: GFLOPs: 517.2533. Time: 95.8921 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #59: GFLOPs: 974.3087. Time: 50.9084 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #60: GFLOPs: 34.2344. Time: 1448.8492 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #61: GFLOPs: 22.2472. Time: 2229.5210 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #62: GFLOPs: 80.1775. Time: 618.6339 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #63: GFLOPs: 66.9026. Time: 741.3836 us. Best GFLOPs: 1445.3918
2024-04-29 04:01:32 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #64: GFLOPs: 119.7723. Time: 414.1235 us. Best GFLOPs: 1445.3918
2024-04-29 05:46:03 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 05:46:04 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-29 05:46:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349c468)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3326828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb237dd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7672af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xab4d568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3326ee8)]: 421 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb236a08)]: 0 failure(s)
2024-04-29 05:46:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349c468)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3326828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb237dd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7672af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xab4d568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3326ee8)]: 845 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb236a08)]: 0 failure(s)
2024-04-29 05:46:08 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-29 05:46:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349c468)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3326828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb237dd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7672af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xab4d568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3326ee8)]: 72 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb236a08)]: 0 failure(s)
2024-04-29 05:46:17 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349c468)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3326828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb237dd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7672af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xab4d568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3326ee8)]: 75 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb236a08)]: 0 failure(s)
2024-04-29 05:46:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349c468)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3326828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb237dd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7672af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xab4d568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3326ee8)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb236a08)]: 0 failure(s)
2024-04-29 05:46:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349c468)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3326828)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xb237dd8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x7672af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xab4d568)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3326ee8)]: 72 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb236a08)]: 0 failure(s)
2024-04-29 05:46:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.3602  1.3412  1.2795  1.2636  1.2529  1.1178  1.0773  1.0556  1.0547  1.0524  1.0457  1.0420  1.0333  1.0240  1.0203  1.0174
[17 : 32]:	0.9988  0.9969  0.9807  0.9653  0.9423  0.9420  0.9416  0.9398  0.9368  0.9366  0.9365  0.9173  0.9154  0.9150  0.9142  0.9118
[33 : 48]:	0.9080  0.9079  0.9063  0.9061  0.9035  0.8986  0.8971  0.8944  0.8926  0.8925  0.8890  0.8854  0.8846  0.8818  0.8810  0.8810
[49 : 64]:	0.8796  0.8775  0.8765  0.8699  0.8689  0.8677  0.8667  0.8647  0.8644  0.8639  0.8635  0.8613  0.8612  0.8595  0.8586  0.8569
2024-04-29 05:46:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 05:46:27 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #65: GFLOPs: 680.0873. Time: 72.9326 us. Best GFLOPs: 1445.3918
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #66: GFLOPs: 917.7336. Time: 54.0467 us. Best GFLOPs: 1445.3918
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #67: GFLOPs: 876.2663. Time: 56.6044 us. Best GFLOPs: 1445.3918
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #68: GFLOPs: 923.4657. Time: 53.7113 us. Best GFLOPs: 1445.3918
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #69: GFLOPs: 869.6353. Time: 57.0360 us. Best GFLOPs: 1445.3918
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #70: GFLOPs: 444.4462. Time: 111.6007 us. Best GFLOPs: 1445.3918
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #71: GFLOPs: 671.3909. Time: 73.8772 us. Best GFLOPs: 1445.3918
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #72: GFLOPs: 671.4536. Time: 73.8703 us. Best GFLOPs: 1445.3918
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #73: GFLOPs: 690.8528. Time: 71.7961 us. Best GFLOPs: 1445.3918
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #74: GFLOPs: 691.5799. Time: 71.7206 us. Best GFLOPs: 1445.3918
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #75: GFLOPs: 671.5566. Time: 73.8590 us. Best GFLOPs: 1445.3918
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #76: GFLOPs: 671.6064. Time: 73.8535 us. Best GFLOPs: 1445.3918
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #77: GFLOPs: 691.0096. Time: 71.7798 us. Best GFLOPs: 1445.3918
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #78: GFLOPs: 671.4626. Time: 73.8694 us. Best GFLOPs: 1445.3918
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #79: GFLOPs: 671.4536. Time: 73.8703 us. Best GFLOPs: 1445.3918
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #80: GFLOPs: 1790.0245. Time: 27.7094 us. Best GFLOPs: 1790.0245
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #81: GFLOPs: 670.8936. Time: 73.9320 us. Best GFLOPs: 1790.0245
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #82: GFLOPs: 659.6244. Time: 75.1951 us. Best GFLOPs: 1790.0245
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #83: GFLOPs: 659.5892. Time: 75.1991 us. Best GFLOPs: 1790.0245
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #84: GFLOPs: 659.5936. Time: 75.1986 us. Best GFLOPs: 1790.0245
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #85: GFLOPs: 850.7639. Time: 58.3011 us. Best GFLOPs: 1790.0245
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #86: GFLOPs: 962.7039. Time: 51.5221 us. Best GFLOPs: 1790.0245
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #87: GFLOPs: 977.3249. Time: 50.7513 us. Best GFLOPs: 1790.0245
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #88: GFLOPs: 659.8078. Time: 75.1742 us. Best GFLOPs: 1790.0245
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #89: GFLOPs: 849.1164. Time: 58.4143 us. Best GFLOPs: 1790.0245
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #90: GFLOPs: 930.2951. Time: 53.3170 us. Best GFLOPs: 1790.0245
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #91: GFLOPs: 1474.7523. Time: 33.6331 us. Best GFLOPs: 1790.0245
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #92: GFLOPs: 709.1500. Time: 69.9436 us. Best GFLOPs: 1790.0245
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #93: GFLOPs: 1496.9011. Time: 33.1355 us. Best GFLOPs: 1790.0245
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #94: GFLOPs: 773.2509. Time: 64.1454 us. Best GFLOPs: 1790.0245
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #95: GFLOPs: 1456.1802. Time: 34.0621 us. Best GFLOPs: 1790.0245
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #96: GFLOPs: 354.7325. Time: 139.8251 us. Best GFLOPs: 1790.0245
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #97: GFLOPs: 2477.8224. Time: 20.0178 us. Best GFLOPs: 2477.8224
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #98: GFLOPs: 1638.8134. Time: 30.2661 us. Best GFLOPs: 2477.8224
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #99: GFLOPs: 639.9685. Time: 77.5046 us. Best GFLOPs: 2477.8224
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #100: GFLOPs: 1647.5274. Time: 30.1060 us. Best GFLOPs: 2477.8224
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #101: GFLOPs: 944.6911. Time: 52.5045 us. Best GFLOPs: 2477.8224
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #102: GFLOPs: 1809.5028. Time: 27.4111 us. Best GFLOPs: 2477.8224
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #103: GFLOPs: 1366.1991. Time: 36.3055 us. Best GFLOPs: 2477.8224
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #104: GFLOPs: 1597.3500. Time: 31.0517 us. Best GFLOPs: 2477.8224
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #105: GFLOPs: 1577.7527. Time: 31.4374 us. Best GFLOPs: 2477.8224
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #106: GFLOPs: 1800.0680. Time: 27.5548 us. Best GFLOPs: 2477.8224
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #107: GFLOPs: 1456.4913. Time: 34.0548 us. Best GFLOPs: 2477.8224
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #108: GFLOPs: 1448.4748. Time: 34.2433 us. Best GFLOPs: 2477.8224
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #109: GFLOPs: 1422.0547. Time: 34.8795 us. Best GFLOPs: 2477.8224
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #110: GFLOPs: 1468.6830. Time: 33.7721 us. Best GFLOPs: 2477.8224
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #111: GFLOPs: 2077.6395. Time: 23.8735 us. Best GFLOPs: 2477.8224
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #112: GFLOPs: 1968.6789. Time: 25.1948 us. Best GFLOPs: 2477.8224
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #113: GFLOPs: 1537.2995. Time: 32.2647 us. Best GFLOPs: 2477.8224
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #114: GFLOPs: 1457.4551. Time: 34.0323 us. Best GFLOPs: 2477.8224
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #115: GFLOPs: 2479.5763. Time: 20.0036 us. Best GFLOPs: 2479.5763
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #116: GFLOPs: 1446.4001. Time: 34.2924 us. Best GFLOPs: 2479.5763
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #117: GFLOPs: 789.8895. Time: 62.7942 us. Best GFLOPs: 2479.5763
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #118: GFLOPs: 1805.2495. Time: 27.4757 us. Best GFLOPs: 2479.5763
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #119: GFLOPs: 1669.3120. Time: 29.7131 us. Best GFLOPs: 2479.5763
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #120: GFLOPs: 2092.3526. Time: 23.7056 us. Best GFLOPs: 2479.5763
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #121: GFLOPs: 1445.7983. Time: 34.3067 us. Best GFLOPs: 2479.5763
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #122: GFLOPs: 2083.8393. Time: 23.8025 us. Best GFLOPs: 2479.5763
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #123: GFLOPs: 571.7413. Time: 86.7534 us. Best GFLOPs: 2479.5763
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #124: GFLOPs: 789.1593. Time: 62.8523 us. Best GFLOPs: 2479.5763
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #125: GFLOPs: 1255.0726. Time: 39.5200 us. Best GFLOPs: 2479.5763
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #126: GFLOPs: 89.3833. Time: 554.9194 us. Best GFLOPs: 2479.5763
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #127: GFLOPs: 192.8808. Time: 257.1563 us. Best GFLOPs: 2479.5763
2024-04-29 05:48:11 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #128: GFLOPs: 1106.7212. Time: 44.8175 us. Best GFLOPs: 2479.5763
2024-05-01 15:09:58 [INFO] [task_scheduler.cc:160] Initializing Task #25: "fused_nn_conv2d_add_nn_relu_17"
2024-05-01 15:09:58 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(18)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(128), T.int64(12), T.int64(18)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3)])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(3) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3)], T.float32(0))
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(128), T.int64(1), T.int64(7)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(12), T.int64(12)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(12), T.int64(12)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-05-01 15:09:58 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-05-01 15:09:58 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(18)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(3), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(12), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(128), T.int64(1), T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(48)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), rc_0)
                                    v2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(18), rx_0 + nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v3 and v3 < T.int64(15), p0[v0, v1, v2, v3 - T.int64(3)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(192)):
                                with T.block("p1_shared"):
                                    v0, v1 = T.axis.remap("SS", [ax0_ax1_ax2_ax3_fused, rc_0])
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(7), rx_0)
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(3) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(3) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_0 + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(7), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(3) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(3) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) + ax2)
                                v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 3, 32, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 4, 3, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[3, 1, 1, 2, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[128, 1, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-05-01 15:09:58 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(18)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(3), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(12), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(896), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(48)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(18), rc_0_ry_0_rx_0_fused % T.int64(7) + nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v3 and v3 < T.int64(15), p0[v0, v1, v2, v3 - T.int64(3)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(192)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused)
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(7), rc_0_ry_0_rx_0_fused % T.int64(7))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(3) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(3) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_0_ry_0_rx_0_fused // T.int64(7) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(7), rc_0_ry_0_rx_0_fused % T.int64(7) + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(3) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(3) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) + ax2)
                                v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 3, 32, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 4, 3, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[3, 1, 1, 2, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[128, 1, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-05-01 15:09:58 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(18)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(3), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(12), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(896), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(48)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(18), rc_0_ry_0_rx_0_fused % T.int64(7) + nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v3 and v3 < T.int64(15), p0[v0, v1, v2, v3 - T.int64(3)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(192)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused)
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(7), rc_0_ry_0_rx_0_fused % T.int64(7))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(3) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(3) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_0_ry_0_rx_0_fused // T.int64(7) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(7), rc_0_ry_0_rx_0_fused % T.int64(7) + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(3) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(3) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) + ax2)
                                v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 3, 32, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 4, 3, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[3, 1, 1, 2, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[128, 1, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-05-01 15:44:55 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 15:44:56 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-05-01 15:44:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb31a7d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x32c1768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x32c0108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3492bf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30fb068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb583968)]: 374 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb485238)]: 0 failure(s)
2024-05-01 15:45:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb31a7d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x32c1768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x32c0108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3492bf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30fb068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb583968)]: 767 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb485238)]: 0 failure(s)
2024-05-01 15:45:00 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-05-01 15:45:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb31a7d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x32c1768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x32c0108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3492bf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30fb068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb583968)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb485238)]: 0 failure(s)
2024-05-01 15:45:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb31a7d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x32c1768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x32c0108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3492bf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30fb068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb583968)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb485238)]: 0 failure(s)
2024-05-01 15:45:10 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb31a7d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x32c1768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x32c0108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3492bf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30fb068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb583968)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb485238)]: 0 failure(s)
2024-05-01 15:45:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb31a7d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x32c1768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x32c0108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3492bf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30fb068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb583968)]: 71 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb485238)]: 0 failure(s)
2024-05-01 15:45:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9997  0.9990  0.9989  0.9981  0.9981  0.9975  0.9973  0.9972  0.9969  0.9968  0.9959  0.9954  0.9951  0.9946  0.9945
[17 : 32]:	0.9929  0.9929  0.9928  0.9923  0.9909  0.9908  0.9908  0.9892  0.9885  0.9878  0.9869  0.9869  0.9867  0.9862  0.9860  0.9856
[33 : 48]:	0.9855  0.9840  0.9840  0.9833  0.9831  0.9809  0.9806  0.9787  0.9767  0.9765  0.9758  0.9754  0.9745  0.9710  0.9704  0.9693
[49 : 64]:	0.9689  0.9687  0.9679  0.9672  0.9668  0.9666  0.9653  0.9651  0.9649  0.9645  0.9644  0.9627  0.9620  0.9616  0.9612  0.9612
2024-05-01 15:45:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 15:45:13 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #1: GFLOPs: 253.8708. Time: 195.3770 us. Best GFLOPs: 253.8708
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #2: GFLOPs: 406.1686. Time: 122.1180 us. Best GFLOPs: 406.1686
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #3: GFLOPs: 199.1965. Time: 249.0029 us. Best GFLOPs: 406.1686
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #4: GFLOPs: 503.6546. Time: 98.4812 us. Best GFLOPs: 503.6546
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #5: GFLOPs: 758.4769. Time: 65.3949 us. Best GFLOPs: 758.4769
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #6: GFLOPs: 193.0258. Time: 256.9631 us. Best GFLOPs: 758.4769
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #7: GFLOPs: 1145.0143. Time: 43.3187 us. Best GFLOPs: 1145.0143
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #8: GFLOPs: 699.5425. Time: 70.9042 us. Best GFLOPs: 1145.0143
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #9: GFLOPs: 287.5448. Time: 172.4966 us. Best GFLOPs: 1145.0143
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #10: GFLOPs: 169.7169. Time: 292.2545 us. Best GFLOPs: 1145.0143
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #11: GFLOPs: 162.2129. Time: 305.7741 us. Best GFLOPs: 1145.0143
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #12: GFLOPs: 298.9752. Time: 165.9018 us. Best GFLOPs: 1145.0143
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #13: GFLOPs: 237.1332. Time: 209.1673 us. Best GFLOPs: 1145.0143
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #14: GFLOPs: 150.8331. Time: 328.8437 us. Best GFLOPs: 1145.0143
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #15: GFLOPs: 886.1171. Time: 55.9751 us. Best GFLOPs: 1145.0143
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #16: GFLOPs: 741.9490. Time: 66.8516 us. Best GFLOPs: 1145.0143
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #17: GFLOPs: 222.9619. Time: 222.4619 us. Best GFLOPs: 1145.0143
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #18: GFLOPs: 1157.2242. Time: 42.8616 us. Best GFLOPs: 1157.2242
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #19: GFLOPs: 1120.3319. Time: 44.2730 us. Best GFLOPs: 1157.2242
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #20: GFLOPs: 376.9076. Time: 131.5986 us. Best GFLOPs: 1157.2242
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #21: GFLOPs: 683.8459. Time: 72.5317 us. Best GFLOPs: 1157.2242
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #22: GFLOPs: 216.1090. Time: 229.5162 us. Best GFLOPs: 1157.2242
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #23: GFLOPs: 878.9443. Time: 56.4319 us. Best GFLOPs: 1157.2242
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #24: GFLOPs: 333.1414. Time: 148.8873 us. Best GFLOPs: 1157.2242
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #25: GFLOPs: 748.7959. Time: 66.2404 us. Best GFLOPs: 1157.2242
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #26: GFLOPs: 578.2180. Time: 85.7817 us. Best GFLOPs: 1157.2242
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #27: GFLOPs: 390.4342. Time: 127.0394 us. Best GFLOPs: 1157.2242
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #28: GFLOPs: 183.8231. Time: 269.8275 us. Best GFLOPs: 1157.2242
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #29: GFLOPs: 308.1715. Time: 160.9510 us. Best GFLOPs: 1157.2242
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #30: GFLOPs: 469.0844. Time: 105.7390 us. Best GFLOPs: 1157.2242
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #31: GFLOPs: 497.4386. Time: 99.7118 us. Best GFLOPs: 1157.2242
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #32: GFLOPs: 218.6479. Time: 226.8511 us. Best GFLOPs: 1157.2242
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #33: GFLOPs: 1547.4390. Time: 32.0533 us. Best GFLOPs: 1547.4390
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #34: GFLOPs: 446.8291. Time: 111.0056 us. Best GFLOPs: 1547.4390
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #35: GFLOPs: 291.0244. Time: 170.4342 us. Best GFLOPs: 1547.4390
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #36: GFLOPs: 136.2863. Time: 363.9436 us. Best GFLOPs: 1547.4390
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #37: GFLOPs: 122.6028. Time: 404.5627 us. Best GFLOPs: 1547.4390
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #38: GFLOPs: 336.3641. Time: 147.4608 us. Best GFLOPs: 1547.4390
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #39: GFLOPs: 125.5518. Time: 395.0602 us. Best GFLOPs: 1547.4390
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #40: GFLOPs: 114.4880. Time: 433.2378 us. Best GFLOPs: 1547.4390
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #41: GFLOPs: 190.7681. Time: 260.0043 us. Best GFLOPs: 1547.4390
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #42: GFLOPs: 21.4902. Time: 2308.0495 us. Best GFLOPs: 1547.4390
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #43: GFLOPs: 349.6477. Time: 141.8586 us. Best GFLOPs: 1547.4390
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #44: GFLOPs: 1801.3812. Time: 27.5347 us. Best GFLOPs: 1801.3812
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #45: GFLOPs: 452.6321. Time: 109.5824 us. Best GFLOPs: 1801.3812
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #46: GFLOPs: 659.3473. Time: 75.2267 us. Best GFLOPs: 1801.3812
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #47: GFLOPs: 280.0376. Time: 177.1209 us. Best GFLOPs: 1801.3812
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #48: GFLOPs: 552.7351. Time: 89.7365 us. Best GFLOPs: 1801.3812
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #49: GFLOPs: 1624.0809. Time: 30.5407 us. Best GFLOPs: 1801.3812
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #50: GFLOPs: 1049.2081. Time: 47.2742 us. Best GFLOPs: 1801.3812
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #51: GFLOPs: 43.7823. Time: 1132.8891 us. Best GFLOPs: 1801.3812
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #52: GFLOPs: 53.8266. Time: 921.4873 us. Best GFLOPs: 1801.3812
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #53: GFLOPs: 805.3301. Time: 61.5903 us. Best GFLOPs: 1801.3812
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #54: GFLOPs: 1459.9962. Time: 33.9730 us. Best GFLOPs: 1801.3812
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #55: GFLOPs: 241.8861. Time: 205.0573 us. Best GFLOPs: 1801.3812
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #56: GFLOPs: 1630.6295. Time: 30.4180 us. Best GFLOPs: 1801.3812
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #57: GFLOPs: 598.5472. Time: 82.8682 us. Best GFLOPs: 1801.3812
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #58: GFLOPs: 582.5265. Time: 85.1472 us. Best GFLOPs: 1801.3812
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #59: GFLOPs: 943.7924. Time: 52.5545 us. Best GFLOPs: 1801.3812
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #60: GFLOPs: 738.9782. Time: 67.1204 us. Best GFLOPs: 1801.3812
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #61: GFLOPs: 163.8317. Time: 302.7529 us. Best GFLOPs: 1801.3812
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #62: GFLOPs: 479.5009. Time: 103.4420 us. Best GFLOPs: 1801.3812
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #63: GFLOPs: 38.0099. Time: 1304.9351 us. Best GFLOPs: 1801.3812
2024-05-01 16:37:26 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #64: GFLOPs: 27.9864. Time: 1772.3105 us. Best GFLOPs: 1801.3812
2024-05-01 18:00:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 18:00:42 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-05-01 18:00:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb31a7d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x32c1768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x32c0108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3492bf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30fb068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb583968)]: 390 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb485238)]: 0 failure(s)
2024-05-01 18:00:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb31a7d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x32c1768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x32c0108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3492bf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30fb068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb583968)]: 780 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb485238)]: 0 failure(s)
2024-05-01 18:00:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb31a7d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x32c1768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x32c0108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3492bf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30fb068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb583968)]: 1170 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb485238)]: 0 failure(s)
2024-05-01 18:00:45 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2024-05-01 18:00:49 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb31a7d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x32c1768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x32c0108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3492bf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30fb068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb583968)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb485238)]: 0 failure(s)
2024-05-01 18:00:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb31a7d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x32c1768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x32c0108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3492bf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30fb068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb583968)]: 61 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb485238)]: 0 failure(s)
2024-05-01 18:00:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb31a7d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x32c1768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x32c0108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3492bf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30fb068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb583968)]: 45 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb485238)]: 0 failure(s)
2024-05-01 18:01:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb31a7d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x32c1768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x32c0108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3492bf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x30fb068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb583968)]: 58 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xb485238)]: 0 failure(s)
2024-05-01 18:01:03 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.2267  1.2267  0.9544  0.9267  0.9267  0.9267  0.9192  0.9087  0.9056  0.9056  0.9014  0.9014  0.9004  0.8972  0.8972  0.8972
[17 : 32]:	0.8962  0.8962  0.8911  0.8876  0.8836  0.8830  0.8790  0.8761  0.8761  0.8761  0.8751  0.8751  0.8751  0.8735  0.8735  0.8735
[33 : 48]:	0.8700  0.8684  0.8684  0.8663  0.8663  0.8662  0.8662  0.8652  0.8652  0.8643  0.8641  0.8591  0.8590  0.8590  0.8569  0.8544
[49 : 64]:	0.8528  0.8515  0.8499  0.8487  0.8487  0.8486  0.8472  0.8468  0.8468  0.8468  0.8465  0.8456  0.8440  0.8440  0.8440  0.8440
2024-05-01 18:01:03 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-05-01 18:01:03 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #65: GFLOPs: 1028.9723. Time: 48.2039 us. Best GFLOPs: 1801.3812
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #66: GFLOPs: 1030.9334. Time: 48.1122 us. Best GFLOPs: 1801.3812
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #67: GFLOPs: 871.3941. Time: 56.9209 us. Best GFLOPs: 1801.3812
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #68: GFLOPs: 1725.4271. Time: 28.7468 us. Best GFLOPs: 1801.3812
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #69: GFLOPs: 1805.7066. Time: 27.4688 us. Best GFLOPs: 1805.7066
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #70: GFLOPs: 1724.7963. Time: 28.7573 us. Best GFLOPs: 1805.7066
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #71: GFLOPs: 1756.7376. Time: 28.2344 us. Best GFLOPs: 1805.7066
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #72: GFLOPs: 2520.7296. Time: 19.6770 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #73: GFLOPs: 1801.9693. Time: 27.5257 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #74: GFLOPs: 1811.2099. Time: 27.3853 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #75: GFLOPs: 1600.1741. Time: 30.9969 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #76: GFLOPs: 1589.4171. Time: 31.2067 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #77: GFLOPs: 1760.9518. Time: 28.1669 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #78: GFLOPs: 1805.9236. Time: 27.4655 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #79: GFLOPs: 1800.0416. Time: 27.5552 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #80: GFLOPs: 1587.3606. Time: 31.2472 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #81: GFLOPs: 1815.9760. Time: 27.3134 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #82: GFLOPs: 1957.3922. Time: 25.3401 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #83: GFLOPs: 1531.3593. Time: 32.3899 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #84: GFLOPs: 1560.9754. Time: 31.7753 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #85: GFLOPs: 1586.7773. Time: 31.2586 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #86: GFLOPs: 1864.6144. Time: 26.6009 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #87: GFLOPs: 1807.0860. Time: 27.4478 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #88: GFLOPs: 1587.3001. Time: 31.2484 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #89: GFLOPs: 1799.7564. Time: 27.5596 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #90: GFLOPs: 1805.8836. Time: 27.4661 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #91: GFLOPs: 1807.2012. Time: 27.4460 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #92: GFLOPs: 1815.6895. Time: 27.3177 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #93: GFLOPs: 1957.8391. Time: 25.3343 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #94: GFLOPs: 1513.4048. Time: 32.7741 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #95: GFLOPs: 1513.0135. Time: 32.7826 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #96: GFLOPs: 1541.2755. Time: 32.1815 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #97: GFLOPs: 1531.2407. Time: 32.3924 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #98: GFLOPs: 1456.8717. Time: 34.0459 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #99: GFLOPs: 1456.9542. Time: 34.0440 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #100: GFLOPs: 1554.4641. Time: 31.9084 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #101: GFLOPs: 1533.0347. Time: 32.3545 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #102: GFLOPs: 1714.3680. Time: 28.9322 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #103: GFLOPs: 1726.2538. Time: 28.7330 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #104: GFLOPs: 1790.0068. Time: 27.7097 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #105: GFLOPs: 1464.8976. Time: 33.8594 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #106: GFLOPs: 1860.0915. Time: 26.6656 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #107: GFLOPs: 2238.2832. Time: 22.1601 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #108: GFLOPs: 2212.4156. Time: 22.4192 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #109: GFLOPs: 1381.8725. Time: 35.8937 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #110: GFLOPs: 1375.6122. Time: 36.0570 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #111: GFLOPs: 1911.2412. Time: 25.9520 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #112: GFLOPs: 1623.1724. Time: 30.5578 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #113: GFLOPs: 2189.6879. Time: 22.6519 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #114: GFLOPs: 2360.5745. Time: 21.0121 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #115: GFLOPs: 1959.1312. Time: 25.3176 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #116: GFLOPs: 2459.4569. Time: 20.1673 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #117: GFLOPs: 2459.6557. Time: 20.1656 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #118: GFLOPs: 1726.2091. Time: 28.7338 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #119: GFLOPs: 2065.1700. Time: 24.0176 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #120: GFLOPs: 1540.9456. Time: 32.1884 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #121: GFLOPs: 1548.7256. Time: 32.0267 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #122: GFLOPs: 1935.5839. Time: 25.6256 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #123: GFLOPs: 2382.5342. Time: 20.8184 us. Best GFLOPs: 2520.7296
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #124: GFLOPs: 2619.2814. Time: 18.9367 us. Best GFLOPs: 2619.2814
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #125: GFLOPs: 1468.2203. Time: 33.7827 us. Best GFLOPs: 2619.2814
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #126: GFLOPs: 26.0269. Time: 1905.7413 us. Best GFLOPs: 2619.2814
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #127: GFLOPs: 199.5709. Time: 248.5358 us. Best GFLOPs: 2619.2814
2024-05-01 18:02:16 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #128: GFLOPs: 69.9665. Time: 708.9179 us. Best GFLOPs: 2619.2814
