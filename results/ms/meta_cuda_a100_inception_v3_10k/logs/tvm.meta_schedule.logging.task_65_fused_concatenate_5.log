2024-04-29 01:54:33 [INFO] [task_scheduler.cc:160] Initializing Task #65: "fused_concatenate_5"
2024-04-29 01:54:33 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5)), "float32"), p1: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p3: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p4: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p5: T.Buffer((T.int64(1), T.int64(192), T.int64(5), T.int64(5)), "float32"), T_concat: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2048), T.int64(5), T.int64(5)):
            with T.block("T_concat"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p5[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1856) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(704) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], T.if_then_else(T.int64(320) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))
2024-04-29 01:54:33 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-04-29 01:54:33 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5)), "float32"), p1: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p3: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p4: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p5: T.Buffer((T.int64(1), T.int64(192), T.int64(5), T.int64(5)), "float32"), T_concat: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(50), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) // T.int64(25))
                    v_ax2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) % T.int64(25) // T.int64(5))
                    v_ax3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5))
                    T.reads(p5[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1856) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(704) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], T.if_then_else(T.int64(320) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))
b0 = sch.get_block(name="T_concat", func_name="main")
l1, l2, l3, l4 = sch.get_loops(block=b0)
l5 = sch.fuse(l1, l2, l3, l4, preserve_unit_iters=True)
v6 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l7, l8 = sch.split(loop=l5, factors=[None, v6], preserve_unit_iters=True)
sch.bind(loop=l7, thread_axis="blockIdx.x")
sch.bind(loop=l8, thread_axis="threadIdx.x")
2024-04-29 03:53:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:53:07 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:53:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaad1a58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xaad5728)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x33f52a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2e4398)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x7bbc888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x872db58)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3df0358)]: 0 failure(s)
2024-04-29 03:53:09 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 03:53:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaad1a58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xaad5728)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x33f52a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2e4398)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x7bbc888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x872db58)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3df0358)]: 0 failure(s)
2024-04-29 03:53:09 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaad1a58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xaad5728)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x33f52a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2e4398)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x7bbc888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x872db58)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3df0358)]: 0 failure(s)
2024-04-29 03:53:10 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaad1a58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xaad5728)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x33f52a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2e4398)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x7bbc888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x872db58)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3df0358)]: 0 failure(s)
2024-04-29 03:53:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaad1a58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xaad5728)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x33f52a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb2e4398)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x7bbc888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x872db58)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x3df0358)]: 0 failure(s)
2024-04-29 03:53:10 [INFO] [evolutionary_search.cc:649] Scores of the best 6 candidates:
[1 : 6]:	0.8898  0.4382  0.4064  0.2815  0.0346  0.0002
2024-04-29 03:53:10 [INFO] [evolutionary_search.cc:727] Got 6 candidate(s) with evolutionary search
2024-04-29 03:53:10 [INFO] [evolutionary_search.cc:730] Sending 6 candidates(s) for measurement
2024-04-29 04:04:08 [INFO] [task_scheduler.cc:121] [Task #65: fused_concatenate_5] Trial #1: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5)), "float32"), p1: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p3: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p4: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p5: T.Buffer((T.int64(1), T.int64(192), T.int64(5), T.int64(5)), "float32"), T_concat: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(400), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) // T.int64(25))
                    v_ax2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(25) // T.int64(5))
                    v_ax3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5))
                    T.reads(p5[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1856) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(704) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], T.if_then_else(T.int64(320) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))
b0 = sch.get_block(name="T_concat", func_name="main")
l1, l2, l3, l4 = sch.get_loops(block=b0)
l5 = sch.fuse(l1, l2, l3, l4, preserve_unit_iters=True)
v6 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l7, l8 = sch.split(loop=l5, factors=[None, v6], preserve_unit_iters=True)
sch.bind(loop=l7, thread_axis="blockIdx.x")
sch.bind(loop=l8, thread_axis="threadIdx.x")
sch.enter_postproc()
2024-04-29 04:04:08 [INFO] [task_scheduler.cc:121] [Task #65: fused_concatenate_5] Trial #2: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5)), "float32"), p1: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p3: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p4: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p5: T.Buffer((T.int64(1), T.int64(192), T.int64(5), T.int64(5)), "float32"), T_concat: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(1600), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(25))
                    v_ax2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(25) // T.int64(5))
                    v_ax3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5))
                    T.reads(p5[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1856) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(704) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], T.if_then_else(T.int64(320) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))
b0 = sch.get_block(name="T_concat", func_name="main")
l1, l2, l3, l4 = sch.get_loops(block=b0)
l5 = sch.fuse(l1, l2, l3, l4, preserve_unit_iters=True)
v6 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l7, l8 = sch.split(loop=l5, factors=[None, v6], preserve_unit_iters=True)
sch.bind(loop=l7, thread_axis="blockIdx.x")
sch.bind(loop=l8, thread_axis="threadIdx.x")
sch.enter_postproc()
2024-04-29 04:04:08 [INFO] [task_scheduler.cc:121] [Task #65: fused_concatenate_5] Trial #3: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5)), "float32"), p1: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p3: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p4: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p5: T.Buffer((T.int64(1), T.int64(192), T.int64(5), T.int64(5)), "float32"), T_concat: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(50), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) // T.int64(25))
                    v_ax2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) % T.int64(25) // T.int64(5))
                    v_ax3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5))
                    T.reads(p5[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1856) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(704) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], T.if_then_else(T.int64(320) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))
b0 = sch.get_block(name="T_concat", func_name="main")
l1, l2, l3, l4 = sch.get_loops(block=b0)
l5 = sch.fuse(l1, l2, l3, l4, preserve_unit_iters=True)
v6 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l7, l8 = sch.split(loop=l5, factors=[None, v6], preserve_unit_iters=True)
sch.bind(loop=l7, thread_axis="blockIdx.x")
sch.bind(loop=l8, thread_axis="threadIdx.x")
sch.enter_postproc()
2024-04-29 04:04:08 [INFO] [task_scheduler.cc:121] [Task #65: fused_concatenate_5] Trial #4: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5)), "float32"), p1: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p3: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p4: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p5: T.Buffer((T.int64(1), T.int64(192), T.int64(5), T.int64(5)), "float32"), T_concat: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(800), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(25))
                    v_ax2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(25) // T.int64(5))
                    v_ax3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5))
                    T.reads(p5[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1856) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(704) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], T.if_then_else(T.int64(320) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))
b0 = sch.get_block(name="T_concat", func_name="main")
l1, l2, l3, l4 = sch.get_loops(block=b0)
l5 = sch.fuse(l1, l2, l3, l4, preserve_unit_iters=True)
v6 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l7, l8 = sch.split(loop=l5, factors=[None, v6], preserve_unit_iters=True)
sch.bind(loop=l7, thread_axis="blockIdx.x")
sch.bind(loop=l8, thread_axis="threadIdx.x")
sch.enter_postproc()
2024-04-29 04:04:08 [INFO] [task_scheduler.cc:121] [Task #65: fused_concatenate_5] Trial #5: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5)), "float32"), p1: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p3: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p4: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p5: T.Buffer((T.int64(1), T.int64(192), T.int64(5), T.int64(5)), "float32"), T_concat: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(200), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) // T.int64(25))
                    v_ax2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(25) // T.int64(5))
                    v_ax3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5))
                    T.reads(p5[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1856) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(704) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], T.if_then_else(T.int64(320) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))
b0 = sch.get_block(name="T_concat", func_name="main")
l1, l2, l3, l4 = sch.get_loops(block=b0)
l5 = sch.fuse(l1, l2, l3, l4, preserve_unit_iters=True)
v6 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l7, l8 = sch.split(loop=l5, factors=[None, v6], preserve_unit_iters=True)
sch.bind(loop=l7, thread_axis="blockIdx.x")
sch.bind(loop=l8, thread_axis="threadIdx.x")
sch.enter_postproc()
2024-04-29 04:04:08 [INFO] [task_scheduler.cc:121] [Task #65: fused_concatenate_5] Trial #6: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5)), "float32"), p1: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p3: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p4: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p5: T.Buffer((T.int64(1), T.int64(192), T.int64(5), T.int64(5)), "float32"), T_concat: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(100), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) // T.int64(25))
                    v_ax2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(25) // T.int64(5))
                    v_ax3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5))
                    T.reads(p5[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1856) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(704) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], T.if_then_else(T.int64(320) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))
b0 = sch.get_block(name="T_concat", func_name="main")
l1, l2, l3, l4 = sch.get_loops(block=b0)
l5 = sch.fuse(l1, l2, l3, l4, preserve_unit_iters=True)
v6 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l7, l8 = sch.split(loop=l5, factors=[None, v6], preserve_unit_iters=True)
sch.bind(loop=l7, thread_axis="blockIdx.x")
sch.bind(loop=l8, thread_axis="threadIdx.x")
sch.enter_postproc()
2024-05-01 15:10:10 [INFO] [task_scheduler.cc:160] Initializing Task #65: "fused_concatenate_5"
2024-05-01 15:10:10 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5)), "float32"), p1: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p3: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p4: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p5: T.Buffer((T.int64(1), T.int64(192), T.int64(5), T.int64(5)), "float32"), T_concat: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2048), T.int64(5), T.int64(5)):
            with T.block("T_concat"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p5[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1856) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(704) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], T.if_then_else(T.int64(320) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))
2024-05-01 15:10:10 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-05-01 15:10:10 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(5), T.int64(5)), "float32"), p1: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p3: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p4: T.Buffer((T.int64(1), T.int64(384), T.int64(5), T.int64(5)), "float32"), p5: T.Buffer((T.int64(1), T.int64(192), T.int64(5), T.int64(5)), "float32"), T_concat: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(400), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) // T.int64(25))
                    v_ax2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(25) // T.int64(5))
                    v_ax3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5))
                    T.reads(p5[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1856) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1856), v_ax2, v_ax3], T.if_then_else(T.int64(1472) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(1472), v_ax2, v_ax3], T.if_then_else(T.int64(1088) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(1088), v_ax2, v_ax3], T.if_then_else(T.int64(704) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], T.if_then_else(T.int64(320) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))
b0 = sch.get_block(name="T_concat", func_name="main")
l1, l2, l3, l4 = sch.get_loops(block=b0)
l5 = sch.fuse(l1, l2, l3, l4, preserve_unit_iters=True)
v6 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l7, l8 = sch.split(loop=l5, factors=[None, v6], preserve_unit_iters=True)
sch.bind(loop=l7, thread_axis="blockIdx.x")
sch.bind(loop=l8, thread_axis="threadIdx.x")
2024-05-01 16:32:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-05-01 16:32:33 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-05-01 16:32:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaadb268)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x87637a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8726b98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb1cb198)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x39515d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3e1918)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8725eb8)]: 0 failure(s)
2024-05-01 16:32:35 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-05-01 16:32:35 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaadb268)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x87637a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8726b98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb1cb198)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x39515d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3e1918)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8725eb8)]: 0 failure(s)
2024-05-01 16:32:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaadb268)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x87637a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8726b98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb1cb198)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x39515d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3e1918)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8725eb8)]: 0 failure(s)
2024-05-01 16:32:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaadb268)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x87637a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8726b98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb1cb198)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x39515d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3e1918)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8725eb8)]: 0 failure(s)
2024-05-01 16:32:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaadb268)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x87637a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x8726b98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xb1cb198)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x39515d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xb3e1918)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8725eb8)]: 0 failure(s)
2024-05-01 16:32:36 [INFO] [evolutionary_search.cc:649] Scores of the best 6 candidates:
[1 : 6]:	0.5932  0.4864  0.1878  0.1538  0.1481  0.0376
2024-05-01 16:32:36 [INFO] [evolutionary_search.cc:727] Got 6 candidate(s) with evolutionary search
2024-05-01 16:32:36 [INFO] [evolutionary_search.cc:730] Sending 6 candidates(s) for measurement
2024-05-01 16:39:00 [INFO] [task_scheduler.cc:131] [Task #65: fused_concatenate_5] Trial #1: GFLOPs: 0.0004. Time: 2.7479 us. Best GFLOPs: 0.0004
2024-05-01 16:39:00 [INFO] [task_scheduler.cc:131] [Task #65: fused_concatenate_5] Trial #2: GFLOPs: 0.0003. Time: 2.9735 us. Best GFLOPs: 0.0004
2024-05-01 16:39:00 [INFO] [task_scheduler.cc:131] [Task #65: fused_concatenate_5] Trial #3: GFLOPs: 0.0003. Time: 2.9094 us. Best GFLOPs: 0.0004
2024-05-01 16:39:00 [INFO] [task_scheduler.cc:131] [Task #65: fused_concatenate_5] Trial #4: GFLOPs: 0.0003. Time: 3.8467 us. Best GFLOPs: 0.0004
2024-05-01 16:39:00 [INFO] [task_scheduler.cc:131] [Task #65: fused_concatenate_5] Trial #5: GFLOPs: 0.0003. Time: 3.1945 us. Best GFLOPs: 0.0004
2024-05-01 16:39:00 [INFO] [task_scheduler.cc:131] [Task #65: fused_concatenate_5] Trial #6: GFLOPs: 0.0004. Time: 2.7479 us. Best GFLOPs: 0.0004
