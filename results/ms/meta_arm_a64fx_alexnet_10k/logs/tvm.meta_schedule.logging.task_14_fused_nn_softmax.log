2024-04-27 23:39:43 [INFO] [task_scheduler.cc:160] Initializing Task #14: "fused_nn_softmax"
2024-04-27 23:39:43 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
        T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
        T_softmax_expsum = T.alloc_buffer((T.int64(1),))
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_maxelem"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(p0[v_i0, v_k])
                T.writes(T_softmax_maxelem[v_i0])
                with T.init():
                    T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_exp"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                T.writes(T_softmax_exp[v_i0, v_i1])
                T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_expsum"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(T_softmax_exp[v_i0, v_k])
                T.writes(T_softmax_expsum[v_i0])
                with T.init():
                    T_softmax_expsum[v_i0] = T.float32(0)
                T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_norm"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                T.writes(T_softmax_norm[v_i0, v_i1])
                T.block_attr({"axis": 1})
                T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
2024-04-27 23:39:43 [INFO] [task_scheduler.cc:164] Total 9 design space(s) generated
2024-04-27 23:39:43 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(200)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(100)))
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0, ax1, ax2 in T.grid(T.int64(100), T.int64(1), T.int64(10)):
                    with T.block("T_softmax_maxelem_rf"):
                        vk_0, v_i0, vk_1 = T.axis.remap("SSR", [ax0, ax1, ax2])
                        T.reads(p0[v_i0, vk_0 * T.int64(10) + vk_1])
                        T.writes(T_softmax_maxelem_rf[v_i0, vk_0])
                        with T.init():
                            T_softmax_maxelem_rf[v_i0, vk_0] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem_rf[v_i0, vk_0] = T.max(T_softmax_maxelem_rf[v_i0, vk_0], p0[v_i0, vk_0 * T.int64(10) + vk_1])
                for ax0, ax1 in T.grid(T.int64(100), T.int64(1)):
                    with T.block("T_softmax_maxelem"):
                        vk_0, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_maxelem_rf[v_i0, vk_0])
                        T.writes(T_softmax_maxelem[v_i0])
                        with T.init():
                            T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_0])
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0, ax1, ax2 in T.grid(T.int64(200), T.int64(1), T.int64(5)):
                    with T.block("T_softmax_expsum_rf"):
                        vk_0, v_i0, vk_1 = T.axis.remap("SSR", [ax0, ax1, ax2])
                        T.reads(T_softmax_exp[v_i0, vk_0 * T.int64(5) + vk_1])
                        T.writes(T_softmax_expsum_rf[v_i0, vk_0])
                        with T.init():
                            T_softmax_expsum_rf[v_i0, vk_0] = T.float32(0)
                        T_softmax_expsum_rf[v_i0, vk_0] = T_softmax_expsum_rf[v_i0, vk_0] + T_softmax_exp[v_i0, vk_0 * T.int64(5) + vk_1]
                for ax0, ax1 in T.grid(T.int64(200), T.int64(1)):
                    with T.block("T_softmax_expsum"):
                        vk_0, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_expsum_rf[v_i0, vk_0])
                        T.writes(T_softmax_expsum[v_i0])
                        with T.init():
                            T_softmax_expsum[v_i0] = T.float32(0)
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_0]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[200, 5])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[100, 10])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True)
b17 = sch.rfactor(loop=l15, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=1)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-27 23:39:43 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(200)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(10)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(100), T.int64(10)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(p0[v_i0, vk_0 * T.int64(10) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_1] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_1] = T.max(T_softmax_maxelem_rf[v_i0, vk_1], p0[v_i0, vk_0 * T.int64(10) + vk_1])
            for i0, k_1 in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_maxelem"):
                    vk_1, v_i0 = T.axis.remap("RS", [k_1, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_1])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_1])
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1000)):
                    with T.block("T_softmax_exp"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                        T.writes(T_softmax_exp[v_i0, v_i1])
                        T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
                for ax0, ax1, ax2 in T.grid(T.int64(200), T.int64(1), T.int64(5)):
                    with T.block("T_softmax_expsum_rf"):
                        vk_0, v_i0, vk_1 = T.axis.remap("SSR", [ax0, ax1, ax2])
                        T.reads(T_softmax_exp[v_i0, vk_0 * T.int64(5) + vk_1])
                        T.writes(T_softmax_expsum_rf[v_i0, vk_0])
                        with T.init():
                            T_softmax_expsum_rf[v_i0, vk_0] = T.float32(0)
                        T_softmax_expsum_rf[v_i0, vk_0] = T_softmax_expsum_rf[v_i0, vk_0] + T_softmax_exp[v_i0, vk_0 * T.int64(5) + vk_1]
                for ax0, ax1 in T.grid(T.int64(200), T.int64(1)):
                    with T.block("T_softmax_expsum"):
                        vk_0, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_expsum_rf[v_i0, vk_0])
                        T.writes(T_softmax_expsum[v_i0])
                        with T.init():
                            T_softmax_expsum[v_i0] = T.float32(0)
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_0]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[200, 5])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[100, 10])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True)
b17 = sch.rfactor(loop=l16, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=1)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=1)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=-1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-27 23:39:43 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(200)))
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1000)):
                    with T.block("T_softmax_maxelem"):
                        v_i0, v_k = T.axis.remap("SR", [ax0, ax1])
                        T.reads(p0[v_i0, v_k])
                        T.writes(T_softmax_maxelem[v_i0])
                        with T.init():
                            T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(200), T.int64(5)):
                with T.block("T_softmax_expsum_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(T_softmax_exp[v_i0, vk_0 * T.int64(5) + vk_1])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_0] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_0] = T_softmax_expsum_rf[v_i0, vk_0] + T_softmax_exp[v_i0, vk_0 * T.int64(5) + vk_1]
            for i0, k_0 in T.grid(T.int64(1), T.int64(200)):
                with T.block("T_softmax_expsum"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_expsum_rf[v_i0, vk_0])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_0]
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[200, 5])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
b12, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l13 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l13, preserve_unit_loops=True, index=-1)
l14 = sch.sample_compute_location(block=b12, decision=-1)
sch.compute_at(block=b12, loop=l14, preserve_unit_loops=True, index=-1)
l15 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-27 23:39:43 [INFO] [task_scheduler.cc:170] Design space #3:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(5)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(1000)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(1000), T.int64(1)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(p0[v_i0, vk_0 + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_0] = T.max(T_softmax_maxelem_rf[v_i0, vk_0], p0[v_i0, vk_0 + vk_1])
            for i0, k_0 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_maxelem"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_0])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_0])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(200), T.int64(5)):
                with T.block("T_softmax_expsum_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(p0[v_i0, vk_0 * T.int64(5) + vk_1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_1] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_1] = T_softmax_expsum_rf[v_i0, vk_1] + T.exp(p0[v_i0, vk_0 * T.int64(5) + vk_1] - T_softmax_maxelem[v_i0])
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0, ax1 in T.grid(T.int64(5), T.int64(1)):
                    with T.block("T_softmax_expsum"):
                        vk_1, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_expsum_rf[v_i0, vk_1])
                        T.writes(T_softmax_expsum[v_i0])
                        with T.init():
                            T_softmax_expsum[v_i0] = T.float32(0)
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_1]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[200, 5])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1000, 1])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True)
b17 = sch.rfactor(loop=l15, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=-1)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=-1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-27 23:39:43 [INFO] [task_scheduler.cc:170] Design space #4:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(5)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(1)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(1000), T.int64(1)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(p0[v_i0, vk_0 + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_1] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_1] = T.max(T_softmax_maxelem_rf[v_i0, vk_1], p0[v_i0, vk_0 + vk_1])
            for i0, k_1 in T.grid(T.int64(1), T.int64(1)):
                with T.block("T_softmax_maxelem"):
                    vk_1, v_i0 = T.axis.remap("RS", [k_1, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_1])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_1])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(200), T.int64(5)):
                with T.block("T_softmax_expsum_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(p0[v_i0, vk_0 * T.int64(5) + vk_1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_1] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_1] = T_softmax_expsum_rf[v_i0, vk_1] + T.exp(p0[v_i0, vk_0 * T.int64(5) + vk_1] - T_softmax_maxelem[v_i0])
            for i0, k_1 in T.grid(T.int64(1), T.int64(5)):
                with T.block("T_softmax_expsum"):
                    vk_1, v_i0 = T.axis.remap("RS", [k_1, i0])
                    T.reads(T_softmax_expsum_rf[v_i0, vk_1])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_1]
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[200, 5])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[1000, 1])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True)
b17 = sch.rfactor(loop=l16, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=-1)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=-1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-27 23:39:43 [INFO] [task_scheduler.cc:170] Design space #5:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(5)))
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1000)):
                    with T.block("T_softmax_maxelem"):
                        v_i0, v_k = T.axis.remap("SR", [ax0, ax1])
                        T.reads(p0[v_i0, v_k])
                        T.writes(T_softmax_maxelem[v_i0])
                        with T.init():
                            T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(200), T.int64(5)):
                with T.block("T_softmax_expsum_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(T_softmax_exp[v_i0, vk_0 * T.int64(5) + vk_1])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_1] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_1] = T_softmax_expsum_rf[v_i0, vk_1] + T_softmax_exp[v_i0, vk_0 * T.int64(5) + vk_1]
            for i0, k_1 in T.grid(T.int64(1), T.int64(5)):
                with T.block("T_softmax_expsum"):
                    vk_1, v_i0 = T.axis.remap("RS", [k_1, i0])
                    T.reads(T_softmax_expsum_rf[v_i0, vk_1])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_1]
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[200, 5])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
b12, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l13 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l13, preserve_unit_loops=True, index=-1)
l14 = sch.sample_compute_location(block=b12, decision=-1)
sch.compute_at(block=b12, loop=l14, preserve_unit_loops=True, index=-1)
l15 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-27 23:39:43 [INFO] [task_scheduler.cc:170] Design space #6:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(1000)))
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0 in range(T.int64(1000)):
                    for ax0_1, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("T_softmax_maxelem_rf"):
                            vk_0 = T.axis.spatial(T.int64(1000), ax0 + ax0_1)
                            v_i0, vk_1 = T.axis.remap("SR", [ax1, ax2])
                            T.reads(p0[v_i0, vk_0 + vk_1])
                            T.writes(T_softmax_maxelem_rf[v_i0, vk_0])
                            with T.init():
                                T_softmax_maxelem_rf[v_i0, vk_0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem_rf[v_i0, vk_0] = T.max(T_softmax_maxelem_rf[v_i0, vk_0], p0[v_i0, vk_0 + vk_1])
                    for ax1 in range(T.int64(1)):
                        with T.block("T_softmax_maxelem"):
                            vk_0, v_i0 = T.axis.remap("RS", [ax0, ax1])
                            T.reads(T_softmax_maxelem_rf[v_i0, vk_0])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_0])
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1000)):
                    with T.block("T_softmax_expsum"):
                        v_i0, v_k = T.axis.remap("SR", [ax0, ax1])
                        T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                        T.writes(T_softmax_expsum[v_i0])
                        with T.init():
                            T_softmax_expsum[v_i0] = T.float32(0)
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b0)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[1000, 1])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
l12 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l12, preserve_unit_loops=True, index=-1)
l13 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l13, preserve_unit_loops=True, index=-1)
b14, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l15 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b14, decision=2)
sch.compute_at(block=b14, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-27 23:39:43 [INFO] [task_scheduler.cc:170] Design space #7:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(1)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(1000), T.int64(1)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(p0[v_i0, vk_0 + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_1] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_1] = T.max(T_softmax_maxelem_rf[v_i0, vk_1], p0[v_i0, vk_0 + vk_1])
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    with T.block("T_softmax_maxelem"):
                        vk_1, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_maxelem_rf[v_i0, vk_1])
                        T.writes(T_softmax_maxelem[v_i0])
                        with T.init():
                            T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_1])
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, k in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_expsum"):
                    v_i0, v_k = T.axis.remap("SR", [i0, k])
                    T.reads(T_softmax_exp[v_i0, v_k])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b0)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[1000, 1])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
l12 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l12, preserve_unit_loops=True, index=-1)
l13 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l13, preserve_unit_loops=True, index=-1)
b14, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l15 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b14, decision=-1)
sch.compute_at(block=b14, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-27 23:39:43 [INFO] [task_scheduler.cc:170] Design space #8:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0, k in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_maxelem"):
                    v_i0, v_k = T.axis.remap("SR", [i0, k])
                    T.reads(p0[v_i0, v_k])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0, k in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_expsum"):
                    v_i0, v_k = T.axis.remap("SR", [i0, k])
                    T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v4 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v4)
l5 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l5, preserve_unit_loops=True, index=-1)
l6 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l6, preserve_unit_loops=True, index=-1)
l7 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l7, preserve_unit_loops=True, index=-1)
2024-04-28 00:08:47 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 00:08:47 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 00:08:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x338fb58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x311f5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31349b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3322058)]: 0 failure(s)
2024-04-28 00:08:47 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 00:08:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x338fb58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x311f5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31349b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3322058)]: 0 failure(s)
2024-04-28 00:08:50 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x338fb58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x311f5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31349b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3322058)]: 0 failure(s)
2024-04-28 00:08:51 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x338fb58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x311f5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31349b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3322058)]: 0 failure(s)
2024-04-28 00:08:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x338fb58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x311f5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31349b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3322058)]: 0 failure(s)
2024-04-28 00:08:53 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9991  0.9989  0.9987  0.9982  0.9977  0.9974  0.9967  0.9961  0.9953  0.9945  0.9926  0.9909  0.9902  0.9902  0.9896
[17 : 32]:	0.9885  0.9884  0.9875  0.9874  0.9865  0.9859  0.9858  0.9857  0.9857  0.9853  0.9851  0.9838  0.9836  0.9833  0.9814  0.9809
[33 : 48]:	0.9788  0.9786  0.9783  0.9780  0.9778  0.9773  0.9765  0.9761  0.9760  0.9754  0.9752  0.9752  0.9749  0.9736  0.9735  0.9728
[49 : 64]:	0.9720  0.9713  0.9709  0.9707  0.9699  0.9698  0.9696  0.9695  0.9693  0.9686  0.9686  0.9679  0.9671  0.9658  0.9647  0.9644
2024-04-28 00:08:54 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 00:08:54 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #1: GFLOPs: 0.0036. Time: 1122.5150 us. Best GFLOPs: 0.0036
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #2: GFLOPs: 0.0028. Time: 1415.2278 us. Best GFLOPs: 0.0036
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #3: GFLOPs: 0.0402. Time: 99.4092 us. Best GFLOPs: 0.0402
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #4: GFLOPs: 0.1121. Time: 35.6858 us. Best GFLOPs: 0.1121
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #5: GFLOPs: 0.0294. Time: 136.1360 us. Best GFLOPs: 0.1121
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #6: GFLOPs: 0.0034. Time: 1191.5745 us. Best GFLOPs: 0.1121
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #7: GFLOPs: 0.0176. Time: 226.6724 us. Best GFLOPs: 0.1121
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #8: GFLOPs: 0.0760. Time: 52.5986 us. Best GFLOPs: 0.1121
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #9: GFLOPs: 0.0120. Time: 332.6635 us. Best GFLOPs: 0.1121
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #10: GFLOPs: 0.1169. Time: 34.2038 us. Best GFLOPs: 0.1169
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #11: GFLOPs: 0.0430. Time: 92.9370 us. Best GFLOPs: 0.1169
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #12: GFLOPs: 0.1342. Time: 29.7961 us. Best GFLOPs: 0.1342
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #13: GFLOPs: 0.1071. Time: 37.3620 us. Best GFLOPs: 0.1342
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #14: GFLOPs: 0.0887. Time: 45.0865 us. Best GFLOPs: 0.1342
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #15: GFLOPs: 0.1376. Time: 29.0603 us. Best GFLOPs: 0.1376
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #16: GFLOPs: 0.0816. Time: 49.0470 us. Best GFLOPs: 0.1376
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #17: GFLOPs: 0.0296. Time: 135.2943 us. Best GFLOPs: 0.1376
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #18: GFLOPs: 0.1735. Time: 23.0560 us. Best GFLOPs: 0.1735
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #19: GFLOPs: 0.1872. Time: 21.3671 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #20: GFLOPs: 0.0120. Time: 333.8368 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #21: GFLOPs: 0.0118. Time: 340.2380 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #22: GFLOPs: 0.0058. Time: 693.5688 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #23: GFLOPs: 0.1489. Time: 26.8547 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #24: GFLOPs: 0.1211. Time: 33.0368 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #25: GFLOPs: 0.1182. Time: 33.8362 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #26: GFLOPs: 0.0120. Time: 332.8110 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #27: GFLOPs: 0.0052. Time: 775.8453 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #28: GFLOPs: 0.1023. Time: 39.0934 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #29: GFLOPs: 0.1048. Time: 38.1615 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #30: GFLOPs: 0.0664. Time: 60.2483 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #31: GFLOPs: 0.0059. Time: 680.8240 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #32: GFLOPs: 0.0910. Time: 43.9540 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #33: GFLOPs: 0.0119. Time: 335.3377 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #34: GFLOPs: 0.0102. Time: 391.9229 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #35: GFLOPs: 0.0058. Time: 687.1989 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #36: GFLOPs: 0.0094. Time: 427.2254 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #37: GFLOPs: 0.1452. Time: 27.5429 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #38: GFLOPs: 0.0059. Time: 679.5966 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #39: GFLOPs: 0.1181. Time: 33.8612 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #40: GFLOPs: 0.0058. Time: 690.8366 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #41: GFLOPs: 0.0207. Time: 193.3786 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #42: GFLOPs: 0.1369. Time: 29.2212 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #43: GFLOPs: 0.0058. Time: 694.6017 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #44: GFLOPs: 0.0058. Time: 690.4905 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #45: GFLOPs: 0.0111. Time: 361.9072 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #46: GFLOPs: 0.1288. Time: 31.0583 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #47: GFLOPs: 0.0299. Time: 133.8195 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #48: GFLOPs: 0.0059. Time: 680.9473 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #49: GFLOPs: 0.1138. Time: 35.1592 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #50: GFLOPs: 0.0977. Time: 40.9499 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #51: GFLOPs: 0.1029. Time: 38.8708 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #52: GFLOPs: 0.0038. Time: 1066.0609 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #53: GFLOPs: 0.1001. Time: 39.9456 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #54: GFLOPs: 0.0065. Time: 618.0840 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #55: GFLOPs: 0.0040. Time: 1003.5506 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #56: GFLOPs: 0.1154. Time: 34.6707 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #57: GFLOPs: 0.0058. Time: 694.5735 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #58: GFLOPs: 0.0966. Time: 41.4268 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #59: GFLOPs: 0.1643. Time: 24.3526 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #60: GFLOPs: 0.0059. Time: 681.2930 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #61: GFLOPs: 0.0830. Time: 48.2118 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #62: GFLOPs: 0.1182. Time: 33.8425 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #63: GFLOPs: 0.0925. Time: 43.2624 us. Best GFLOPs: 0.1872
2024-04-28 00:10:18 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #64: GFLOPs: 0.0821. Time: 48.7412 us. Best GFLOPs: 0.1872
2024-04-28 07:08:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 07:08:19 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-28 07:08:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x338fb58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x311f5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31349b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3322058)]: 0 failure(s)
2024-04-28 07:08:20 [INFO] [evolutionary_search.cc:723] Sampled 448 candidate(s)
2024-04-28 07:08:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x338fb58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x311f5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31349b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3322058)]: 0 failure(s)
2024-04-28 07:08:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x338fb58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x311f5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31349b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3322058)]: 0 failure(s)
2024-04-28 07:08:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x338fb58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x311f5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31349b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3322058)]: 0 failure(s)
2024-04-28 07:08:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x338fb58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x311f5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x31349b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3322058)]: 0 failure(s)
2024-04-28 07:08:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0133  0.9927  0.9817  0.9702  0.9611  0.9603  0.9447  0.9393  0.9374  0.9358  0.9312  0.9302  0.9295  0.9292  0.9270  0.9249
[17 : 32]:	0.9201  0.9165  0.9141  0.9132  0.9123  0.9097  0.9052  0.9036  0.9033  0.9026  0.9024  0.9019  0.9013  0.9000  0.8996  0.8975
[33 : 48]:	0.8952  0.8942  0.8938  0.8927  0.8927  0.8902  0.8884  0.8871  0.8862  0.8836  0.8818  0.8791  0.8775  0.8729  0.8728  0.8704
[49 : 64]:	0.8692  0.8678  0.8654  0.8634  0.8631  0.8621  0.8614  0.8569  0.8568  0.8556  0.8545  0.8544  0.8519  0.8507  0.8497  0.8494
2024-04-28 07:08:36 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 07:08:36 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #65: GFLOPs: 0.0504. Time: 79.3011 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #66: GFLOPs: 0.0715. Time: 55.9623 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #67: GFLOPs: 0.1715. Time: 23.3195 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #68: GFLOPs: 0.1633. Time: 24.4998 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #69: GFLOPs: 0.0903. Time: 44.2830 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #70: GFLOPs: 0.1859. Time: 21.5139 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #71: GFLOPs: 0.1035. Time: 38.6312 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #72: GFLOPs: 0.0764. Time: 52.3393 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #73: GFLOPs: 0.0715. Time: 55.9371 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #74: GFLOPs: 0.1022. Time: 39.1576 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #75: GFLOPs: 0.0797. Time: 50.1929 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #76: GFLOPs: 0.1346. Time: 29.7201 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #77: GFLOPs: 0.1299. Time: 30.7981 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #78: GFLOPs: 0.1099. Time: 36.3965 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #79: GFLOPs: 0.1037. Time: 38.5708 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #80: GFLOPs: 0.1178. Time: 33.9478 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #81: GFLOPs: 0.1578. Time: 25.3510 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #82: GFLOPs: 0.1549. Time: 25.8232 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #83: GFLOPs: 0.1242. Time: 32.1933 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #84: GFLOPs: 0.0929. Time: 43.0513 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #85: GFLOPs: 0.1356. Time: 29.4930 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #86: GFLOPs: 0.0979. Time: 40.8391 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #87: GFLOPs: 0.1825. Time: 21.9202 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #88: GFLOPs: 0.1692. Time: 23.6407 us. Best GFLOPs: 0.1872
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #89: GFLOPs: 0.1989. Time: 20.1126 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #90: GFLOPs: 0.0837. Time: 47.8062 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #91: GFLOPs: 0.0885. Time: 45.1955 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #92: GFLOPs: 0.1254. Time: 31.8916 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #93: GFLOPs: 0.0887. Time: 45.0749 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #94: GFLOPs: 0.0812. Time: 49.2709 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #95: GFLOPs: 0.0979. Time: 40.8605 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #96: GFLOPs: 0.0883. Time: 45.3037 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #97: GFLOPs: 0.0278. Time: 143.6471 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #98: GFLOPs: 0.1272. Time: 31.4434 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #99: GFLOPs: 0.1025. Time: 39.0227 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #100: GFLOPs: 0.1719. Time: 23.2671 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #101: GFLOPs: 0.1034. Time: 38.6822 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #102: GFLOPs: 0.0788. Time: 50.7912 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #103: GFLOPs: 0.1499. Time: 26.6929 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #104: GFLOPs: 0.1513. Time: 26.4357 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #105: GFLOPs: 0.0776. Time: 51.5328 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #106: GFLOPs: 0.1814. Time: 22.0535 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #107: GFLOPs: 0.1223. Time: 32.7071 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #108: GFLOPs: 0.0845. Time: 47.3134 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #109: GFLOPs: 0.1336. Time: 29.9394 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #110: GFLOPs: 0.1302. Time: 30.7299 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #111: GFLOPs: 0.1038. Time: 38.5203 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #112: GFLOPs: 0.1849. Time: 21.6329 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #113: GFLOPs: 0.1333. Time: 30.0064 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #114: GFLOPs: 0.1742. Time: 22.9642 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #115: GFLOPs: 0.1270. Time: 31.4893 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #116: GFLOPs: 0.1914. Time: 20.9013 us. Best GFLOPs: 0.1989
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #117: GFLOPs: 0.2094. Time: 19.1063 us. Best GFLOPs: 0.2094
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #118: GFLOPs: 0.0995. Time: 40.2202 us. Best GFLOPs: 0.2094
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #119: GFLOPs: 0.1264. Time: 31.6472 us. Best GFLOPs: 0.2094
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #120: GFLOPs: 0.0940. Time: 42.5636 us. Best GFLOPs: 0.2094
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #121: GFLOPs: 0.1219. Time: 32.8097 us. Best GFLOPs: 0.2094
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #122: GFLOPs: 0.1780. Time: 22.4678 us. Best GFLOPs: 0.2094
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #123: GFLOPs: 0.0999. Time: 40.0505 us. Best GFLOPs: 0.2094
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #124: GFLOPs: 0.1348. Time: 29.6768 us. Best GFLOPs: 0.2094
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #125: GFLOPs: 0.1272. Time: 31.4529 us. Best GFLOPs: 0.2094
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #126: GFLOPs: 0.1212. Time: 33.0104 us. Best GFLOPs: 0.2094
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #127: GFLOPs: 0.0344. Time: 116.2280 us. Best GFLOPs: 0.2094
2024-04-28 07:09:48 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_softmax] Trial #128: GFLOPs: 0.0094. Time: 425.0496 us. Best GFLOPs: 0.2094
