2024-04-27 23:39:31 [INFO] [task_scheduler.cc:160] Initializing Task #8: "fused_nn_max_pool2d_2"
2024-04-27 23:39:31 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(13), T.int64(13), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-27 23:39:31 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-27 23:39:31 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(13), T.int64(13), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4), T.int64(3)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 3])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-27 23:39:31 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(13), T.int64(13), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4), T.int64(3)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 3])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-27 23:39:31 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(13), T.int64(13), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-27 23:52:17 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-27 23:52:17 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-27 23:52:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35418a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x35a6bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3179448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f26c88)]: 0 failure(s)
2024-04-27 23:52:18 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-27 23:52:19 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35418a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x35a6bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3179448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f26c88)]: 0 failure(s)
2024-04-27 23:52:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35418a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x35a6bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3179448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f26c88)]: 0 failure(s)
2024-04-27 23:52:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35418a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x35a6bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3179448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f26c88)]: 0 failure(s)
2024-04-27 23:52:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35418a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x35a6bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3179448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3f26c88)]: 0 failure(s)
2024-04-27 23:52:24 [INFO] [evolutionary_search.cc:649] Scores of the best 61 candidates:
[1 : 16]:	0.9901  0.9801  0.9676  0.9407  0.9334  0.9308  0.9149  0.9002  0.8778  0.8243  0.8187  0.7988  0.7651  0.7612  0.7560  0.7529
[17 : 32]:	0.7463  0.7272  0.7255  0.7108  0.7005  0.6876  0.6712  0.6444  0.6270  0.5873  0.5830  0.5512  0.5267  0.5090  0.4992  0.4981
[33 : 48]:	0.4790  0.4610  0.4357  0.4152  0.4133  0.4124  0.3794  0.3602  0.3452  0.3164  0.3155  0.3002  0.2790  0.2544  0.2238  0.1978
[49 : 61]:	0.1881  0.1766  0.1504  0.1453  0.1131  0.1062  0.0680  0.0630  0.0455  0.0448  0.0216  0.0041  0.0003
2024-04-27 23:52:24 [INFO] [evolutionary_search.cc:727] Got 61 candidate(s) with evolutionary search
2024-04-27 23:52:24 [INFO] [evolutionary_search.cc:730] Sending 61 candidates(s) for measurement
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #1: GFLOPs: 3.4287. Time: 24.1911 us. Best GFLOPs: 3.4287
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #2: GFLOPs: 3.7071. Time: 22.3742 us. Best GFLOPs: 3.7071
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #3: GFLOPs: 3.0098. Time: 27.5575 us. Best GFLOPs: 3.7071
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #4: GFLOPs: 3.5336. Time: 23.4732 us. Best GFLOPs: 3.7071
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #5: GFLOPs: 3.7106. Time: 22.3532 us. Best GFLOPs: 3.7106
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #6: GFLOPs: 3.9657. Time: 20.9155 us. Best GFLOPs: 3.9657
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #7: GFLOPs: 2.8308. Time: 29.3009 us. Best GFLOPs: 3.9657
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #8: GFLOPs: 3.4064. Time: 24.3492 us. Best GFLOPs: 3.9657
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #9: GFLOPs: 3.5798. Time: 23.1702 us. Best GFLOPs: 3.9657
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #10: GFLOPs: 3.3551. Time: 24.7217 us. Best GFLOPs: 3.9657
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #11: GFLOPs: 3.7584. Time: 22.0690 us. Best GFLOPs: 3.9657
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_max_pool2d_2] Trial #12: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(13), T.int64(13), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4), T.int64(9)))
        for ax0_ax1_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(6), T.int64(6), T.int64(4), T.int64(9)):
                with T.block("pool_max_rf_init"):
                    vrv0_rv1_fused_0 = T.axis.spatial(T.int64(9), rv0_rv1_fused_0)
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                    T.reads()
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(1)):
                    with T.block("pool_max_rf_update"):
                        vrv0_rv1_fused_0 = T.axis.spatial(T.int64(9), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSR", [ax0_ax1_fused, ax2, ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(6), T.int64(6), T.int64(4)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(9)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_0 = T.axis.reduce(T.int64(9), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[9, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, preserve_unit_iters=True)
sch.parallel(loop=l26)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b18)
l33 = sch.fuse(l27, l28, preserve_unit_iters=True)
sch.parallel(loop=l33)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
b34 = sch.get_block(name="pool_max_rf", func_name="main")
l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b34)
b41 = sch.decompose_reduction(block=b34, loop=l40)
b42 = sch.get_block(name="pool_max", func_name="main")
l43, l44, l45, l46, l47 = sch.get_loops(block=b42)
b48 = sch.decompose_reduction(block=b42, loop=l47)
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #13: GFLOPs: 3.3671. Time: 24.6339 us. Best GFLOPs: 3.9657
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #14: GFLOPs: 8.0739. Time: 10.2731 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #15: GFLOPs: 3.4061. Time: 24.3515 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #16: GFLOPs: 3.6328. Time: 22.8319 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #17: GFLOPs: 3.9882. Time: 20.7972 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #18: GFLOPs: 3.4450. Time: 24.0768 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #19: GFLOPs: 3.3637. Time: 24.6584 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #20: GFLOPs: 3.6629. Time: 22.6446 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #21: GFLOPs: 3.3221. Time: 24.9672 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #22: GFLOPs: 3.0820. Time: 26.9121 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #23: GFLOPs: 3.5028. Time: 23.6792 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #24: GFLOPs: 3.9253. Time: 21.1305 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #25: GFLOPs: 3.9201. Time: 21.1589 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #26: GFLOPs: 3.5299. Time: 23.4973 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #27: GFLOPs: 3.3850. Time: 24.5035 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #28: GFLOPs: 3.0396. Time: 27.2881 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #29: GFLOPs: 3.6867. Time: 22.4984 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #30: GFLOPs: 3.3509. Time: 24.7529 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_max_pool2d_2] Trial #31: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(13), T.int64(13), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4), T.int64(9)))
        for ax0_ax1_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(6), T.int64(6), T.int64(4)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(9)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(9), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(1)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(9)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(9), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSR", [ax0_ax1_fused, ax2, ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(6), T.int64(6), T.int64(4)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(9)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(9), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 9])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, preserve_unit_iters=True)
sch.parallel(loop=l26)
l27 = sch.fuse(l25, preserve_unit_iters=True)
sch.vectorize(loop=l27)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l28, l29, l30, l31, l32, l33 = sch.get_loops(block=b18)
l34 = sch.fuse(l28, l29, preserve_unit_iters=True)
sch.parallel(loop=l34)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
b35 = sch.get_block(name="pool_max_rf", func_name="main")
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
b42 = sch.decompose_reduction(block=b35, loop=l40)
b43 = sch.get_block(name="pool_max", func_name="main")
l44, l45, l46, l47, l48 = sch.get_loops(block=b43)
b49 = sch.decompose_reduction(block=b43, loop=l48)
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #32: GFLOPs: 3.5239. Time: 23.5373 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #33: GFLOPs: 3.4802. Time: 23.8334 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #34: GFLOPs: 3.2392. Time: 25.6061 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #35: GFLOPs: 0.7826. Time: 105.9867 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #36: GFLOPs: 1.5016. Time: 55.2362 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #37: GFLOPs: 1.4131. Time: 58.6970 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #38: GFLOPs: 1.3968. Time: 59.3795 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #39: GFLOPs: 1.2996. Time: 63.8230 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_max_pool2d_2] Trial #40: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(13), T.int64(13), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4), T.int64(9)))
        for ax0_ax1_ax2_fused in T.parallel(T.int64(384), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(6), T.int64(4), T.int64(9)):
                with T.block("pool_max_rf_init"):
                    vrv0_rv1_fused_0 = T.axis.spatial(T.int64(9), rv0_rv1_fused_0)
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_fused // T.int64(6))
                    v_ax2 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_fused % T.int64(6))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(1)):
                    with T.block("pool_max_rf_update"):
                        vrv0_rv1_fused_0 = T.axis.spatial(T.int64(9), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_fused // T.int64(6))
                        v_ax2 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_fused % T.int64(6))
                        v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_ax2_fused in T.parallel(T.int64(384), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(6), T.int64(4)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_fused // T.int64(6))
                    v_ax2 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_fused % T.int64(6))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(9)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_0 = T.axis.reduce(T.int64(9), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_fused // T.int64(6))
                        v_ax2 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_fused % T.int64(6))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[9, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=64)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, l21, preserve_unit_iters=True)
sch.parallel(loop=l26)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b18)
l33 = sch.fuse(l27, l28, l29, preserve_unit_iters=True)
sch.parallel(loop=l33)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
b34 = sch.get_block(name="pool_max_rf", func_name="main")
l35, l36, l37, l38, l39 = sch.get_loops(block=b34)
b40 = sch.decompose_reduction(block=b34, loop=l39)
b41 = sch.get_block(name="pool_max", func_name="main")
l42, l43, l44, l45 = sch.get_loops(block=b41)
b46 = sch.decompose_reduction(block=b41, loop=l45)
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #41: GFLOPs: 1.5077. Time: 55.0128 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #42: GFLOPs: 3.6958. Time: 22.4430 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #43: GFLOPs: 3.0954. Time: 26.7956 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #44: GFLOPs: 3.6255. Time: 22.8780 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #45: GFLOPs: 3.7181. Time: 22.3082 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #46: GFLOPs: 3.7785. Time: 21.9516 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #47: GFLOPs: 7.2875. Time: 11.3817 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #48: GFLOPs: 3.5660. Time: 23.2599 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #49: GFLOPs: 3.5231. Time: 23.5432 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #50: GFLOPs: 6.3625. Time: 13.0364 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #51: GFLOPs: 2.5541. Time: 32.4744 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #52: GFLOPs: 2.9680. Time: 27.9456 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #53: GFLOPs: 3.9685. Time: 20.9003 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #54: GFLOPs: 2.7748. Time: 29.8917 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #55: GFLOPs: 3.2392. Time: 25.6062 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #56: GFLOPs: 3.4793. Time: 23.8396 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #57: GFLOPs: 3.8765. Time: 21.3968 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #58: GFLOPs: 3.1498. Time: 26.3329 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #59: GFLOPs: 3.0249. Time: 27.4208 us. Best GFLOPs: 8.0739
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #60: GFLOPs: 8.3791. Time: 9.8989 us. Best GFLOPs: 8.3791
2024-04-28 00:10:05 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #61: GFLOPs: 3.0320. Time: 27.3559 us. Best GFLOPs: 8.3791
