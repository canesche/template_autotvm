2024-04-27 23:39:06 [INFO] [task_scheduler.cc:160] Initializing Task #2: "fused_nn_max_pool2d"
2024-04-27 23:39:06 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-27 23:39:06 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-27 23:39:06 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4), T.int64(3)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 3])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-27 23:39:06 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4), T.int64(3)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 3])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-27 23:39:06 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-27 23:41:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-27 23:41:40 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-27 23:41:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3190ab8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b70768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x32f5998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x32233f8)]: 0 failure(s)
2024-04-27 23:41:41 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-27 23:41:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3190ab8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b70768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x32f5998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x32233f8)]: 0 failure(s)
2024-04-27 23:41:43 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3190ab8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b70768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x32f5998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x32233f8)]: 0 failure(s)
2024-04-27 23:41:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3190ab8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b70768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x32f5998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x32233f8)]: 0 failure(s)
2024-04-27 23:41:46 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3190ab8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b70768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x32f5998)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x32233f8)]: 0 failure(s)
2024-04-27 23:41:46 [INFO] [evolutionary_search.cc:649] Scores of the best 55 candidates:
[1 : 16]:	0.9992  0.9714  0.9480  0.9155  0.9124  0.8988  0.8958  0.8858  0.8808  0.8580  0.8551  0.7981  0.7922  0.7775  0.7758  0.7714
[17 : 32]:	0.7442  0.7164  0.7155  0.6987  0.6923  0.6622  0.6439  0.5980  0.5761  0.5434  0.4532  0.4401  0.4266  0.4228  0.4220  0.3977
[33 : 48]:	0.3802  0.3800  0.3097  0.3075  0.2882  0.2754  0.2728  0.2643  0.2477  0.2354  0.2169  0.2106  0.2009  0.1979  0.1917  0.1632
[49 : 55]:	0.1571  0.1498  0.1340  0.1234  0.0849  0.0103  0.0098
2024-04-27 23:41:47 [INFO] [evolutionary_search.cc:727] Got 55 candidate(s) with evolutionary search
2024-04-27 23:41:47 [INFO] [evolutionary_search.cc:730] Sending 55 candidates(s) for measurement
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #1: GFLOPs: 16.0100. Time: 26.2276 us. Best GFLOPs: 16.0100
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #2: GFLOPs: 19.4707. Time: 21.5660 us. Best GFLOPs: 19.4707
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #3: GFLOPs: 10.6287. Time: 39.5066 us. Best GFLOPs: 19.4707
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #4: GFLOPs: 8.5852. Time: 48.9102 us. Best GFLOPs: 19.4707
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #5: GFLOPs: 6.9707. Time: 60.2382 us. Best GFLOPs: 19.4707
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #6: GFLOPs: 4.2136. Time: 99.6541 us. Best GFLOPs: 19.4707
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #7: GFLOPs: 15.1432. Time: 27.7289 us. Best GFLOPs: 19.4707
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #8: GFLOPs: 11.0176. Time: 38.1121 us. Best GFLOPs: 19.4707
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #9: GFLOPs: 10.5591. Time: 39.7669 us. Best GFLOPs: 19.4707
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #10: GFLOPs: 6.5488. Time: 64.1191 us. Best GFLOPs: 19.4707
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #11: GFLOPs: 7.3506. Time: 57.1253 us. Best GFLOPs: 19.4707
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #12: GFLOPs: 12.2355. Time: 34.3186 us. Best GFLOPs: 19.4707
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #13: GFLOPs: 23.6922. Time: 17.7233 us. Best GFLOPs: 23.6922
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #14: GFLOPs: 14.1174. Time: 29.7437 us. Best GFLOPs: 23.6922
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #15: GFLOPs: 6.5675. Time: 63.9364 us. Best GFLOPs: 23.6922
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #16: GFLOPs: 5.0617. Time: 82.9566 us. Best GFLOPs: 23.6922
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #17: GFLOPs: 9.8378. Time: 42.6829 us. Best GFLOPs: 23.6922
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #18: GFLOPs: 8.2800. Time: 50.7132 us. Best GFLOPs: 23.6922
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #19: GFLOPs: 8.9969. Time: 46.6723 us. Best GFLOPs: 23.6922
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #20: GFLOPs: 5.0921. Time: 82.4620 us. Best GFLOPs: 23.6922
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #21: GFLOPs: 14.7135. Time: 28.5388 us. Best GFLOPs: 23.6922
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #22: GFLOPs: 6.9269. Time: 60.6197 us. Best GFLOPs: 23.6922
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #23: GFLOPs: 8.0012. Time: 52.4800 us. Best GFLOPs: 23.6922
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #24: GFLOPs: 26.5908. Time: 15.7913 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #25: GFLOPs: 11.2956. Time: 37.1742 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #26: GFLOPs: 11.3299. Time: 37.0617 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #27: GFLOPs: 13.6859. Time: 30.6815 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #28: GFLOPs: 3.0269. Time: 138.7244 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #29: GFLOPs: 11.5193. Time: 36.4521 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #30: GFLOPs: 6.7825. Time: 61.9103 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #31: GFLOPs: 17.2246. Time: 24.3781 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #32: GFLOPs: 9.6303. Time: 43.6025 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #33: GFLOPs: 16.2555. Time: 25.8315 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #34: GFLOPs: 16.8175. Time: 24.9683 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #35: GFLOPs: 6.6682. Time: 62.9715 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #36: GFLOPs: 12.8190. Time: 32.7565 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #37: GFLOPs: 10.7393. Time: 39.0997 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #38: GFLOPs: 11.1897. Time: 37.5260 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #39: GFLOPs: 8.0155. Time: 52.3865 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #40: GFLOPs: 6.6464. Time: 63.1773 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #41: GFLOPs: 13.0811. Time: 32.1000 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #42: GFLOPs: 9.3551. Time: 44.8848 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #43: GFLOPs: 5.4142. Time: 77.5562 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_max_pool2d] Trial #44: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4), T.int64(3)))
        for ax0_ax1_ax2_fused in T.parallel(T.int64(432), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(27), T.int64(4)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(3)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_fused // T.int64(27))
                        v_ax2 = T.axis.spatial(T.int64(27), ax0_ax1_ax2_fused % T.int64(27))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(3)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(3)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_fused // T.int64(27))
                            v_ax2 = T.axis.spatial(T.int64(27), ax0_ax1_ax2_fused % T.int64(27))
                            v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_ax2_fused in T.parallel(T.int64(432), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(27), T.int64(4)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_fused // T.int64(27))
                    v_ax2 = T.axis.spatial(T.int64(27), ax0_ax1_ax2_fused % T.int64(27))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(3)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(3), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_fused // T.int64(27))
                        v_ax2 = T.axis.spatial(T.int64(27), ax0_ax1_ax2_fused % T.int64(27))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 3])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=16)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, l21, preserve_unit_iters=True)
sch.parallel(loop=l26)
l27 = sch.fuse(l25, preserve_unit_iters=True)
sch.vectorize(loop=l27)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l28, l29, l30, l31, l32, l33 = sch.get_loops(block=b18)
l34 = sch.fuse(l28, l29, l30, preserve_unit_iters=True)
sch.parallel(loop=l34)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
b35 = sch.get_block(name="pool_max_rf", func_name="main")
l36, l37, l38, l39, l40 = sch.get_loops(block=b35)
b41 = sch.decompose_reduction(block=b35, loop=l39)
b42 = sch.get_block(name="pool_max", func_name="main")
l43, l44, l45, l46 = sch.get_loops(block=b42)
b47 = sch.decompose_reduction(block=b42, loop=l46)
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #45: GFLOPs: 3.3362. Time: 125.8648 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #46: GFLOPs: 7.9156. Time: 53.0473 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #47: GFLOPs: 6.1312. Time: 68.4868 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #48: GFLOPs: 9.9728. Time: 42.1047 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #49: GFLOPs: 2.6483. Time: 158.5590 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #50: GFLOPs: 11.4264. Time: 36.7487 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #51: GFLOPs: 5.2351. Time: 80.2093 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #52: GFLOPs: 8.3529. Time: 50.2706 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #53: GFLOPs: 10.6362. Time: 39.4789 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #54: GFLOPs: 8.5670. Time: 49.0141 us. Best GFLOPs: 26.5908
2024-04-28 00:09:52 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #55: GFLOPs: 10.8020. Time: 38.8729 us. Best GFLOPs: 26.5908
