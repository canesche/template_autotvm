2024-04-28 20:44:12 [INFO] [task_scheduler.cc:160] Initializing Task #6: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6"
2024-04-28 20:44:12 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(200), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(200), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4), T.int64(800), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:44:12 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:44:12 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(200), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(200), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(80), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(1), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(800), ic_0 * T.int64(10) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 8, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[80, 10])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:44:12 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(200), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(200), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(80), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(1), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(800), ic_0 * T.int64(10) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 8, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[80, 10])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:44:12 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(200), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(200), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(80), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(1), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(800), ic_0 * T.int64(10) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 8, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[80, 10])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:57:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:57:29 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:57:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x870c078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x98769d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x897fef8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x60e2038)]: 0 failure(s)
2024-04-28 20:57:32 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 20:57:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x870c078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x98769d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x897fef8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x60e2038)]: 0 failure(s)
2024-04-28 20:57:37 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x870c078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x98769d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x897fef8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x60e2038)]: 0 failure(s)
2024-04-28 20:57:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x870c078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x98769d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x897fef8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x60e2038)]: 0 failure(s)
2024-04-28 20:57:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x870c078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x98769d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x897fef8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x60e2038)]: 0 failure(s)
2024-04-28 20:57:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9996  0.9995  0.9995  0.9990  0.9971  0.9965  0.9954  0.9952  0.9952  0.9943  0.9941  0.9931  0.9924  0.9920  0.9916
[17 : 32]:	0.9916  0.9912  0.9912  0.9910  0.9908  0.9902  0.9900  0.9896  0.9888  0.9884  0.9877  0.9873  0.9872  0.9871  0.9864  0.9858
[33 : 48]:	0.9853  0.9852  0.9850  0.9849  0.9833  0.9828  0.9828  0.9819  0.9810  0.9802  0.9802  0.9800  0.9798  0.9796  0.9795  0.9788
[49 : 64]:	0.9786  0.9785  0.9774  0.9766  0.9766  0.9765  0.9764  0.9762  0.9761  0.9760  0.9758  0.9750  0.9744  0.9737  0.9736  0.9731
2024-04-28 20:57:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:57:44 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #1: GFLOPs: 3.3276. Time: 3019.5169 us. Best GFLOPs: 3.3276
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #2: GFLOPs: 32.2477. Time: 311.5803 us. Best GFLOPs: 32.2477
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #3: GFLOPs: 22.0763. Time: 455.1364 us. Best GFLOPs: 32.2477
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #4: GFLOPs: 38.8619. Time: 258.5500 us. Best GFLOPs: 38.8619
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #5: GFLOPs: 0.4057. Time: 24768.7220 us. Best GFLOPs: 38.8619
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #6: GFLOPs: 44.3825. Time: 226.3899 us. Best GFLOPs: 44.3825
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #7: GFLOPs: 16.8627. Time: 595.8550 us. Best GFLOPs: 44.3825
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #8: GFLOPs: 54.5104. Time: 184.3270 us. Best GFLOPs: 54.5104
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #9: GFLOPs: 51.5683. Time: 194.8433 us. Best GFLOPs: 54.5104
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #10: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(200), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(200), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(16), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(400), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(800), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[400, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #11: GFLOPs: 65.2882. Time: 153.8983 us. Best GFLOPs: 65.2882
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #12: GFLOPs: 22.4238. Time: 448.0844 us. Best GFLOPs: 65.2882
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #13: GFLOPs: 0.9060. Time: 11089.8141 us. Best GFLOPs: 65.2882
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #14: GFLOPs: 19.5651. Time: 513.5542 us. Best GFLOPs: 65.2882
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #15: GFLOPs: 80.9968. Time: 124.0511 us. Best GFLOPs: 80.9968
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #16: GFLOPs: 18.1898. Time: 552.3834 us. Best GFLOPs: 80.9968
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #17: GFLOPs: 0.9730. Time: 10326.3611 us. Best GFLOPs: 80.9968
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #18: GFLOPs: 33.2847. Time: 301.8728 us. Best GFLOPs: 80.9968
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #19: GFLOPs: 10.0954. Time: 995.2822 us. Best GFLOPs: 80.9968
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #20: GFLOPs: 91.9398. Time: 109.2861 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #21: GFLOPs: 3.0959. Time: 3245.4683 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #22: GFLOPs: 19.3873. Time: 518.2632 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #23: GFLOPs: 33.9064. Time: 296.3376 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #24: GFLOPs: 25.1273. Time: 399.8733 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #25: GFLOPs: 7.3014. Time: 1376.1307 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #26: GFLOPs: 1.0521. Time: 9549.8925 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #27: GFLOPs: 1.5489. Time: 6487.0010 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #28: GFLOPs: 28.5458. Time: 351.9868 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #29: GFLOPs: 19.5372. Time: 514.2877 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #30: GFLOPs: 17.9001. Time: 561.3222 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #31: GFLOPs: 14.5873. Time: 688.8016 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #32: GFLOPs: 42.9212. Time: 234.0972 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #33: GFLOPs: 51.3783. Time: 195.5638 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #34: GFLOPs: 2.6024. Time: 3860.9740 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #35: GFLOPs: 15.8582. Time: 633.6012 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #36: GFLOPs: 4.0380. Time: 2488.2761 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #37: GFLOPs: 28.2581. Time: 355.5709 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #38: GFLOPs: 24.1217. Time: 416.5430 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #39: GFLOPs: 1.6818. Time: 5974.2945 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #40: GFLOPs: 23.3914. Time: 429.5492 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #41: GFLOPs: 12.3209. Time: 815.5015 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #42: GFLOPs: 20.8500. Time: 481.9072 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #43: GFLOPs: 36.1364. Time: 278.0505 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #44: GFLOPs: 10.5973. Time: 948.1414 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #45: GFLOPs: 55.2808. Time: 181.7584 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #46: GFLOPs: 73.9879. Time: 135.8026 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #47: GFLOPs: 1.8519. Time: 5425.5447 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #48: GFLOPs: 57.4056. Time: 175.0307 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #49: GFLOPs: 11.1341. Time: 902.4330 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #50: GFLOPs: 54.4903. Time: 184.3952 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #51: GFLOPs: 49.6694. Time: 202.2923 us. Best GFLOPs: 91.9398
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #52: GFLOPs: 101.8448. Time: 98.6574 us. Best GFLOPs: 101.8448
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #53: GFLOPs: 33.9573. Time: 295.8936 us. Best GFLOPs: 101.8448
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #54: GFLOPs: 38.7209. Time: 259.4918 us. Best GFLOPs: 101.8448
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #55: GFLOPs: 8.7444. Time: 1149.0470 us. Best GFLOPs: 101.8448
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #56: GFLOPs: 1.3354. Time: 7524.3658 us. Best GFLOPs: 101.8448
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #57: GFLOPs: 22.7541. Time: 441.5786 us. Best GFLOPs: 101.8448
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #58: GFLOPs: 21.3751. Time: 470.0669 us. Best GFLOPs: 101.8448
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #59: GFLOPs: 6.2110. Time: 1617.7420 us. Best GFLOPs: 101.8448
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #60: GFLOPs: 1.7695. Time: 5678.3084 us. Best GFLOPs: 101.8448
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #61: GFLOPs: 0.3968. Time: 25323.7857 us. Best GFLOPs: 101.8448
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #62: GFLOPs: 5.0130. Time: 2004.3353 us. Best GFLOPs: 101.8448
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #63: GFLOPs: 40.7652. Time: 246.4785 us. Best GFLOPs: 101.8448
2024-04-28 22:42:36 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_6] Trial #64: GFLOPs: 2.6683. Time: 3765.5503 us. Best GFLOPs: 101.8448
