2024-04-28 20:47:16 [INFO] [task_scheduler.cc:160] Initializing Task #53: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51"
2024-04-28 20:47:16 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(128), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:47:16 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:47:16 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(32), T.int64(4), T.int64(2), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 32, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:47:16 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(32), T.int64(4), T.int64(2), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_1 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_1 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 32, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:47:16 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(32), T.int64(4), T.int64(2), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(2), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 32, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 22:09:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:09:28 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 22:09:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb168488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6465078)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6c86758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad55dd8)]: 0 failure(s)
2024-04-28 22:09:31 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 22:09:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb168488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6465078)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6c86758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad55dd8)]: 0 failure(s)
2024-04-28 22:09:36 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb168488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6465078)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6c86758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad55dd8)]: 0 failure(s)
2024-04-28 22:09:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb168488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6465078)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6c86758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad55dd8)]: 0 failure(s)
2024-04-28 22:09:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb168488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6465078)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6c86758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad55dd8)]: 0 failure(s)
2024-04-28 22:09:43 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9994  0.9994  0.9989  0.9988  0.9988  0.9981  0.9966  0.9965  0.9958  0.9956  0.9951  0.9949  0.9937  0.9931  0.9930
[17 : 32]:	0.9929  0.9927  0.9926  0.9924  0.9922  0.9919  0.9914  0.9914  0.9903  0.9881  0.9880  0.9879  0.9871  0.9863  0.9863  0.9857
[33 : 48]:	0.9850  0.9843  0.9842  0.9840  0.9836  0.9830  0.9817  0.9815  0.9810  0.9806  0.9800  0.9797  0.9790  0.9788  0.9788  0.9788
[49 : 64]:	0.9771  0.9769  0.9759  0.9758  0.9756  0.9751  0.9749  0.9742  0.9738  0.9733  0.9732  0.9731  0.9730  0.9729  0.9725  0.9724
2024-04-28 22:09:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:09:44 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #1: GFLOPs: 56.0518. Time: 461.9085 us. Best GFLOPs: 56.0518
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #2: GFLOPs: 35.0855. Time: 737.9343 us. Best GFLOPs: 56.0518
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #3: GFLOPs: 52.9508. Time: 488.9594 us. Best GFLOPs: 56.0518
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #4: GFLOPs: 51.7494. Time: 500.3118 us. Best GFLOPs: 56.0518
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #5: GFLOPs: 70.3235. Time: 368.1673 us. Best GFLOPs: 70.3235
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #6: GFLOPs: 0.8614. Time: 30056.9568 us. Best GFLOPs: 70.3235
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #7: GFLOPs: 2.7407. Time: 9446.6735 us. Best GFLOPs: 70.3235
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #8: GFLOPs: 41.6943. Time: 620.9684 us. Best GFLOPs: 70.3235
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:121] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #9: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 1, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 14, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #10: GFLOPs: 79.0085. Time: 327.6966 us. Best GFLOPs: 79.0085
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #11: GFLOPs: 41.8722. Time: 618.3294 us. Best GFLOPs: 79.0085
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #12: GFLOPs: 45.4811. Time: 569.2656 us. Best GFLOPs: 79.0085
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #13: GFLOPs: 91.8799. Time: 281.7897 us. Best GFLOPs: 91.8799
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #14: GFLOPs: 132.7603. Time: 195.0192 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #15: GFLOPs: 19.2267. Time: 1346.6088 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #16: GFLOPs: 92.1625. Time: 280.9257 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #17: GFLOPs: 129.0901. Time: 200.5639 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #18: GFLOPs: 54.0055. Time: 479.4105 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:121] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #19: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(8) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + oh_1 * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(8) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #20: GFLOPs: 1.8544. Time: 13962.0297 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #21: GFLOPs: 5.6644. Time: 4570.7826 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #22: GFLOPs: 22.9910. Time: 1126.1266 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #23: GFLOPs: 83.2748. Time: 310.9081 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #24: GFLOPs: 39.1980. Time: 660.5129 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #25: GFLOPs: 3.3847. Time: 7649.3812 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #26: GFLOPs: 22.6398. Time: 1143.5978 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #27: GFLOPs: 50.8350. Time: 509.3111 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #28: GFLOPs: 56.7636. Time: 456.1167 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #29: GFLOPs: 29.9676. Time: 863.9604 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #30: GFLOPs: 34.3642. Time: 753.4235 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #31: GFLOPs: 85.8401. Time: 301.6167 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #32: GFLOPs: 70.3472. Time: 368.0434 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:121] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #33: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(8) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + oh_1 * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(8) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 8, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #34: GFLOPs: 73.3960. Time: 352.7550 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #35: GFLOPs: 63.0399. Time: 410.7055 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #36: GFLOPs: 38.7055. Time: 668.9183 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #37: GFLOPs: 89.0310. Time: 290.8068 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #38: GFLOPs: 72.4740. Time: 357.2428 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #39: GFLOPs: 102.3111. Time: 253.0596 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #40: GFLOPs: 58.6727. Time: 441.2752 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #41: GFLOPs: 40.6207. Time: 637.3796 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #42: GFLOPs: 7.3962. Time: 3500.5664 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #43: GFLOPs: 132.2242. Time: 195.8100 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #44: GFLOPs: 1.4674. Time: 17644.6012 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #45: GFLOPs: 102.2361. Time: 253.2454 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #46: GFLOPs: 4.1063. Time: 6305.0932 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #47: GFLOPs: 57.9427. Time: 446.8348 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #48: GFLOPs: 25.3817. Time: 1020.0600 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:121] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #49: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(64) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(64) // T.int64(32) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 16, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 4, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #50: GFLOPs: 100.7678. Time: 256.9355 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #51: GFLOPs: 2.1630. Time: 11969.8893 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #52: GFLOPs: 10.0120. Time: 2585.9757 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #53: GFLOPs: 67.4113. Time: 384.0724 us. Best GFLOPs: 132.7603
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #54: GFLOPs: 139.5675. Time: 185.5074 us. Best GFLOPs: 139.5675
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #55: GFLOPs: 16.1236. Time: 1605.7686 us. Best GFLOPs: 139.5675
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #56: GFLOPs: 94.9774. Time: 272.5998 us. Best GFLOPs: 139.5675
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #57: GFLOPs: 79.4064. Time: 326.0545 us. Best GFLOPs: 139.5675
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #58: GFLOPs: 146.3992. Time: 176.8508 us. Best GFLOPs: 146.3992
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #59: GFLOPs: 58.2310. Time: 444.6225 us. Best GFLOPs: 146.3992
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #60: GFLOPs: 31.4988. Time: 821.9621 us. Best GFLOPs: 146.3992
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #61: GFLOPs: 58.3721. Time: 443.5476 us. Best GFLOPs: 146.3992
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #62: GFLOPs: 27.6512. Time: 936.3363 us. Best GFLOPs: 146.3992
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #63: GFLOPs: 43.7373. Time: 591.9625 us. Best GFLOPs: 146.3992
2024-04-28 22:46:12 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #64: GFLOPs: 9.3487. Time: 2769.4450 us. Best GFLOPs: 146.3992
2024-04-29 01:37:06 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:37:07 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 01:37:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb168488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6465078)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6c86758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad55dd8)]: 0 failure(s)
2024-04-29 01:37:09 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 01:37:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb168488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6465078)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6c86758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad55dd8)]: 0 failure(s)
2024-04-29 01:37:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb168488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6465078)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6c86758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad55dd8)]: 0 failure(s)
2024-04-29 01:37:25 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb168488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6465078)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6c86758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad55dd8)]: 0 failure(s)
2024-04-29 01:37:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb168488)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6465078)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6c86758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xad55dd8)]: 0 failure(s)
2024-04-29 01:37:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9857  0.8836  0.8787  0.8684  0.8675  0.8522  0.8381  0.8143  0.7941  0.7840  0.7763  0.7750  0.7709  0.7708  0.7703  0.7677
[17 : 32]:	0.7653  0.7646  0.7630  0.7598  0.7590  0.7554  0.7524  0.7488  0.7450  0.7382  0.7358  0.7339  0.7324  0.7321  0.7209  0.7196
[33 : 48]:	0.7188  0.7169  0.7142  0.7108  0.7108  0.7108  0.7035  0.7031  0.7028  0.7022  0.6980  0.6870  0.6863  0.6856  0.6855  0.6817
[49 : 64]:	0.6801  0.6797  0.6781  0.6767  0.6757  0.6757  0.6735  0.6734  0.6711  0.6709  0.6690  0.6667  0.6643  0.6638  0.6633  0.6601
2024-04-29 01:37:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:37:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #65: GFLOPs: 124.5380. Time: 207.8948 us. Best GFLOPs: 146.3992
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #66: GFLOPs: 113.5746. Time: 227.9630 us. Best GFLOPs: 146.3992
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #67: GFLOPs: 136.7477. Time: 189.3328 us. Best GFLOPs: 146.3992
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #68: GFLOPs: 113.7994. Time: 227.5127 us. Best GFLOPs: 146.3992
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #69: GFLOPs: 260.2252. Time: 99.4939 us. Best GFLOPs: 260.2252
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #70: GFLOPs: 157.8474. Time: 164.0243 us. Best GFLOPs: 260.2252
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #71: GFLOPs: 121.5768. Time: 212.9585 us. Best GFLOPs: 260.2252
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #72: GFLOPs: 65.0598. Time: 397.9539 us. Best GFLOPs: 260.2252
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #73: GFLOPs: 139.7068. Time: 185.3226 us. Best GFLOPs: 260.2252
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #74: GFLOPs: 192.6513. Time: 134.3921 us. Best GFLOPs: 260.2252
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #75: GFLOPs: 116.7592. Time: 221.7454 us. Best GFLOPs: 260.2252
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #76: GFLOPs: 119.3633. Time: 216.9077 us. Best GFLOPs: 260.2252
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #77: GFLOPs: 273.5708. Time: 94.6403 us. Best GFLOPs: 273.5708
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #78: GFLOPs: 76.9168. Time: 336.6080 us. Best GFLOPs: 273.5708
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #79: GFLOPs: 148.0265. Time: 174.9066 us. Best GFLOPs: 273.5708
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #80: GFLOPs: 128.4615. Time: 201.5453 us. Best GFLOPs: 273.5708
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #81: GFLOPs: 285.6746. Time: 90.6304 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #82: GFLOPs: 275.1484. Time: 94.0976 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #83: GFLOPs: 158.5352. Time: 163.3127 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #84: GFLOPs: 81.3773. Time: 318.1576 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #85: GFLOPs: 116.1120. Time: 222.9814 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #86: GFLOPs: 118.6531. Time: 218.2059 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #87: GFLOPs: 161.2139. Time: 160.5992 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #88: GFLOPs: 89.9447. Time: 287.8525 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #89: GFLOPs: 140.7120. Time: 183.9987 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #90: GFLOPs: 103.2416. Time: 250.7789 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #91: GFLOPs: 114.1561. Time: 226.8020 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #92: GFLOPs: 126.9357. Time: 203.9679 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #93: GFLOPs: 177.7026. Time: 145.6974 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #94: GFLOPs: 132.5356. Time: 195.3500 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #95: GFLOPs: 87.9623. Time: 294.3398 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #96: GFLOPs: 198.4259. Time: 130.4810 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #97: GFLOPs: 96.7236. Time: 267.6784 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #98: GFLOPs: 166.4788. Time: 155.5202 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #99: GFLOPs: 128.5942. Time: 201.3374 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #100: GFLOPs: 140.1238. Time: 184.7711 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #101: GFLOPs: 99.8777. Time: 259.2253 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #102: GFLOPs: 118.6750. Time: 218.1658 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #103: GFLOPs: 97.6785. Time: 265.0617 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #104: GFLOPs: 90.5737. Time: 285.8536 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #105: GFLOPs: 120.5743. Time: 214.7292 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #106: GFLOPs: 129.2596. Time: 200.3010 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #107: GFLOPs: 125.4084. Time: 206.4521 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #108: GFLOPs: 46.7597. Time: 553.6994 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #109: GFLOPs: 130.9277. Time: 197.7490 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #110: GFLOPs: 164.1226. Time: 157.7529 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #111: GFLOPs: 119.0063. Time: 217.5584 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #112: GFLOPs: 106.8363. Time: 242.3411 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #113: GFLOPs: 115.0729. Time: 224.9949 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #114: GFLOPs: 164.9994. Time: 156.9146 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #115: GFLOPs: 120.3851. Time: 215.0665 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #116: GFLOPs: 140.6628. Time: 184.0630 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #117: GFLOPs: 130.7795. Time: 197.9730 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #118: GFLOPs: 130.9466. Time: 197.7204 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #119: GFLOPs: 173.7819. Time: 148.9845 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #120: GFLOPs: 126.5544. Time: 204.5826 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #121: GFLOPs: 112.2543. Time: 230.6444 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #122: GFLOPs: 127.2635. Time: 203.4426 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #123: GFLOPs: 119.7164. Time: 216.2679 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #124: GFLOPs: 112.4007. Time: 230.3439 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #125: GFLOPs: 108.5612. Time: 238.4905 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #126: GFLOPs: 48.5322. Time: 533.4770 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #127: GFLOPs: 87.4748. Time: 295.9804 us. Best GFLOPs: 285.6746
2024-04-29 01:39:02 [INFO] [task_scheduler.cc:131] [Task #53: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_51] Trial #128: GFLOPs: 2.4014. Time: 10781.5824 us. Best GFLOPs: 285.6746
