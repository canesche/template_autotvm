2024-04-28 20:46:56 [INFO] [task_scheduler.cc:160] Initializing Task #48: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46"
2024-04-28 20:46:56 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(72), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(288), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:46:56 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:46:56 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(72), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(144), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(288), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 4, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[144, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:46:56 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(72), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(144), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(288), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 4, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[144, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:46:56 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(72), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(4), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(144), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(288), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(4), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 4, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[144, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 22:02:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:02:09 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 22:02:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63681b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c48c18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb1f30b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6d02928)]: 0 failure(s)
2024-04-28 22:02:12 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 22:02:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63681b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c48c18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb1f30b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6d02928)]: 0 failure(s)
2024-04-28 22:02:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63681b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c48c18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb1f30b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6d02928)]: 0 failure(s)
2024-04-28 22:02:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63681b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c48c18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb1f30b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6d02928)]: 0 failure(s)
2024-04-28 22:02:24 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63681b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c48c18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb1f30b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6d02928)]: 0 failure(s)
2024-04-28 22:02:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9994  0.9993  0.9992  0.9992  0.9988  0.9987  0.9982  0.9982  0.9980  0.9972  0.9971  0.9971  0.9957  0.9957  0.9939
[17 : 32]:	0.9937  0.9934  0.9930  0.9923  0.9923  0.9914  0.9903  0.9903  0.9901  0.9893  0.9891  0.9888  0.9886  0.9885  0.9880  0.9877
[33 : 48]:	0.9875  0.9873  0.9871  0.9870  0.9870  0.9864  0.9854  0.9854  0.9843  0.9843  0.9840  0.9834  0.9822  0.9821  0.9817  0.9816
[49 : 64]:	0.9804  0.9803  0.9800  0.9800  0.9800  0.9796  0.9791  0.9791  0.9781  0.9779  0.9779  0.9777  0.9775  0.9772  0.9764  0.9761
2024-04-28 22:02:25 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:02:26 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #1: GFLOPs: 31.5306. Time: 1839.5946 us. Best GFLOPs: 31.5306
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #2: GFLOPs: 10.6196. Time: 5461.9240 us. Best GFLOPs: 31.5306
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #3: GFLOPs: 36.8483. Time: 1574.1150 us. Best GFLOPs: 36.8483
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #4: GFLOPs: 45.3381. Time: 1279.3535 us. Best GFLOPs: 45.3381
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #5: GFLOPs: 87.8499. Time: 660.2563 us. Best GFLOPs: 87.8499
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #6: GFLOPs: 134.1185. Time: 432.4790 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #7: GFLOPs: 17.0931. Time: 3393.3843 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #8: GFLOPs: 69.4422. Time: 835.2769 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #9: GFLOPs: 61.3418. Time: 945.5776 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #10: GFLOPs: 3.0821. Time: 18819.2918 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #11: GFLOPs: 33.5868. Time: 1726.9721 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #12: GFLOPs: 59.8328. Time: 969.4253 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #13: GFLOPs: 8.6152. Time: 6732.7261 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #14: GFLOPs: 18.6396. Time: 3111.8447 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #15: GFLOPs: 68.7738. Time: 843.3946 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #16: GFLOPs: 59.5353. Time: 974.2701 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #17: GFLOPs: 32.9917. Time: 1758.1212 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #18: GFLOPs: 27.1712. Time: 2134.7426 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #19: GFLOPs: 14.8119. Time: 3916.0003 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #20: GFLOPs: 86.9180. Time: 667.3350 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #21: GFLOPs: 3.7691. Time: 15389.0304 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #22: GFLOPs: 65.6153. Time: 883.9927 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #23: GFLOPs: 37.7613. Time: 1536.0570 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #24: GFLOPs: 79.2388. Time: 732.0086 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #25: GFLOPs: 83.4394. Time: 695.1571 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #26: GFLOPs: 83.3917. Time: 695.5543 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #27: GFLOPs: 47.4590. Time: 1222.1799 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #28: GFLOPs: 62.6278. Time: 926.1614 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #29: GFLOPs: 85.9738. Time: 674.6647 us. Best GFLOPs: 134.1185
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #30: GFLOPs: 148.2657. Time: 391.2128 us. Best GFLOPs: 148.2657
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:121] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #31: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(72), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(32) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(28) + oh_2_init * T.int64(28) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(7) + ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(288), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(32) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(28) + oh_2 * T.int64(28) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(288), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 28])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[288, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #32: GFLOPs: 7.8645. Time: 7375.3494 us. Best GFLOPs: 148.2657
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #33: GFLOPs: 62.9632. Time: 921.2285 us. Best GFLOPs: 148.2657
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #34: GFLOPs: 54.8042. Time: 1058.3765 us. Best GFLOPs: 148.2657
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #35: GFLOPs: 32.5424. Time: 1782.3991 us. Best GFLOPs: 148.2657
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #36: GFLOPs: 52.3111. Time: 1108.8174 us. Best GFLOPs: 148.2657
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #37: GFLOPs: 8.0242. Time: 7228.5652 us. Best GFLOPs: 148.2657
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #38: GFLOPs: 69.3483. Time: 836.4081 us. Best GFLOPs: 148.2657
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #39: GFLOPs: 49.5217. Time: 1171.2744 us. Best GFLOPs: 148.2657
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #40: GFLOPs: 58.9229. Time: 984.3965 us. Best GFLOPs: 148.2657
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #41: GFLOPs: 49.0020. Time: 1183.6947 us. Best GFLOPs: 148.2657
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #42: GFLOPs: 43.0536. Time: 1347.2380 us. Best GFLOPs: 148.2657
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #43: GFLOPs: 106.3540. Time: 545.3812 us. Best GFLOPs: 148.2657
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:121] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #44: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(72), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_fused * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(28), T.int64(1), T.int64(18), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_fused * T.int64(4) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(288), ic_0 * T.int64(18) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(28), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_fused * T.int64(4) + oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 18])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b67)
b109 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b109)
b135 = sch.decompose_reduction(block=b109, loop=l119)
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #45: GFLOPs: 151.0882. Time: 383.9045 us. Best GFLOPs: 151.0882
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #46: GFLOPs: 80.3741. Time: 721.6681 us. Best GFLOPs: 151.0882
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #47: GFLOPs: 17.3685. Time: 3339.5748 us. Best GFLOPs: 151.0882
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #48: GFLOPs: 42.8128. Time: 1354.8156 us. Best GFLOPs: 151.0882
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #49: GFLOPs: 71.0044. Time: 816.9000 us. Best GFLOPs: 151.0882
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #50: GFLOPs: 20.1992. Time: 2871.5705 us. Best GFLOPs: 151.0882
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #51: GFLOPs: 35.8908. Time: 1616.1094 us. Best GFLOPs: 151.0882
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #52: GFLOPs: 1.4976. Time: 38730.0937 us. Best GFLOPs: 151.0882
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #53: GFLOPs: 41.3257. Time: 1403.5670 us. Best GFLOPs: 151.0882
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #54: GFLOPs: 46.6529. Time: 1243.2982 us. Best GFLOPs: 151.0882
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #55: GFLOPs: 30.0711. Time: 1928.8793 us. Best GFLOPs: 151.0882
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #56: GFLOPs: 33.3586. Time: 1738.7845 us. Best GFLOPs: 151.0882
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #57: GFLOPs: 52.3399. Time: 1108.2075 us. Best GFLOPs: 151.0882
2024-04-28 22:45:38 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #58: GFLOPs: 130.6439. Time: 443.9813 us. Best GFLOPs: 151.0882
2024-04-28 22:45:39 [INFO] [task_scheduler.cc:121] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #59: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(72), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(18), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(288), ic_0 * T.int64(18) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 8, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 18])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-28 22:45:39 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #60: GFLOPs: 98.8874. Time: 586.5607 us. Best GFLOPs: 151.0882
2024-04-28 22:45:39 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #61: GFLOPs: 56.3097. Time: 1030.0794 us. Best GFLOPs: 151.0882
2024-04-28 22:45:39 [INFO] [task_scheduler.cc:121] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #62: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(72), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(8), T.int64(4), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(9), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(4), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(4), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2 * T.int64(8) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(288), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(4)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 4, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[9, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-28 22:45:39 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #63: GFLOPs: 47.4234. Time: 1223.0970 us. Best GFLOPs: 151.0882
2024-04-28 23:59:44 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:59:44 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-28 23:59:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63681b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c48c18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb1f30b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6d02928)]: 0 failure(s)
2024-04-28 23:59:47 [INFO] [evolutionary_search.cc:723] Sampled 453 candidate(s)
2024-04-28 23:59:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63681b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c48c18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb1f30b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6d02928)]: 0 failure(s)
2024-04-28 23:59:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63681b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c48c18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb1f30b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6d02928)]: 0 failure(s)
2024-04-29 00:00:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63681b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c48c18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb1f30b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6d02928)]: 0 failure(s)
2024-04-29 00:00:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63681b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6c48c18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb1f30b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6d02928)]: 0 failure(s)
2024-04-29 00:00:12 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8481  0.8379  0.8379  0.8240  0.7911  0.7747  0.7595  0.7569  0.7550  0.7378  0.7346  0.7304  0.7199  0.7194  0.7161  0.7124
[17 : 32]:	0.7115  0.7054  0.7052  0.6973  0.6935  0.6922  0.6914  0.6914  0.6899  0.6893  0.6890  0.6883  0.6862  0.6846  0.6845  0.6845
[33 : 48]:	0.6845  0.6817  0.6793  0.6776  0.6775  0.6757  0.6757  0.6746  0.6746  0.6738  0.6731  0.6726  0.6716  0.6679  0.6676  0.6641
[49 : 64]:	0.6637  0.6588  0.6572  0.6570  0.6566  0.6547  0.6537  0.6531  0.6527  0.6522  0.6518  0.6514  0.6512  0.6509  0.6508  0.6507
2024-04-29 00:00:12 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:00:12 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #64: GFLOPs: 150.8697. Time: 384.4607 us. Best GFLOPs: 151.0882
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #65: GFLOPs: 9.1488. Time: 6339.9738 us. Best GFLOPs: 151.0882
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #66: GFLOPs: 105.2882. Time: 550.9018 us. Best GFLOPs: 151.0882
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #67: GFLOPs: 113.6585. Time: 510.3310 us. Best GFLOPs: 151.0882
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #68: GFLOPs: 104.8723. Time: 553.0866 us. Best GFLOPs: 151.0882
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #69: GFLOPs: 112.0562. Time: 517.6282 us. Best GFLOPs: 151.0882
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #70: GFLOPs: 21.2116. Time: 2734.5097 us. Best GFLOPs: 151.0882
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #71: GFLOPs: 120.2174. Time: 482.4880 us. Best GFLOPs: 151.0882
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #72: GFLOPs: 30.8696. Time: 1878.9844 us. Best GFLOPs: 151.0882
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #73: GFLOPs: 116.1437. Time: 499.4112 us. Best GFLOPs: 151.0882
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #74: GFLOPs: 17.4254. Time: 3328.6708 us. Best GFLOPs: 151.0882
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #75: GFLOPs: 227.7275. Time: 254.7056 us. Best GFLOPs: 227.7275
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #76: GFLOPs: 126.4410. Time: 458.7394 us. Best GFLOPs: 227.7275
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #77: GFLOPs: 20.3565. Time: 2849.3783 us. Best GFLOPs: 227.7275
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #78: GFLOPs: 149.8799. Time: 386.9997 us. Best GFLOPs: 227.7275
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #79: GFLOPs: 101.9945. Time: 568.6920 us. Best GFLOPs: 227.7275
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #80: GFLOPs: 325.1851. Time: 178.3706 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #81: GFLOPs: 130.4424. Time: 444.6670 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #82: GFLOPs: 172.9825. Time: 335.3140 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #83: GFLOPs: 128.3105. Time: 452.0553 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #84: GFLOPs: 136.7009. Time: 424.3092 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #85: GFLOPs: 81.4361. Time: 712.2573 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #86: GFLOPs: 45.2717. Time: 1281.2295 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #87: GFLOPs: 144.8234. Time: 400.5117 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #88: GFLOPs: 89.2941. Time: 649.5776 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #89: GFLOPs: 144.0163. Time: 402.7561 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #90: GFLOPs: 89.6751. Time: 646.8176 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #91: GFLOPs: 217.8773. Time: 266.2208 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #92: GFLOPs: 87.7356. Time: 661.1166 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #93: GFLOPs: 130.1058. Time: 445.8175 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #94: GFLOPs: 74.4723. Time: 778.8594 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #95: GFLOPs: 32.6388. Time: 1777.1340 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #96: GFLOPs: 31.6928. Time: 1830.1752 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #97: GFLOPs: 137.6429. Time: 421.4054 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #98: GFLOPs: 152.0369. Time: 381.5090 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #99: GFLOPs: 125.2839. Time: 462.9762 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #100: GFLOPs: 141.6495. Time: 409.4857 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #101: GFLOPs: 79.7538. Time: 727.2815 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #102: GFLOPs: 230.6514. Time: 251.4767 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #103: GFLOPs: 103.3853. Time: 561.0417 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #104: GFLOPs: 89.7158. Time: 646.5244 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #105: GFLOPs: 94.8984. Time: 611.2166 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #106: GFLOPs: 42.7869. Time: 1355.6356 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #107: GFLOPs: 114.2082. Time: 507.8748 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #108: GFLOPs: 120.9841. Time: 479.4302 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #109: GFLOPs: 102.7528. Time: 564.4954 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #110: GFLOPs: 189.7645. Time: 305.6603 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #111: GFLOPs: 18.5229. Time: 3131.4428 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #112: GFLOPs: 198.2083. Time: 292.6389 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #113: GFLOPs: 124.3919. Time: 466.2959 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #114: GFLOPs: 124.4749. Time: 465.9853 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #115: GFLOPs: 100.8320. Time: 575.2482 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #116: GFLOPs: 71.0652. Time: 816.2010 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #117: GFLOPs: 165.9451. Time: 349.5340 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #118: GFLOPs: 101.7238. Time: 570.2053 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #119: GFLOPs: 123.8915. Time: 468.1794 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #120: GFLOPs: 130.9041. Time: 443.0988 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #121: GFLOPs: 167.1188. Time: 347.0791 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #122: GFLOPs: 135.1071. Time: 429.3146 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #123: GFLOPs: 105.3707. Time: 550.4702 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #124: GFLOPs: 132.6451. Time: 437.2830 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #125: GFLOPs: 70.8079. Time: 819.1664 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #126: GFLOPs: 93.2642. Time: 621.9265 us. Best GFLOPs: 325.1851
2024-04-29 00:01:30 [INFO] [task_scheduler.cc:131] [Task #48: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_46] Trial #127: GFLOPs: 138.5318. Time: 418.7015 us. Best GFLOPs: 325.1851
