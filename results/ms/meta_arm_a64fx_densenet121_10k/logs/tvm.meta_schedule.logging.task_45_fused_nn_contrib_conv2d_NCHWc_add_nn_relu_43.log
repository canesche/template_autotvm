2024-04-28 20:46:44 [INFO] [task_scheduler.cc:160] Initializing Task #45: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43"
2024-04-28 20:46:44 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(96), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(384), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:46:44 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:46:44 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(96), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(384), ic_0 * T.int64(8) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 2, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[48, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:46:44 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(96), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(384), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(28), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + oc_chunk_1 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 2, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[48, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:46:44 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(96), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(384), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(28), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(14) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 2, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[48, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 21:56:42 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:56:42 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:56:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x66ec388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xaaf83d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x66ebea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa4d9048)]: 0 failure(s)
2024-04-28 21:56:45 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:56:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x66ec388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xaaf83d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x66ebea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa4d9048)]: 0 failure(s)
2024-04-28 21:56:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x66ec388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xaaf83d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x66ebea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa4d9048)]: 0 failure(s)
2024-04-28 21:56:54 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x66ec388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xaaf83d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x66ebea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa4d9048)]: 0 failure(s)
2024-04-28 21:56:57 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x66ec388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xaaf83d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x66ebea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa4d9048)]: 0 failure(s)
2024-04-28 21:56:58 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9984  0.9979  0.9963  0.9942  0.9940  0.9937  0.9928  0.9924  0.9921  0.9919  0.9899  0.9897  0.9895  0.9894  0.9892
[17 : 32]:	0.9886  0.9884  0.9884  0.9883  0.9883  0.9882  0.9881  0.9878  0.9874  0.9869  0.9866  0.9860  0.9853  0.9852  0.9847  0.9845
[33 : 48]:	0.9843  0.9843  0.9835  0.9831  0.9830  0.9829  0.9820  0.9820  0.9819  0.9817  0.9814  0.9810  0.9810  0.9797  0.9796  0.9796
[49 : 64]:	0.9792  0.9791  0.9791  0.9780  0.9777  0.9768  0.9767  0.9766  0.9764  0.9758  0.9757  0.9748  0.9748  0.9746  0.9742  0.9741
2024-04-28 21:56:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:56:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #1: GFLOPs: 14.8393. Time: 5207.1750 us. Best GFLOPs: 14.8393
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #2: GFLOPs: 40.2885. Time: 1917.9408 us. Best GFLOPs: 40.2885
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #3: GFLOPs: 28.4808. Time: 2713.0880 us. Best GFLOPs: 40.2885
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #4: GFLOPs: 31.0874. Time: 2485.6094 us. Best GFLOPs: 40.2885
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #5: GFLOPs: 57.4215. Time: 1345.6812 us. Best GFLOPs: 57.4215
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #6: GFLOPs: 10.4426. Time: 7399.6259 us. Best GFLOPs: 57.4215
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #7: GFLOPs: 31.8245. Time: 2428.0373 us. Best GFLOPs: 57.4215
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #8: GFLOPs: 65.1443. Time: 1186.1520 us. Best GFLOPs: 65.1443
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #9: GFLOPs: 72.4662. Time: 1066.3052 us. Best GFLOPs: 72.4662
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #10: GFLOPs: 66.9896. Time: 1153.4777 us. Best GFLOPs: 72.4662
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #11: GFLOPs: 37.3002. Time: 2071.5974 us. Best GFLOPs: 72.4662
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #12: GFLOPs: 79.6158. Time: 970.5493 us. Best GFLOPs: 79.6158
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #13: GFLOPs: 13.9260. Time: 5548.7028 us. Best GFLOPs: 79.6158
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #14: GFLOPs: 21.0316. Time: 3674.0480 us. Best GFLOPs: 79.6158
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #15: GFLOPs: 137.7095. Time: 561.1164 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #16: GFLOPs: 110.2737. Time: 700.7207 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #17: GFLOPs: 97.4599. Time: 792.8495 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #18: GFLOPs: 16.4118. Time: 4708.2542 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #19: GFLOPs: 89.1435. Time: 866.8160 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #20: GFLOPs: 43.9621. Time: 1757.6740 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #21: GFLOPs: 53.4525. Time: 1445.6008 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #22: GFLOPs: 90.4131. Time: 854.6439 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #23: GFLOPs: 50.1582. Time: 1540.5455 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #24: GFLOPs: 133.3661. Time: 579.3905 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #25: GFLOPs: 41.0008. Time: 1884.6247 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #26: GFLOPs: 87.1547. Time: 886.5968 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #27: GFLOPs: 90.0221. Time: 858.3567 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #28: GFLOPs: 27.3704. Time: 2823.1612 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #29: GFLOPs: 18.6359. Time: 4146.3632 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #30: GFLOPs: 126.9570. Time: 608.6396 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #31: GFLOPs: 10.8131. Time: 7146.0505 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #32: GFLOPs: 1.9344. Time: 39946.3713 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #33: GFLOPs: 44.1286. Time: 1751.0442 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #34: GFLOPs: 105.7482. Time: 730.7082 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #35: GFLOPs: 11.4596. Time: 6742.8844 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #36: GFLOPs: 76.7024. Time: 1007.4141 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #37: GFLOPs: 39.9836. Time: 1932.5698 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #38: GFLOPs: 29.0606. Time: 2658.9662 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #39: GFLOPs: 1.7881. Time: 43213.1907 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #40: GFLOPs: 69.1327. Time: 1117.7206 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #41: GFLOPs: 57.7174. Time: 1338.7815 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #42: GFLOPs: 71.6357. Time: 1078.6671 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #43: GFLOPs: 109.3600. Time: 706.5747 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #44: GFLOPs: 68.5706. Time: 1126.8837 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #45: GFLOPs: 3.5102. Time: 22013.0354 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #46: GFLOPs: 81.0864. Time: 952.9469 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #47: GFLOPs: 56.2188. Time: 1374.4694 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #48: GFLOPs: 68.2726. Time: 1131.8017 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #49: GFLOPs: 84.1321. Time: 918.4492 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #50: GFLOPs: 57.6509. Time: 1340.3269 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #51: GFLOPs: 12.1738. Time: 6347.3095 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #52: GFLOPs: 116.2394. Time: 664.7575 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #53: GFLOPs: 76.9864. Time: 1003.6979 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #54: GFLOPs: 71.5749. Time: 1079.5825 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #55: GFLOPs: 98.9431. Time: 780.9645 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #56: GFLOPs: 83.1004. Time: 929.8521 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #57: GFLOPs: 16.5289. Time: 4674.9188 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:121] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #58: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(96), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(7) * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(4) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(96), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) // T.int64(7) * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(4) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(384), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 4, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[96, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #59: GFLOPs: 24.7500. Time: 3122.0593 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #60: GFLOPs: 54.2215. Time: 1425.1004 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #61: GFLOPs: 54.8781. Time: 1408.0487 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #62: GFLOPs: 33.4942. Time: 2307.0001 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #63: GFLOPs: 127.2242. Time: 607.3614 us. Best GFLOPs: 137.7095
2024-04-28 22:45:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #64: GFLOPs: 3.4145. Time: 22630.5754 us. Best GFLOPs: 137.7095
2024-04-28 23:31:20 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:31:21 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-28 23:31:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x66ec388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xaaf83d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x66ebea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa4d9048)]: 0 failure(s)
2024-04-28 23:31:23 [INFO] [evolutionary_search.cc:723] Sampled 449 candidate(s)
2024-04-28 23:31:28 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x66ec388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xaaf83d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x66ebea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa4d9048)]: 0 failure(s)
2024-04-28 23:31:34 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x66ec388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xaaf83d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x66ebea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa4d9048)]: 0 failure(s)
2024-04-28 23:31:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x66ec388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xaaf83d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x66ebea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa4d9048)]: 0 failure(s)
2024-04-28 23:31:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x66ec388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xaaf83d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x66ebea8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa4d9048)]: 0 failure(s)
2024-04-28 23:31:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9788  0.9788  0.9609  0.9546  0.9415  0.9415  0.9336  0.9329  0.9152  0.9141  0.9141  0.9060  0.9060  0.9037  0.9019  0.8983
[17 : 32]:	0.8974  0.8936  0.8901  0.8827  0.8814  0.8798  0.8785  0.8717  0.8686  0.8659  0.8643  0.8522  0.8514  0.8511  0.8492  0.8483
[33 : 48]:	0.8460  0.8460  0.8441  0.8429  0.8418  0.8385  0.8356  0.8340  0.8340  0.8337  0.8262  0.8261  0.8245  0.8156  0.8134  0.8128
[49 : 64]:	0.8127  0.8127  0.8108  0.8102  0.8096  0.8069  0.7983  0.7972  0.7968  0.7967  0.7945  0.7943  0.7937  0.7933  0.7925  0.7897
2024-04-28 23:31:48 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:31:48 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #65: GFLOPs: 111.4622. Time: 693.2488 us. Best GFLOPs: 137.7095
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #66: GFLOPs: 130.0635. Time: 594.1024 us. Best GFLOPs: 137.7095
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #67: GFLOPs: 191.8734. Time: 402.7189 us. Best GFLOPs: 191.8734
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #68: GFLOPs: 168.6365. Time: 458.2107 us. Best GFLOPs: 191.8734
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #69: GFLOPs: 135.5078. Time: 570.2333 us. Best GFLOPs: 191.8734
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #70: GFLOPs: 133.2442. Time: 579.9203 us. Best GFLOPs: 191.8734
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #71: GFLOPs: 124.7217. Time: 619.5479 us. Best GFLOPs: 191.8734
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #72: GFLOPs: 139.5736. Time: 553.6224 us. Best GFLOPs: 191.8734
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #73: GFLOPs: 166.3583. Time: 464.4857 us. Best GFLOPs: 191.8734
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #74: GFLOPs: 124.8689. Time: 618.8175 us. Best GFLOPs: 191.8734
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #75: GFLOPs: 62.5591. Time: 1235.1690 us. Best GFLOPs: 191.8734
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #76: GFLOPs: 149.9494. Time: 515.3142 us. Best GFLOPs: 191.8734
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #77: GFLOPs: 164.9985. Time: 468.3136 us. Best GFLOPs: 191.8734
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #78: GFLOPs: 124.9620. Time: 618.3564 us. Best GFLOPs: 191.8734
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #79: GFLOPs: 126.6371. Time: 610.1767 us. Best GFLOPs: 191.8734
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #80: GFLOPs: 120.2725. Time: 642.4663 us. Best GFLOPs: 191.8734
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #81: GFLOPs: 80.4345. Time: 960.6699 us. Best GFLOPs: 191.8734
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #82: GFLOPs: 130.7092. Time: 591.1674 us. Best GFLOPs: 191.8734
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #83: GFLOPs: 140.8089. Time: 548.7652 us. Best GFLOPs: 191.8734
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #84: GFLOPs: 140.5735. Time: 549.6844 us. Best GFLOPs: 191.8734
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #85: GFLOPs: 216.0662. Time: 357.6268 us. Best GFLOPs: 216.0662
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #86: GFLOPs: 256.6155. Time: 301.1160 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #87: GFLOPs: 160.3657. Time: 481.8426 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #88: GFLOPs: 154.2729. Time: 500.8725 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #89: GFLOPs: 126.1291. Time: 612.6346 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #90: GFLOPs: 106.9946. Time: 722.1954 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #91: GFLOPs: 166.9890. Time: 462.7312 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #92: GFLOPs: 181.4320. Time: 425.8953 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #93: GFLOPs: 103.4447. Time: 746.9789 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #94: GFLOPs: 140.5309. Time: 549.8507 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #95: GFLOPs: 160.8924. Time: 480.2654 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #96: GFLOPs: 107.2255. Time: 720.6405 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #97: GFLOPs: 159.6517. Time: 483.9976 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #98: GFLOPs: 200.2196. Time: 385.9315 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #99: GFLOPs: 194.3399. Time: 397.6077 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #100: GFLOPs: 130.8267. Time: 590.6367 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #101: GFLOPs: 163.8238. Time: 471.6716 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #102: GFLOPs: 167.8151. Time: 460.4535 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #103: GFLOPs: 140.9831. Time: 548.0872 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #104: GFLOPs: 134.0381. Time: 576.4854 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #105: GFLOPs: 145.0344. Time: 532.7774 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #106: GFLOPs: 144.4211. Time: 535.0399 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #107: GFLOPs: 133.5121. Time: 578.7567 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #108: GFLOPs: 129.1211. Time: 598.4385 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #109: GFLOPs: 139.8033. Time: 552.7126 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #110: GFLOPs: 251.4557. Time: 307.2949 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #111: GFLOPs: 108.6346. Time: 711.2933 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #112: GFLOPs: 177.9502. Time: 434.2283 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #113: GFLOPs: 144.9520. Time: 533.0800 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #114: GFLOPs: 155.4779. Time: 496.9907 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #115: GFLOPs: 129.4039. Time: 597.1306 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #116: GFLOPs: 118.0432. Time: 654.5996 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #117: GFLOPs: 129.2268. Time: 597.9492 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #118: GFLOPs: 136.5979. Time: 565.6824 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #119: GFLOPs: 189.2640. Time: 408.2712 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #120: GFLOPs: 245.2576. Time: 315.0607 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #121: GFLOPs: 90.6664. Time: 852.2565 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #122: GFLOPs: 132.2646. Time: 584.2155 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #123: GFLOPs: 152.7068. Time: 506.0090 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #124: GFLOPs: 127.2757. Time: 607.1155 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #125: GFLOPs: 112.1920. Time: 688.7392 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #126: GFLOPs: 51.0713. Time: 1513.0023 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #127: GFLOPs: 2.9678. Time: 26036.5230 us. Best GFLOPs: 256.6155
2024-04-28 23:33:21 [INFO] [task_scheduler.cc:131] [Task #45: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_43] Trial #128: GFLOPs: 115.5830. Time: 668.5332 us. Best GFLOPs: 256.6155
