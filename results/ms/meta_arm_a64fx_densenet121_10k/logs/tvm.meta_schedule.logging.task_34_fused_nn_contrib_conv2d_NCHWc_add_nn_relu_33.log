2024-04-28 20:46:01 [INFO] [task_scheduler.cc:160] Initializing Task #34: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33"
2024-04-28 20:46:01 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(112), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(112), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4), T.int64(448), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:46:01 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:46:01 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(112), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(112), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(448), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(4)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(448), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 4, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[448, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:46:01 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(112), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(112), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(448), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(448), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 4, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[448, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:46:01 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(112), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(112), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(448), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(7), T.int64(4)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(448), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 4, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[448, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 21:40:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:40:15 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:40:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6937008)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e383a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x8965ff8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x99d7be8)]: 0 failure(s)
2024-04-28 21:40:18 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:40:21 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6937008)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e383a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x8965ff8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x99d7be8)]: 0 failure(s)
2024-04-28 21:40:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6937008)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e383a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x8965ff8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x99d7be8)]: 0 failure(s)
2024-04-28 21:40:27 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6937008)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e383a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x8965ff8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x99d7be8)]: 0 failure(s)
2024-04-28 21:40:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6937008)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e383a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x8965ff8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x99d7be8)]: 0 failure(s)
2024-04-28 21:40:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9996  0.9996  0.9995  0.9990  0.9986  0.9985  0.9969  0.9964  0.9952  0.9952  0.9946  0.9929  0.9927  0.9919  0.9916
[17 : 32]:	0.9911  0.9910  0.9905  0.9896  0.9891  0.9890  0.9888  0.9883  0.9880  0.9870  0.9869  0.9858  0.9852  0.9851  0.9850  0.9844
[33 : 48]:	0.9835  0.9830  0.9829  0.9828  0.9824  0.9820  0.9818  0.9818  0.9813  0.9810  0.9805  0.9803  0.9802  0.9802  0.9790  0.9788
[49 : 64]:	0.9780  0.9769  0.9767  0.9767  0.9766  0.9761  0.9748  0.9743  0.9742  0.9741  0.9720  0.9719  0.9719  0.9716  0.9715  0.9712
2024-04-28 21:40:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:40:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #1: GFLOPs: 29.8023. Time: 755.9490 us. Best GFLOPs: 29.8023
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #2: GFLOPs: 2.8722. Time: 7843.7098 us. Best GFLOPs: 29.8023
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #3: GFLOPs: 12.2644. Time: 1836.9410 us. Best GFLOPs: 29.8023
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #4: GFLOPs: 33.7020. Time: 668.4768 us. Best GFLOPs: 33.7020
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #5: GFLOPs: 15.2042. Time: 1481.7626 us. Best GFLOPs: 33.7020
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #6: GFLOPs: 31.0063. Time: 726.5947 us. Best GFLOPs: 33.7020
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #7: GFLOPs: 20.1812. Time: 1116.3347 us. Best GFLOPs: 33.7020
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #8: GFLOPs: 36.9134. Time: 610.3205 us. Best GFLOPs: 36.9134
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #9: GFLOPs: 23.7554. Time: 948.3729 us. Best GFLOPs: 36.9134
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #10: GFLOPs: 97.2270. Time: 231.7157 us. Best GFLOPs: 97.2270
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #11: GFLOPs: 5.3455. Time: 4214.5808 us. Best GFLOPs: 97.2270
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #12: GFLOPs: 5.5160. Time: 4084.2807 us. Best GFLOPs: 97.2270
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #13: GFLOPs: 6.7520. Time: 3336.6626 us. Best GFLOPs: 97.2270
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #14: GFLOPs: 48.7163. Time: 462.4534 us. Best GFLOPs: 97.2270
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #15: GFLOPs: 82.6683. Time: 272.5230 us. Best GFLOPs: 97.2270
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #16: GFLOPs: 18.4134. Time: 1223.5123 us. Best GFLOPs: 97.2270
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #17: GFLOPs: 31.5932. Time: 713.0980 us. Best GFLOPs: 97.2270
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #18: GFLOPs: 40.2385. Time: 559.8878 us. Best GFLOPs: 97.2270
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #19: GFLOPs: 62.7520. Time: 359.0167 us. Best GFLOPs: 97.2270
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #20: GFLOPs: 36.7014. Time: 613.8457 us. Best GFLOPs: 97.2270
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #21: GFLOPs: 79.1894. Time: 284.4953 us. Best GFLOPs: 97.2270
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #22: GFLOPs: 13.2480. Time: 1700.5578 us. Best GFLOPs: 97.2270
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #23: GFLOPs: 79.0535. Time: 284.9845 us. Best GFLOPs: 97.2270
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #24: GFLOPs: 0.8900. Time: 25312.9818 us. Best GFLOPs: 97.2270
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #25: GFLOPs: 108.4018. Time: 207.8289 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #26: GFLOPs: 37.1313. Time: 606.7395 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:121] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #27: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(112), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(112), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_fused // T.int64(98) * T.int64(16) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(98) // T.int64(7) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(7) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_fused // T.int64(98) * T.int64(16) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(98) // T.int64(7) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_fused % T.int64(7) * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(448), ic_0 * T.int64(64) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 8, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[7, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=32)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b103)
b127 = sch.decompose_reduction(block=b103, loop=l111)
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #28: GFLOPs: 29.6947. Time: 758.6875 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #29: GFLOPs: 9.4635. Time: 2380.6254 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #30: GFLOPs: 83.5529. Time: 269.6379 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #31: GFLOPs: 43.5008. Time: 517.8990 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #32: GFLOPs: 30.2291. Time: 745.2754 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #33: GFLOPs: 30.5695. Time: 736.9781 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #34: GFLOPs: 65.5119. Time: 343.8922 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:121] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #35: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(112), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(112), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(32) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(448), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1 in T.grid(T.int64(1), T.int64(32)):
                for ax2_ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused])
                        v_ax3 = T.axis.spatial(T.int64(14), ax2_ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax2_ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 16, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[28, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l98, l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:121] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #36: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(112), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(112), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(448), ic_0 * T.int64(14) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 14])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #37: GFLOPs: 37.0201. Time: 608.5625 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #38: GFLOPs: 42.9083. Time: 525.0511 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #39: GFLOPs: 8.3287. Time: 2704.9986 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #40: GFLOPs: 59.6418. Time: 377.7388 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #41: GFLOPs: 35.0384. Time: 642.9802 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #42: GFLOPs: 83.4982. Time: 269.8145 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #43: GFLOPs: 24.0616. Time: 936.3044 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #44: GFLOPs: 4.3534. Time: 5175.0706 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #45: GFLOPs: 18.0317. Time: 1249.4093 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #46: GFLOPs: 99.3796. Time: 226.6966 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #47: GFLOPs: 1.6811. Time: 13401.4364 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #48: GFLOPs: 4.0492. Time: 5563.8459 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #49: GFLOPs: 51.0079. Time: 441.6775 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #50: GFLOPs: 11.5844. Time: 1944.7665 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #51: GFLOPs: 35.2639. Time: 638.8700 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #52: GFLOPs: 42.1418. Time: 534.6004 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #53: GFLOPs: 73.8736. Time: 304.9671 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #54: GFLOPs: 1.8209. Time: 12372.1736 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #55: GFLOPs: 2.3404. Time: 9626.1253 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #56: GFLOPs: 11.0514. Time: 2038.5644 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #57: GFLOPs: 70.6981. Time: 318.6650 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #58: GFLOPs: 4.6101. Time: 4886.8878 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #59: GFLOPs: 30.4243. Time: 740.4934 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #60: GFLOPs: 89.2778. Time: 252.3475 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #61: GFLOPs: 93.7530. Time: 240.3018 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #62: GFLOPs: 87.6859. Time: 256.9286 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #63: GFLOPs: 44.8242. Time: 502.6080 us. Best GFLOPs: 108.4018
2024-04-28 22:44:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #64: GFLOPs: 17.3153. Time: 1301.1029 us. Best GFLOPs: 108.4018
2024-04-29 01:14:16 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:14:16 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 01:14:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6937008)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e383a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x8965ff8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x99d7be8)]: 0 failure(s)
2024-04-29 01:14:19 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 01:14:24 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6937008)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e383a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x8965ff8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x99d7be8)]: 0 failure(s)
2024-04-29 01:14:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6937008)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e383a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x8965ff8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x99d7be8)]: 0 failure(s)
2024-04-29 01:14:34 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6937008)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e383a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x8965ff8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x99d7be8)]: 0 failure(s)
2024-04-29 01:14:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6937008)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e383a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x8965ff8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x99d7be8)]: 0 failure(s)
2024-04-29 01:14:42 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9625  0.9623  0.9623  0.9623  0.9393  0.9390  0.9049  0.8935  0.8875  0.8875  0.8875  0.8662  0.8656  0.8627  0.8550  0.8528
[17 : 32]:	0.8473  0.8473  0.8396  0.8396  0.8390  0.8390  0.8343  0.8324  0.8300  0.8242  0.8176  0.8160  0.8093  0.8082  0.8081  0.8047
[33 : 48]:	0.8018  0.8016  0.8002  0.8002  0.7996  0.7953  0.7945  0.7932  0.7930  0.7910  0.7899  0.7886  0.7867  0.7851  0.7850  0.7841
[49 : 64]:	0.7837  0.7825  0.7823  0.7803  0.7796  0.7793  0.7779  0.7775  0.7761  0.7754  0.7744  0.7734  0.7733  0.7733  0.7716  0.7709
2024-04-29 01:14:43 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:14:43 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #65: GFLOPs: 48.8380. Time: 461.3014 us. Best GFLOPs: 108.4018
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #66: GFLOPs: 80.3620. Time: 280.3441 us. Best GFLOPs: 108.4018
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #67: GFLOPs: 106.4944. Time: 211.5512 us. Best GFLOPs: 108.4018
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #68: GFLOPs: 84.6184. Time: 266.2426 us. Best GFLOPs: 108.4018
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #69: GFLOPs: 88.9094. Time: 253.3930 us. Best GFLOPs: 108.4018
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #70: GFLOPs: 92.5451. Time: 243.4384 us. Best GFLOPs: 108.4018
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #71: GFLOPs: 123.0977. Time: 183.0174 us. Best GFLOPs: 123.0977
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #72: GFLOPs: 102.5558. Time: 219.6757 us. Best GFLOPs: 123.0977
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #73: GFLOPs: 110.7157. Time: 203.4854 us. Best GFLOPs: 123.0977
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #74: GFLOPs: 82.2748. Time: 273.8265 us. Best GFLOPs: 123.0977
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #75: GFLOPs: 102.9278. Time: 218.8818 us. Best GFLOPs: 123.0977
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #76: GFLOPs: 81.8171. Time: 275.3584 us. Best GFLOPs: 123.0977
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #77: GFLOPs: 91.0614. Time: 247.4046 us. Best GFLOPs: 123.0977
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #78: GFLOPs: 86.2745. Time: 261.1318 us. Best GFLOPs: 123.0977
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #79: GFLOPs: 185.6197. Time: 121.3719 us. Best GFLOPs: 185.6197
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #80: GFLOPs: 79.2292. Time: 284.3527 us. Best GFLOPs: 185.6197
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #81: GFLOPs: 99.3268. Time: 226.8172 us. Best GFLOPs: 185.6197
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #82: GFLOPs: 62.5536. Time: 360.1557 us. Best GFLOPs: 185.6197
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #83: GFLOPs: 76.8006. Time: 293.3443 us. Best GFLOPs: 185.6197
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #84: GFLOPs: 91.0194. Time: 247.5190 us. Best GFLOPs: 185.6197
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #85: GFLOPs: 152.1426. Time: 148.0783 us. Best GFLOPs: 185.6197
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #86: GFLOPs: 150.5429. Time: 149.6518 us. Best GFLOPs: 185.6197
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #87: GFLOPs: 95.4257. Time: 236.0896 us. Best GFLOPs: 185.6197
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #88: GFLOPs: 76.2637. Time: 295.4094 us. Best GFLOPs: 185.6197
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #89: GFLOPs: 133.6185. Time: 168.6071 us. Best GFLOPs: 185.6197
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #90: GFLOPs: 134.5276. Time: 167.4676 us. Best GFLOPs: 185.6197
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #91: GFLOPs: 137.7342. Time: 163.5688 us. Best GFLOPs: 185.6197
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #92: GFLOPs: 50.4428. Time: 446.6253 us. Best GFLOPs: 185.6197
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #93: GFLOPs: 189.5819. Time: 118.8353 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #94: GFLOPs: 102.2385. Time: 220.3575 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #95: GFLOPs: 107.2668. Time: 210.0280 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #96: GFLOPs: 72.1081. Time: 312.4339 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #97: GFLOPs: 81.9752. Time: 274.8272 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #98: GFLOPs: 105.3616. Time: 213.8258 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #99: GFLOPs: 86.6874. Time: 259.8882 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #100: GFLOPs: 46.3888. Time: 485.6568 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #101: GFLOPs: 118.4040. Time: 190.2725 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #102: GFLOPs: 133.5571. Time: 168.6846 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #103: GFLOPs: 57.8195. Time: 389.6441 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #104: GFLOPs: 75.2502. Time: 299.3884 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #105: GFLOPs: 8.9313. Time: 2522.4748 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #106: GFLOPs: 105.0591. Time: 214.4415 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #107: GFLOPs: 167.5046. Time: 134.4979 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #108: GFLOPs: 126.9968. Time: 177.3983 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #109: GFLOPs: 65.0990. Time: 346.0734 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #110: GFLOPs: 79.2673. Time: 284.2158 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #111: GFLOPs: 154.9459. Time: 145.3993 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:121] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #112: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(112), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(112), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(448), ic_0 * T.int64(64) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[7, 64])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #113: GFLOPs: 119.1651. Time: 189.0573 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #114: GFLOPs: 138.0084. Time: 163.2438 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #115: GFLOPs: 128.4350. Time: 175.4118 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #116: GFLOPs: 160.9086. Time: 140.0113 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #117: GFLOPs: 107.1542. Time: 210.2487 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #118: GFLOPs: 99.4600. Time: 226.5133 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #119: GFLOPs: 45.4899. Time: 495.2529 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #120: GFLOPs: 157.0884. Time: 143.4162 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #121: GFLOPs: 85.1692. Time: 264.5207 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #122: GFLOPs: 94.2534. Time: 239.0261 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #123: GFLOPs: 106.5026. Time: 211.5350 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #124: GFLOPs: 65.6607. Time: 343.1130 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #125: GFLOPs: 91.7715. Time: 245.4904 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #126: GFLOPs: 89.6033. Time: 251.4309 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #127: GFLOPs: 6.2549. Time: 3601.8151 us. Best GFLOPs: 189.5819
2024-04-29 01:16:22 [INFO] [task_scheduler.cc:121] [Task #34: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_33] Trial #128: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(112), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(112), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(8), T.int64(2), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(16) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(7) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(224), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(448), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[224, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
