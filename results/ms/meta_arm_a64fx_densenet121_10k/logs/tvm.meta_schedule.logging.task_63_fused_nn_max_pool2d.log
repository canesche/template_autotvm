2024-04-28 20:47:51 [INFO] [task_scheduler.cc:160] Initializing Task #63: "fused_nn_max_pool2d"
2024-04-28 20:47:51 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)))
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-28 20:47:51 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:47:51 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(1)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(56)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(113), T.int64(32)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(2), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(114), ax2 * T.int64(2) + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(114), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(56), T.int64(32), T.int64(1), T.int64(9)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 9])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-28 20:47:51 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(9)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(1), T.int64(9)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3) - T.int64(1), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3) - T.int64(1), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3) and v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3) < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3) and v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3) < T.int64(113), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3) - T.int64(1), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3) - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(9)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 9])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-28 20:47:51 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(1)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(2), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(114), ax2 * T.int64(2) + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(114), ax3 * T.int64(2) + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4 + ax4_1)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for rv0, rv1 in T.grid(T.int64(3), T.int64(3)):
                    with T.block("pool_max"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-28 22:22:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:22:37 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 22:22:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5d66628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x662fb98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb86c2f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8ce1998)]: 0 failure(s)
2024-04-28 22:22:41 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 22:22:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5d66628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x662fb98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb86c2f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8ce1998)]: 0 failure(s)
2024-04-28 22:22:50 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5d66628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x662fb98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb86c2f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8ce1998)]: 0 failure(s)
2024-04-28 22:22:55 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5d66628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x662fb98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb86c2f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8ce1998)]: 0 failure(s)
2024-04-28 22:23:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5d66628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x662fb98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb86c2f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8ce1998)]: 0 failure(s)
2024-04-28 22:23:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9948  0.9896  0.9845  0.9842  0.9835  0.9778  0.9776  0.9722  0.9713  0.9708  0.9702  0.9701  0.9621  0.9597  0.9576
[17 : 32]:	0.9502  0.9351  0.9290  0.9286  0.9262  0.9237  0.9230  0.9204  0.9193  0.9049  0.8953  0.8942  0.8840  0.8839  0.8837  0.8812
[33 : 48]:	0.8766  0.8766  0.8733  0.8720  0.8655  0.8638  0.8616  0.8502  0.8451  0.8430  0.8418  0.8268  0.8227  0.8206  0.8148  0.8126
[49 : 64]:	0.8091  0.7938  0.7836  0.7832  0.7732  0.7723  0.7657  0.7562  0.7554  0.7483  0.7453  0.7435  0.7386  0.7381  0.7224  0.7196
2024-04-28 22:23:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:23:02 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #1: GFLOPs: 6.3512. Time: 284.4097 us. Best GFLOPs: 6.3512
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #2: GFLOPs: 25.4818. Time: 70.8874 us. Best GFLOPs: 25.4818
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #3: GFLOPs: 1.5050. Time: 1200.2298 us. Best GFLOPs: 25.4818
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #4: GFLOPs: 17.3004. Time: 104.4098 us. Best GFLOPs: 25.4818
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #5: GFLOPs: 12.7696. Time: 141.4559 us. Best GFLOPs: 25.4818
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #6: GFLOPs: 6.7829. Time: 266.3059 us. Best GFLOPs: 25.4818
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #7: GFLOPs: 8.4057. Time: 214.8936 us. Best GFLOPs: 25.4818
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #8: GFLOPs: 0.7951. Time: 2271.7149 us. Best GFLOPs: 25.4818
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #9: GFLOPs: 12.8180. Time: 140.9215 us. Best GFLOPs: 25.4818
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #10: GFLOPs: 0.9686. Time: 1864.9252 us. Best GFLOPs: 25.4818
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #11: GFLOPs: 15.9200. Time: 113.4631 us. Best GFLOPs: 25.4818
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #12: GFLOPs: 6.9183. Time: 261.0936 us. Best GFLOPs: 25.4818
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #13: GFLOPs: 3.8465. Time: 469.6066 us. Best GFLOPs: 25.4818
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #14: GFLOPs: 30.1746. Time: 59.8627 us. Best GFLOPs: 30.1746
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #15: GFLOPs: 17.6150. Time: 102.5454 us. Best GFLOPs: 30.1746
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #16: GFLOPs: 0.6450. Time: 2800.5277 us. Best GFLOPs: 30.1746
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #17: GFLOPs: 33.5511. Time: 53.8384 us. Best GFLOPs: 33.5511
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #18: GFLOPs: 14.6564. Time: 123.2457 us. Best GFLOPs: 33.5511
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #19: GFLOPs: 38.7530. Time: 46.6115 us. Best GFLOPs: 38.7530
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #20: GFLOPs: 54.3619. Time: 33.2280 us. Best GFLOPs: 54.3619
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #21: GFLOPs: 95.9481. Time: 18.8262 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #22: GFLOPs: 13.4587. Time: 134.2135 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #23: GFLOPs: 30.7410. Time: 58.7598 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #24: GFLOPs: 11.5806. Time: 155.9799 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #25: GFLOPs: 43.3776. Time: 41.6422 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #26: GFLOPs: 0.5393. Time: 3349.4388 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #27: GFLOPs: 21.4839. Time: 84.0784 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #28: GFLOPs: 18.1119. Time: 99.7317 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #29: GFLOPs: 48.3994. Time: 37.3214 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #30: GFLOPs: 30.3677. Time: 59.4822 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #31: GFLOPs: 1.5514. Time: 1164.2937 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #32: GFLOPs: 19.0804. Time: 94.6697 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #33: GFLOPs: 7.4459. Time: 242.5943 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #34: GFLOPs: 37.9575. Time: 47.5884 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #35: GFLOPs: 33.0679. Time: 54.6250 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #36: GFLOPs: 47.1961. Time: 38.2730 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #37: GFLOPs: 13.2059. Time: 136.7822 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #38: GFLOPs: 49.2314. Time: 36.6907 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:121] [Task #63: fused_nn_max_pool2d] Trial #39: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(114), T.int64(114), T.int64(32)))
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(32), T.int64(3)))
        for ax0_ax1_ax2_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(113)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused_fused // T.int64(56) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(114), ax0_ax1_ax2_fused_fused % T.int64(56) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(114), ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
            for ax3, ax4 in T.grid(T.int64(56), T.int64(32)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(3)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused_fused // T.int64(56))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused_fused % T.int64(56))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(3)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(3)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(3), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused_fused // T.int64(56))
                            v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused_fused % T.int64(56))
                            v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_ax2_ax3_fused in T.parallel(T.int64(6272), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax4 in range(T.int64(32)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                    v_ax4 = T.axis.spatial(T.int64(32), ax4)
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(3)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(3), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                        v_ax4 = T.axis.spatial(T.int64(32), ax4)
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b18 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.unroll_explicit")
b19, b20, b21 = sch.get_child_blocks(b18)
l22, l23, l24, l25, l26, l27, l28, l29 = sch.get_loops(block=b19)
l30 = sch.fuse(l22, l23, l24, preserve_unit_iters=True)
sch.parallel(loop=l30)
l31 = sch.fuse(l29, preserve_unit_iters=True)
sch.vectorize(loop=l31)
l32, l33, l34, l35, l36 = sch.get_loops(block=b20)
l37 = sch.fuse(l32, preserve_unit_iters=True)
sch.parallel(loop=l37)
l38 = sch.fuse(l36, preserve_unit_iters=True)
sch.vectorize(loop=l38)
sch.annotate(block_or_loop=l37, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l37, ann_key="pragma_unroll_explicit", ann_val=1)
l39, l40, l41, l42, l43, l44 = sch.get_loops(block=b21)
l45 = sch.fuse(l39, l40, l41, l42, preserve_unit_iters=True)
sch.parallel(loop=l45)
sch.annotate(block_or_loop=l45, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l45, ann_key="pragma_unroll_explicit", ann_val=1)
b46 = sch.get_block(name="pool_max_rf", func_name="main")
l47, l48, l49, l50, l51 = sch.get_loops(block=b46)
b52 = sch.decompose_reduction(block=b46, loop=l50)
b53 = sch.get_block(name="pool_max", func_name="main")
l54, l55, l56 = sch.get_loops(block=b53)
b57 = sch.decompose_reduction(block=b53, loop=l56)
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #40: GFLOPs: 12.7779. Time: 141.3640 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #41: GFLOPs: 1.1084. Time: 1629.7186 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #42: GFLOPs: 11.6212. Time: 155.4339 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #43: GFLOPs: 8.3864. Time: 215.3892 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #44: GFLOPs: 7.4006. Time: 244.0795 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #45: GFLOPs: 31.0306. Time: 58.2114 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #46: GFLOPs: 17.3318. Time: 104.2208 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #47: GFLOPs: 2.8861. Time: 625.8735 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #48: GFLOPs: 23.9238. Time: 75.5037 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #49: GFLOPs: 10.6338. Time: 169.8673 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #50: GFLOPs: 47.8616. Time: 37.7408 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #51: GFLOPs: 10.8782. Time: 166.0515 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #52: GFLOPs: 8.0872. Time: 223.3571 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #53: GFLOPs: 36.7231. Time: 49.1880 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #54: GFLOPs: 93.6764. Time: 19.2827 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #55: GFLOPs: 10.1293. Time: 178.3272 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #56: GFLOPs: 18.0530. Time: 100.0574 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #57: GFLOPs: 18.3720. Time: 98.3198 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #58: GFLOPs: 12.5388. Time: 144.0597 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #59: GFLOPs: 0.8642. Time: 2090.3032 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #60: GFLOPs: 33.5928. Time: 53.7715 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #61: GFLOPs: 17.1266. Time: 105.4697 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #62: GFLOPs: 7.0987. Time: 254.4611 us. Best GFLOPs: 95.9481
2024-04-28 22:47:23 [INFO] [task_scheduler.cc:131] [Task #63: fused_nn_max_pool2d] Trial #63: GFLOPs: 31.1762. Time: 57.9397 us. Best GFLOPs: 95.9481
