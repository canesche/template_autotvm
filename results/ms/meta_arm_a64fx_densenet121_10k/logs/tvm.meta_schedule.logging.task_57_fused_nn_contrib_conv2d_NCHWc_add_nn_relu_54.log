2024-04-28 20:47:31 [INFO] [task_scheduler.cc:160] Initializing Task #57: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54"
2024-04-28 20:47:31 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4), T.int64(128), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:47:31 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:47:31 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(28), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(8) + oh_1 * T.int64(8) + oh_2 * T.int64(4) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[32, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:47:31 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(28), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(8) + oh_1 * T.int64(8) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[32, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:47:31 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(28), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(8) + oh_1 * T.int64(8) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_0 * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[32, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[28, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 22:15:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:15:52 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 22:15:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7afbf68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x49bfd68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa455f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6899138)]: 0 failure(s)
2024-04-28 22:15:54 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 22:15:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7afbf68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x49bfd68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa455f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6899138)]: 0 failure(s)
2024-04-28 22:16:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7afbf68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x49bfd68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa455f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6899138)]: 0 failure(s)
2024-04-28 22:16:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7afbf68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x49bfd68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa455f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6899138)]: 0 failure(s)
2024-04-28 22:16:07 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7afbf68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x49bfd68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa455f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6899138)]: 0 failure(s)
2024-04-28 22:16:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9995  0.9994  0.9990  0.9985  0.9979  0.9976  0.9970  0.9969  0.9969  0.9964  0.9958  0.9957  0.9956  0.9946  0.9945
[17 : 32]:	0.9940  0.9934  0.9919  0.9918  0.9913  0.9898  0.9894  0.9890  0.9886  0.9866  0.9842  0.9838  0.9838  0.9836  0.9834  0.9832
[33 : 48]:	0.9827  0.9826  0.9823  0.9818  0.9818  0.9811  0.9809  0.9804  0.9797  0.9793  0.9793  0.9792  0.9789  0.9788  0.9781  0.9781
[49 : 64]:	0.9778  0.9778  0.9772  0.9771  0.9764  0.9763  0.9753  0.9750  0.9743  0.9741  0.9738  0.9736  0.9734  0.9729  0.9728  0.9726
2024-04-28 22:16:08 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:16:08 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #1: GFLOPs: 17.8675. Time: 5796.1813 us. Best GFLOPs: 17.8675
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #2: GFLOPs: 203.1558. Time: 509.7727 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #3: GFLOPs: 106.8561. Time: 969.1840 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #4: GFLOPs: 95.3063. Time: 1086.6365 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #5: GFLOPs: 17.1270. Time: 6046.7922 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:121] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #6: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(4)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(8), T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2_init * T.int64(32) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(56) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(8) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(32) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(56) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(56) + ow_1 * T.int64(8) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56)):
                    for ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4_fused])
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 32])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 28, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 8, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
sch.annotate(block_or_loop=l68, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l68, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b67)
l104 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b105)
b132 = sch.decompose_reduction(block=b105, loop=l116)
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #7: GFLOPs: 62.0368. Time: 1669.3834 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #8: GFLOPs: 93.1410. Time: 1111.8978 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #9: GFLOPs: 94.6721. Time: 1093.9158 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #10: GFLOPs: 12.7970. Time: 8092.7828 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #11: GFLOPs: 41.0313. Time: 2524.0035 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #12: GFLOPs: 104.8199. Time: 988.0118 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #13: GFLOPs: 6.5126. Time: 15901.8941 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #14: GFLOPs: 55.3062. Time: 1872.5421 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #15: GFLOPs: 29.4301. Time: 3518.9610 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #16: GFLOPs: 77.4549. Time: 1337.0778 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #17: GFLOPs: 85.7140. Time: 1208.2419 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #18: GFLOPs: 81.9066. Time: 1264.4066 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #19: GFLOPs: 60.9122. Time: 1700.2052 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #20: GFLOPs: 80.2589. Time: 1290.3647 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:121] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #21: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ow_1, oc_block_1 in T.grid(T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(28) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(14) * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(28) + ow_2_init * T.int64(14) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(28) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(14) * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(28)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused // T.int64(28) * T.int64(4) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(14) * T.int64(4) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(56), ow_1 * T.int64(28) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + ax4_fused)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 2, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=16)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b67)
l104 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b105)
b125 = sch.decompose_reduction(block=b105, loop=l109)
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #22: GFLOPs: 83.2784. Time: 1243.5787 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #23: GFLOPs: 37.7027. Time: 2746.8410 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #24: GFLOPs: 76.0255. Time: 1362.2176 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #25: GFLOPs: 64.3244. Time: 1610.0156 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #26: GFLOPs: 84.2553. Time: 1229.1603 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #27: GFLOPs: 30.7735. Time: 3365.3438 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #28: GFLOPs: 97.5104. Time: 1062.0736 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:121] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #29: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(14) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #30: GFLOPs: 36.3787. Time: 2846.8075 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #31: GFLOPs: 48.1644. Time: 2150.2046 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #32: GFLOPs: 34.6513. Time: 2988.7265 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #33: GFLOPs: 2.7443. Time: 37737.6303 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #34: GFLOPs: 61.8369. Time: 1674.7803 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #35: GFLOPs: 109.2986. Time: 947.5259 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #36: GFLOPs: 6.2248. Time: 16637.0717 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #37: GFLOPs: 100.9778. Time: 1025.6038 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #38: GFLOPs: 93.1695. Time: 1111.5576 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #39: GFLOPs: 140.3440. Time: 737.9246 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #40: GFLOPs: 18.6365. Time: 5557.0121 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #41: GFLOPs: 6.6954. Time: 15467.8550 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #42: GFLOPs: 99.6014. Time: 1039.7771 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #43: GFLOPs: 43.2362. Time: 2395.2890 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #44: GFLOPs: 79.6149. Time: 1300.8021 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #45: GFLOPs: 80.2182. Time: 1291.0189 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #46: GFLOPs: 2.1294. Time: 48635.8937 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:121] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #47: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(4), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(28) * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(28) // T.int64(2) * T.int64(4) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(28) * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(56), oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(28) // T.int64(2) * T.int64(4) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 4, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=32)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #48: GFLOPs: 75.6271. Time: 1369.3932 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:121] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #49: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(28) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(28) + ow_2_init * T.int64(14) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(28), T.int64(2), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(28) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 28, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 2, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #50: GFLOPs: 58.7689. Time: 1762.2107 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #51: GFLOPs: 83.8812. Time: 1234.6418 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #52: GFLOPs: 62.0337. Time: 1669.4681 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #53: GFLOPs: 22.2056. Time: 4663.8291 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #54: GFLOPs: 3.9510. Time: 26211.9005 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #55: GFLOPs: 126.3186. Time: 819.8574 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #56: GFLOPs: 9.5700. Time: 10821.6324 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #57: GFLOPs: 33.6411. Time: 3078.4764 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #58: GFLOPs: 71.3814. Time: 1450.8442 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #59: GFLOPs: 105.5810. Time: 980.8895 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #60: GFLOPs: 43.7551. Time: 2366.8829 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #61: GFLOPs: 5.5677. Time: 18600.5912 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #62: GFLOPs: 6.2176. Time: 16656.4863 us. Best GFLOPs: 203.1558
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:121] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #63: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(2) * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(28) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(16) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(2) * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(28) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(128), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 4, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 14, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-28 22:46:39 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #64: GFLOPs: 104.8050. Time: 988.1517 us. Best GFLOPs: 203.1558
2024-04-28 23:35:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:35:53 [INFO] [evolutionary_search.cc:715] Picked top 58 candidate(s) from database
2024-04-28 23:35:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7afbf68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x49bfd68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa455f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6899138)]: 0 failure(s)
2024-04-28 23:35:56 [INFO] [evolutionary_search.cc:723] Sampled 454 candidate(s)
2024-04-28 23:36:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7afbf68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x49bfd68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa455f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6899138)]: 0 failure(s)
2024-04-28 23:36:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7afbf68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x49bfd68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa455f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6899138)]: 0 failure(s)
2024-04-28 23:36:12 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7afbf68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x49bfd68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa455f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6899138)]: 0 failure(s)
2024-04-28 23:36:18 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7afbf68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x49bfd68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa455f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6899138)]: 0 failure(s)
2024-04-28 23:36:21 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9570  0.9549  0.8909  0.8909  0.8726  0.8726  0.8648  0.8611  0.8551  0.8532  0.8512  0.8496  0.8448  0.8392  0.8260  0.8228
[17 : 32]:	0.8210  0.8147  0.8095  0.8086  0.8083  0.8060  0.7939  0.7847  0.7837  0.7804  0.7780  0.7776  0.7756  0.7756  0.7743  0.7737
[33 : 48]:	0.7664  0.7617  0.7600  0.7592  0.7581  0.7579  0.7567  0.7550  0.7499  0.7420  0.7408  0.7407  0.7394  0.7387  0.7356  0.7336
[49 : 64]:	0.7334  0.7313  0.7308  0.7283  0.7280  0.7261  0.7260  0.7243  0.7232  0.7183  0.7182  0.7180  0.7150  0.7144  0.7138  0.7118
2024-04-28 23:36:21 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:36:21 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #65: GFLOPs: 153.5598. Time: 674.4167 us. Best GFLOPs: 203.1558
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #66: GFLOPs: 202.8589. Time: 510.5188 us. Best GFLOPs: 203.1558
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #67: GFLOPs: 208.2416. Time: 497.3227 us. Best GFLOPs: 208.2416
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #68: GFLOPs: 209.0340. Time: 495.4374 us. Best GFLOPs: 209.0340
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #69: GFLOPs: 164.3618. Time: 630.0932 us. Best GFLOPs: 209.0340
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #70: GFLOPs: 150.0262. Time: 690.3011 us. Best GFLOPs: 209.0340
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #71: GFLOPs: 259.8531. Time: 398.5454 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #72: GFLOPs: 159.8599. Time: 647.8377 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #73: GFLOPs: 170.7843. Time: 606.3981 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #74: GFLOPs: 119.9464. Time: 863.4127 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #75: GFLOPs: 184.5937. Time: 561.0337 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #76: GFLOPs: 198.4085. Time: 521.9700 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #77: GFLOPs: 203.5196. Time: 508.8615 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #78: GFLOPs: 186.9042. Time: 554.0981 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #79: GFLOPs: 115.1807. Time: 899.1373 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #80: GFLOPs: 124.6385. Time: 830.9088 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #81: GFLOPs: 190.9248. Time: 542.4296 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #82: GFLOPs: 221.3127. Time: 467.9498 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #83: GFLOPs: 132.2332. Time: 783.1865 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #84: GFLOPs: 169.2364. Time: 611.9445 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #85: GFLOPs: 156.6305. Time: 661.1947 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #86: GFLOPs: 122.6335. Time: 844.4941 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #87: GFLOPs: 77.5174. Time: 1336.0000 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #88: GFLOPs: 213.1581. Time: 485.8518 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #89: GFLOPs: 228.5769. Time: 453.0785 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #90: GFLOPs: 229.8626. Time: 450.5443 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #91: GFLOPs: 189.6058. Time: 546.2029 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #92: GFLOPs: 184.2456. Time: 562.0936 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #93: GFLOPs: 163.7596. Time: 632.4103 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #94: GFLOPs: 111.2124. Time: 931.2204 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #95: GFLOPs: 168.6039. Time: 614.2401 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #96: GFLOPs: 120.4165. Time: 860.0424 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #97: GFLOPs: 161.4264. Time: 641.5508 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #98: GFLOPs: 80.4491. Time: 1287.3133 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #99: GFLOPs: 150.1367. Time: 689.7930 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #100: GFLOPs: 227.6089. Time: 455.0054 us. Best GFLOPs: 259.8531
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #101: GFLOPs: 283.7178. Time: 365.0220 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #102: GFLOPs: 151.3612. Time: 684.2126 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #103: GFLOPs: 145.2006. Time: 713.2426 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #104: GFLOPs: 150.6248. Time: 687.5577 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #105: GFLOPs: 111.6386. Time: 927.6655 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #106: GFLOPs: 210.8756. Time: 491.1106 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #107: GFLOPs: 105.8767. Time: 978.1500 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #108: GFLOPs: 103.5085. Time: 1000.5292 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #109: GFLOPs: 170.1076. Time: 608.8102 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #110: GFLOPs: 158.7107. Time: 652.5285 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #111: GFLOPs: 194.6259. Time: 532.1146 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #112: GFLOPs: 153.2895. Time: 675.6056 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #113: GFLOPs: 145.6004. Time: 711.2841 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #114: GFLOPs: 213.4616. Time: 485.1611 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #115: GFLOPs: 77.1905. Time: 1341.6577 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #116: GFLOPs: 215.6876. Time: 480.1540 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #117: GFLOPs: 142.0925. Time: 728.8442 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #118: GFLOPs: 171.3523. Time: 604.3880 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #119: GFLOPs: 114.6093. Time: 903.6199 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #120: GFLOPs: 73.4783. Time: 1409.4393 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #121: GFLOPs: 57.3086. Time: 1807.1146 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #122: GFLOPs: 185.3060. Time: 558.8771 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #123: GFLOPs: 115.9434. Time: 893.2228 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #124: GFLOPs: 180.2241. Time: 574.6362 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #125: GFLOPs: 143.9051. Time: 719.6636 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #126: GFLOPs: 108.1267. Time: 957.7952 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #127: GFLOPs: 33.8215. Time: 3062.0575 us. Best GFLOPs: 283.7178
2024-04-28 23:37:41 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #128: GFLOPs: 127.0096. Time: 815.3971 us. Best GFLOPs: 283.7178
2024-04-29 01:24:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:24:57 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:24:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7afbf68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x49bfd68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa455f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6899138)]: 0 failure(s)
2024-04-29 01:24:59 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 01:25:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7afbf68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x49bfd68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa455f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6899138)]: 0 failure(s)
2024-04-29 01:25:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7afbf68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x49bfd68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa455f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6899138)]: 0 failure(s)
2024-04-29 01:25:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7afbf68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x49bfd68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa455f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6899138)]: 0 failure(s)
2024-04-29 01:25:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7afbf68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x49bfd68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xa455f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6899138)]: 0 failure(s)
2024-04-29 01:25:24 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8821  0.8790  0.8766  0.8718  0.8545  0.7600  0.7483  0.7307  0.7277  0.7188  0.7181  0.7163  0.7131  0.7125  0.7124  0.7095
[17 : 32]:	0.7089  0.7081  0.7073  0.7069  0.7034  0.7026  0.6951  0.6911  0.6892  0.6877  0.6849  0.6845  0.6834  0.6826  0.6817  0.6803
[33 : 48]:	0.6784  0.6768  0.6752  0.6729  0.6723  0.6720  0.6720  0.6719  0.6694  0.6688  0.6671  0.6664  0.6658  0.6658  0.6658  0.6658
[49 : 64]:	0.6640  0.6623  0.6620  0.6606  0.6605  0.6599  0.6595  0.6582  0.6574  0.6572  0.6551  0.6548  0.6545  0.6536  0.6530  0.6518
2024-04-29 01:25:25 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:25:25 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #129: GFLOPs: 259.2456. Time: 399.4794 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #130: GFLOPs: 262.8071. Time: 394.0658 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #131: GFLOPs: 219.4094. Time: 472.0091 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #132: GFLOPs: 268.9887. Time: 385.0097 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #133: GFLOPs: 197.6962. Time: 523.8507 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #134: GFLOPs: 81.1615. Time: 1276.0150 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #135: GFLOPs: 206.4293. Time: 501.6888 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #136: GFLOPs: 127.6982. Time: 811.0005 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #137: GFLOPs: 213.8817. Time: 484.2082 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #138: GFLOPs: 164.8008. Time: 628.4147 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #139: GFLOPs: 133.7900. Time: 774.0732 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #140: GFLOPs: 126.0517. Time: 821.5936 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #141: GFLOPs: 223.2601. Time: 463.8683 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #142: GFLOPs: 154.4976. Time: 670.3228 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #143: GFLOPs: 171.3572. Time: 604.3706 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #144: GFLOPs: 123.0194. Time: 841.8450 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #145: GFLOPs: 155.0297. Time: 668.0221 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #146: GFLOPs: 100.0415. Time: 1035.2030 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #147: GFLOPs: 181.8453. Time: 569.5130 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #148: GFLOPs: 170.2758. Time: 608.2091 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #149: GFLOPs: 123.7639. Time: 836.7807 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #150: GFLOPs: 175.4563. Time: 590.2512 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #151: GFLOPs: 162.2939. Time: 638.1215 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #152: GFLOPs: 155.8313. Time: 664.5859 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #153: GFLOPs: 153.8505. Time: 673.1423 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #154: GFLOPs: 156.2870. Time: 662.6478 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #155: GFLOPs: 159.9403. Time: 647.5119 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #156: GFLOPs: 178.2933. Time: 580.8590 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #157: GFLOPs: 214.9881. Time: 481.7163 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #158: GFLOPs: 157.0023. Time: 659.6291 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #159: GFLOPs: 149.3147. Time: 693.5905 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #160: GFLOPs: 188.5442. Time: 549.2786 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #161: GFLOPs: 171.0256. Time: 605.5424 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #162: GFLOPs: 268.7886. Time: 385.2963 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #163: GFLOPs: 145.0803. Time: 713.8342 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #164: GFLOPs: 141.5803. Time: 731.4807 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #165: GFLOPs: 188.4667. Time: 549.5042 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #166: GFLOPs: 140.2297. Time: 738.5260 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #167: GFLOPs: 134.3517. Time: 770.8369 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #168: GFLOPs: 147.4987. Time: 702.1302 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #169: GFLOPs: 264.1591. Time: 392.0488 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #170: GFLOPs: 136.5628. Time: 758.3563 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #171: GFLOPs: 151.3886. Time: 684.0889 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #172: GFLOPs: 136.8879. Time: 756.5550 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #173: GFLOPs: 167.6885. Time: 617.5931 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #174: GFLOPs: 175.1162. Time: 591.3973 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #175: GFLOPs: 125.8009. Time: 823.2312 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #176: GFLOPs: 127.5998. Time: 811.6255 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #177: GFLOPs: 124.8960. Time: 829.1961 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #178: GFLOPs: 128.4714. Time: 806.1192 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #179: GFLOPs: 120.0141. Time: 862.9258 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #180: GFLOPs: 121.4609. Time: 852.6467 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #181: GFLOPs: 117.2346. Time: 883.3849 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #182: GFLOPs: 127.8167. Time: 810.2483 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #183: GFLOPs: 175.3825. Time: 590.4994 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #184: GFLOPs: 162.3831. Time: 637.7714 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #185: GFLOPs: 176.6017. Time: 586.4228 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #186: GFLOPs: 173.6988. Time: 596.2233 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #187: GFLOPs: 168.8832. Time: 613.2241 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #188: GFLOPs: 162.5780. Time: 637.0068 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #189: GFLOPs: 163.9495. Time: 631.6777 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:121] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #190: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(32), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(256), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(28) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(28), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(28) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(128), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[8, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 28, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #191: GFLOPs: 149.4241. Time: 693.0829 us. Best GFLOPs: 283.7178
2024-04-29 01:27:09 [INFO] [task_scheduler.cc:131] [Task #57: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_54] Trial #192: GFLOPs: 65.9374. Time: 1570.6310 us. Best GFLOPs: 283.7178
