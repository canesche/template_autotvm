2024-04-28 20:45:14 [INFO] [task_scheduler.cc:160] Initializing Task #22: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21"
2024-04-28 20:45:14 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(208), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4), T.int64(832), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:45:14 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:45:14 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(208), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(2), T.int64(52), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(832), ic_0 * T.int64(52) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 52])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:45:14 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(208), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(2), T.int64(52), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(832), ic_0 * T.int64(52) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 52])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:45:14 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(208), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(2), T.int64(52), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(832), ic_0 * T.int64(52) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(2) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[16, 1, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 52])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 21:21:48 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:21:48 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:21:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7ca47e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x80c4d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb1e9ab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x932dce8)]: 0 failure(s)
2024-04-28 21:21:51 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:21:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7ca47e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x80c4d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb1e9ab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x932dce8)]: 0 failure(s)
2024-04-28 21:21:56 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7ca47e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x80c4d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb1e9ab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x932dce8)]: 0 failure(s)
2024-04-28 21:21:59 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7ca47e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x80c4d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb1e9ab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x932dce8)]: 0 failure(s)
2024-04-28 21:22:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7ca47e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x80c4d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb1e9ab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x932dce8)]: 0 failure(s)
2024-04-28 21:22:03 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9994  0.9987  0.9969  0.9967  0.9966  0.9964  0.9959  0.9954  0.9952  0.9949  0.9939  0.9936  0.9918  0.9916  0.9909
[17 : 32]:	0.9908  0.9904  0.9895  0.9894  0.9892  0.9891  0.9890  0.9876  0.9862  0.9859  0.9858  0.9853  0.9852  0.9845  0.9845  0.9839
[33 : 48]:	0.9837  0.9835  0.9835  0.9834  0.9834  0.9834  0.9832  0.9828  0.9822  0.9821  0.9820  0.9819  0.9818  0.9813  0.9812  0.9805
[49 : 64]:	0.9805  0.9804  0.9798  0.9792  0.9790  0.9788  0.9776  0.9767  0.9766  0.9753  0.9750  0.9748  0.9742  0.9739  0.9727  0.9720
2024-04-28 21:22:04 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:22:04 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #1: GFLOPs: 72.7853. Time: 574.2450 us. Best GFLOPs: 72.7853
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #2: GFLOPs: 94.0753. Time: 444.2890 us. Best GFLOPs: 94.0753
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:121] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #3: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(208), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(64), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(832), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(32) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(32) // T.int64(16) * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(832), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[832, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #4: GFLOPs: 62.7510. Time: 666.0712 us. Best GFLOPs: 94.0753
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #5: GFLOPs: 14.3243. Time: 2917.8726 us. Best GFLOPs: 94.0753
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #6: GFLOPs: 69.1553. Time: 604.3874 us. Best GFLOPs: 94.0753
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #7: GFLOPs: 89.8473. Time: 465.1961 us. Best GFLOPs: 94.0753
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #8: GFLOPs: 38.0251. Time: 1099.1844 us. Best GFLOPs: 94.0753
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #9: GFLOPs: 11.3262. Time: 3690.2459 us. Best GFLOPs: 94.0753
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #10: GFLOPs: 37.2936. Time: 1120.7447 us. Best GFLOPs: 94.0753
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #11: GFLOPs: 78.9106. Time: 529.6703 us. Best GFLOPs: 94.0753
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #12: GFLOPs: 104.4767. Time: 400.0567 us. Best GFLOPs: 104.4767
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #13: GFLOPs: 10.5239. Time: 3971.6063 us. Best GFLOPs: 104.4767
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:121] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #14: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(208), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(26), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(832), ic_0 * T.int64(26) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 16, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 26])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #15: GFLOPs: 115.5421. Time: 361.7437 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:121] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #16: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(208), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(26), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(832), ic_0 * T.int64(26) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 16, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 26])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #17: GFLOPs: 59.0459. Time: 707.8662 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #18: GFLOPs: 19.1812. Time: 2179.0365 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #19: GFLOPs: 19.5592. Time: 2136.9333 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #20: GFLOPs: 92.5121. Time: 451.7961 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #21: GFLOPs: 69.2880. Time: 603.2298 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #22: GFLOPs: 91.2392. Time: 458.0990 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #23: GFLOPs: 45.7069. Time: 914.4478 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #24: GFLOPs: 8.1343. Time: 5138.3220 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #25: GFLOPs: 2.0157. Time: 20735.3753 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #26: GFLOPs: 60.8577. Time: 686.7921 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #27: GFLOPs: 83.9531. Time: 497.8567 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #28: GFLOPs: 8.1634. Time: 5120.0162 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #29: GFLOPs: 12.8111. Time: 3262.5181 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #30: GFLOPs: 58.3517. Time: 716.2882 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #31: GFLOPs: 16.4861. Time: 2535.2609 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #32: GFLOPs: 65.1234. Time: 641.8065 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #33: GFLOPs: 17.9311. Time: 2330.9567 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #34: GFLOPs: 72.6934. Time: 574.9713 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #35: GFLOPs: 59.9609. Time: 697.0646 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #36: GFLOPs: 18.1572. Time: 2301.9331 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #37: GFLOPs: 40.9306. Time: 1021.1575 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #38: GFLOPs: 15.0746. Time: 2772.6475 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #39: GFLOPs: 1.4043. Time: 29764.2483 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #40: GFLOPs: 53.1259. Time: 786.7464 us. Best GFLOPs: 115.5421
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #41: GFLOPs: 120.5808. Time: 346.6273 us. Best GFLOPs: 120.5808
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #42: GFLOPs: 42.0541. Time: 993.8780 us. Best GFLOPs: 120.5808
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:121] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #43: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(208), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(208), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(4)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(26), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(14), T.int64(2), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(832), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(14)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[26, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
sch.annotate(block_or_loop=l68, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l68, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b67)
l104 = sch.fuse(l102, l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b105)
b132 = sch.decompose_reduction(block=b105, loop=l116)
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #44: GFLOPs: 25.8159. Time: 1619.0269 us. Best GFLOPs: 120.5808
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #45: GFLOPs: 126.8600. Time: 329.4703 us. Best GFLOPs: 126.8600
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #46: GFLOPs: 40.8842. Time: 1022.3158 us. Best GFLOPs: 126.8600
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #47: GFLOPs: 4.3186. Time: 9678.3405 us. Best GFLOPs: 126.8600
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #48: GFLOPs: 124.6623. Time: 335.2787 us. Best GFLOPs: 126.8600
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #49: GFLOPs: 23.7064. Time: 1763.0972 us. Best GFLOPs: 126.8600
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #50: GFLOPs: 52.7266. Time: 792.7041 us. Best GFLOPs: 126.8600
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #51: GFLOPs: 30.5512. Time: 1368.0849 us. Best GFLOPs: 126.8600
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #52: GFLOPs: 58.1264. Time: 719.0638 us. Best GFLOPs: 126.8600
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #53: GFLOPs: 34.6446. Time: 1206.4403 us. Best GFLOPs: 126.8600
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #54: GFLOPs: 4.3206. Time: 9673.8468 us. Best GFLOPs: 126.8600
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #55: GFLOPs: 26.6555. Time: 1568.0314 us. Best GFLOPs: 126.8600
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #56: GFLOPs: 82.0789. Time: 509.2247 us. Best GFLOPs: 126.8600
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #57: GFLOPs: 73.8515. Time: 565.9550 us. Best GFLOPs: 126.8600
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #58: GFLOPs: 34.4524. Time: 1213.1683 us. Best GFLOPs: 126.8600
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #59: GFLOPs: 6.0193. Time: 6943.7610 us. Best GFLOPs: 126.8600
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #60: GFLOPs: 61.5475. Time: 679.0951 us. Best GFLOPs: 126.8600
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #61: GFLOPs: 84.7978. Time: 492.8975 us. Best GFLOPs: 126.8600
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #62: GFLOPs: 5.0660. Time: 8250.4665 us. Best GFLOPs: 126.8600
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #63: GFLOPs: 6.9085. Time: 6050.0078 us. Best GFLOPs: 126.8600
2024-04-28 22:43:28 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #64: GFLOPs: 76.2802. Time: 547.9355 us. Best GFLOPs: 126.8600
2024-04-29 00:16:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:16:03 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 00:16:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7ca47e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x80c4d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb1e9ab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x932dce8)]: 0 failure(s)
2024-04-29 00:16:05 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 00:16:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7ca47e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x80c4d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb1e9ab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x932dce8)]: 0 failure(s)
2024-04-29 00:16:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7ca47e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x80c4d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb1e9ab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x932dce8)]: 0 failure(s)
2024-04-29 00:16:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7ca47e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x80c4d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb1e9ab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x932dce8)]: 0 failure(s)
2024-04-29 00:16:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x7ca47e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x80c4d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xb1e9ab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x932dce8)]: 0 failure(s)
2024-04-29 00:16:29 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9389  0.9329  0.8792  0.8767  0.8767  0.8390  0.8342  0.8325  0.8242  0.8237  0.8205  0.8187  0.7984  0.7981  0.7973  0.7972
[17 : 32]:	0.7962  0.7954  0.7935  0.7917  0.7891  0.7885  0.7878  0.7815  0.7804  0.7797  0.7789  0.7789  0.7764  0.7762  0.7760  0.7744
[33 : 48]:	0.7697  0.7688  0.7563  0.7559  0.7542  0.7524  0.7515  0.7515  0.7510  0.7501  0.7491  0.7480  0.7463  0.7435  0.7404  0.7391
[49 : 64]:	0.7379  0.7334  0.7323  0.7274  0.7267  0.7263  0.7256  0.7242  0.7239  0.7235  0.7224  0.7219  0.7202  0.7193  0.7185  0.7184
2024-04-29 00:16:29 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:16:29 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #65: GFLOPs: 60.0251. Time: 696.3186 us. Best GFLOPs: 126.8600
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #66: GFLOPs: 64.4657. Time: 648.3537 us. Best GFLOPs: 126.8600
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #67: GFLOPs: 78.9047. Time: 529.7101 us. Best GFLOPs: 126.8600
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #68: GFLOPs: 57.1401. Time: 731.4764 us. Best GFLOPs: 126.8600
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #69: GFLOPs: 113.5604. Time: 368.0562 us. Best GFLOPs: 126.8600
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #70: GFLOPs: 159.1414. Time: 262.6381 us. Best GFLOPs: 159.1414
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #71: GFLOPs: 172.9749. Time: 241.6340 us. Best GFLOPs: 172.9749
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #72: GFLOPs: 139.1964. Time: 300.2708 us. Best GFLOPs: 172.9749
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #73: GFLOPs: 138.4291. Time: 301.9350 us. Best GFLOPs: 172.9749
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #74: GFLOPs: 135.8630. Time: 307.6378 us. Best GFLOPs: 172.9749
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #75: GFLOPs: 121.8517. Time: 343.0122 us. Best GFLOPs: 172.9749
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #76: GFLOPs: 152.6934. Time: 273.7289 us. Best GFLOPs: 172.9749
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #77: GFLOPs: 114.8766. Time: 363.8392 us. Best GFLOPs: 172.9749
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #78: GFLOPs: 119.9223. Time: 348.5309 us. Best GFLOPs: 172.9749
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #79: GFLOPs: 144.1450. Time: 289.9623 us. Best GFLOPs: 172.9749
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #80: GFLOPs: 160.1233. Time: 261.0277 us. Best GFLOPs: 172.9749
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #81: GFLOPs: 143.1820. Time: 291.9124 us. Best GFLOPs: 172.9749
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #82: GFLOPs: 143.1762. Time: 291.9242 us. Best GFLOPs: 172.9749
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #83: GFLOPs: 122.1447. Time: 342.1892 us. Best GFLOPs: 172.9749
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #84: GFLOPs: 187.0105. Time: 223.4987 us. Best GFLOPs: 187.0105
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #85: GFLOPs: 134.6113. Time: 310.4985 us. Best GFLOPs: 187.0105
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #86: GFLOPs: 110.1443. Time: 379.4715 us. Best GFLOPs: 187.0105
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #87: GFLOPs: 142.9337. Time: 292.4196 us. Best GFLOPs: 187.0105
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #88: GFLOPs: 109.8382. Time: 380.5288 us. Best GFLOPs: 187.0105
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #89: GFLOPs: 110.3828. Time: 378.6516 us. Best GFLOPs: 187.0105
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #90: GFLOPs: 93.8898. Time: 445.1668 us. Best GFLOPs: 187.0105
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #91: GFLOPs: 125.9101. Time: 331.9561 us. Best GFLOPs: 187.0105
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #92: GFLOPs: 137.3571. Time: 304.2915 us. Best GFLOPs: 187.0105
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #93: GFLOPs: 151.3874. Time: 276.0904 us. Best GFLOPs: 187.0105
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #94: GFLOPs: 56.7959. Time: 735.9091 us. Best GFLOPs: 187.0105
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #95: GFLOPs: 126.3051. Time: 330.9178 us. Best GFLOPs: 187.0105
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #96: GFLOPs: 150.4305. Time: 277.8467 us. Best GFLOPs: 187.0105
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #97: GFLOPs: 141.9035. Time: 294.5424 us. Best GFLOPs: 187.0105
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #98: GFLOPs: 120.8912. Time: 345.7373 us. Best GFLOPs: 187.0105
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #99: GFLOPs: 200.9640. Time: 207.9806 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #100: GFLOPs: 50.4182. Time: 828.9981 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #101: GFLOPs: 132.3302. Time: 315.8508 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #102: GFLOPs: 13.0885. Time: 3193.3948 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #103: GFLOPs: 141.8876. Time: 294.5755 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #104: GFLOPs: 141.3972. Time: 295.5971 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #105: GFLOPs: 118.5785. Time: 352.4805 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #106: GFLOPs: 181.8170. Time: 229.8829 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #107: GFLOPs: 154.5791. Time: 270.3897 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #108: GFLOPs: 141.3654. Time: 295.6637 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #109: GFLOPs: 165.3443. Time: 252.7853 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #110: GFLOPs: 99.5446. Time: 419.8782 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #111: GFLOPs: 130.1559. Time: 321.1273 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #112: GFLOPs: 137.2281. Time: 304.5775 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #113: GFLOPs: 110.3669. Time: 378.7059 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #114: GFLOPs: 148.0058. Time: 282.3985 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #115: GFLOPs: 167.9385. Time: 248.8805 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #116: GFLOPs: 84.7143. Time: 493.3829 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #117: GFLOPs: 137.0777. Time: 304.9119 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #118: GFLOPs: 128.7916. Time: 324.5291 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #119: GFLOPs: 131.0361. Time: 318.9702 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #120: GFLOPs: 94.1326. Time: 444.0182 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #121: GFLOPs: 151.7267. Time: 275.4730 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #122: GFLOPs: 92.0549. Time: 454.0402 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #123: GFLOPs: 137.4718. Time: 304.0378 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #124: GFLOPs: 181.7879. Time: 229.9197 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #125: GFLOPs: 106.6319. Time: 391.9711 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #126: GFLOPs: 1.1194. Time: 37338.1965 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #127: GFLOPs: 42.5111. Time: 983.1924 us. Best GFLOPs: 200.9640
2024-04-29 00:18:04 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_21] Trial #128: GFLOPs: 56.7781. Time: 736.1401 us. Best GFLOPs: 200.9640
