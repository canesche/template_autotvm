2024-04-28 20:45:49 [INFO] [task_scheduler.cc:160] Initializing Task #31: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30"
2024-04-28 20:45:49 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(136), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(136), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4), T.int64(544), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:45:49 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:45:50 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(136), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(136), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(17), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(544), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[17, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:45:50 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(136), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(136), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(17), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(544), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(2), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_1 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[17, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:45:50 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(136), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(136), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(17), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(544), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(2), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[17, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 21:35:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:35:54 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:35:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6c57408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xabc2e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62ff298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9e0eae8)]: 0 failure(s)
2024-04-28 21:35:57 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:36:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6c57408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xabc2e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62ff298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9e0eae8)]: 0 failure(s)
2024-04-28 21:36:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6c57408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xabc2e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62ff298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9e0eae8)]: 0 failure(s)
2024-04-28 21:36:06 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6c57408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xabc2e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62ff298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9e0eae8)]: 0 failure(s)
2024-04-28 21:36:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6c57408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xabc2e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62ff298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9e0eae8)]: 0 failure(s)
2024-04-28 21:36:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9976  0.9974  0.9973  0.9970  0.9967  0.9967  0.9961  0.9960  0.9944  0.9940  0.9940  0.9938  0.9934  0.9928  0.9927
[17 : 32]:	0.9918  0.9898  0.9896  0.9895  0.9894  0.9894  0.9888  0.9886  0.9882  0.9868  0.9867  0.9862  0.9859  0.9843  0.9836  0.9834
[33 : 48]:	0.9829  0.9825  0.9822  0.9813  0.9812  0.9806  0.9805  0.9804  0.9803  0.9799  0.9789  0.9788  0.9780  0.9774  0.9772  0.9772
[49 : 64]:	0.9771  0.9761  0.9757  0.9748  0.9743  0.9739  0.9736  0.9736  0.9734  0.9718  0.9705  0.9702  0.9696  0.9696  0.9695  0.9677
2024-04-28 21:36:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:36:10 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #1: GFLOPs: 21.8623. Time: 1250.8238 us. Best GFLOPs: 21.8623
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #2: GFLOPs: 6.6631. Time: 4104.0841 us. Best GFLOPs: 21.8623
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #3: GFLOPs: 7.8337. Time: 3490.8162 us. Best GFLOPs: 21.8623
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:121] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #4: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(136), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(136), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(1), T.int64(4)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(68), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(544), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(14)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 32, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[68, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
sch.annotate(block_or_loop=l68, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l68, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b67)
l104 = sch.fuse(l102, l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b105)
b132 = sch.decompose_reduction(block=b105, loop=l116)
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:121] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #5: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(136), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(136), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(34), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(544), ic_0 * T.int64(34) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 34])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #6: GFLOPs: 1.5123. Time: 18082.3976 us. Best GFLOPs: 21.8623
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #7: GFLOPs: 3.9094. Time: 6994.8975 us. Best GFLOPs: 21.8623
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #8: GFLOPs: 27.8523. Time: 981.8179 us. Best GFLOPs: 27.8523
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #9: GFLOPs: 102.5095. Time: 266.7648 us. Best GFLOPs: 102.5095
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:121] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #10: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(136), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(136), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(16) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(272), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(544), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[272, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #11: GFLOPs: 18.5639. Time: 1473.0690 us. Best GFLOPs: 102.5095
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #12: GFLOPs: 4.6967. Time: 5822.3946 us. Best GFLOPs: 102.5095
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #13: GFLOPs: 62.7558. Time: 435.7514 us. Best GFLOPs: 102.5095
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #14: GFLOPs: 15.7060. Time: 1741.1101 us. Best GFLOPs: 102.5095
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #15: GFLOPs: 34.0318. Time: 803.5403 us. Best GFLOPs: 102.5095
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #16: GFLOPs: 0.2806. Time: 97457.7587 us. Best GFLOPs: 102.5095
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #17: GFLOPs: 39.2865. Time: 696.0639 us. Best GFLOPs: 102.5095
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #18: GFLOPs: 33.2403. Time: 822.6737 us. Best GFLOPs: 102.5095
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #19: GFLOPs: 128.5349. Time: 212.7509 us. Best GFLOPs: 128.5349
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #20: GFLOPs: 115.0985. Time: 237.5872 us. Best GFLOPs: 128.5349
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #21: GFLOPs: 86.5654. Time: 315.8990 us. Best GFLOPs: 128.5349
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #22: GFLOPs: 169.2593. Time: 161.5623 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #23: GFLOPs: 70.0494. Time: 390.3803 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #24: GFLOPs: 7.5555. Time: 3619.3390 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #25: GFLOPs: 18.0101. Time: 1518.3670 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #26: GFLOPs: 75.5850. Time: 361.7901 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #27: GFLOPs: 32.1075. Time: 851.6981 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:121] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #28: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(136), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(136), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(7) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(34), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(7) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(544), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 8, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[34, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #29: GFLOPs: 44.5915. Time: 613.2535 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #30: GFLOPs: 20.8469. Time: 1311.7515 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #31: GFLOPs: 0.6530. Time: 41876.9837 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #32: GFLOPs: 16.7014. Time: 1637.3439 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #33: GFLOPs: 97.3154. Time: 281.0030 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #34: GFLOPs: 100.7234. Time: 271.4951 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #35: GFLOPs: 104.2373. Time: 262.3429 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #36: GFLOPs: 73.7208. Time: 370.9389 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #37: GFLOPs: 78.2440. Time: 349.4956 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #38: GFLOPs: 85.4560. Time: 320.0001 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #39: GFLOPs: 8.7491. Time: 3125.5728 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #40: GFLOPs: 68.8165. Time: 397.3744 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #41: GFLOPs: 2.3940. Time: 11422.5971 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #42: GFLOPs: 70.9428. Time: 385.4643 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #43: GFLOPs: 51.1523. Time: 534.5983 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #44: GFLOPs: 29.9804. Time: 912.1279 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #45: GFLOPs: 13.7954. Time: 1982.2498 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #46: GFLOPs: 103.3603. Time: 264.5689 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #47: GFLOPs: 34.6577. Time: 789.0298 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #48: GFLOPs: 42.3579. Time: 645.5917 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #49: GFLOPs: 142.0191. Time: 192.5510 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #50: GFLOPs: 14.6591. Time: 1865.4579 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #51: GFLOPs: 52.4959. Time: 520.9153 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #52: GFLOPs: 79.1573. Time: 345.4631 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #53: GFLOPs: 9.1326. Time: 2994.3114 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #54: GFLOPs: 5.7671. Time: 4741.7013 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #55: GFLOPs: 60.1319. Time: 454.7656 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #56: GFLOPs: 0.5381. Time: 50817.3457 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #57: GFLOPs: 18.9121. Time: 1445.9462 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #58: GFLOPs: 77.0328. Time: 354.9908 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #59: GFLOPs: 62.7009. Time: 436.1327 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #60: GFLOPs: 1.3152. Time: 20792.7072 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #61: GFLOPs: 57.3728. Time: 476.6359 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #62: GFLOPs: 27.2885. Time: 1002.1040 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #63: GFLOPs: 13.7708. Time: 1985.7879 us. Best GFLOPs: 169.2593
2024-04-28 22:44:07 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #64: GFLOPs: 43.9039. Time: 622.8583 us. Best GFLOPs: 169.2593
2024-04-29 01:49:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:49:08 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-29 01:49:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6c57408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xabc2e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62ff298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9e0eae8)]: 0 failure(s)
2024-04-29 01:49:10 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-29 01:49:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6c57408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xabc2e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62ff298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9e0eae8)]: 0 failure(s)
2024-04-29 01:49:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6c57408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xabc2e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62ff298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9e0eae8)]: 0 failure(s)
2024-04-29 01:49:26 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6c57408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xabc2e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62ff298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9e0eae8)]: 0 failure(s)
2024-04-29 01:49:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6c57408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xabc2e48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62ff298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9e0eae8)]: 0 failure(s)
2024-04-29 01:49:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8936  0.8468  0.8452  0.8402  0.8402  0.8359  0.8359  0.8222  0.8192  0.7890  0.7874  0.7659  0.7593  0.7524  0.7504  0.7391
[17 : 32]:	0.7373  0.7355  0.7355  0.7290  0.7261  0.7195  0.7192  0.7135  0.6960  0.6949  0.6926  0.6843  0.6805  0.6805  0.6802  0.6770
[33 : 48]:	0.6765  0.6688  0.6686  0.6684  0.6618  0.6617  0.6604  0.6587  0.6585  0.6585  0.6579  0.6576  0.6566  0.6561  0.6560  0.6541
[49 : 64]:	0.6533  0.6530  0.6516  0.6498  0.6487  0.6475  0.6465  0.6447  0.6446  0.6440  0.6437  0.6429  0.6427  0.6405  0.6401  0.6396
2024-04-29 01:49:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:49:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #65: GFLOPs: 85.0124. Time: 321.6699 us. Best GFLOPs: 169.2593
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #66: GFLOPs: 169.4908. Time: 161.3416 us. Best GFLOPs: 169.4908
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #67: GFLOPs: 118.7008. Time: 230.3768 us. Best GFLOPs: 169.4908
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #68: GFLOPs: 138.7231. Time: 197.1259 us. Best GFLOPs: 169.4908
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #69: GFLOPs: 141.8421. Time: 192.7913 us. Best GFLOPs: 169.4908
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #70: GFLOPs: 149.9348. Time: 182.3854 us. Best GFLOPs: 169.4908
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #71: GFLOPs: 159.8514. Time: 171.0709 us. Best GFLOPs: 169.4908
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #72: GFLOPs: 148.3836. Time: 184.2920 us. Best GFLOPs: 169.4908
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #73: GFLOPs: 149.2553. Time: 183.2157 us. Best GFLOPs: 169.4908
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #74: GFLOPs: 194.1318. Time: 140.8627 us. Best GFLOPs: 194.1318
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #75: GFLOPs: 124.7472. Time: 219.2107 us. Best GFLOPs: 194.1318
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #76: GFLOPs: 182.5216. Time: 149.8229 us. Best GFLOPs: 194.1318
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #77: GFLOPs: 143.4821. Time: 190.5877 us. Best GFLOPs: 194.1318
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #78: GFLOPs: 130.7777. Time: 209.1023 us. Best GFLOPs: 194.1318
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #79: GFLOPs: 129.5157. Time: 211.1398 us. Best GFLOPs: 194.1318
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #80: GFLOPs: 181.0510. Time: 151.0398 us. Best GFLOPs: 194.1318
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #81: GFLOPs: 141.7240. Time: 192.9519 us. Best GFLOPs: 194.1318
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #82: GFLOPs: 242.1656. Time: 112.9224 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #83: GFLOPs: 228.7672. Time: 119.5360 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #84: GFLOPs: 102.7554. Time: 266.1265 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #85: GFLOPs: 137.6569. Time: 198.6527 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #86: GFLOPs: 239.6668. Time: 114.0997 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #87: GFLOPs: 99.5671. Time: 274.6481 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #88: GFLOPs: 61.3970. Time: 445.3948 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #89: GFLOPs: 182.8167. Time: 149.5811 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #90: GFLOPs: 119.5123. Time: 228.8125 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #91: GFLOPs: 85.6720. Time: 319.1932 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #92: GFLOPs: 95.0825. Time: 287.6021 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #93: GFLOPs: 53.5985. Time: 510.1996 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #94: GFLOPs: 121.5331. Time: 225.0080 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #95: GFLOPs: 139.1578. Time: 196.5102 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #96: GFLOPs: 67.3392. Time: 406.0920 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #97: GFLOPs: 105.2931. Time: 259.7123 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #98: GFLOPs: 84.3789. Time: 324.0848 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #99: GFLOPs: 85.5154. Time: 319.7777 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #100: GFLOPs: 143.5088. Time: 190.5522 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #101: GFLOPs: 216.2342. Time: 126.4644 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #102: GFLOPs: 91.8116. Time: 297.8481 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #103: GFLOPs: 109.4717. Time: 249.7991 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #104: GFLOPs: 51.3885. Time: 532.1406 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #105: GFLOPs: 97.0183. Time: 281.8635 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #106: GFLOPs: 96.9207. Time: 282.1475 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #107: GFLOPs: 157.8476. Time: 173.2425 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #108: GFLOPs: 107.7264. Time: 253.8460 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #109: GFLOPs: 101.6254. Time: 269.0854 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #110: GFLOPs: 150.1481. Time: 182.1263 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #111: GFLOPs: 67.6861. Time: 404.0111 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #112: GFLOPs: 89.9080. Time: 304.1546 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #113: GFLOPs: 168.0122. Time: 162.7615 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #114: GFLOPs: 139.6501. Time: 195.8174 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #115: GFLOPs: 171.5569. Time: 159.3985 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #116: GFLOPs: 116.0222. Time: 235.6956 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #117: GFLOPs: 77.3256. Time: 353.6464 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #118: GFLOPs: 107.1552. Time: 255.1991 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #119: GFLOPs: 116.2792. Time: 235.1746 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #120: GFLOPs: 173.2810. Time: 157.8126 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #121: GFLOPs: 127.9606. Time: 213.7058 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #122: GFLOPs: 132.4084. Time: 206.5270 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #123: GFLOPs: 92.1542. Time: 296.7409 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #124: GFLOPs: 133.1464. Time: 205.3824 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #125: GFLOPs: 105.5019. Time: 259.1983 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #126: GFLOPs: 134.9051. Time: 202.7049 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #127: GFLOPs: 109.2784. Time: 250.2408 us. Best GFLOPs: 242.1656
2024-04-29 01:51:24 [INFO] [task_scheduler.cc:131] [Task #31: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_30] Trial #128: GFLOPs: 36.4987. Time: 749.2296 us. Best GFLOPs: 242.1656
