2024-04-28 20:48:20 [INFO] [task_scheduler.cc:160] Initializing Task #76: "fused_nn_global_avg_pool2d"
2024-04-28 20:48:20 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
2024-04-28 20:48:20 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:48:20 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(7)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(256)):
                for ax0_1 in range(T.int64(7)):
                    for ax0_2, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7)):
                        with T.block("adaptive_pool_sum_rf"):
                            vrv0_rv1_fused_0 = T.axis.spatial(T.int64(7), ax0_1 + ax0_2)
                            v_ax0 = T.axis.spatial(T.int64(1), ax1_1)
                            v_ax1 = T.axis.spatial(T.int64(256), ax1 + ax2)
                            v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                            T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                            with T.init():
                                adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                            adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
                    for ax1_1, ax2, ax3, ax4, ax5 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("adaptive_pool_sum"):
                            vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                            v_ax1 = T.axis.spatial(T.int64(256), ax1 + ax2)
                            v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                            T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                for ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("adaptive_pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 7])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=2)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-28 20:48:20 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)))
            adaptive_pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4), T.int64(7)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5, ax6 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                    with T.block("adaptive_pool_sum_rf"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(256), ax1 + ax2_1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax3_1, ax4_1])
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax5)
                        vrv0_rv1_fused_0 = T.axis.reduce(T.int64(7), ax6)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) % T.int64(7), v_ax4])
                        T.writes(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                        adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) // T.int64(7), v_ax3 * T.int64(7) + (vrv0_rv1_fused_0 * T.int64(7) + vrv0_rv1_fused_1) % T.int64(7), v_ax4]
                for rv0_rv1_fused_1 in range(T.int64(7)):
                    with T.block("adaptive_pool_sum"):
                        vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                        T.reads(adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + adaptive_pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)):
                with T.block("adaptive_pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 7])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=4)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-28 20:48:20 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(7), T.int64(7), T.int64(4)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(256), T.int64(1), T.int64(1), T.int64(4)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
                    with T.block("adaptive_pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(256), ax1 + ax1_1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2_1, ax3_1])
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax4_1)
                        v_rv0, v_rv1 = T.axis.remap("RR", [ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4])
                        T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1, v_ax4]
                with T.block("adaptive_pool_avg"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-28 22:38:48 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:38:48 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 22:38:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x424cec8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x344eac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86f3f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7dd88e8)]: 0 failure(s)
2024-04-28 22:38:50 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 22:38:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x424cec8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x344eac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86f3f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7dd88e8)]: 0 failure(s)
2024-04-28 22:38:55 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x424cec8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x344eac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86f3f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7dd88e8)]: 0 failure(s)
2024-04-28 22:38:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x424cec8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x344eac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86f3f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7dd88e8)]: 0 failure(s)
2024-04-28 22:39:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x424cec8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x344eac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x86f3f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7dd88e8)]: 0 failure(s)
2024-04-28 22:39:01 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9956  0.9941  0.9875  0.9858  0.9761  0.9759  0.9718  0.9689  0.9670  0.9648  0.9634  0.9578  0.9573  0.9547  0.9520
[17 : 32]:	0.9384  0.9313  0.9200  0.9153  0.9070  0.9039  0.9007  0.8957  0.8919  0.8917  0.8795  0.8773  0.8708  0.8657  0.8624  0.8610
[33 : 48]:	0.8396  0.8384  0.8378  0.8376  0.8351  0.8316  0.8237  0.8231  0.8212  0.8069  0.8064  0.7865  0.7804  0.7745  0.7657  0.7616
[49 : 64]:	0.7602  0.7463  0.7454  0.7453  0.7428  0.7425  0.7417  0.7412  0.7407  0.7361  0.7349  0.7326  0.7304  0.7289  0.7235  0.7102
2024-04-28 22:39:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:39:02 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 0.9797. Time: 52.2585 us. Best GFLOPs: 0.9797
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 0.9131. Time: 56.0705 us. Best GFLOPs: 0.9797
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 2.4034. Time: 21.3027 us. Best GFLOPs: 2.4034
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 4.0027. Time: 12.7914 us. Best GFLOPs: 4.0027
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 2.1354. Time: 23.9765 us. Best GFLOPs: 4.0027
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 2.2528. Time: 22.7268 us. Best GFLOPs: 4.0027
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 2.2815. Time: 22.4410 us. Best GFLOPs: 4.0027
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 3.9325. Time: 13.0198 us. Best GFLOPs: 4.0027
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 4.3575. Time: 11.7499 us. Best GFLOPs: 4.3575
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 0.5513. Time: 92.8675 us. Best GFLOPs: 4.3575
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 2.5529. Time: 20.0559 us. Best GFLOPs: 4.3575
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 4.8372. Time: 10.5847 us. Best GFLOPs: 4.8372
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 4.7850. Time: 10.7002 us. Best GFLOPs: 4.8372
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 2.3294. Time: 21.9800 us. Best GFLOPs: 4.8372
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 1.8875. Time: 27.1265 us. Best GFLOPs: 4.8372
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 1.7144. Time: 29.8648 us. Best GFLOPs: 4.8372
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 4.2973. Time: 11.9145 us. Best GFLOPs: 4.8372
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 2.3389. Time: 21.8907 us. Best GFLOPs: 4.8372
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 2.5674. Time: 19.9420 us. Best GFLOPs: 4.8372
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 4.1924. Time: 12.2125 us. Best GFLOPs: 4.8372
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 5.0948. Time: 10.0495 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 2.0177. Time: 25.3760 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 2.3491. Time: 21.7958 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 4.9793. Time: 10.2825 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 2.4385. Time: 20.9967 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 2.6541. Time: 19.2908 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 2.6741. Time: 19.1465 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 2.3799. Time: 21.5134 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 4.3918. Time: 11.6581 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 2.4321. Time: 21.0514 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 4.8468. Time: 10.5638 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 2.5796. Time: 19.8480 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 5.0813. Time: 10.0761 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 5.0340. Time: 10.1708 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 2.4430. Time: 20.9582 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 5.0001. Time: 10.2399 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 4.3873. Time: 11.6699 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 2.5362. Time: 20.1881 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 2.2271. Time: 22.9893 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 2.0859. Time: 24.5453 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 2.4040. Time: 21.2975 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 4.3233. Time: 11.8427 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 1.8484. Time: 27.6991 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 2.6040. Time: 19.6619 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 2.9084. Time: 17.6042 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 2.3839. Time: 21.4776 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 2.0509. Time: 24.9643 us. Best GFLOPs: 5.0948
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 5.4258. Time: 9.4364 us. Best GFLOPs: 5.4258
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 2.5960. Time: 19.7223 us. Best GFLOPs: 5.4258
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 2.1480. Time: 23.8365 us. Best GFLOPs: 5.4258
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 1.1972. Time: 42.7649 us. Best GFLOPs: 5.4258
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 2.7840. Time: 18.3908 us. Best GFLOPs: 5.4258
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 1.2464. Time: 41.0784 us. Best GFLOPs: 5.4258
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 2.2295. Time: 22.9647 us. Best GFLOPs: 5.4258
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 4.1787. Time: 12.2527 us. Best GFLOPs: 5.4258
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 1.5453. Time: 33.1329 us. Best GFLOPs: 5.4258
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 3.3612. Time: 15.2327 us. Best GFLOPs: 5.4258
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 4.4182. Time: 11.5885 us. Best GFLOPs: 5.4258
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 1.7522. Time: 29.2212 us. Best GFLOPs: 5.4258
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 1.7065. Time: 30.0024 us. Best GFLOPs: 5.4258
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 2.2363. Time: 22.8947 us. Best GFLOPs: 5.4258
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 4.1169. Time: 12.4367 us. Best GFLOPs: 5.4258
2024-04-28 22:49:03 [INFO] [task_scheduler.cc:131] [Task #76: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 2.2324. Time: 22.9345 us. Best GFLOPs: 5.4258
