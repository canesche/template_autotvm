2024-04-28 20:46:52 [INFO] [task_scheduler.cc:160] Initializing Task #47: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45"
2024-04-28 20:46:52 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(80), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(320), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:46:52 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:46:52 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(80), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(2), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(2) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(320), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 8, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[20, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:46:52 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(80), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(2)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(320), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(1), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_1 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 8, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[20, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:46:52 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(80), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(2), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(320), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(28), T.int64(14), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 8, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[20, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 21:59:55 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:59:55 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:59:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6298f68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6844498)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7349ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x890d448)]: 0 failure(s)
2024-04-28 21:59:57 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 22:00:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6298f68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6844498)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7349ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x890d448)]: 0 failure(s)
2024-04-28 22:00:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6298f68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6844498)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7349ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x890d448)]: 0 failure(s)
2024-04-28 22:00:06 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6298f68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6844498)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7349ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x890d448)]: 0 failure(s)
2024-04-28 22:00:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6298f68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6844498)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7349ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x890d448)]: 0 failure(s)
2024-04-28 22:00:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9984  0.9981  0.9977  0.9975  0.9965  0.9960  0.9955  0.9950  0.9948  0.9935  0.9935  0.9932  0.9931  0.9928  0.9923  0.9921
[17 : 32]:	0.9920  0.9911  0.9907  0.9906  0.9902  0.9902  0.9896  0.9894  0.9891  0.9886  0.9884  0.9883  0.9880  0.9879  0.9873  0.9869
[33 : 48]:	0.9862  0.9860  0.9841  0.9840  0.9833  0.9820  0.9820  0.9818  0.9811  0.9803  0.9793  0.9793  0.9787  0.9784  0.9771  0.9768
[49 : 64]:	0.9766  0.9761  0.9756  0.9756  0.9753  0.9734  0.9733  0.9730  0.9727  0.9725  0.9720  0.9714  0.9705  0.9694  0.9691  0.9690
2024-04-28 22:00:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:00:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #1: GFLOPs: 66.8280. Time: 964.0566 us. Best GFLOPs: 66.8280
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #2: GFLOPs: 0.6138. Time: 104954.6333 us. Best GFLOPs: 66.8280
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #3: GFLOPs: 24.3503. Time: 2645.7939 us. Best GFLOPs: 66.8280
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #4: GFLOPs: 187.7446. Time: 343.1577 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #5: GFLOPs: 81.1086. Time: 794.3176 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #6: GFLOPs: 16.5916. Time: 3883.0390 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #7: GFLOPs: 69.2217. Time: 930.7199 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #8: GFLOPs: 20.2899. Time: 3175.2668 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #9: GFLOPs: 114.2339. Time: 563.9830 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #10: GFLOPs: 42.3736. Time: 1520.4287 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #11: GFLOPs: 77.8617. Time: 827.4412 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #12: GFLOPs: 72.4999. Time: 888.6358 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #13: GFLOPs: 7.9377. Time: 8116.4635 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #14: GFLOPs: 4.8751. Time: 13215.2021 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #15: GFLOPs: 21.4436. Time: 3004.4354 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #16: GFLOPs: 11.3970. Time: 5652.8778 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #17: GFLOPs: 98.1190. Time: 656.6106 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #18: GFLOPs: 51.1396. Time: 1259.8058 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #19: GFLOPs: 65.3621. Time: 985.6774 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #20: GFLOPs: 29.1477. Time: 2210.3274 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #21: GFLOPs: 26.5911. Time: 2422.8374 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #22: GFLOPs: 128.4377. Time: 501.6129 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #23: GFLOPs: 16.2454. Time: 3965.8009 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #24: GFLOPs: 42.0715. Time: 1531.3463 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #25: GFLOPs: 1.3889. Time: 46384.9590 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #26: GFLOPs: 44.7420. Time: 1439.9450 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #27: GFLOPs: 2.2796. Time: 28261.6687 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #28: GFLOPs: 3.4636. Time: 18600.7287 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #29: GFLOPs: 16.4811. Time: 3909.0803 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #30: GFLOPs: 14.0126. Time: 4597.7052 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #31: GFLOPs: 33.9210. Time: 1899.2974 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #32: GFLOPs: 113.9461. Time: 565.4073 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #33: GFLOPs: 3.2797. Time: 19643.9167 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #34: GFLOPs: 57.5521. Time: 1119.4375 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #35: GFLOPs: 32.1569. Time: 2003.4885 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #36: GFLOPs: 55.0516. Time: 1170.2845 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #37: GFLOPs: 97.5152. Time: 660.6761 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #38: GFLOPs: 60.4017. Time: 1066.6252 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #39: GFLOPs: 21.8085. Time: 2954.1706 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:121] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #40: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(80), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(14)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(8) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), oh_2_init * T.int64(14) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(14)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_2 * T.int64(14) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(8) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(320), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[20, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #41: GFLOPs: 42.4175. Time: 1518.8548 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #42: GFLOPs: 18.4211. Time: 3497.4044 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #43: GFLOPs: 100.6996. Time: 639.7841 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #44: GFLOPs: 51.9837. Time: 1239.3509 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #45: GFLOPs: 2.1266. Time: 30295.1028 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #46: GFLOPs: 24.1042. Time: 2672.8165 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #47: GFLOPs: 89.2242. Time: 722.0685 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #48: GFLOPs: 1.1503. Time: 56007.8173 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #49: GFLOPs: 81.2534. Time: 792.9021 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #50: GFLOPs: 2.6970. Time: 23888.4346 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #51: GFLOPs: 13.0053. Time: 4953.8219 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #52: GFLOPs: 64.2346. Time: 1002.9792 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #53: GFLOPs: 56.5850. Time: 1138.5700 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #54: GFLOPs: 39.1639. Time: 1645.0352 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:121] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #55: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(80), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(28) + oh_2_init * T.int64(4) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(7) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(320), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(28) + oh_2 * T.int64(4) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(320), ic_0 + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(28)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[4, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[320, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #56: GFLOPs: 64.0706. Time: 1005.5465 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #57: GFLOPs: 36.6739. Time: 1756.7269 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #58: GFLOPs: 47.5610. Time: 1354.5965 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #59: GFLOPs: 8.2837. Time: 7777.4695 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #60: GFLOPs: 4.2520. Time: 15152.0113 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #61: GFLOPs: 5.6959. Time: 11310.9111 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #62: GFLOPs: 0.6484. Time: 99360.2310 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #63: GFLOPs: 3.2209. Time: 20002.2508 us. Best GFLOPs: 187.7446
2024-04-28 22:45:32 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #64: GFLOPs: 123.2588. Time: 522.6888 us. Best GFLOPs: 187.7446
2024-04-29 00:09:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:09:47 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 00:09:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6298f68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6844498)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7349ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x890d448)]: 0 failure(s)
2024-04-29 00:09:49 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 00:09:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6298f68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6844498)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7349ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x890d448)]: 0 failure(s)
2024-04-29 00:10:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6298f68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6844498)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7349ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x890d448)]: 0 failure(s)
2024-04-29 00:10:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6298f68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6844498)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7349ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x890d448)]: 0 failure(s)
2024-04-29 00:10:11 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6298f68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6844498)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7349ce8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x890d448)]: 0 failure(s)
2024-04-29 00:10:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9616  0.8296  0.8082  0.7893  0.7893  0.7599  0.7512  0.7129  0.6802  0.6802  0.6802  0.6802  0.6758  0.6715  0.6635  0.6602
[17 : 32]:	0.6594  0.6534  0.6474  0.6452  0.6288  0.6245  0.6235  0.6225  0.6217  0.6209  0.6193  0.6185  0.6176  0.6176  0.6086  0.6081
[33 : 48]:	0.6069  0.6069  0.6040  0.6037  0.6018  0.5975  0.5947  0.5946  0.5946  0.5911  0.5903  0.5878  0.5875  0.5874  0.5861  0.5857
[49 : 64]:	0.5852  0.5781  0.5777  0.5747  0.5730  0.5700  0.5680  0.5669  0.5654  0.5654  0.5642  0.5623  0.5614  0.5605  0.5604  0.5601
2024-04-29 00:10:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:10:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #65: GFLOPs: 91.0104. Time: 707.8966 us. Best GFLOPs: 187.7446
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #66: GFLOPs: 87.5386. Time: 735.9724 us. Best GFLOPs: 187.7446
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #67: GFLOPs: 106.0573. Time: 607.4638 us. Best GFLOPs: 187.7446
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #68: GFLOPs: 137.1686. Time: 469.6847 us. Best GFLOPs: 187.7446
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #69: GFLOPs: 134.8235. Time: 477.8542 us. Best GFLOPs: 187.7446
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #70: GFLOPs: 62.1052. Time: 1037.3684 us. Best GFLOPs: 187.7446
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #71: GFLOPs: 215.9330. Time: 298.3610 us. Best GFLOPs: 215.9330
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #72: GFLOPs: 45.5479. Time: 1414.4656 us. Best GFLOPs: 215.9330
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #73: GFLOPs: 106.0584. Time: 607.4576 us. Best GFLOPs: 215.9330
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #74: GFLOPs: 167.8885. Time: 383.7427 us. Best GFLOPs: 215.9330
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #75: GFLOPs: 159.1809. Time: 404.7343 us. Best GFLOPs: 215.9330
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #76: GFLOPs: 136.3722. Time: 472.4276 us. Best GFLOPs: 215.9330
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #77: GFLOPs: 64.7797. Time: 994.5403 us. Best GFLOPs: 215.9330
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #78: GFLOPs: 90.0244. Time: 715.6499 us. Best GFLOPs: 215.9330
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #79: GFLOPs: 158.1643. Time: 407.3359 us. Best GFLOPs: 215.9330
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #80: GFLOPs: 79.1677. Time: 813.7916 us. Best GFLOPs: 215.9330
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #81: GFLOPs: 167.6553. Time: 384.2765 us. Best GFLOPs: 215.9330
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #82: GFLOPs: 86.5720. Time: 744.1894 us. Best GFLOPs: 215.9330
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #83: GFLOPs: 101.5855. Time: 634.2045 us. Best GFLOPs: 215.9330
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #84: GFLOPs: 101.8728. Time: 632.4160 us. Best GFLOPs: 215.9330
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #85: GFLOPs: 184.3558. Time: 349.4655 us. Best GFLOPs: 215.9330
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #86: GFLOPs: 182.3412. Time: 353.3266 us. Best GFLOPs: 215.9330
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #87: GFLOPs: 92.3947. Time: 697.2912 us. Best GFLOPs: 215.9330
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #88: GFLOPs: 173.7642. Time: 370.7668 us. Best GFLOPs: 215.9330
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #89: GFLOPs: 134.9437. Time: 477.4286 us. Best GFLOPs: 215.9330
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #90: GFLOPs: 106.6308. Time: 604.1970 us. Best GFLOPs: 215.9330
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #91: GFLOPs: 279.8894. Time: 230.1837 us. Best GFLOPs: 279.8894
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #92: GFLOPs: 131.9988. Time: 488.0800 us. Best GFLOPs: 279.8894
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #93: GFLOPs: 215.7008. Time: 298.6822 us. Best GFLOPs: 279.8894
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #94: GFLOPs: 48.0519. Time: 1340.7577 us. Best GFLOPs: 279.8894
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #95: GFLOPs: 94.3497. Time: 682.8423 us. Best GFLOPs: 279.8894
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #96: GFLOPs: 112.7154. Time: 571.5808 us. Best GFLOPs: 279.8894
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #97: GFLOPs: 99.3482. Time: 648.4865 us. Best GFLOPs: 279.8894
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #98: GFLOPs: 100.5101. Time: 640.9904 us. Best GFLOPs: 279.8894
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #99: GFLOPs: 175.0301. Time: 368.0852 us. Best GFLOPs: 279.8894
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #100: GFLOPs: 274.9584. Time: 234.3118 us. Best GFLOPs: 279.8894
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #101: GFLOPs: 148.6187. Time: 433.4984 us. Best GFLOPs: 279.8894
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #102: GFLOPs: 112.9763. Time: 570.2611 us. Best GFLOPs: 279.8894
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #103: GFLOPs: 131.8010. Time: 488.8126 us. Best GFLOPs: 279.8894
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #104: GFLOPs: 87.0728. Time: 739.9091 us. Best GFLOPs: 279.8894
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #105: GFLOPs: 84.4600. Time: 762.7985 us. Best GFLOPs: 279.8894
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #106: GFLOPs: 102.7611. Time: 626.9490 us. Best GFLOPs: 279.8894
2024-04-29 00:11:40 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #107: GFLOPs: 85.8663. Time: 750.3061 us. Best GFLOPs: 279.8894
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #108: GFLOPs: 142.3632. Time: 452.5466 us. Best GFLOPs: 279.8894
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #109: GFLOPs: 94.0196. Time: 685.2399 us. Best GFLOPs: 279.8894
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #110: GFLOPs: 120.4412. Time: 534.9164 us. Best GFLOPs: 279.8894
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #111: GFLOPs: 112.1065. Time: 574.6857 us. Best GFLOPs: 279.8894
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #112: GFLOPs: 75.2528. Time: 856.1276 us. Best GFLOPs: 279.8894
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #113: GFLOPs: 151.2961. Time: 425.8271 us. Best GFLOPs: 279.8894
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #114: GFLOPs: 282.6236. Time: 227.9569 us. Best GFLOPs: 282.6236
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #115: GFLOPs: 131.5979. Time: 489.5670 us. Best GFLOPs: 282.6236
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #116: GFLOPs: 125.4033. Time: 513.7503 us. Best GFLOPs: 282.6236
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #117: GFLOPs: 62.9082. Time: 1024.1267 us. Best GFLOPs: 282.6236
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #118: GFLOPs: 89.0645. Time: 723.3632 us. Best GFLOPs: 282.6236
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #119: GFLOPs: 48.7215. Time: 1322.3323 us. Best GFLOPs: 282.6236
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #120: GFLOPs: 36.6616. Time: 1757.3143 us. Best GFLOPs: 282.6236
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #121: GFLOPs: 70.9790. Time: 907.6762 us. Best GFLOPs: 282.6236
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #122: GFLOPs: 63.1600. Time: 1020.0446 us. Best GFLOPs: 282.6236
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #123: GFLOPs: 77.6315. Time: 829.8948 us. Best GFLOPs: 282.6236
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #124: GFLOPs: 139.3446. Time: 462.3500 us. Best GFLOPs: 282.6236
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #125: GFLOPs: 89.5579. Time: 719.3783 us. Best GFLOPs: 282.6236
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #126: GFLOPs: 71.0581. Time: 906.6662 us. Best GFLOPs: 282.6236
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #127: GFLOPs: 58.1491. Time: 1107.9443 us. Best GFLOPs: 282.6236
2024-04-29 00:11:41 [INFO] [task_scheduler.cc:131] [Task #47: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_45] Trial #128: GFLOPs: 36.1022. Time: 1784.5463 us. Best GFLOPs: 282.6236
