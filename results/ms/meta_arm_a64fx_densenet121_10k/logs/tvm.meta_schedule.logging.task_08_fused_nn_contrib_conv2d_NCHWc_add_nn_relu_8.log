2024-04-28 20:44:20 [INFO] [task_scheduler.cc:160] Initializing Task #8: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8"
2024-04-28 20:44:20 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(184), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(184), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4), T.int64(736), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:44:20 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:44:20 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(184), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(184), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(23), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(736), ic_0 * T.int64(23) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 23])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:44:20 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(184), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(184), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(23), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(736), ic_0 * T.int64(23) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 23])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:44:20 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(184), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(184), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(23), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(736), ic_0 * T.int64(23) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 23])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 21:00:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:00:28 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:00:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4c7b418)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x653b9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7ea85b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8393ae8)]: 0 failure(s)
2024-04-28 21:00:31 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:00:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4c7b418)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x653b9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7ea85b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8393ae8)]: 0 failure(s)
2024-04-28 21:00:37 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4c7b418)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x653b9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7ea85b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8393ae8)]: 0 failure(s)
2024-04-28 21:00:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4c7b418)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x653b9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7ea85b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8393ae8)]: 0 failure(s)
2024-04-28 21:00:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4c7b418)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x653b9d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x7ea85b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8393ae8)]: 0 failure(s)
2024-04-28 21:00:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9980  0.9952  0.9946  0.9939  0.9936  0.9935  0.9935  0.9933  0.9932  0.9928  0.9928  0.9928  0.9915  0.9907  0.9906  0.9899
[17 : 32]:	0.9898  0.9897  0.9896  0.9889  0.9884  0.9882  0.9876  0.9872  0.9872  0.9871  0.9869  0.9859  0.9848  0.9847  0.9841  0.9836
[33 : 48]:	0.9836  0.9833  0.9821  0.9814  0.9807  0.9806  0.9782  0.9777  0.9775  0.9769  0.9763  0.9761  0.9760  0.9759  0.9752  0.9749
[49 : 64]:	0.9745  0.9738  0.9736  0.9734  0.9733  0.9725  0.9715  0.9708  0.9706  0.9699  0.9695  0.9685  0.9682  0.9678  0.9666  0.9662
2024-04-28 21:00:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:00:44 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #1: GFLOPs: 53.5591. Time: 172.6116 us. Best GFLOPs: 53.5591
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #2: GFLOPs: 6.9925. Time: 1322.1115 us. Best GFLOPs: 53.5591
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #3: GFLOPs: 53.8855. Time: 171.5663 us. Best GFLOPs: 53.8855
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #4: GFLOPs: 71.1582. Time: 129.9209 us. Best GFLOPs: 71.1582
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #5: GFLOPs: 30.4845. Time: 303.2661 us. Best GFLOPs: 71.1582
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #6: GFLOPs: 28.6202. Time: 323.0209 us. Best GFLOPs: 71.1582
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #7: GFLOPs: 79.4900. Time: 116.3030 us. Best GFLOPs: 79.4900
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #8: GFLOPs: 150.7392. Time: 61.3306 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #9: GFLOPs: 89.9877. Time: 102.7355 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #10: GFLOPs: 43.3914. Time: 213.0592 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #11: GFLOPs: 2.3777. Time: 3888.1905 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #12: GFLOPs: 14.6835. Time: 629.6123 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #13: GFLOPs: 27.6660. Time: 334.1623 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #14: GFLOPs: 1.6852. Time: 5485.8932 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #15: GFLOPs: 3.7022. Time: 2497.1667 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #16: GFLOPs: 8.5591. Time: 1080.1266 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #17: GFLOPs: 2.4463. Time: 3779.0863 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #18: GFLOPs: 27.9919. Time: 330.2718 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #19: GFLOPs: 62.5427. Time: 147.8178 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #20: GFLOPs: 0.9190. Time: 10059.2697 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #21: GFLOPs: 58.3851. Time: 158.3440 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #22: GFLOPs: 119.8046. Time: 77.1667 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #23: GFLOPs: 77.6418. Time: 119.0716 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #24: GFLOPs: 0.4794. Time: 19282.6177 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #25: GFLOPs: 51.4141. Time: 179.8132 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #26: GFLOPs: 15.1176. Time: 611.5355 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #27: GFLOPs: 19.4355. Time: 475.6724 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #28: GFLOPs: 5.7137. Time: 1618.0309 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #29: GFLOPs: 31.6140. Time: 292.4316 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #30: GFLOPs: 16.6641. Time: 554.7806 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #31: GFLOPs: 32.2631. Time: 286.5479 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #32: GFLOPs: 15.6260. Time: 591.6379 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #33: GFLOPs: 55.9426. Time: 165.2572 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #34: GFLOPs: 11.4330. Time: 808.6166 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #35: GFLOPs: 34.6862. Time: 266.5306 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #36: GFLOPs: 65.6768. Time: 140.7640 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #37: GFLOPs: 15.1393. Time: 610.6564 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #38: GFLOPs: 4.1695. Time: 2217.2545 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #39: GFLOPs: 23.1906. Time: 398.6497 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #40: GFLOPs: 19.6390. Time: 470.7427 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #41: GFLOPs: 36.2081. Time: 255.3274 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #42: GFLOPs: 79.8714. Time: 115.7477 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #43: GFLOPs: 64.4931. Time: 143.3475 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #44: GFLOPs: 22.4680. Time: 411.4708 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #45: GFLOPs: 9.9881. Time: 925.5969 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #46: GFLOPs: 0.6524. Time: 14170.1030 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #47: GFLOPs: 3.2472. Time: 2847.0590 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #48: GFLOPs: 41.3662. Time: 223.4901 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #49: GFLOPs: 34.8371. Time: 265.3758 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #50: GFLOPs: 77.3749. Time: 119.4823 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #51: GFLOPs: 10.5179. Time: 878.9731 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #52: GFLOPs: 72.6513. Time: 127.2507 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #53: GFLOPs: 57.1842. Time: 161.6692 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #54: GFLOPs: 94.2510. Time: 98.0884 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #55: GFLOPs: 105.8958. Time: 87.3021 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #56: GFLOPs: 69.8239. Time: 132.4035 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #57: GFLOPs: 125.6257. Time: 73.5910 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #58: GFLOPs: 84.3577. Time: 109.5920 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #59: GFLOPs: 50.4635. Time: 183.2004 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #60: GFLOPs: 65.1212. Time: 141.9649 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #61: GFLOPs: 83.6008. Time: 110.5842 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #62: GFLOPs: 4.3357. Time: 2132.2890 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #63: GFLOPs: 127.5148. Time: 72.5008 us. Best GFLOPs: 150.7392
2024-04-28 22:42:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_8] Trial #64: GFLOPs: 82.2246. Time: 112.4350 us. Best GFLOPs: 150.7392
