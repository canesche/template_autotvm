2024-04-28 20:47:46 [INFO] [task_scheduler.cc:160] Initializing Task #62: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57"
2024-04-28 20:47:46 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(3), T.int64(7), T.int64(7)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:47:46 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:47:46 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(28), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(21), T.int64(13), T.int64(3)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), oh_0 * T.int64(16) + ax2)
                        v_i3 = T.axis.spatial(T.int64(230), ow_0 * T.int64(8) + ax3)
                        v_i4 = T.axis.spatial(T.int64(3), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(8) + oh_1 * T.int64(8) + oh_2 * T.int64(8) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                        T.reads(data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 8])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[28, 1, 4, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 16, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
2024-04-28 20:47:46 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(28)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(21), T.int64(13), T.int64(3)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), oh_0 * T.int64(16) + ax2)
                        v_i3 = T.axis.spatial(T.int64(230), ow_0 * T.int64(8) + ax3)
                        v_i4 = T.axis.spatial(T.int64(3), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
                for oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16)):
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(8) + oh_1 * T.int64(8) + oh_2 * T.int64(8) + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                            v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(4), T.int64(2)):
                        with T.block("T_relu"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2), oc_chunk_1 + ax1)
                            v_ax2 = T.axis.spatial(T.int64(112), oh_0 * T.int64(8) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(112), ow_0 * T.int64(4) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(2) + ax4)
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 8])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[28, 1, 4, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 16, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-28 20:47:46 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(28), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(21), T.int64(13), T.int64(3)):
                        with T.block("data_pad"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(230), oh_0 * T.int64(16) + ax2)
                            v_i3 = T.axis.spatial(T.int64(230), ow_0 * T.int64(8) + ax3)
                            v_i4 = T.axis.spatial(T.int64(3), ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                            T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                            data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                        with T.block("conv2d_NCHWc"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_0 * T.int64(2) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), oh_0 * T.int64(8) + oh_1 * T.int64(8) + oh_2 * T.int64(8) + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), ow_0 * T.int64(4) + ow_1 * T.int64(4) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_0 * T.int64(32) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                            v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                            T.reads(data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(4), T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(112), oh_0 * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), ow_0 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 8])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[28, 1, 4, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 16, 2, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
2024-04-28 22:20:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:20:43 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 22:20:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-28 22:20:49 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 22:20:56 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-28 22:21:02 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-28 22:21:09 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-28 22:21:16 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-28 22:21:17 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9987  0.9974  0.9973  0.9972  0.9966  0.9957  0.9950  0.9941  0.9935  0.9935  0.9934  0.9930  0.9926  0.9926  0.9925
[17 : 32]:	0.9924  0.9916  0.9901  0.9898  0.9893  0.9884  0.9878  0.9877  0.9877  0.9876  0.9876  0.9863  0.9859  0.9858  0.9853  0.9851
[33 : 48]:	0.9850  0.9849  0.9848  0.9848  0.9846  0.9844  0.9836  0.9823  0.9818  0.9800  0.9795  0.9792  0.9783  0.9782  0.9776  0.9769
[49 : 64]:	0.9768  0.9764  0.9762  0.9760  0.9760  0.9752  0.9740  0.9738  0.9734  0.9732  0.9729  0.9727  0.9718  0.9716  0.9716  0.9714
2024-04-28 22:21:17 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:21:17 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #1: GFLOPs: 42.0935. Time: 5645.3796 us. Best GFLOPs: 42.0935
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #2: GFLOPs: 6.2995. Time: 37722.4580 us. Best GFLOPs: 42.0935
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #3: GFLOPs: 5.7813. Time: 41103.5080 us. Best GFLOPs: 42.0935
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #4: GFLOPs: 137.9720. Time: 1722.3319 us. Best GFLOPs: 137.9720
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #5: GFLOPs: 46.7623. Time: 5081.7281 us. Best GFLOPs: 137.9720
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #6: GFLOPs: 19.1544. Time: 12406.2112 us. Best GFLOPs: 137.9720
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:121] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #7: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(21), T.int64(117)):
                for ax4_fused in T.vectorized(T.int64(3)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) * T.int64(16) + ax2)
                        v_i3 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) // T.int64(4) * T.int64(112) + ax3)
                        v_i4 = T.axis.spatial(T.int64(3), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) // T.int64(4) * T.int64(56) + ow_1 * T.int64(56) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(4) * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(8), T.int64(3), T.int64(7), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) // T.int64(4) * T.int64(56) + ow_1 * T.int64(56) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(4) * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(56)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) // T.int64(4) * T.int64(56) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(4) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 8, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 14, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b68)
l81 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l81)
l82 = sch.fuse(l80, preserve_unit_iters=True)
sch.vectorize(loop=l82)
l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l83, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b113)
b136 = sch.decompose_reduction(block=b113, loop=l120)
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #8: GFLOPs: 104.6600. Time: 2270.5282 us. Best GFLOPs: 137.9720
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #9: GFLOPs: 52.1539. Time: 4556.3890 us. Best GFLOPs: 137.9720
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #10: GFLOPs: 13.3483. Time: 17802.5113 us. Best GFLOPs: 137.9720
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #11: GFLOPs: 5.4542. Time: 43569.0133 us. Best GFLOPs: 137.9720
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #12: GFLOPs: 6.9033. Time: 34423.0380 us. Best GFLOPs: 137.9720
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #13: GFLOPs: 116.8794. Time: 2033.1522 us. Best GFLOPs: 137.9720
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #14: GFLOPs: 7.3475. Time: 32342.2295 us. Best GFLOPs: 137.9720
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #15: GFLOPs: 73.6236. Time: 3227.6804 us. Best GFLOPs: 137.9720
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #16: GFLOPs: 71.2025. Time: 3337.4333 us. Best GFLOPs: 137.9720
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #17: GFLOPs: 92.6446. Time: 2565.0012 us. Best GFLOPs: 137.9720
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #18: GFLOPs: 48.0277. Time: 4947.8406 us. Best GFLOPs: 137.9720
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #19: GFLOPs: 96.3534. Time: 2466.2699 us. Best GFLOPs: 137.9720
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:121] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #20: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(28), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(8), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(112), oh_1 * T.int64(16) + oh_2_init * T.int64(4) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(16) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), oh_1 * T.int64(16) + oh_2 * T.int64(4) + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(16) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(8) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                            v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh - T.int64(3), v_ow * T.int64(2) + v_kw - T.int64(3), v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(3) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(227) and T.int64(3) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(227), p0[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh - T.int64(3), v_ow * T.int64(2) + v_kw - T.int64(3), v_ic % T.int64(3)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(16)):
                for ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(16) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) * T.int64(8) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 4, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 8, 2, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 2, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69 = sch.get_child_blocks(b67)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b68)
l96 = sch.fuse(l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l96)
l97 = sch.fuse(l95, preserve_unit_iters=True)
sch.vectorize(loop=l97)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b105)
b128 = sch.decompose_reduction(block=b105, loop=l112)
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #21: GFLOPs: 64.8369. Time: 3665.0950 us. Best GFLOPs: 137.9720
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #22: GFLOPs: 127.1396. Time: 1869.0759 us. Best GFLOPs: 137.9720
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #23: GFLOPs: 144.4038. Time: 1645.6187 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #24: GFLOPs: 13.1141. Time: 18120.4842 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #25: GFLOPs: 123.5162. Time: 1923.9057 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #26: GFLOPs: 79.0943. Time: 3004.4334 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #27: GFLOPs: 40.5644. Time: 5858.1726 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #28: GFLOPs: 94.7339. Time: 2508.4318 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #29: GFLOPs: 64.8742. Time: 3662.9918 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #30: GFLOPs: 29.7729. Time: 7981.5251 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #31: GFLOPs: 5.2619. Time: 45160.7840 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #32: GFLOPs: 4.4683. Time: 53181.5353 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #33: GFLOPs: 15.9691. Time: 14880.8193 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #34: GFLOPs: 3.0161. Time: 78789.5160 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #35: GFLOPs: 13.6179. Time: 17450.0436 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #36: GFLOPs: 66.7098. Time: 3562.1987 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #37: GFLOPs: 72.9285. Time: 3258.4454 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #38: GFLOPs: 9.3238. Time: 25486.6835 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #39: GFLOPs: 16.0080. Time: 14844.6819 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #40: GFLOPs: 63.9412. Time: 3716.4400 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:121] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #41: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(896), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(56), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(448) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(4) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(56) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(448) // T.int64(224) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(56), T.int64(8), T.int64(3), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(448) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(4) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(56) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(448) // T.int64(224) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(8) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                    v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh - T.int64(3), v_ow * T.int64(2) + v_kw - T.int64(3), v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(3) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(227) and T.int64(3) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(227), p0[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh - T.int64(3), v_ow * T.int64(2) + v_kw - T.int64(3), v_ic % T.int64(3)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(12544)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(401408))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(401408) // T.int64(3584))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3584) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 56, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 56, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 8, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68 = sch.get_child_blocks(b66)
l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b67)
l95 = sch.fuse(l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100 = sch.get_loops(block=b68)
l101 = sch.fuse(l96, l97, l98, l99, l100, preserve_unit_iters=True)
l102, l103 = sch.split(loop=l101, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l102)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #42: GFLOPs: 77.5287. Time: 3065.1046 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #43: GFLOPs: 10.0895. Time: 23552.5806 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #44: GFLOPs: 79.3594. Time: 2994.3986 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:121] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #45: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(98), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(32)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(8) + oh_1 + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(16) + ow_1 * T.int64(16) + ow_2_init * T.int64(8) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init * T.int64(32) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(8)):
                    for oc_block_3_fused in T.vectorized(T.int64(32)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(8) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(16) + ow_1 * T.int64(16) + ow_2 * T.int64(8) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 * T.int64(32) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                            v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh - T.int64(3), v_ow * T.int64(2) + v_kw - T.int64(3), v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + T.if_then_else(T.int64(3) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(227) and T.int64(3) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(227), p0[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh - T.int64(3), v_ow * T.int64(2) + v_kw - T.int64(3), v_ic % T.int64(3)], T.float32(0)) * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(16)):
                for ax4_fused in T.vectorized(T.int64(32)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(7) * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(16) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 8, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[7, 1, 2, 8])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 1, 32])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69 = sch.get_child_blocks(b67)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b68)
l96 = sch.fuse(l70, l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l96)
l97 = sch.fuse(l95, preserve_unit_iters=True)
sch.vectorize(loop=l97)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b105)
b128 = sch.decompose_reduction(block=b105, loop=l112)
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #46: GFLOPs: 99.5427. Time: 2387.2512 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #47: GFLOPs: 8.6907. Time: 27343.4660 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #48: GFLOPs: 68.9976. Time: 3444.0819 us. Best GFLOPs: 144.4038
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #49: GFLOPs: 185.5164. Time: 1280.9303 us. Best GFLOPs: 185.5164
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:121] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #50: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(21), T.int64(61)):
                for ax4_fused in T.vectorized(T.int64(3)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) * T.int64(16) + ax2)
                        v_i3 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) // T.int64(2) * T.int64(56) + ax3)
                        v_i4 = T.axis.spatial(T.int64(3), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(8) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) // T.int64(2) * T.int64(28) + ow_1 * T.int64(14) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(4), T.int64(3), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) * T.int64(8) + oh_1 * T.int64(8) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) // T.int64(2) * T.int64(28) + ow_1 * T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused // T.int64(8) * T.int64(8) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(8) // T.int64(2) * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused_fused % T.int64(2) * T.int64(16) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 4, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 2, 14, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 4, 4, 1])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b68)
l81 = sch.fuse(l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l81)
l82 = sch.fuse(l80, preserve_unit_iters=True)
sch.vectorize(loop=l82)
l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b69)
l105 = sch.fuse(l83, preserve_unit_iters=True)
sch.parallel(loop=l105)
sch.annotate(block_or_loop=l105, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l105, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b70)
l112 = sch.fuse(l111, preserve_unit_iters=True)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b113)
b136 = sch.decompose_reduction(block=b113, loop=l120)
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #51: GFLOPs: 3.1843. Time: 74627.1637 us. Best GFLOPs: 185.5164
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #52: GFLOPs: 59.6897. Time: 3981.1462 us. Best GFLOPs: 185.5164
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #53: GFLOPs: 35.4244. Time: 6708.1862 us. Best GFLOPs: 185.5164
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #54: GFLOPs: 43.0036. Time: 5525.8954 us. Best GFLOPs: 185.5164
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #55: GFLOPs: 20.8209. Time: 11413.1974 us. Best GFLOPs: 185.5164
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #56: GFLOPs: 49.0100. Time: 4848.6762 us. Best GFLOPs: 185.5164
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #57: GFLOPs: 69.2363. Time: 3432.2078 us. Best GFLOPs: 185.5164
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #58: GFLOPs: 8.6438. Time: 27491.8257 us. Best GFLOPs: 185.5164
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #59: GFLOPs: 29.1419. Time: 8154.3567 us. Best GFLOPs: 185.5164
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #60: GFLOPs: 58.6069. Time: 4054.7051 us. Best GFLOPs: 185.5164
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #61: GFLOPs: 26.3043. Time: 9034.0133 us. Best GFLOPs: 185.5164
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #62: GFLOPs: 16.3080. Time: 14571.5669 us. Best GFLOPs: 185.5164
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #63: GFLOPs: 30.3788. Time: 7822.3544 us. Best GFLOPs: 185.5164
2024-04-28 22:47:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #64: GFLOPs: 84.3289. Time: 2817.9382 us. Best GFLOPs: 185.5164
2024-04-28 22:56:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:56:42 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-28 22:56:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-28 22:56:47 [INFO] [evolutionary_search.cc:723] Sampled 453 candidate(s)
2024-04-28 22:57:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-28 22:57:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-28 22:57:26 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-28 22:57:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-28 22:57:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0046  0.9778  0.9778  0.9778  0.9703  0.9448  0.8517  0.8505  0.8368  0.8351  0.8100  0.8044  0.7845  0.7824  0.7762  0.7762
[17 : 32]:	0.7762  0.7762  0.7747  0.7747  0.7735  0.7719  0.7693  0.7693  0.7673  0.7612  0.7609  0.7609  0.7580  0.7561  0.7519  0.7519
[33 : 48]:	0.7519  0.7519  0.7515  0.7515  0.7499  0.7499  0.7499  0.7468  0.7468  0.7468  0.7468  0.7436  0.7404  0.7392  0.7392  0.7392
[49 : 64]:	0.7392  0.7386  0.7341  0.7300  0.7300  0.7300  0.7297  0.7297  0.7297  0.7297  0.7258  0.7205  0.7205  0.7186  0.7176  0.7169
2024-04-28 22:57:47 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:57:47 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #65: GFLOPs: 173.8417. Time: 1366.9536 us. Best GFLOPs: 185.5164
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #66: GFLOPs: 178.3464. Time: 1332.4269 us. Best GFLOPs: 185.5164
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #67: GFLOPs: 199.7256. Time: 1189.8000 us. Best GFLOPs: 199.7256
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #68: GFLOPs: 156.7204. Time: 1516.2900 us. Best GFLOPs: 199.7256
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #69: GFLOPs: 186.9125. Time: 1271.3625 us. Best GFLOPs: 199.7256
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #70: GFLOPs: 141.0707. Time: 1684.4990 us. Best GFLOPs: 199.7256
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #71: GFLOPs: 154.0491. Time: 1542.5827 us. Best GFLOPs: 199.7256
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #72: GFLOPs: 37.4296. Time: 6348.8067 us. Best GFLOPs: 199.7256
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #73: GFLOPs: 169.2183. Time: 1404.3017 us. Best GFLOPs: 199.7256
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #74: GFLOPs: 164.2624. Time: 1446.6706 us. Best GFLOPs: 199.7256
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #75: GFLOPs: 170.1268. Time: 1396.8022 us. Best GFLOPs: 199.7256
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:121] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #76: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(52900)):
            for i4_fused in T.vectorized(T.int64(3)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(230), i0_i1_i2_i3_fused // T.int64(230))
                    v_i3 = T.axis.spatial(T.int64(230), i0_i1_i2_i3_fused % T.int64(230))
                    v_i4 = T.axis.spatial(T.int64(3), i4_fused)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(3136), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(56) * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(3), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(56) * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                            v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                            v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(2), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(64)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(56) * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(56) * T.int64(2) + ax3_ax4_fused // T.int64(32))
                            v_ax4 = T.axis.spatial(T.int64(32), ax3_ax4_fused % T.int64(32))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[56, 1, 2, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 14, 1, 2])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 4, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
b64, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b64, loop=l49, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v65 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v65)
l66 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l66, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b67 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.unroll_explicit")
b68, b69, b70 = sch.get_child_blocks(b67)
l71, l72, l73, l74, l75 = sch.get_loops(block=b68)
l76 = sch.fuse(l71, l72, l73, l74, preserve_unit_iters=True)
sch.parallel(loop=l76)
l77 = sch.fuse(l75, preserve_unit_iters=True)
sch.vectorize(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b69)
l104 = sch.fuse(l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b70)
l113 = sch.fuse(l111, l112, preserve_unit_iters=True)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #77: GFLOPs: 122.2393. Time: 1944.0020 us. Best GFLOPs: 199.7256
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #78: GFLOPs: 222.2721. Time: 1069.1107 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #79: GFLOPs: 139.6917. Time: 1701.1281 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #80: GFLOPs: 157.6603. Time: 1507.2502 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #81: GFLOPs: 138.8621. Time: 1711.2912 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #82: GFLOPs: 161.8355. Time: 1468.3646 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #83: GFLOPs: 148.6630. Time: 1598.4717 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #84: GFLOPs: 109.7335. Time: 2165.5515 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #85: GFLOPs: 124.8404. Time: 1903.4991 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #86: GFLOPs: 33.6332. Time: 7065.4419 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #87: GFLOPs: 161.0482. Time: 1475.5432 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #88: GFLOPs: 182.6090. Time: 1301.3241 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #89: GFLOPs: 108.3479. Time: 2193.2446 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #90: GFLOPs: 64.1288. Time: 3705.5649 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #91: GFLOPs: 164.6439. Time: 1443.3182 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #92: GFLOPs: 173.2046. Time: 1371.9814 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #93: GFLOPs: 144.6383. Time: 1642.9498 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #94: GFLOPs: 77.5907. Time: 3062.6537 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #95: GFLOPs: 138.9193. Time: 1710.5866 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #96: GFLOPs: 74.2277. Time: 3201.4132 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #97: GFLOPs: 152.2924. Time: 1560.3764 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #98: GFLOPs: 137.6433. Time: 1726.4447 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #99: GFLOPs: 163.3766. Time: 1454.5141 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #100: GFLOPs: 160.2157. Time: 1483.2103 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #101: GFLOPs: 156.5636. Time: 1517.8082 us. Best GFLOPs: 222.2721
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #102: GFLOPs: 228.7346. Time: 1038.9051 us. Best GFLOPs: 228.7346
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #103: GFLOPs: 214.5851. Time: 1107.4092 us. Best GFLOPs: 228.7346
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #104: GFLOPs: 136.6613. Time: 1738.8505 us. Best GFLOPs: 228.7346
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #105: GFLOPs: 85.6548. Time: 2774.3153 us. Best GFLOPs: 228.7346
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #106: GFLOPs: 98.5184. Time: 2412.0737 us. Best GFLOPs: 228.7346
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #107: GFLOPs: 143.3959. Time: 1657.1850 us. Best GFLOPs: 228.7346
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #108: GFLOPs: 195.0215. Time: 1218.4989 us. Best GFLOPs: 228.7346
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #109: GFLOPs: 76.5281. Time: 3105.1805 us. Best GFLOPs: 228.7346
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #110: GFLOPs: 104.9440. Time: 2264.3847 us. Best GFLOPs: 228.7346
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #111: GFLOPs: 102.3277. Time: 2322.2787 us. Best GFLOPs: 228.7346
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #112: GFLOPs: 90.9523. Time: 2612.7267 us. Best GFLOPs: 228.7346
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #113: GFLOPs: 104.8923. Time: 2265.5009 us. Best GFLOPs: 228.7346
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #114: GFLOPs: 77.0931. Time: 3082.4233 us. Best GFLOPs: 228.7346
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #115: GFLOPs: 121.3917. Time: 1957.5758 us. Best GFLOPs: 228.7346
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #116: GFLOPs: 154.0515. Time: 1542.5590 us. Best GFLOPs: 228.7346
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #117: GFLOPs: 74.3455. Time: 3196.3426 us. Best GFLOPs: 228.7346
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #118: GFLOPs: 109.9270. Time: 2161.7397 us. Best GFLOPs: 228.7346
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #119: GFLOPs: 153.8789. Time: 1544.2896 us. Best GFLOPs: 228.7346
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:121] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #120: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(52900)):
            for i4_fused in T.vectorized(T.int64(3)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(230), i0_i1_i2_i3_fused // T.int64(230))
                    v_i3 = T.axis.spatial(T.int64(230), i0_i1_i2_i3_fused % T.int64(230))
                    v_i4 = T.axis.spatial(T.int64(3), i4_fused)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(112) * T.int64(56) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(28) * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4)):
                for oc_block_3_fused in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(112) * T.int64(56) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(28) * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(12544)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(401408))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(401408) // T.int64(3584))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3584) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 28, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 14, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:121] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #121: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(52900)):
            for i4_fused in T.vectorized(T.int64(3)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(230), i0_i1_i2_i3_fused // T.int64(230))
                    v_i3 = T.axis.spatial(T.int64(230), i0_i1_i2_i3_fused % T.int64(230))
                    v_i4 = T.axis.spatial(T.int64(3), i4_fused)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(112) * T.int64(56) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(28) * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(7), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4)):
                for oc_block_3_fused in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(112) * T.int64(56) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(28) * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(12544)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(401408))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(401408) // T.int64(3584))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3584) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 28, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 14, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:121] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #122: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(52900)):
            for i4_fused in T.vectorized(T.int64(3)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(230), i0_i1_i2_i3_fused // T.int64(230))
                    v_i3 = T.axis.spatial(T.int64(230), i0_i1_i2_i3_fused % T.int64(230))
                    v_i4 = T.axis.spatial(T.int64(3), i4_fused)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(4) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(112) * T.int64(56) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4)):
                for oc_block_3_fused in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(224) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(4) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(224) // T.int64(112) * T.int64(56) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(12544)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(401408))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(401408) // T.int64(3584))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3584) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 28, 1, 2])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 14, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 4, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #123: GFLOPs: 346.5248. Time: 685.7620 us. Best GFLOPs: 346.5248
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:121] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #124: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(52900)):
            for i4_fused in T.vectorized(T.int64(3)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(230), i0_i1_i2_i3_fused // T.int64(230))
                    v_i3 = T.axis.spatial(T.int64(230), i0_i1_i2_i3_fused % T.int64(230))
                    v_i4 = T.axis.spatial(T.int64(3), i4_fused)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(4)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(56) * T.int64(56) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(14) * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(4)):
                for oc_block_3_fused in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(56) * T.int64(56) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(14) * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(12544)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(401408))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(401408) // T.int64(3584))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3584) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 14, 1, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 14, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:121] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #125: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for i0_i1_i2_i3_fused in T.parallel(T.int64(52900)):
            for i4_fused in T.vectorized(T.int64(3)):
                with T.block("data_pad"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i2 = T.axis.spatial(T.int64(230), i0_i1_i2_i3_fused // T.int64(230))
                    v_i3 = T.axis.spatial(T.int64(230), i0_i1_i2_i3_fused % T.int64(230))
                    v_i4 = T.axis.spatial(T.int64(3), i4_fused)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                    T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                    data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(4)):
                for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(2) * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(56) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(28) * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(4)):
                for oc_block_3_fused in T.vectorized(T.int64(8)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(2) * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(56) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(28) * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(3), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(7), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(12544)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(401408))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(401408) // T.int64(3584))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3584) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 14, 1, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 14, 4])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[4, 1, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[7, 1])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74 = sch.get_loops(block=b67)
l75 = sch.fuse(l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l75)
l76 = sch.fuse(l74, preserve_unit_iters=True)
sch.vectorize(loop=l76)
l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b68)
l103 = sch.fuse(l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, preserve_unit_iters=True)
sch.parallel(loop=l103)
l104 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l104)
sch.annotate(block_or_loop=l103, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l103, ann_key="pragma_unroll_explicit", ann_val=1)
l105, l106, l107, l108, l109 = sch.get_loops(block=b69)
l110 = sch.fuse(l105, l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112 = sch.split(loop=l110, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l111)
sch.vectorize(loop=l112)
b113 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b113)
b131 = sch.decompose_reduction(block=b113, loop=l115)
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #126: GFLOPs: 2.5982. Time: 91460.3060 us. Best GFLOPs: 346.5248
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #127: GFLOPs: 19.1341. Time: 12419.3732 us. Best GFLOPs: 346.5248
2024-04-28 22:59:14 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #128: GFLOPs: 1.7542. Time: 135463.2460 us. Best GFLOPs: 346.5248
2024-04-29 00:11:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:11:42 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 00:11:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-29 00:11:47 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 00:12:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-29 00:12:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-29 00:12:24 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-29 00:12:37 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-29 00:12:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9852  0.8398  0.7109  0.6924  0.6874  0.6740  0.6589  0.6562  0.6489  0.6451  0.6433  0.6388  0.6388  0.6372  0.6372  0.6336
[17 : 32]:	0.6327  0.6324  0.6278  0.6252  0.6243  0.6205  0.6155  0.6098  0.6098  0.6074  0.6074  0.6072  0.5957  0.5955  0.5894  0.5892
[33 : 48]:	0.5870  0.5870  0.5870  0.5847  0.5811  0.5709  0.5680  0.5661  0.5647  0.5609  0.5565  0.5556  0.5543  0.5531  0.5517  0.5517
[49 : 64]:	0.5505  0.5499  0.5496  0.5491  0.5488  0.5480  0.5445  0.5445  0.5442  0.5438  0.5437  0.5433  0.5424  0.5392  0.5385  0.5371
2024-04-29 00:12:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:12:44 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #129: GFLOPs: 167.9290. Time: 1415.0832 us. Best GFLOPs: 346.5248
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #130: GFLOPs: 122.5369. Time: 1939.2810 us. Best GFLOPs: 346.5248
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #131: GFLOPs: 318.7372. Time: 745.5469 us. Best GFLOPs: 346.5248
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #132: GFLOPs: 150.2924. Time: 1581.1409 us. Best GFLOPs: 346.5248
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #133: GFLOPs: 344.1853. Time: 690.4233 us. Best GFLOPs: 346.5248
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #134: GFLOPs: 193.3465. Time: 1229.0555 us. Best GFLOPs: 346.5248
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:121] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #135: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(7168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(57)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(448) * T.int64(14) + ax3_ax4_fused // T.int64(3))
                        v_i4 = T.axis.spatial(T.int64(3), ax3_ax4_fused % T.int64(3))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(7), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(112) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(448) * T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(112) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(448) * T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                            v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                            v_kw = T.axis.reduce(T.int64(7), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(12544)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(401408))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(401408) // T.int64(3584))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3584) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 112, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[16, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[7, 1])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b67)
l83 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84 = sch.fuse(l81, l82, preserve_unit_iters=True)
sch.vectorize(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l106, l107, l108, l109, l110, preserve_unit_iters=True)
l112, l113 = sch.split(loop=l111, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l112)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b114)
b134 = sch.decompose_reduction(block=b114, loop=l118)
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #136: GFLOPs: 86.3389. Time: 2752.3349 us. Best GFLOPs: 346.5248
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:121] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #137: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused in T.parallel(T.int64(1568), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(21)):
                for ax3_ax4_fused in T.vectorized(T.int64(21)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(784) * T.int64(112) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(98) // T.int64(14) * T.int64(16) + ax2)
                        v_i3 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(784) // T.int64(98) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) * T.int64(2) + ax3_ax4_fused // T.int64(3))
                        v_i4 = T.axis.spatial(T.int64(3), ax3_ax4_fused % T.int64(3))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
            for oc_block_1 in range(T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(784) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(98) // T.int64(14) * T.int64(8) + oh_2_init * T.int64(4) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(784) // T.int64(98) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(8), T.int64(3), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused // T.int64(784) * T.int64(56) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(98) // T.int64(14) * T.int64(8) + oh_2 * T.int64(4) + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(784) // T.int64(98) * T.int64(14) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused_fused % T.int64(14) + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), oc_block_1 * T.int64(32) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                            v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                            v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(12544)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(401408))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(401408) // T.int64(3584))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3584) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 2, 4])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[8, 14, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[1, 1, 8, 4])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b67)
l84 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, l78, preserve_unit_iters=True)
sch.parallel(loop=l84)
l85 = sch.fuse(l82, l83, preserve_unit_iters=True)
sch.vectorize(loop=l85)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l86, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l106, l107, l108, l109, l110, preserve_unit_iters=True)
l112, l113 = sch.split(loop=l111, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l112)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b114)
b133 = sch.decompose_reduction(block=b114, loop=l117)
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #138: GFLOPs: 136.1215. Time: 1745.7462 us. Best GFLOPs: 346.5248
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #139: GFLOPs: 169.1424. Time: 1404.9315 us. Best GFLOPs: 346.5248
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #140: GFLOPs: 120.1591. Time: 1977.6566 us. Best GFLOPs: 346.5248
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #141: GFLOPs: 167.1942. Time: 1421.3026 us. Best GFLOPs: 346.5248
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #142: GFLOPs: 140.2003. Time: 1694.9571 us. Best GFLOPs: 346.5248
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #143: GFLOPs: 167.9572. Time: 1414.8457 us. Best GFLOPs: 346.5248
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #144: GFLOPs: 143.1046. Time: 1660.5588 us. Best GFLOPs: 346.5248
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #145: GFLOPs: 358.6933. Time: 662.4978 us. Best GFLOPs: 358.6933
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #146: GFLOPs: 187.8541. Time: 1264.9899 us. Best GFLOPs: 358.6933
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #147: GFLOPs: 159.8359. Time: 1486.7346 us. Best GFLOPs: 358.6933
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:121] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #148: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1), T.int64(224), T.int64(224), T.int64(3)), "float32"), p1: T.Buffer((T.int64(2), T.int64(1), T.int64(7), T.int64(7), T.int64(3), T.int64(32)), "float32"), p2: T.Buffer((T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(1), T.int64(230), T.int64(230), T.int64(3)))
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused in T.parallel(T.int64(7168), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(57)):
                    with T.block("data_pad"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(230), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(448) * T.int64(14) + ax3_ax4_fused // T.int64(3))
                        v_i4 = T.axis.spatial(T.int64(3), ax3_ax4_fused % T.int64(3))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4])
                        T.writes(data_pad[v_i0, v_i1, v_i2, v_i3, v_i4])
                        data_pad[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(227) and T.int64(3) <= v_i3 and v_i3 < T.int64(227), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3 - T.int64(3), v_i4], T.float32(0))
            for ow_1, oc_block_1 in T.grid(T.int64(7), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(112) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(448) * T.int64(7) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2_init * T.int64(8) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(8)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(2), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(224) // T.int64(112) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(112) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(112), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused // T.int64(448) * T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_fused_fused % T.int64(448) // T.int64(224) * T.int64(16) + oc_block_1 * T.int64(8) + oc_block_2 * T.int64(8) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(3), ic_0 * T.int64(3) + ic_1)
                            v_kh = T.axis.reduce(T.int64(7), kh_0 * T.int64(7) + kh_1)
                            v_kw = T.axis.reduce(T.int64(7), kw_0 * T.int64(7) + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)], p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + data_pad[v_n, v_ic // T.int64(3), v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_ic % T.int64(3)] * p1[v_oc_chunk, v_ic // T.int64(3), v_kh, v_kw, v_ic % T.int64(3), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(12544)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(401408))
                    v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(401408) // T.int64(3584))
                    v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3584) // T.int64(32))
                    v_ax4 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(32))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="data_pad", func_name="main")
b1 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l4, l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l16, l17, l18, l19 = sch.split(loop=l4, factors=[v12, v13, v14, v15], preserve_unit_iters=True)
v20, v21, v22, v23 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l24, l25, l26, l27 = sch.split(loop=l5, factors=[v20, v21, v22, v23], preserve_unit_iters=True)
v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 112, 1, 1])
l32, l33, l34, l35 = sch.split(loop=l6, factors=[v28, v29, v30, v31], preserve_unit_iters=True)
v36, v37, v38, v39 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[16, 7, 1, 1])
l40, l41, l42, l43 = sch.split(loop=l7, factors=[v36, v37, v38, v39], preserve_unit_iters=True)
v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l8, n=4, max_innermost_factor=64, decision=[2, 2, 1, 8])
l48, l49, l50, l51 = sch.split(loop=l8, factors=[v44, v45, v46, v47], preserve_unit_iters=True)
v52, v53 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l54, l55 = sch.split(loop=l9, factors=[v52, v53], preserve_unit_iters=True)
v56, v57 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 7])
l58, l59 = sch.split(loop=l10, factors=[v56, v57], preserve_unit_iters=True)
v60, v61 = sch.sample_perfect_tile(loop=l11, n=2, max_innermost_factor=64, decision=[1, 7])
l62, l63 = sch.split(loop=l11, factors=[v60, v61], preserve_unit_iters=True)
sch.reorder(l16, l24, l32, l40, l48, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50, l55, l59, l63, l19, l27, l35, l43, l51)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
l65 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l65, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b66 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.unroll_explicit")
b67, b68, b69 = sch.get_child_blocks(b66)
l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b67)
l83 = sch.fuse(l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l83)
l84 = sch.fuse(l81, l82, preserve_unit_iters=True)
sch.vectorize(loop=l84)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b68)
l104 = sch.fuse(l85, preserve_unit_iters=True)
sch.parallel(loop=l104)
l105 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l105)
sch.annotate(block_or_loop=l104, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l104, ann_key="pragma_unroll_explicit", ann_val=1)
l106, l107, l108, l109, l110 = sch.get_loops(block=b69)
l111 = sch.fuse(l106, l107, l108, l109, l110, preserve_unit_iters=True)
l112, l113 = sch.split(loop=l111, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l112)
sch.vectorize(loop=l113)
b114 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b114)
b134 = sch.decompose_reduction(block=b114, loop=l118)
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #149: GFLOPs: 499.7832. Time: 475.4732 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #150: GFLOPs: 158.2671. Time: 1501.4716 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #151: GFLOPs: 128.8434. Time: 1844.3594 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #152: GFLOPs: 201.3715. Time: 1180.0756 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #153: GFLOPs: 370.6745. Time: 641.0841 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #154: GFLOPs: 451.7797. Time: 525.9943 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #155: GFLOPs: 477.3887. Time: 497.7779 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #156: GFLOPs: 169.6785. Time: 1400.4930 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #157: GFLOPs: 172.1664. Time: 1380.2549 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #158: GFLOPs: 203.6019. Time: 1167.1478 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #159: GFLOPs: 201.2640. Time: 1180.7053 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #160: GFLOPs: 95.8479. Time: 2479.2779 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #161: GFLOPs: 290.6673. Time: 817.5448 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #162: GFLOPs: 197.9441. Time: 1200.5082 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #163: GFLOPs: 91.2640. Time: 2603.8042 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #164: GFLOPs: 211.4831. Time: 1123.6524 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #165: GFLOPs: 349.6114. Time: 679.7076 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #166: GFLOPs: 107.8507. Time: 2203.3572 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #167: GFLOPs: 152.2958. Time: 1560.3422 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #168: GFLOPs: 192.9174. Time: 1231.7887 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #169: GFLOPs: 193.3807. Time: 1228.8378 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #170: GFLOPs: 145.6041. Time: 1632.0529 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #171: GFLOPs: 177.3120. Time: 1340.2003 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #172: GFLOPs: 167.6017. Time: 1417.8467 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #173: GFLOPs: 112.9500. Time: 2103.8825 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #174: GFLOPs: 209.4287. Time: 1134.6753 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #175: GFLOPs: 182.5782. Time: 1301.5439 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #176: GFLOPs: 163.8245. Time: 1450.5370 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #177: GFLOPs: 227.3349. Time: 1045.3016 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #178: GFLOPs: 166.1278. Time: 1430.4261 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #179: GFLOPs: 147.7035. Time: 1608.8547 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #180: GFLOPs: 159.8988. Time: 1486.1497 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #181: GFLOPs: 197.5110. Time: 1203.1405 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #182: GFLOPs: 144.3160. Time: 1646.6197 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #183: GFLOPs: 101.3446. Time: 2344.8080 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #184: GFLOPs: 134.8858. Time: 1761.7383 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #185: GFLOPs: 183.2069. Time: 1297.0776 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #186: GFLOPs: 156.8690. Time: 1514.8532 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #187: GFLOPs: 180.7200. Time: 1314.9266 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #188: GFLOPs: 221.1261. Time: 1074.6517 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #189: GFLOPs: 92.9469. Time: 2556.6595 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #190: GFLOPs: 40.9357. Time: 5805.0401 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #191: GFLOPs: 90.3958. Time: 2628.8127 us. Best GFLOPs: 499.7832
2024-04-29 00:14:21 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #192: GFLOPs: 101.9022. Time: 2331.9756 us. Best GFLOPs: 499.7832
2024-04-29 01:51:24 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:51:25 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:51:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-29 01:51:30 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 01:51:43 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-29 01:51:55 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-29 01:52:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-29 01:52:20 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-29 01:52:28 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8646  0.8641  0.8366  0.8107  0.7740  0.7543  0.7523  0.7435  0.7305  0.7293  0.7293  0.7225  0.7186  0.7154  0.7143  0.7143
[17 : 32]:	0.7125  0.7008  0.6966  0.6966  0.6966  0.6937  0.6937  0.6937  0.6937  0.6937  0.6937  0.6937  0.6937  0.6937  0.6881  0.6797
[33 : 48]:	0.6797  0.6797  0.6797  0.6796  0.6789  0.6789  0.6780  0.6699  0.6699  0.6674  0.6665  0.6665  0.6603  0.6588  0.6572  0.6546
[49 : 64]:	0.6542  0.6526  0.6509  0.6497  0.6480  0.6465  0.6432  0.6422  0.6385  0.6378  0.6373  0.6373  0.6363  0.6341  0.6331  0.6331
2024-04-29 01:52:28 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:52:28 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #193: GFLOPs: 160.6413. Time: 1479.2806 us. Best GFLOPs: 499.7832
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #194: GFLOPs: 169.4231. Time: 1402.6039 us. Best GFLOPs: 499.7832
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #195: GFLOPs: 72.9623. Time: 3256.9353 us. Best GFLOPs: 499.7832
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #196: GFLOPs: 158.3319. Time: 1500.8572 us. Best GFLOPs: 499.7832
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #197: GFLOPs: 162.9649. Time: 1458.1888 us. Best GFLOPs: 499.7832
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #198: GFLOPs: 617.4738. Time: 384.8479 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #199: GFLOPs: 408.2994. Time: 582.0081 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #200: GFLOPs: 187.6598. Time: 1266.2998 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #201: GFLOPs: 194.8106. Time: 1219.8182 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #202: GFLOPs: 201.1778. Time: 1181.2115 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #203: GFLOPs: 237.7276. Time: 999.6043 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #204: GFLOPs: 231.2551. Time: 1027.5817 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #205: GFLOPs: 183.0880. Time: 1297.9196 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #206: GFLOPs: 139.7630. Time: 1700.2601 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #207: GFLOPs: 365.2594. Time: 650.5885 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #208: GFLOPs: 375.3482. Time: 633.1016 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #209: GFLOPs: 213.8303. Time: 1111.3184 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #210: GFLOPs: 215.3932. Time: 1103.2546 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #211: GFLOPs: 185.7212. Time: 1279.5173 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #212: GFLOPs: 229.2861. Time: 1036.4063 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #213: GFLOPs: 232.2998. Time: 1022.9605 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #214: GFLOPs: 393.7590. Time: 603.4999 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #215: GFLOPs: 222.1456. Time: 1069.7196 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #216: GFLOPs: 231.5579. Time: 1026.2383 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #217: GFLOPs: 393.7539. Time: 603.5078 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #218: GFLOPs: 393.6023. Time: 603.7402 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #219: GFLOPs: 393.3015. Time: 604.2019 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #220: GFLOPs: 390.3663. Time: 608.7450 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #221: GFLOPs: 396.2886. Time: 599.6477 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #222: GFLOPs: 393.6230. Time: 603.7084 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #223: GFLOPs: 184.1939. Time: 1290.1268 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #224: GFLOPs: 142.4791. Time: 1667.8481 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #225: GFLOPs: 398.6259. Time: 596.1316 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #226: GFLOPs: 393.1484. Time: 604.4373 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #227: GFLOPs: 393.4383. Time: 603.9918 us. Best GFLOPs: 617.4738
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #228: GFLOPs: 644.5578. Time: 368.6768 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #229: GFLOPs: 188.5301. Time: 1260.4544 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #230: GFLOPs: 231.3487. Time: 1027.1660 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #231: GFLOPs: 385.2295. Time: 616.8623 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #232: GFLOPs: 197.1935. Time: 1205.0782 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #233: GFLOPs: 198.5693. Time: 1196.7284 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #234: GFLOPs: 265.4742. Time: 895.1285 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #235: GFLOPs: 168.9972. Time: 1406.1385 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #236: GFLOPs: 169.2271. Time: 1404.2285 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #237: GFLOPs: 135.6488. Time: 1751.8296 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #238: GFLOPs: 396.4020. Time: 599.4762 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #239: GFLOPs: 392.8472. Time: 604.9006 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #240: GFLOPs: 216.8187. Time: 1096.0013 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #241: GFLOPs: 391.6001. Time: 606.8270 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #242: GFLOPs: 362.7324. Time: 655.1208 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #243: GFLOPs: 184.8561. Time: 1285.5054 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #244: GFLOPs: 209.8953. Time: 1132.1529 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #245: GFLOPs: 363.0636. Time: 654.5231 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #246: GFLOPs: 177.5926. Time: 1338.0821 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #247: GFLOPs: 396.7860. Time: 598.8960 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #248: GFLOPs: 199.1398. Time: 1193.3003 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #249: GFLOPs: 168.4798. Time: 1410.4567 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #250: GFLOPs: 191.2384. Time: 1242.6036 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #251: GFLOPs: 405.5827. Time: 585.9065 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #252: GFLOPs: 234.4663. Time: 1013.5081 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #253: GFLOPs: 137.5301. Time: 1727.8657 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #254: GFLOPs: 73.7511. Time: 3222.1003 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #255: GFLOPs: 107.8864. Time: 2202.6281 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #256: GFLOPs: 3.6377. Time: 65326.0387 us. Best GFLOPs: 644.5578
2024-04-29 01:54:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:54:20 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:54:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-29 01:54:25 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 01:54:38 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-29 01:54:50 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-29 01:55:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-29 01:55:16 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb04fda8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5be3038)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0xaf31c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9cf8978)]: 0 failure(s)
2024-04-29 01:55:23 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8605  0.7248  0.6918  0.6769  0.6404  0.6187  0.6014  0.6014  0.5975  0.5969  0.5952  0.5952  0.5935  0.5935  0.5935  0.5935
[17 : 32]:	0.5935  0.5935  0.5935  0.5935  0.5935  0.5934  0.5918  0.5904  0.5789  0.5789  0.5789  0.5789  0.5789  0.5789  0.5789  0.5789
[33 : 48]:	0.5784  0.5762  0.5762  0.5762  0.5762  0.5762  0.5762  0.5762  0.5696  0.5662  0.5626  0.5523  0.5506  0.5506  0.5506  0.5482
[49 : 64]:	0.5401  0.5341  0.5341  0.5341  0.5341  0.5333  0.5333  0.5332  0.5332  0.5239  0.5220  0.5201  0.5177  0.5105  0.5105  0.5105
2024-04-29 01:55:24 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:55:24 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #257: GFLOPs: 633.4078. Time: 375.1667 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #258: GFLOPs: 588.7937. Time: 403.5939 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #259: GFLOPs: 506.3600. Time: 469.2976 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #260: GFLOPs: 131.6291. Time: 1805.3271 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #261: GFLOPs: 601.5319. Time: 395.0473 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #262: GFLOPs: 189.6623. Time: 1252.9294 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #263: GFLOPs: 397.3938. Time: 597.9800 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #264: GFLOPs: 215.5882. Time: 1102.2569 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #265: GFLOPs: 207.9758. Time: 1142.6018 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #266: GFLOPs: 392.6286. Time: 605.2375 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #267: GFLOPs: 191.5442. Time: 1240.6196 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #268: GFLOPs: 212.6603. Time: 1117.4326 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #269: GFLOPs: 223.4820. Time: 1063.3231 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #270: GFLOPs: 396.9966. Time: 598.5783 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #271: GFLOPs: 396.9653. Time: 598.6255 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #272: GFLOPs: 402.3949. Time: 590.5481 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #273: GFLOPs: 226.6342. Time: 1048.5335 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #274: GFLOPs: 225.9334. Time: 1051.7858 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #275: GFLOPs: 405.3641. Time: 586.2225 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #276: GFLOPs: 397.1771. Time: 598.3063 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #277: GFLOPs: 377.4135. Time: 629.6370 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #278: GFLOPs: 375.6007. Time: 632.6760 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #279: GFLOPs: 123.3122. Time: 1927.0890 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #280: GFLOPs: 151.1627. Time: 1572.0386 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #281: GFLOPs: 367.8399. Time: 646.0243 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #282: GFLOPs: 368.1230. Time: 645.5276 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #283: GFLOPs: 368.5978. Time: 644.6961 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #284: GFLOPs: 373.4535. Time: 636.3137 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #285: GFLOPs: 373.1488. Time: 636.8331 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #286: GFLOPs: 194.7872. Time: 1219.9648 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #287: GFLOPs: 368.2895. Time: 645.2358 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #288: GFLOPs: 376.3832. Time: 631.3606 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #289: GFLOPs: 227.3628. Time: 1045.1735 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #290: GFLOPs: 185.0896. Time: 1283.8838 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #291: GFLOPs: 221.5433. Time: 1072.6280 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #292: GFLOPs: 234.8175. Time: 1011.9925 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #293: GFLOPs: 376.8914. Time: 630.5093 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #294: GFLOPs: 234.5417. Time: 1013.1825 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #295: GFLOPs: 386.5560. Time: 614.7455 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #296: GFLOPs: 197.5078. Time: 1203.1601 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #297: GFLOPs: 404.7212. Time: 587.1537 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #298: GFLOPs: 164.2460. Time: 1446.8151 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #299: GFLOPs: 389.7329. Time: 609.7344 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #300: GFLOPs: 159.0454. Time: 1494.1243 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #301: GFLOPs: 117.0757. Time: 2029.7434 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #302: GFLOPs: 233.2690. Time: 1018.7103 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #303: GFLOPs: 154.8838. Time: 1534.2698 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #304: GFLOPs: 602.0407. Time: 394.7134 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #305: GFLOPs: 377.1452. Time: 630.0851 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #306: GFLOPs: 152.3503. Time: 1559.7843 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #307: GFLOPs: 121.4944. Time: 1955.9216 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #308: GFLOPs: 190.4360. Time: 1247.8396 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #309: GFLOPs: 161.0469. Time: 1475.5547 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #310: GFLOPs: 79.8905. Time: 2974.4893 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #311: GFLOPs: 60.2456. Time: 3944.4153 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #312: GFLOPs: 152.3190. Time: 1560.1041 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #313: GFLOPs: 152.9956. Time: 1553.2045 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #314: GFLOPs: 183.5618. Time: 1294.5697 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #315: GFLOPs: 399.2522. Time: 595.1966 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #316: GFLOPs: 373.1705. Time: 636.7961 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #317: GFLOPs: 571.7136. Time: 415.6513 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #318: GFLOPs: 70.5567. Time: 3367.9788 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #319: GFLOPs: 151.3078. Time: 1570.5307 us. Best GFLOPs: 644.5578
2024-04-29 01:57:08 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_57] Trial #320: GFLOPs: 109.9271. Time: 2161.7374 us. Best GFLOPs: 644.5578
