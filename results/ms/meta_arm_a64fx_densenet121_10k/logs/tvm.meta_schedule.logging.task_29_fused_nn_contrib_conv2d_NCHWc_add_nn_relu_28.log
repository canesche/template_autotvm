2024-04-28 20:45:42 [INFO] [task_scheduler.cc:160] Initializing Task #29: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28"
2024-04-28 20:45:42 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(152), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(152), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4), T.int64(608), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:45:42 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:45:42 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(152), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(152), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(608), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(608), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[608, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:45:42 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(152), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(152), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(608), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(608), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[608, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:45:42 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(152), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(152), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(608), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(16) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(608), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_0 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 1, 2, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[608, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 21:32:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:32:58 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:33:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x98d9ca8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e80e18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x895e148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x343ca48)]: 0 failure(s)
2024-04-28 21:33:00 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:33:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x98d9ca8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e80e18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x895e148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x343ca48)]: 0 failure(s)
2024-04-28 21:33:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x98d9ca8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e80e18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x895e148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x343ca48)]: 0 failure(s)
2024-04-28 21:33:09 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x98d9ca8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e80e18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x895e148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x343ca48)]: 0 failure(s)
2024-04-28 21:33:12 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x98d9ca8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e80e18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x895e148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x343ca48)]: 0 failure(s)
2024-04-28 21:33:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9990  0.9989  0.9987  0.9983  0.9981  0.9976  0.9974  0.9969  0.9968  0.9965  0.9959  0.9953  0.9951  0.9950  0.9943
[17 : 32]:	0.9931  0.9927  0.9906  0.9906  0.9901  0.9897  0.9896  0.9896  0.9896  0.9888  0.9884  0.9877  0.9870  0.9869  0.9868  0.9863
[33 : 48]:	0.9857  0.9856  0.9845  0.9840  0.9836  0.9836  0.9828  0.9828  0.9812  0.9812  0.9798  0.9793  0.9788  0.9779  0.9779  0.9774
[49 : 64]:	0.9773  0.9761  0.9752  0.9748  0.9747  0.9732  0.9718  0.9714  0.9708  0.9707  0.9701  0.9696  0.9693  0.9691  0.9688  0.9671
2024-04-28 21:33:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:33:13 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #1: GFLOPs: 44.2312. Time: 690.8509 us. Best GFLOPs: 44.2312
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #2: GFLOPs: 20.4897. Time: 1491.3472 us. Best GFLOPs: 44.2312
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #3: GFLOPs: 91.1196. Time: 335.3525 us. Best GFLOPs: 91.1196
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #4: GFLOPs: 6.9283. Time: 4410.4815 us. Best GFLOPs: 91.1196
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #5: GFLOPs: 40.0272. Time: 763.4111 us. Best GFLOPs: 91.1196
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #6: GFLOPs: 83.3917. Time: 366.4297 us. Best GFLOPs: 91.1196
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #7: GFLOPs: 109.6309. Time: 278.7279 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #8: GFLOPs: 78.5361. Time: 389.0846 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #9: GFLOPs: 77.7342. Time: 393.0986 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #10: GFLOPs: 6.9848. Time: 4374.8329 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #11: GFLOPs: 46.2293. Time: 660.9921 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #12: GFLOPs: 41.6110. Time: 734.3534 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #13: GFLOPs: 52.6917. Time: 579.9243 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #14: GFLOPs: 16.7527. Time: 1824.0101 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #15: GFLOPs: 0.6757. Time: 45222.1675 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #16: GFLOPs: 48.4851. Time: 630.2385 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #17: GFLOPs: 109.4987. Time: 279.0644 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #18: GFLOPs: 4.4929. Time: 6801.2237 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #19: GFLOPs: 51.5814. Time: 592.4073 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #20: GFLOPs: 0.7581. Time: 40304.9438 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #21: GFLOPs: 6.9805. Time: 4377.5284 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #22: GFLOPs: 11.3284. Time: 2697.4074 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #23: GFLOPs: 36.6200. Time: 834.4386 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #24: GFLOPs: 78.6795. Time: 388.3756 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #25: GFLOPs: 28.7655. Time: 1062.2877 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #26: GFLOPs: 74.6144. Time: 409.5346 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #27: GFLOPs: 1.2012. Time: 25438.8135 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #28: GFLOPs: 16.5800. Time: 1843.0128 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #29: GFLOPs: 41.7031. Time: 732.7313 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #30: GFLOPs: 46.0516. Time: 663.5416 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #31: GFLOPs: 22.2792. Time: 1371.5569 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #32: GFLOPs: 26.4589. Time: 1154.8915 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #33: GFLOPs: 58.3811. Time: 523.4090 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #34: GFLOPs: 98.8177. Time: 309.2277 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #35: GFLOPs: 22.3222. Time: 1368.9160 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #36: GFLOPs: 33.0156. Time: 925.5379 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:121] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #37: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(152), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(152), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(2) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(14) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(608), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(2) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(14) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(608), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 32, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[608, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #38: GFLOPs: 45.2417. Time: 675.4204 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:121] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #39: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(152), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(152), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2_init * T.int64(7) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(2), T.int64(38), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(608), ic_0 * T.int64(38) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(14)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 16, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 38])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
sch.annotate(block_or_loop=l68, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l68, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b67)
l104 = sch.fuse(l102, l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b105)
b132 = sch.decompose_reduction(block=b105, loop=l116)
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #40: GFLOPs: 29.8814. Time: 1022.6167 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #41: GFLOPs: 7.1811. Time: 4255.2065 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #42: GFLOPs: 11.0475. Time: 2765.9829 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #43: GFLOPs: 89.7384. Time: 340.5142 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #44: GFLOPs: 89.6780. Time: 340.7435 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #45: GFLOPs: 12.5363. Time: 2437.5006 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #46: GFLOPs: 11.9870. Time: 2549.1947 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:121] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #47: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(152), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(152), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(152), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(608), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(14), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(8) + ax1)
                    v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[152, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b101)
b124 = sch.decompose_reduction(block=b101, loop=l108)
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #48: GFLOPs: 54.0063. Time: 565.8073 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #49: GFLOPs: 36.3756. Time: 840.0454 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #50: GFLOPs: 56.6237. Time: 539.6539 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #51: GFLOPs: 14.6604. Time: 2084.3379 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #52: GFLOPs: 19.8264. Time: 1541.2401 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #53: GFLOPs: 3.0667. Time: 9964.1259 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #54: GFLOPs: 31.8789. Time: 958.5395 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #55: GFLOPs: 2.3948. Time: 12759.8209 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #56: GFLOPs: 9.2787. Time: 3293.2786 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #57: GFLOPs: 22.4234. Time: 1362.7383 us. Best GFLOPs: 109.6309
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #58: GFLOPs: 137.0502. Time: 222.9635 us. Best GFLOPs: 137.0502
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #59: GFLOPs: 29.3504. Time: 1041.1161 us. Best GFLOPs: 137.0502
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #60: GFLOPs: 53.3848. Time: 572.3946 us. Best GFLOPs: 137.0502
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #61: GFLOPs: 2.7769. Time: 11004.2219 us. Best GFLOPs: 137.0502
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #62: GFLOPs: 131.2154. Time: 232.8780 us. Best GFLOPs: 137.0502
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #63: GFLOPs: 11.1169. Time: 2748.7220 us. Best GFLOPs: 137.0502
2024-04-28 22:43:57 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #64: GFLOPs: 81.9040. Time: 373.0855 us. Best GFLOPs: 137.0502
2024-04-29 01:03:12 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:03:12 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 01:03:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x98d9ca8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e80e18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x895e148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x343ca48)]: 0 failure(s)
2024-04-29 01:03:15 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 01:03:20 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x98d9ca8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e80e18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x895e148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x343ca48)]: 0 failure(s)
2024-04-29 01:03:25 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x98d9ca8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e80e18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x895e148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x343ca48)]: 0 failure(s)
2024-04-29 01:03:31 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x98d9ca8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e80e18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x895e148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x343ca48)]: 0 failure(s)
2024-04-29 01:03:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x98d9ca8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5e80e18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x895e148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x343ca48)]: 0 failure(s)
2024-04-29 01:03:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9383  0.9164  0.9064  0.8421  0.8390  0.8283  0.8258  0.8225  0.8156  0.8140  0.8129  0.8010  0.8001  0.7966  0.7939  0.7935
[17 : 32]:	0.7917  0.7884  0.7868  0.7854  0.7835  0.7817  0.7795  0.7718  0.7700  0.7685  0.7683  0.7668  0.7584  0.7549  0.7537  0.7535
[33 : 48]:	0.7484  0.7438  0.7432  0.7431  0.7402  0.7380  0.7346  0.7344  0.7339  0.7334  0.7320  0.7309  0.7309  0.7309  0.7269  0.7249
[49 : 64]:	0.7243  0.7239  0.7198  0.7196  0.7192  0.7173  0.7164  0.7158  0.7155  0.7151  0.7149  0.7147  0.7145  0.7133  0.7125  0.7108
2024-04-29 01:03:39 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:03:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #65: GFLOPs: 114.0353. Time: 267.9624 us. Best GFLOPs: 137.0502
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #66: GFLOPs: 70.9738. Time: 430.5415 us. Best GFLOPs: 137.0502
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #67: GFLOPs: 273.8857. Time: 111.5691 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #68: GFLOPs: 134.3920. Time: 227.3735 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #69: GFLOPs: 187.2670. Time: 163.1744 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #70: GFLOPs: 257.8274. Time: 118.5180 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #71: GFLOPs: 161.4364. Time: 189.2831 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #72: GFLOPs: 142.2361. Time: 214.8342 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #73: GFLOPs: 169.8133. Time: 179.9458 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #74: GFLOPs: 132.5912. Time: 230.4616 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #75: GFLOPs: 135.6649. Time: 225.2402 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #76: GFLOPs: 140.8729. Time: 216.9132 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #77: GFLOPs: 147.1430. Time: 207.6700 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #78: GFLOPs: 146.2476. Time: 208.9414 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #79: GFLOPs: 127.7478. Time: 239.1993 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #80: GFLOPs: 103.3128. Time: 295.7733 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #81: GFLOPs: 108.7988. Time: 280.8595 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #82: GFLOPs: 107.1999. Time: 285.0486 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #83: GFLOPs: 259.8565. Time: 117.5926 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #84: GFLOPs: 168.8171. Time: 181.0076 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #85: GFLOPs: 127.7204. Time: 239.2505 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #86: GFLOPs: 111.1053. Time: 275.0290 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #87: GFLOPs: 147.7005. Time: 206.8861 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #88: GFLOPs: 116.6263. Time: 262.0095 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #89: GFLOPs: 130.6090. Time: 233.9593 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #90: GFLOPs: 126.0714. Time: 242.3800 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #91: GFLOPs: 140.7092. Time: 217.1655 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #92: GFLOPs: 140.5433. Time: 217.4218 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #93: GFLOPs: 142.1180. Time: 215.0128 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #94: GFLOPs: 130.9252. Time: 233.3942 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #95: GFLOPs: 113.8978. Time: 268.2859 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #96: GFLOPs: 27.9998. Time: 1091.3376 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #97: GFLOPs: 168.4020. Time: 181.4538 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #98: GFLOPs: 113.1750. Time: 269.9995 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #99: GFLOPs: 108.5296. Time: 281.5562 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #100: GFLOPs: 121.0168. Time: 252.5036 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #101: GFLOPs: 114.5460. Time: 266.7678 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #102: GFLOPs: 79.2754. Time: 385.4559 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #103: GFLOPs: 106.1784. Time: 287.7910 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #104: GFLOPs: 141.5761. Time: 215.8358 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #105: GFLOPs: 165.3156. Time: 184.8415 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #106: GFLOPs: 272.3494. Time: 112.1984 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #107: GFLOPs: 119.1485. Time: 256.4630 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #108: GFLOPs: 120.3920. Time: 253.8141 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #109: GFLOPs: 122.1182. Time: 250.2264 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #110: GFLOPs: 123.5366. Time: 247.3532 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #111: GFLOPs: 150.7185. Time: 202.7434 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #112: GFLOPs: 144.2115. Time: 211.8914 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #113: GFLOPs: 186.8371. Time: 163.5499 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #114: GFLOPs: 130.4981. Time: 234.1581 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #115: GFLOPs: 155.2490. Time: 196.8269 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #116: GFLOPs: 97.1752. Time: 314.4545 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #117: GFLOPs: 172.8641. Time: 176.7700 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #118: GFLOPs: 105.4167. Time: 289.8704 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #119: GFLOPs: 133.0103. Time: 229.7354 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #120: GFLOPs: 175.2788. Time: 174.3347 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #121: GFLOPs: 176.7833. Time: 172.8511 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #122: GFLOPs: 156.3064. Time: 195.4955 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #123: GFLOPs: 142.5971. Time: 214.2904 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #124: GFLOPs: 128.3194. Time: 238.1338 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #125: GFLOPs: 150.5068. Time: 203.0286 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #126: GFLOPs: 2.8529. Time: 10710.7600 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #127: GFLOPs: 43.9501. Time: 695.2697 us. Best GFLOPs: 273.8857
2024-04-29 01:05:12 [INFO] [task_scheduler.cc:131] [Task #29: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_28] Trial #128: GFLOPs: 2.7626. Time: 11060.9362 us. Best GFLOPs: 273.8857
