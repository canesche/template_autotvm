2024-04-28 20:46:32 [INFO] [task_scheduler.cc:160] Initializing Task #42: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40"
2024-04-28 20:46:32 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(480), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:46:32 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:46:32 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1), T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(12) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[40, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:46:32 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(40), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_1 * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[40, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:46:32 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(1), T.int64(1), T.int64(40), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(12) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(2), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[40, 12])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 21:52:25 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:52:25 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:52:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9df34e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x84d19c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bb0418)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8736c58)]: 0 failure(s)
2024-04-28 21:52:28 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:52:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9df34e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x84d19c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bb0418)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8736c58)]: 0 failure(s)
2024-04-28 21:52:34 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9df34e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x84d19c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bb0418)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8736c58)]: 0 failure(s)
2024-04-28 21:52:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9df34e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x84d19c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bb0418)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8736c58)]: 0 failure(s)
2024-04-28 21:52:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9df34e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x84d19c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bb0418)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8736c58)]: 0 failure(s)
2024-04-28 21:52:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9997  0.9994  0.9969  0.9963  0.9963  0.9957  0.9951  0.9945  0.9945  0.9911  0.9908  0.9901  0.9899  0.9888  0.9887
[17 : 32]:	0.9872  0.9866  0.9865  0.9859  0.9844  0.9842  0.9837  0.9830  0.9827  0.9819  0.9813  0.9810  0.9810  0.9810  0.9804  0.9797
[33 : 48]:	0.9797  0.9784  0.9781  0.9781  0.9777  0.9777  0.9772  0.9771  0.9765  0.9757  0.9754  0.9749  0.9744  0.9741  0.9737  0.9736
[49 : 64]:	0.9735  0.9735  0.9727  0.9727  0.9722  0.9721  0.9717  0.9717  0.9710  0.9710  0.9709  0.9697  0.9697  0.9673  0.9665  0.9663
2024-04-28 21:52:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:52:41 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #1: GFLOPs: 95.2277. Time: 1013.7660 us. Best GFLOPs: 95.2277
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #2: GFLOPs: 130.5964. Time: 739.2137 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #3: GFLOPs: 65.5872. Time: 1471.9117 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #4: GFLOPs: 115.9138. Time: 832.8482 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #5: GFLOPs: 52.9262. Time: 1824.0250 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #6: GFLOPs: 24.0509. Time: 4013.9333 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #7: GFLOPs: 85.2863. Time: 1131.9360 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #8: GFLOPs: 14.5677. Time: 6626.9159 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #9: GFLOPs: 100.2053. Time: 963.4086 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #10: GFLOPs: 125.1820. Time: 771.1864 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #11: GFLOPs: 85.6762. Time: 1126.7849 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #12: GFLOPs: 73.7191. Time: 1309.5475 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #13: GFLOPs: 40.3394. Time: 2393.1594 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #14: GFLOPs: 53.6066. Time: 1800.8712 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #15: GFLOPs: 90.4133. Time: 1067.7484 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #16: GFLOPs: 68.8413. Time: 1402.3367 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #17: GFLOPs: 25.2294. Time: 3826.4315 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #18: GFLOPs: 125.8958. Time: 766.8140 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #19: GFLOPs: 122.2745. Time: 789.5235 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #20: GFLOPs: 83.1966. Time: 1160.3670 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #21: GFLOPs: 73.6235. Time: 1311.2477 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #22: GFLOPs: 67.4422. Time: 1431.4277 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #23: GFLOPs: 27.4579. Time: 3515.8798 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #24: GFLOPs: 50.2932. Time: 1919.5151 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #25: GFLOPs: 27.2001. Time: 3549.2012 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #26: GFLOPs: 87.6299. Time: 1101.6636 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #27: GFLOPs: 18.7197. Time: 5157.0495 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #28: GFLOPs: 1.5351. Time: 62889.3590 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #29: GFLOPs: 56.0628. Time: 1721.9736 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #30: GFLOPs: 64.5145. Time: 1496.3859 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #31: GFLOPs: 54.2993. Time: 1777.8984 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #32: GFLOPs: 121.8012. Time: 792.5917 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #33: GFLOPs: 81.1991. Time: 1188.9119 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #34: GFLOPs: 38.2902. Time: 2521.2386 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #35: GFLOPs: 122.9974. Time: 784.8834 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #36: GFLOPs: 111.0012. Time: 869.7080 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #37: GFLOPs: 19.2692. Time: 5010.0093 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #38: GFLOPs: 94.0780. Time: 1026.1549 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #39: GFLOPs: 78.1521. Time: 1235.2664 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #40: GFLOPs: 23.2862. Time: 4145.7388 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #41: GFLOPs: 50.0077. Time: 1930.4752 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #42: GFLOPs: 3.6816. Time: 26221.8023 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #43: GFLOPs: 24.3805. Time: 3959.6670 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #44: GFLOPs: 35.8766. Time: 2690.8504 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #45: GFLOPs: 76.3621. Time: 1264.2225 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #46: GFLOPs: 73.1176. Time: 1320.3203 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #47: GFLOPs: 31.2456. Time: 3089.6722 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #48: GFLOPs: 75.4369. Time: 1279.7264 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #49: GFLOPs: 57.7905. Time: 1670.4941 us. Best GFLOPs: 130.5964
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #50: GFLOPs: 240.4351. Time: 401.5163 us. Best GFLOPs: 240.4351
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #51: GFLOPs: 104.7876. Time: 921.2789 us. Best GFLOPs: 240.4351
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #52: GFLOPs: 89.9445. Time: 1073.3137 us. Best GFLOPs: 240.4351
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #53: GFLOPs: 52.4377. Time: 1841.0170 us. Best GFLOPs: 240.4351
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #54: GFLOPs: 48.2972. Time: 1998.8463 us. Best GFLOPs: 240.4351
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #55: GFLOPs: 203.3203. Time: 474.8106 us. Best GFLOPs: 240.4351
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #56: GFLOPs: 17.0716. Time: 5654.9289 us. Best GFLOPs: 240.4351
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #57: GFLOPs: 123.3664. Time: 782.5360 us. Best GFLOPs: 240.4351
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #58: GFLOPs: 116.5079. Time: 828.6016 us. Best GFLOPs: 240.4351
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #59: GFLOPs: 58.4817. Time: 1650.7484 us. Best GFLOPs: 240.4351
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #60: GFLOPs: 71.3828. Time: 1352.4076 us. Best GFLOPs: 240.4351
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #61: GFLOPs: 144.3361. Time: 668.8461 us. Best GFLOPs: 240.4351
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #62: GFLOPs: 77.4764. Time: 1246.0395 us. Best GFLOPs: 240.4351
2024-04-28 22:45:04 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #63: GFLOPs: 51.2837. Time: 1882.4409 us. Best GFLOPs: 240.4351
2024-04-28 23:50:20 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:50:21 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-28 23:50:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9df34e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x84d19c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bb0418)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8736c58)]: 0 failure(s)
2024-04-28 23:50:23 [INFO] [evolutionary_search.cc:723] Sampled 449 candidate(s)
2024-04-28 23:50:28 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9df34e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x84d19c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bb0418)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8736c58)]: 0 failure(s)
2024-04-28 23:50:33 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9df34e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x84d19c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bb0418)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8736c58)]: 0 failure(s)
2024-04-28 23:50:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9df34e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x84d19c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bb0418)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8736c58)]: 0 failure(s)
2024-04-28 23:50:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9df34e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x84d19c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5bb0418)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8736c58)]: 0 failure(s)
2024-04-28 23:50:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9503  0.9075  0.8917  0.8916  0.8868  0.8694  0.8519  0.8422  0.8114  0.8079  0.8029  0.8002  0.7988  0.7887  0.7881  0.7856
[17 : 32]:	0.7818  0.7817  0.7817  0.7816  0.7816  0.7736  0.7732  0.7674  0.7669  0.7651  0.7630  0.7615  0.7567  0.7504  0.7477  0.7477
[33 : 48]:	0.7471  0.7467  0.7434  0.7433  0.7404  0.7361  0.7342  0.7319  0.7249  0.7232  0.7185  0.7099  0.7058  0.6959  0.6949  0.6948
[49 : 64]:	0.6944  0.6906  0.6850  0.6846  0.6844  0.6814  0.6795  0.6766  0.6748  0.6726  0.6724  0.6724  0.6693  0.6648  0.6647  0.6591
2024-04-28 23:50:48 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:50:48 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #64: GFLOPs: 114.3956. Time: 843.9019 us. Best GFLOPs: 240.4351
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #65: GFLOPs: 54.3364. Time: 1776.6827 us. Best GFLOPs: 240.4351
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #66: GFLOPs: 69.4290. Time: 1390.4662 us. Best GFLOPs: 240.4351
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #67: GFLOPs: 136.8618. Time: 705.3730 us. Best GFLOPs: 240.4351
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #68: GFLOPs: 129.4906. Time: 745.5262 us. Best GFLOPs: 240.4351
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #69: GFLOPs: 258.4749. Time: 373.4932 us. Best GFLOPs: 258.4749
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #70: GFLOPs: 201.6578. Time: 478.7249 us. Best GFLOPs: 258.4749
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #71: GFLOPs: 203.1992. Time: 475.0936 us. Best GFLOPs: 258.4749
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #72: GFLOPs: 146.6008. Time: 658.5138 us. Best GFLOPs: 258.4749
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #73: GFLOPs: 101.4783. Time: 951.3225 us. Best GFLOPs: 258.4749
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #74: GFLOPs: 168.7649. Time: 572.0303 us. Best GFLOPs: 258.4749
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #75: GFLOPs: 111.5593. Time: 865.3568 us. Best GFLOPs: 258.4749
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #76: GFLOPs: 160.8844. Time: 600.0497 us. Best GFLOPs: 258.4749
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #77: GFLOPs: 91.4776. Time: 1055.3250 us. Best GFLOPs: 258.4749
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #78: GFLOPs: 57.3771. Time: 1682.5291 us. Best GFLOPs: 258.4749
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #79: GFLOPs: 176.9485. Time: 545.5747 us. Best GFLOPs: 258.4749
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #80: GFLOPs: 145.8598. Time: 661.8590 us. Best GFLOPs: 258.4749
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:121] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #81: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(8) * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(120), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(8) * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(8) * T.int64(4) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 8, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[120, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:121] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #82: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(120), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(120), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(480), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(4) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 4, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[120, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #83: GFLOPs: 261.3248. Time: 369.4201 us. Best GFLOPs: 261.3248
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #84: GFLOPs: 260.2135. Time: 370.9977 us. Best GFLOPs: 261.3248
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #85: GFLOPs: 154.6635. Time: 624.1848 us. Best GFLOPs: 261.3248
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #86: GFLOPs: 92.8899. Time: 1039.2796 us. Best GFLOPs: 261.3248
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #87: GFLOPs: 159.8113. Time: 604.0790 us. Best GFLOPs: 261.3248
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #88: GFLOPs: 76.1417. Time: 1267.8804 us. Best GFLOPs: 261.3248
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #89: GFLOPs: 186.8473. Time: 516.6713 us. Best GFLOPs: 261.3248
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #90: GFLOPs: 169.4520. Time: 569.7107 us. Best GFLOPs: 261.3248
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #91: GFLOPs: 145.9213. Time: 661.5800 us. Best GFLOPs: 261.3248
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #92: GFLOPs: 77.7227. Time: 1242.0903 us. Best GFLOPs: 261.3248
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #93: GFLOPs: 174.4502. Time: 553.3879 us. Best GFLOPs: 261.3248
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #94: GFLOPs: 291.4229. Time: 331.2664 us. Best GFLOPs: 291.4229
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #95: GFLOPs: 291.8974. Time: 330.7280 us. Best GFLOPs: 291.8974
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #96: GFLOPs: 169.4015. Time: 569.8805 us. Best GFLOPs: 291.8974
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #97: GFLOPs: 112.2140. Time: 860.3085 us. Best GFLOPs: 291.8974
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #98: GFLOPs: 264.8554. Time: 364.4956 us. Best GFLOPs: 291.8974
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #99: GFLOPs: 159.0240. Time: 607.0695 us. Best GFLOPs: 291.8974
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #100: GFLOPs: 156.6333. Time: 616.3352 us. Best GFLOPs: 291.8974
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #101: GFLOPs: 170.2068. Time: 567.1843 us. Best GFLOPs: 291.8974
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #102: GFLOPs: 131.5125. Time: 734.0641 us. Best GFLOPs: 291.8974
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #103: GFLOPs: 247.8713. Time: 389.4708 us. Best GFLOPs: 291.8974
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #104: GFLOPs: 96.4160. Time: 1001.2721 us. Best GFLOPs: 291.8974
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #105: GFLOPs: 135.1864. Time: 714.1151 us. Best GFLOPs: 291.8974
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #106: GFLOPs: 92.7187. Time: 1041.1987 us. Best GFLOPs: 291.8974
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #107: GFLOPs: 147.0704. Time: 656.4109 us. Best GFLOPs: 291.8974
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #108: GFLOPs: 322.6939. Time: 299.1647 us. Best GFLOPs: 322.6939
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #109: GFLOPs: 110.6467. Time: 872.4941 us. Best GFLOPs: 322.6939
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #110: GFLOPs: 151.2615. Time: 638.2233 us. Best GFLOPs: 322.6939
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #111: GFLOPs: 148.9117. Time: 648.2944 us. Best GFLOPs: 322.6939
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #112: GFLOPs: 152.4818. Time: 633.1159 us. Best GFLOPs: 322.6939
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #113: GFLOPs: 169.6755. Time: 568.9604 us. Best GFLOPs: 322.6939
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #114: GFLOPs: 156.4114. Time: 617.2098 us. Best GFLOPs: 322.6939
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #115: GFLOPs: 167.4143. Time: 576.6451 us. Best GFLOPs: 322.6939
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #116: GFLOPs: 148.5048. Time: 650.0707 us. Best GFLOPs: 322.6939
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #117: GFLOPs: 150.7439. Time: 640.4146 us. Best GFLOPs: 322.6939
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #118: GFLOPs: 150.0112. Time: 643.5426 us. Best GFLOPs: 322.6939
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #119: GFLOPs: 108.9329. Time: 886.2208 us. Best GFLOPs: 322.6939
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #120: GFLOPs: 46.7781. Time: 2063.7568 us. Best GFLOPs: 322.6939
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #121: GFLOPs: 152.0546. Time: 634.8944 us. Best GFLOPs: 322.6939
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #122: GFLOPs: 53.7391. Time: 1796.4310 us. Best GFLOPs: 322.6939
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #123: GFLOPs: 109.4216. Time: 882.2629 us. Best GFLOPs: 322.6939
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #124: GFLOPs: 101.1901. Time: 954.0326 us. Best GFLOPs: 322.6939
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #125: GFLOPs: 104.1509. Time: 926.9109 us. Best GFLOPs: 322.6939
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #126: GFLOPs: 72.2381. Time: 1336.3943 us. Best GFLOPs: 322.6939
2024-04-28 23:52:25 [INFO] [task_scheduler.cc:131] [Task #42: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_40] Trial #127: GFLOPs: 64.2154. Time: 1503.3560 us. Best GFLOPs: 322.6939
