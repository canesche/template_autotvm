2024-04-28 20:45:34 [INFO] [task_scheduler.cc:160] Initializing Task #27: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26"
2024-04-28 20:45:34 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(168), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(168), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4), T.int64(672), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:45:34 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:45:34 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(168), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(168), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(672), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(672), ic_0 + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[672, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:45:34 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(168), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(168), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(672), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(672), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(14), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[672, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:45:34 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(168), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(168), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(672), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(672), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(14), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[672, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 21:30:03 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:30:03 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:30:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6882268)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5f56978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c50a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb408ab8)]: 0 failure(s)
2024-04-28 21:30:06 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:30:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6882268)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5f56978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c50a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb408ab8)]: 0 failure(s)
2024-04-28 21:30:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6882268)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5f56978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c50a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb408ab8)]: 0 failure(s)
2024-04-28 21:30:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6882268)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5f56978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c50a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb408ab8)]: 0 failure(s)
2024-04-28 21:30:18 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6882268)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5f56978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c50a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb408ab8)]: 0 failure(s)
2024-04-28 21:30:19 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9995  0.9989  0.9983  0.9975  0.9971  0.9966  0.9965  0.9964  0.9961  0.9954  0.9949  0.9941  0.9938  0.9932  0.9930
[17 : 32]:	0.9923  0.9918  0.9912  0.9909  0.9905  0.9900  0.9899  0.9898  0.9897  0.9888  0.9888  0.9882  0.9880  0.9880  0.9873  0.9872
[33 : 48]:	0.9867  0.9858  0.9845  0.9841  0.9841  0.9829  0.9823  0.9822  0.9815  0.9813  0.9809  0.9804  0.9803  0.9799  0.9798  0.9796
[49 : 64]:	0.9788  0.9781  0.9778  0.9777  0.9776  0.9770  0.9770  0.9765  0.9762  0.9761  0.9751  0.9750  0.9749  0.9728  0.9724  0.9716
2024-04-28 21:30:19 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:30:19 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #1: GFLOPs: 31.6428. Time: 1067.1772 us. Best GFLOPs: 31.6428
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #2: GFLOPs: 1.1288. Time: 29914.5165 us. Best GFLOPs: 31.6428
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #3: GFLOPs: 13.8802. Time: 2432.8523 us. Best GFLOPs: 31.6428
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #4: GFLOPs: 53.6133. Time: 629.8516 us. Best GFLOPs: 53.6133
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #5: GFLOPs: 8.8627. Time: 3810.1709 us. Best GFLOPs: 53.6133
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #6: GFLOPs: 3.5964. Time: 9389.5879 us. Best GFLOPs: 53.6133
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #7: GFLOPs: 5.8597. Time: 5762.8551 us. Best GFLOPs: 53.6133
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #8: GFLOPs: 7.2255. Time: 4673.4833 us. Best GFLOPs: 53.6133
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #9: GFLOPs: 51.5886. Time: 654.5716 us. Best GFLOPs: 53.6133
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #10: GFLOPs: 2.5644. Time: 13168.3207 us. Best GFLOPs: 53.6133
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:121] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #11: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(168), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(168), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(336), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(672), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 1, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[336, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #12: GFLOPs: 12.8183. Time: 2634.3866 us. Best GFLOPs: 53.6133
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #13: GFLOPs: 6.1221. Time: 5515.8348 us. Best GFLOPs: 53.6133
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #14: GFLOPs: 28.6102. Time: 1180.2939 us. Best GFLOPs: 53.6133
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #15: GFLOPs: 30.0652. Time: 1123.1751 us. Best GFLOPs: 53.6133
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #16: GFLOPs: 45.8632. Time: 736.2866 us. Best GFLOPs: 53.6133
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #17: GFLOPs: 10.3554. Time: 3260.9393 us. Best GFLOPs: 53.6133
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #18: GFLOPs: 1.3976. Time: 24161.1343 us. Best GFLOPs: 53.6133
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #19: GFLOPs: 24.1140. Time: 1400.3660 us. Best GFLOPs: 53.6133
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #20: GFLOPs: 134.6277. Time: 250.8285 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #21: GFLOPs: 86.7311. Time: 389.3466 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #22: GFLOPs: 4.7699. Time: 7079.5602 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #23: GFLOPs: 25.1621. Time: 1342.0371 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #24: GFLOPs: 116.7556. Time: 289.2235 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #25: GFLOPs: 6.5675. Time: 5141.7861 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #26: GFLOPs: 44.0928. Time: 765.8494 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #27: GFLOPs: 14.5421. Time: 2322.1219 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #28: GFLOPs: 31.2976. Time: 1078.9482 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #29: GFLOPs: 23.1699. Time: 1457.4263 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #30: GFLOPs: 97.5436. Time: 346.1884 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:121] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #31: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(168), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(168), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused in T.parallel(T.int64(784), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(196) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(2) * T.int64(4) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(196) // T.int64(28) * T.int64(2) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(28) // T.int64(4) * T.int64(2) + ow_1 + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(56), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused // T.int64(196) * T.int64(8) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(2) * T.int64(4) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(196) // T.int64(28) * T.int64(2) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(28) // T.int64(4) * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(672), ic_0 * T.int64(56) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(392)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 4, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[12, 56])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b102)
b123 = sch.decompose_reduction(block=b102, loop=l107)
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #32: GFLOPs: 69.5814. Time: 485.3086 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #33: GFLOPs: 20.5875. Time: 1640.2393 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #34: GFLOPs: 6.6021. Time: 5114.7889 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:121] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #35: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(168), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(168), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(7)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(168), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(7)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(672), ic_0 * T.int64(4) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[32, 1, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[168, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #36: GFLOPs: 17.5190. Time: 1927.5319 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #37: GFLOPs: 18.1555. Time: 1859.9519 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #38: GFLOPs: 77.8294. Time: 433.8779 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #39: GFLOPs: 8.6273. Time: 3914.1359 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #40: GFLOPs: 6.5774. Time: 5134.0281 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #41: GFLOPs: 5.5949. Time: 6035.5812 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #42: GFLOPs: 114.9682. Time: 293.7200 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #43: GFLOPs: 113.0438. Time: 298.7200 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #44: GFLOPs: 68.4304. Time: 493.4713 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #45: GFLOPs: 2.5759. Time: 13109.4652 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #46: GFLOPs: 81.1372. Time: 416.1892 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #47: GFLOPs: 35.3346. Time: 955.6763 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #48: GFLOPs: 104.5329. Time: 323.0412 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #49: GFLOPs: 67.2744. Time: 501.9510 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #50: GFLOPs: 73.4537. Time: 459.7243 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #51: GFLOPs: 3.4914. Time: 9671.8214 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #52: GFLOPs: 73.7852. Time: 457.6589 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #53: GFLOPs: 58.9752. Time: 572.5873 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #54: GFLOPs: 17.7284. Time: 1904.7623 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #55: GFLOPs: 82.8538. Time: 407.5665 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #56: GFLOPs: 49.2183. Time: 686.0950 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #57: GFLOPs: 69.8806. Time: 483.2304 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #58: GFLOPs: 48.4966. Time: 696.3059 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #59: GFLOPs: 22.6885. Time: 1488.3497 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #60: GFLOPs: 39.7232. Time: 850.0948 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #61: GFLOPs: 46.5957. Time: 724.7120 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #62: GFLOPs: 57.1165. Time: 591.2208 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #63: GFLOPs: 91.1869. Time: 370.3213 us. Best GFLOPs: 134.6277
2024-04-28 22:43:48 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #64: GFLOPs: 1.8746. Time: 18013.4235 us. Best GFLOPs: 134.6277
2024-04-29 00:43:13 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:43:14 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 00:43:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6882268)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5f56978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c50a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb408ab8)]: 0 failure(s)
2024-04-29 00:43:16 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 00:43:21 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6882268)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5f56978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c50a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb408ab8)]: 0 failure(s)
2024-04-29 00:43:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6882268)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5f56978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c50a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb408ab8)]: 0 failure(s)
2024-04-29 00:43:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6882268)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5f56978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c50a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb408ab8)]: 0 failure(s)
2024-04-29 00:43:37 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6882268)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5f56978)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c50a78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb408ab8)]: 0 failure(s)
2024-04-29 00:43:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9549  0.9531  0.9464  0.9463  0.9454  0.9314  0.9243  0.9236  0.9104  0.9052  0.9014  0.9009  0.8617  0.8594  0.8577  0.8538
[17 : 32]:	0.8389  0.8315  0.8297  0.8261  0.8252  0.8232  0.8184  0.8165  0.8165  0.8160  0.8139  0.8136  0.8127  0.8121  0.8121  0.8116
[33 : 48]:	0.8099  0.8057  0.8051  0.8024  0.8009  0.7989  0.7973  0.7964  0.7913  0.7885  0.7880  0.7879  0.7879  0.7878  0.7865  0.7852
[49 : 64]:	0.7801  0.7783  0.7743  0.7741  0.7716  0.7695  0.7662  0.7661  0.7659  0.7652  0.7639  0.7611  0.7587  0.7555  0.7552  0.7536
2024-04-29 00:43:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:43:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #65: GFLOPs: 91.8460. Time: 367.6636 us. Best GFLOPs: 134.6277
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #66: GFLOPs: 107.3619. Time: 314.5293 us. Best GFLOPs: 134.6277
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #67: GFLOPs: 193.4988. Time: 174.5150 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #68: GFLOPs: 152.2702. Time: 221.7666 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #69: GFLOPs: 167.1283. Time: 202.0511 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #70: GFLOPs: 160.4863. Time: 210.4132 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #71: GFLOPs: 119.1126. Time: 283.5003 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #72: GFLOPs: 145.7957. Time: 231.6148 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #73: GFLOPs: 158.0109. Time: 213.7095 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #74: GFLOPs: 117.1302. Time: 288.2984 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #75: GFLOPs: 165.9022. Time: 203.5443 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #76: GFLOPs: 164.4938. Time: 205.2870 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #77: GFLOPs: 147.8691. Time: 228.3672 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #78: GFLOPs: 167.6583. Time: 201.4123 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #79: GFLOPs: 116.6667. Time: 289.4439 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #80: GFLOPs: 120.6432. Time: 279.9035 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #81: GFLOPs: 126.5756. Time: 266.7848 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #82: GFLOPs: 13.1757. Time: 2562.9243 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #83: GFLOPs: 190.3949. Time: 177.3601 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #84: GFLOPs: 157.7054. Time: 214.1236 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #85: GFLOPs: 133.7924. Time: 252.3944 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #86: GFLOPs: 109.6533. Time: 307.9564 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #87: GFLOPs: 110.5598. Time: 305.4316 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #88: GFLOPs: 134.8690. Time: 250.3796 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #89: GFLOPs: 134.3143. Time: 251.4137 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #90: GFLOPs: 173.5280. Time: 194.5994 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #91: GFLOPs: 83.6943. Time: 403.4735 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #92: GFLOPs: 141.9914. Time: 237.8204 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #93: GFLOPs: 138.9407. Time: 243.0422 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #94: GFLOPs: 154.7524. Time: 218.2095 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #95: GFLOPs: 123.5067. Time: 273.4139 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #96: GFLOPs: 58.5177. Time: 577.0640 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #97: GFLOPs: 77.9235. Time: 433.3540 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #98: GFLOPs: 75.2612. Time: 448.6834 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #99: GFLOPs: 99.4265. Time: 339.6322 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #100: GFLOPs: 117.8562. Time: 286.5225 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #101: GFLOPs: 142.9719. Time: 236.1894 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #102: GFLOPs: 157.3527. Time: 214.6035 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #103: GFLOPs: 85.9682. Time: 392.8017 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #104: GFLOPs: 116.9135. Time: 288.8327 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #105: GFLOPs: 116.6219. Time: 289.5549 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #106: GFLOPs: 156.8898. Time: 215.2367 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #107: GFLOPs: 119.5171. Time: 282.5407 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #108: GFLOPs: 112.6392. Time: 299.7929 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #109: GFLOPs: 110.5168. Time: 305.5505 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #110: GFLOPs: 151.6840. Time: 222.6237 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #111: GFLOPs: 120.0418. Time: 281.3058 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #112: GFLOPs: 113.7524. Time: 296.8592 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #113: GFLOPs: 123.9447. Time: 272.4476 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #114: GFLOPs: 129.2313. Time: 261.3025 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #115: GFLOPs: 108.8490. Time: 310.2319 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #116: GFLOPs: 124.5584. Time: 271.1054 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #117: GFLOPs: 94.5971. Time: 356.9712 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #118: GFLOPs: 136.9626. Time: 246.5523 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #119: GFLOPs: 122.5418. Time: 275.5668 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #120: GFLOPs: 107.2118. Time: 314.9694 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #121: GFLOPs: 97.8541. Time: 345.0897 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #122: GFLOPs: 156.5969. Time: 215.6394 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #123: GFLOPs: 133.9986. Time: 252.0060 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #124: GFLOPs: 105.5689. Time: 319.8712 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #125: GFLOPs: 137.8600. Time: 244.9473 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:121] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #126: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(168), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(168), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(168), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(672), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[168, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #127: GFLOPs: 6.5379. Time: 5164.9936 us. Best GFLOPs: 193.4988
2024-04-29 00:45:20 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_26] Trial #128: GFLOPs: 106.1940. Time: 317.9883 us. Best GFLOPs: 193.4988
