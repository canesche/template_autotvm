2024-04-28 20:47:27 [INFO] [task_scheduler.cc:160] Initializing Task #56: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53"
2024-04-28 20:47:27 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(40), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4), T.int64(160), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:47:27 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:47:27 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(40), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(28) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(8) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 14, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[20, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:47:27 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(40), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(28) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(14), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(56), oh_1 * T.int64(28) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 14, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[20, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:47:27 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(40), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(14), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_0 * T.int64(56) + oh_1 * T.int64(28) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(8) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(28), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(56), ow_0 * T.int64(28) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 2, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 14, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[20, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 22:14:12 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:14:12 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 22:14:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6a12288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6296318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x72e3d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x97678a8)]: 0 failure(s)
2024-04-28 22:14:14 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 22:14:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6a12288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6296318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x72e3d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x97678a8)]: 0 failure(s)
2024-04-28 22:14:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6a12288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6296318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x72e3d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x97678a8)]: 0 failure(s)
2024-04-28 22:14:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6a12288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6296318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x72e3d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x97678a8)]: 0 failure(s)
2024-04-28 22:14:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6a12288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6296318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x72e3d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x97678a8)]: 0 failure(s)
2024-04-28 22:14:28 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9992  0.9992  0.9988  0.9971  0.9962  0.9959  0.9958  0.9949  0.9940  0.9938  0.9934  0.9925  0.9921  0.9913  0.9911
[17 : 32]:	0.9904  0.9899  0.9895  0.9890  0.9881  0.9877  0.9875  0.9873  0.9872  0.9855  0.9843  0.9832  0.9822  0.9814  0.9805  0.9805
[33 : 48]:	0.9802  0.9802  0.9798  0.9798  0.9788  0.9786  0.9785  0.9783  0.9781  0.9780  0.9770  0.9758  0.9750  0.9749  0.9744  0.9742
[49 : 64]:	0.9731  0.9726  0.9722  0.9719  0.9719  0.9716  0.9714  0.9698  0.9674  0.9668  0.9665  0.9659  0.9652  0.9648  0.9644  0.9640
2024-04-28 22:14:28 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:14:28 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #1: GFLOPs: 46.1092. Time: 2803.2019 us. Best GFLOPs: 46.1092
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #2: GFLOPs: 44.8472. Time: 2882.0823 us. Best GFLOPs: 46.1092
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #3: GFLOPs: 23.5615. Time: 5485.7938 us. Best GFLOPs: 46.1092
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #4: GFLOPs: 1.6923. Time: 76378.2497 us. Best GFLOPs: 46.1092
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #5: GFLOPs: 18.2613. Time: 7077.9921 us. Best GFLOPs: 46.1092
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #6: GFLOPs: 85.8027. Time: 1506.4029 us. Best GFLOPs: 85.8027
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #7: GFLOPs: 51.4035. Time: 2514.4879 us. Best GFLOPs: 85.8027
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #8: GFLOPs: 94.3999. Time: 1369.2112 us. Best GFLOPs: 94.3999
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #9: GFLOPs: 52.3892. Time: 2467.1762 us. Best GFLOPs: 94.3999
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #10: GFLOPs: 80.6872. Time: 1601.9070 us. Best GFLOPs: 94.3999
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #11: GFLOPs: 32.4573. Time: 3982.2557 us. Best GFLOPs: 94.3999
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #12: GFLOPs: 76.8492. Time: 1681.9082 us. Best GFLOPs: 94.3999
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #13: GFLOPs: 4.9892. Time: 25906.4718 us. Best GFLOPs: 94.3999
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #14: GFLOPs: 117.4642. Time: 1100.3638 us. Best GFLOPs: 117.4642
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #15: GFLOPs: 106.0982. Time: 1218.2434 us. Best GFLOPs: 117.4642
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #16: GFLOPs: 3.1527. Time: 40997.3590 us. Best GFLOPs: 117.4642
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #17: GFLOPs: 59.1865. Time: 2183.8314 us. Best GFLOPs: 117.4642
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #18: GFLOPs: 300.9411. Time: 429.4972 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #19: GFLOPs: 82.4713. Time: 1567.2532 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #20: GFLOPs: 113.5869. Time: 1137.9249 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #21: GFLOPs: 88.8604. Time: 1454.5663 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #22: GFLOPs: 0.4881. Time: 264830.6327 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #23: GFLOPs: 11.8316. Time: 10924.3772 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:121] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #24: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(40), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused in T.parallel(T.int64(4)):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(8)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), ow_2_init * T.int64(8) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(80), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(8)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), ow_2 * T.int64(8) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(56)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused_fused * T.int64(14) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_fused])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 8])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[80, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l96, preserve_unit_iters=True)
sch.parallel(loop=l102)
l103 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #25: GFLOPs: 94.7756. Time: 1363.7839 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #26: GFLOPs: 8.2186. Time: 15726.8730 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #27: GFLOPs: 67.0960. Time: 1926.3955 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #28: GFLOPs: 60.9789. Time: 2119.6420 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #29: GFLOPs: 84.0544. Time: 1537.7351 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #30: GFLOPs: 75.6114. Time: 1709.4429 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #31: GFLOPs: 27.4328. Time: 4711.6447 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #32: GFLOPs: 43.6517. Time: 2961.0132 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #33: GFLOPs: 64.3661. Time: 2008.0961 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:121] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #34: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(40), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(1024), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(128) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(56), oh_2_init * T.int64(8) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(128) // T.int64(16) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(128) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(56), oh_2 * T.int64(8) + oh_3)
                    v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(128) // T.int64(16) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(8) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(56), T.int64(7), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(128) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(56), ax2)
                    v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(128) // T.int64(16) * T.int64(7) + ax3)
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 4, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 8])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[8, 1, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[20, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b101)
b119 = sch.decompose_reduction(block=b101, loop=l103)
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #35: GFLOPs: 67.5725. Time: 1912.8090 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #36: GFLOPs: 76.1553. Time: 1697.2339 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #37: GFLOPs: 73.4890. Time: 1758.8121 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:121] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #38: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(40), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_block_1 in range(T.int64(4)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(14) * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) // T.int64(7) * T.int64(28) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) * T.int64(8) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(160), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused // T.int64(14) * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(14) // T.int64(7) * T.int64(28) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_fused % T.int64(7) * T.int64(8) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 4, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 4, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[160, 1])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=8)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, preserve_unit_iters=True)
sch.parallel(loop=l93)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98 = sch.get_loops(block=b66)
l99 = sch.fuse(l94, l95, l96, l97, l98, preserve_unit_iters=True)
l100, l101 = sch.split(loop=l99, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b102)
b121 = sch.decompose_reduction(block=b102, loop=l105)
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #39: GFLOPs: 8.8434. Time: 14615.7957 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #40: GFLOPs: 98.4868. Time: 1312.3928 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #41: GFLOPs: 38.0152. Time: 3400.0484 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #42: GFLOPs: 4.0998. Time: 31526.9220 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #43: GFLOPs: 41.5649. Time: 3109.6758 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #44: GFLOPs: 19.8850. Time: 6500.0569 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #45: GFLOPs: 223.7806. Time: 577.5896 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #46: GFLOPs: 54.8281. Time: 2357.4301 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #47: GFLOPs: 48.4956. Time: 2665.2622 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #48: GFLOPs: 38.2489. Time: 3379.2705 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #49: GFLOPs: 135.5916. Time: 953.2550 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #50: GFLOPs: 12.7040. Time: 10174.2439 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #51: GFLOPs: 40.2399. Time: 3212.0668 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #52: GFLOPs: 85.7231. Time: 1507.8009 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #53: GFLOPs: 26.2057. Time: 4932.2612 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #54: GFLOPs: 21.6775. Time: 5962.5525 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #55: GFLOPs: 57.8196. Time: 2235.4580 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #56: GFLOPs: 146.1729. Time: 884.2500 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #57: GFLOPs: 97.7703. Time: 1322.0101 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #58: GFLOPs: 18.6370. Time: 6935.3214 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #59: GFLOPs: 19.1636. Time: 6744.7503 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #60: GFLOPs: 87.8066. Time: 1472.0240 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #61: GFLOPs: 24.0559. Time: 5373.0322 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #62: GFLOPs: 0.6009. Time: 215089.2480 us. Best GFLOPs: 300.9411
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:121] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #63: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(40), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(56), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(56), T.int64(4)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), oh_2_init * T.int64(56) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(8) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(56), T.int64(4)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), oh_2 * T.int64(56) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) // T.int64(4) * T.int64(8) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(10) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(6272)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(12544))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(12544) // T.int64(224))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(224) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 56])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 10])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-28 22:46:32 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #64: GFLOPs: 14.1495. Time: 9134.8443 us. Best GFLOPs: 300.9411
2024-04-28 23:45:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:45:38 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-28 23:45:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6a12288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6296318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x72e3d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x97678a8)]: 0 failure(s)
2024-04-28 23:45:40 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-28 23:45:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6a12288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6296318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x72e3d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x97678a8)]: 0 failure(s)
2024-04-28 23:45:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6a12288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6296318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x72e3d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x97678a8)]: 0 failure(s)
2024-04-28 23:45:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6a12288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6296318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x72e3d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x97678a8)]: 0 failure(s)
2024-04-28 23:46:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6a12288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6296318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x72e3d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x97678a8)]: 0 failure(s)
2024-04-28 23:46:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9945  0.9398  0.8718  0.8573  0.8549  0.8549  0.8512  0.8392  0.8270  0.8199  0.8172  0.8170  0.8109  0.7939  0.7875  0.7875
[17 : 32]:	0.7786  0.7783  0.7658  0.7597  0.7592  0.7519  0.7310  0.7136  0.7136  0.7110  0.6991  0.6987  0.6885  0.6883  0.6879  0.6868
[33 : 48]:	0.6846  0.6822  0.6774  0.6774  0.6695  0.6674  0.6674  0.6668  0.6643  0.6614  0.6603  0.6574  0.6574  0.6554  0.6553  0.6552
[49 : 64]:	0.6551  0.6533  0.6521  0.6508  0.6500  0.6441  0.6426  0.6426  0.6426  0.6354  0.6330  0.6319  0.6276  0.6167  0.6134  0.6124
2024-04-28 23:46:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:46:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #65: GFLOPs: 293.5758. Time: 440.2725 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #66: GFLOPs: 212.9966. Time: 606.8330 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #67: GFLOPs: 284.8850. Time: 453.7038 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #68: GFLOPs: 186.6563. Time: 692.4674 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #69: GFLOPs: 294.8627. Time: 438.3510 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #70: GFLOPs: 287.1955. Time: 450.0537 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #71: GFLOPs: 290.0199. Time: 445.6707 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #72: GFLOPs: 298.8094. Time: 432.5613 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #73: GFLOPs: 293.8495. Time: 439.8625 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #74: GFLOPs: 287.0513. Time: 450.2798 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #75: GFLOPs: 273.3343. Time: 472.8765 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #76: GFLOPs: 278.0695. Time: 464.8240 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #77: GFLOPs: 277.9342. Time: 465.0502 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #78: GFLOPs: 269.4528. Time: 479.6885 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #79: GFLOPs: 208.1393. Time: 620.9946 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #80: GFLOPs: 267.1960. Time: 483.7400 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #81: GFLOPs: 152.9640. Time: 844.9919 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #82: GFLOPs: 253.4416. Time: 509.9926 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #83: GFLOPs: 218.8477. Time: 590.6088 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #84: GFLOPs: 256.3136. Time: 504.2782 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #85: GFLOPs: 269.3368. Time: 479.8950 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #86: GFLOPs: 164.1886. Time: 787.2249 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #87: GFLOPs: 163.1666. Time: 792.1558 us. Best GFLOPs: 300.9411
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #88: GFLOPs: 306.1278. Time: 422.2203 us. Best GFLOPs: 306.1278
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #89: GFLOPs: 301.8348. Time: 428.2256 us. Best GFLOPs: 306.1278
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #90: GFLOPs: 222.2402. Time: 581.5931 us. Best GFLOPs: 306.1278
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #91: GFLOPs: 77.4391. Time: 1669.0980 us. Best GFLOPs: 306.1278
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #92: GFLOPs: 152.8163. Time: 845.8087 us. Best GFLOPs: 306.1278
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #93: GFLOPs: 148.5121. Time: 870.3220 us. Best GFLOPs: 306.1278
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #94: GFLOPs: 139.6342. Time: 925.6570 us. Best GFLOPs: 306.1278
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #95: GFLOPs: 308.5182. Time: 418.9489 us. Best GFLOPs: 308.5182
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #96: GFLOPs: 174.9345. Time: 738.8674 us. Best GFLOPs: 308.5182
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #97: GFLOPs: 314.7628. Time: 410.6374 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #98: GFLOPs: 307.4689. Time: 420.3786 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #99: GFLOPs: 280.4469. Time: 460.8835 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #100: GFLOPs: 294.2538. Time: 439.2581 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #101: GFLOPs: 309.9229. Time: 417.0501 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #102: GFLOPs: 110.1226. Time: 1173.7223 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #103: GFLOPs: 109.9556. Time: 1175.5054 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #104: GFLOPs: 109.4956. Time: 1180.4440 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #105: GFLOPs: 122.1697. Time: 1057.9824 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #106: GFLOPs: 299.3406. Time: 431.7937 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:121] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #107: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(56), T.int64(56), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(40), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2_init * T.int64(4) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(196) // T.int64(14) * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(196) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(196) // T.int64(14) * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(196) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(160), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(4)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(196) // T.int64(14) * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(56), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(196) * T.int64(28) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(14) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 8, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 2, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 14, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[5, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #108: GFLOPs: 108.2824. Time: 1193.6694 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #109: GFLOPs: 108.2779. Time: 1193.7189 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #110: GFLOPs: 148.1523. Time: 872.4357 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #111: GFLOPs: 275.9553. Time: 468.3852 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #112: GFLOPs: 139.0182. Time: 929.7587 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #113: GFLOPs: 159.6140. Time: 809.7870 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #114: GFLOPs: 295.0937. Time: 438.0079 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #115: GFLOPs: 109.1864. Time: 1183.7865 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #116: GFLOPs: 75.4803. Time: 1712.4132 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #117: GFLOPs: 108.8797. Time: 1187.1213 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #118: GFLOPs: 129.5690. Time: 997.5643 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #119: GFLOPs: 147.3365. Time: 877.2662 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #120: GFLOPs: 149.8966. Time: 862.2834 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #121: GFLOPs: 109.7778. Time: 1177.4093 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #122: GFLOPs: 187.4494. Time: 689.5374 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #123: GFLOPs: 178.0154. Time: 726.0797 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #124: GFLOPs: 263.4101. Time: 490.6925 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #125: GFLOPs: 290.0175. Time: 445.6745 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #126: GFLOPs: 103.0174. Time: 1254.6747 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #127: GFLOPs: 39.5832. Time: 3265.3615 us. Best GFLOPs: 314.7628
2024-04-28 23:47:44 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #128: GFLOPs: 202.9687. Time: 636.8143 us. Best GFLOPs: 314.7628
2024-04-29 01:16:22 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:16:23 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:16:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6a12288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6296318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x72e3d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x97678a8)]: 0 failure(s)
2024-04-29 01:16:25 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 01:16:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6a12288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6296318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x72e3d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x97678a8)]: 0 failure(s)
2024-04-29 01:16:36 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6a12288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6296318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x72e3d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x97678a8)]: 0 failure(s)
2024-04-29 01:16:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6a12288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6296318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x72e3d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x97678a8)]: 0 failure(s)
2024-04-29 01:16:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6a12288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x6296318)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x72e3d28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x97678a8)]: 0 failure(s)
2024-04-29 01:16:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0314  1.0217  1.0079  1.0013  0.9956  0.9847  0.9801  0.9777  0.9773  0.9773  0.9744  0.9737  0.9737  0.9725  0.9722  0.9713
[17 : 32]:	0.9697  0.9696  0.9694  0.9680  0.9680  0.9647  0.9647  0.9618  0.9579  0.9579  0.9568  0.9566  0.9565  0.9533  0.9533  0.9517
[33 : 48]:	0.9498  0.9476  0.9474  0.9468  0.9437  0.9323  0.9323  0.9301  0.9299  0.9290  0.9249  0.9215  0.9215  0.9215  0.9215  0.9209
[49 : 64]:	0.9199  0.9176  0.9176  0.9174  0.9172  0.9131  0.9108  0.9108  0.9108  0.9108  0.9101  0.9088  0.9088  0.9070  0.9019  0.9012
2024-04-29 01:16:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:16:52 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #129: GFLOPs: 294.2584. Time: 439.2513 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #130: GFLOPs: 296.0972. Time: 436.5234 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #131: GFLOPs: 277.3695. Time: 465.9971 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #132: GFLOPs: 275.4589. Time: 469.2293 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #133: GFLOPs: 290.2451. Time: 445.3249 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #134: GFLOPs: 293.7217. Time: 440.0540 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #135: GFLOPs: 292.3296. Time: 442.1495 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #136: GFLOPs: 278.3545. Time: 464.3481 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #137: GFLOPs: 294.6930. Time: 438.6035 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #138: GFLOPs: 294.5672. Time: 438.7908 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #139: GFLOPs: 294.1348. Time: 439.4358 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #140: GFLOPs: 287.1925. Time: 450.0583 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #141: GFLOPs: 227.0981. Time: 569.1521 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #142: GFLOPs: 254.8184. Time: 507.2372 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #143: GFLOPs: 278.0172. Time: 464.9114 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #144: GFLOPs: 281.5473. Time: 459.0823 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #145: GFLOPs: 274.8103. Time: 470.3367 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #146: GFLOPs: 261.3370. Time: 494.5850 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #147: GFLOPs: 294.1790. Time: 439.3698 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #148: GFLOPs: 277.4404. Time: 465.8780 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #149: GFLOPs: 278.4522. Time: 464.1852 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #150: GFLOPs: 249.7528. Time: 517.5253 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #151: GFLOPs: 283.3842. Time: 456.1064 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #152: GFLOPs: 278.2415. Time: 464.5367 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #153: GFLOPs: 292.5502. Time: 441.8161 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #154: GFLOPs: 293.0925. Time: 440.9985 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #155: GFLOPs: 273.8370. Time: 472.0084 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #156: GFLOPs: 290.6441. Time: 444.7136 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #157: GFLOPs: 294.0662. Time: 439.5383 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #158: GFLOPs: 285.4015. Time: 452.8827 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #159: GFLOPs: 287.2551. Time: 449.9603 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #160: GFLOPs: 278.1944. Time: 464.6152 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #161: GFLOPs: 285.6059. Time: 452.5585 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #162: GFLOPs: 242.7563. Time: 532.4408 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #163: GFLOPs: 276.5047. Time: 467.4545 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #164: GFLOPs: 278.9318. Time: 463.3869 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #165: GFLOPs: 276.1035. Time: 468.1338 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #166: GFLOPs: 274.1447. Time: 471.4787 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #167: GFLOPs: 278.3416. Time: 464.3696 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #168: GFLOPs: 264.5679. Time: 488.5452 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #169: GFLOPs: 291.6556. Time: 443.1713 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #170: GFLOPs: 273.4925. Time: 472.6030 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #171: GFLOPs: 258.6738. Time: 499.6771 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #172: GFLOPs: 253.2742. Time: 510.3299 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #173: GFLOPs: 260.3048. Time: 496.5462 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #174: GFLOPs: 271.3559. Time: 476.3242 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #175: GFLOPs: 254.3508. Time: 508.1697 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #176: GFLOPs: 273.5970. Time: 472.4226 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #177: GFLOPs: 278.6978. Time: 463.7760 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #178: GFLOPs: 283.5515. Time: 455.8374 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #179: GFLOPs: 284.4836. Time: 454.3439 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #180: GFLOPs: 287.9731. Time: 448.8384 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #181: GFLOPs: 287.8483. Time: 449.0330 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #182: GFLOPs: 290.3742. Time: 445.1270 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #183: GFLOPs: 252.3008. Time: 512.2987 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #184: GFLOPs: 271.3898. Time: 476.2646 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #185: GFLOPs: 251.9949. Time: 512.9207 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #186: GFLOPs: 259.6108. Time: 497.8736 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #187: GFLOPs: 273.9624. Time: 471.7924 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #188: GFLOPs: 270.6468. Time: 477.5722 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #189: GFLOPs: 269.0743. Time: 480.3631 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #190: GFLOPs: 97.3870. Time: 1327.2133 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #191: GFLOPs: 29.6902. Time: 4353.4001 us. Best GFLOPs: 314.7628
2024-04-29 01:18:19 [INFO] [task_scheduler.cc:131] [Task #56: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_53] Trial #192: GFLOPs: 67.8603. Time: 1904.6972 us. Best GFLOPs: 314.7628
