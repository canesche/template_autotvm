2024-04-28 20:48:17 [INFO] [task_scheduler.cc:160] Initializing Task #75: "fused_nn_avg_pool2d_2"
2024-04-28 20:48:17 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4), T.int64(2), T.int64(2)):
            with T.block("pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_avg"})
                pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
2024-04-28 20:48:17 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:48:17 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4), T.int64(1)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(128)):
                for ax0_1, ax1_1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
                    for ax0_2, ax1_2, ax2_1, ax3_1, ax4_1, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("pool_sum_rf"):
                            vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0_2, ax1_2])
                            v_ax1 = T.axis.spatial(T.int64(128), ax1 + ax2_1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax3 + ax3_1)
                            v_ax3 = T.axis.spatial(T.int64(7), ax4 + ax4_1)
                            v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SR", [ax5, ax6])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                            T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                            with T.init():
                                pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
                    for ax5 in range(T.int64(4)):
                        with T.block("pool_sum"):
                            vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                            v_ax1 = T.axis.spatial(T.int64(128), ax1 + ax2)
                            v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                            T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                            T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            with T.init():
                                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                for ax2, ax3, ax4 in T.grid(T.int64(7), T.int64(7), T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 4])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=6)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-28 20:48:17 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4), T.int64(1), T.int64(4)):
                with T.block("pool_sum_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                    pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(7)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4, ax5 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("pool_sum"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(128), ax1 + ax2_1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax3_1)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3 + ax4)
                        v_ax4 = T.axis.spatial(T.int64(4), ax5)
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
                for ax4 in range(T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 4])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=-1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-28 20:48:17 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(7)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2)):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(128), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3 + ax3_1)
                        v_ax4, v_rv0, v_rv1 = T.axis.remap("SRR", [ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4]
                for ax4 in range(T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-28 22:36:23 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:36:23 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 22:36:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9054498)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71d1898)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x613b8b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8773d08)]: 0 failure(s)
2024-04-28 22:36:26 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 22:36:29 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9054498)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71d1898)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x613b8b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8773d08)]: 0 failure(s)
2024-04-28 22:36:33 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9054498)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71d1898)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x613b8b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8773d08)]: 0 failure(s)
2024-04-28 22:36:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9054498)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71d1898)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x613b8b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8773d08)]: 0 failure(s)
2024-04-28 22:36:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9054498)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x71d1898)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x613b8b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8773d08)]: 0 failure(s)
2024-04-28 22:36:42 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9939  0.9917  0.9910  0.9897  0.9891  0.9882  0.9860  0.9854  0.9788  0.9748  0.9733  0.9725  0.9690  0.9687  0.9670  0.9605
[17 : 32]:	0.9593  0.9586  0.9574  0.9478  0.9469  0.9442  0.9434  0.9416  0.9408  0.9396  0.9378  0.9352  0.9304  0.9253  0.9234  0.9217
[33 : 48]:	0.9194  0.9145  0.9128  0.9095  0.9094  0.9084  0.9082  0.9081  0.9048  0.9048  0.9045  0.9034  0.9012  0.8971  0.8926  0.8894
[49 : 64]:	0.8894  0.8888  0.8878  0.8865  0.8858  0.8738  0.8732  0.8687  0.8677  0.8669  0.8659  0.8654  0.8653  0.8652  0.8640  0.8638
2024-04-28 22:36:42 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:36:42 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #1: GFLOPs: 10.6598. Time: 58.8377 us. Best GFLOPs: 10.6598
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #2: GFLOPs: 18.4089. Time: 34.0704 us. Best GFLOPs: 18.4089
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #3: GFLOPs: 21.3091. Time: 29.4335 us. Best GFLOPs: 21.3091
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #4: GFLOPs: 10.5736. Time: 59.3174 us. Best GFLOPs: 21.3091
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #5: GFLOPs: 25.1868. Time: 24.9019 us. Best GFLOPs: 25.1868
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #6: GFLOPs: 50.9013. Time: 12.3219 us. Best GFLOPs: 50.9013
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #7: GFLOPs: 53.8984. Time: 11.6367 us. Best GFLOPs: 53.8984
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #8: GFLOPs: 59.5993. Time: 10.5236 us. Best GFLOPs: 59.5993
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #9: GFLOPs: 36.8675. Time: 17.0123 us. Best GFLOPs: 59.5993
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #10: GFLOPs: 20.7292. Time: 30.2568 us. Best GFLOPs: 59.5993
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #11: GFLOPs: 63.5719. Time: 9.8660 us. Best GFLOPs: 63.5719
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #12: GFLOPs: 22.4319. Time: 27.9601 us. Best GFLOPs: 63.5719
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #13: GFLOPs: 37.0627. Time: 16.9227 us. Best GFLOPs: 63.5719
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #14: GFLOPs: 55.4676. Time: 11.3075 us. Best GFLOPs: 63.5719
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #15: GFLOPs: 48.3800. Time: 12.9640 us. Best GFLOPs: 63.5719
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #16: GFLOPs: 25.6508. Time: 24.4515 us. Best GFLOPs: 63.5719
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #17: GFLOPs: 23.6356. Time: 26.5363 us. Best GFLOPs: 63.5719
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #18: GFLOPs: 38.0304. Time: 16.4921 us. Best GFLOPs: 63.5719
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #19: GFLOPs: 37.7419. Time: 16.6181 us. Best GFLOPs: 63.5719
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #20: GFLOPs: 38.0741. Time: 16.4731 us. Best GFLOPs: 63.5719
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #21: GFLOPs: 10.7439. Time: 58.3774 us. Best GFLOPs: 63.5719
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #22: GFLOPs: 33.4909. Time: 18.7275 us. Best GFLOPs: 63.5719
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #23: GFLOPs: 65.9232. Time: 9.5141 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #24: GFLOPs: 43.8174. Time: 14.3139 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #25: GFLOPs: 60.6692. Time: 10.3380 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #26: GFLOPs: 57.3259. Time: 10.9409 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #27: GFLOPs: 53.1322. Time: 11.8045 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #28: GFLOPs: 21.6435. Time: 28.9787 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #29: GFLOPs: 21.4315. Time: 29.2653 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #30: GFLOPs: 54.6104. Time: 11.4850 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #31: GFLOPs: 21.6180. Time: 29.0128 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #32: GFLOPs: 23.2327. Time: 26.9964 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #33: GFLOPs: 11.9908. Time: 52.3070 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #34: GFLOPs: 25.0978. Time: 24.9903 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #35: GFLOPs: 60.9890. Time: 10.2838 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #36: GFLOPs: 57.6286. Time: 10.8835 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #37: GFLOPs: 53.2971. Time: 11.7680 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #38: GFLOPs: 62.3761. Time: 10.0551 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #39: GFLOPs: 21.9769. Time: 28.5390 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #40: GFLOPs: 63.2980. Time: 9.9087 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:121] [Task #75: fused_nn_avg_pool2d_2] Trial #41: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4), T.int64(4)))
        for ax0_ax1_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4, ax5 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("pool_sum_rf_init"):
                    vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0, ax1])
                    v_ax1 = T.axis.spatial(T.int64(128), ax0_ax1_fused + ax2)
                    v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                    T.reads()
                    T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                for ax6 in range(T.int64(1)):
                    with T.block("pool_sum_rf_update"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0, ax1])
                        v_ax1 = T.axis.spatial(T.int64(128), ax0_ax1_fused + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
            for ax2, ax3 in T.grid(T.int64(7), T.int64(7)):
                for ax1_init, ax2_init, ax3_init in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                    for ax4_ax5_fused_init in T.vectorized(T.int64(4)):
                        with T.block("pool_sum_init"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax1_init)
                            v_ax1 = T.axis.spatial(T.int64(128), ax0_ax1_fused + ax2_init)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax3_init)
                            v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_ax5_fused_init])
                            T.reads()
                            T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                for ax0, ax1, ax2_1, ax3_1 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1)):
                    for ax4_ax5_fused in T.vectorized(T.int64(4)):
                        with T.block("pool_sum_update"):
                            vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0, ax1])
                            v_ax1 = T.axis.spatial(T.int64(128), ax0_ax1_fused + ax2_1)
                            v_ax2 = T.axis.spatial(T.int64(7), ax2 + ax3_1)
                            v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4_ax5_fused])
                            T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                            T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4_fused])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[4, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b20 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.unroll_explicit")
b21, b22, b23 = sch.get_child_blocks(b20)
l24, l25, l26, l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b21)
l33 = sch.fuse(l24, l25, preserve_unit_iters=True)
sch.parallel(loop=l33)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
l34, l35, l36, l37, l38, l39, l40, l41, l42 = sch.get_loops(block=b22)
l43 = sch.fuse(l41, l42, preserve_unit_iters=True)
sch.vectorize(loop=l43)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l44, l45, l46, l47 = sch.get_loops(block=b23)
l48 = sch.fuse(l47, preserve_unit_iters=True)
sch.vectorize(loop=l48)
b49 = sch.get_block(name="pool_sum_rf", func_name="main")
l50, l51, l52, l53, l54, l55, l56, l57 = sch.get_loops(block=b49)
b58 = sch.decompose_reduction(block=b49, loop=l57)
b59 = sch.get_block(name="pool_sum", func_name="main")
l60, l61, l62, l63, l64, l65, l66, l67 = sch.get_loops(block=b59)
b68 = sch.decompose_reduction(block=b59, loop=l63)
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #42: GFLOPs: 50.7062. Time: 12.3693 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #43: GFLOPs: 21.0609. Time: 29.7803 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #44: GFLOPs: 56.2131. Time: 11.1575 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #45: GFLOPs: 60.8085. Time: 10.3144 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:121] [Task #75: fused_nn_avg_pool2d_2] Trial #46: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4)))
        pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(4), T.int64(4)))
        for ax0_ax1_fused in T.parallel(T.int64(128), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4, ax5 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("pool_sum_rf_init"):
                    vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0, ax1])
                    v_ax1 = T.axis.spatial(T.int64(128), ax0_ax1_fused + ax2)
                    v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                    T.reads()
                    T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                for ax6 in range(T.int64(1)):
                    with T.block("pool_sum_rf_update"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0, ax1])
                        v_ax1 = T.axis.spatial(T.int64(128), ax0_ax1_fused + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
            for ax1_init, ax2_init, ax3_init in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                for ax4_ax5_fused_init in T.vectorized(T.int64(28)):
                    with T.block("pool_sum_init"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax1_init)
                        v_ax1 = T.axis.spatial(T.int64(128), ax0_ax1_fused + ax2_init)
                        v_ax2 = T.axis.spatial(T.int64(7), ax3_init)
                        v_ax3 = T.axis.spatial(T.int64(7), ax4_ax5_fused_init // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_ax5_fused_init % T.int64(4))
                        T.reads()
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(7)):
                for ax4_ax5_fused in T.vectorized(T.int64(28)):
                    with T.block("pool_sum_update"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0, ax1])
                        v_ax1 = T.axis.spatial(T.int64(128), ax0_ax1_fused + ax2)
                        v_ax2 = T.axis.spatial(T.int64(7), ax3)
                        v_ax3 = T.axis.spatial(T.int64(7), ax4_ax5_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_ax5_fused % T.int64(4))
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
            for ax2 in range(T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2 = T.axis.remap("SS", [ax0_ax1_fused, ax2])
                        v_ax3 = T.axis.spatial(T.int64(7), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(13)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 4])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b20 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.unroll_explicit")
b21, b22, b23 = sch.get_child_blocks(b20)
l24, l25, l26, l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b21)
l33 = sch.fuse(l24, l25, preserve_unit_iters=True)
sch.parallel(loop=l33)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
l34, l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b22)
l41 = sch.fuse(l39, l40, preserve_unit_iters=True)
sch.vectorize(loop=l41)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l42, l43, l44, l45 = sch.get_loops(block=b23)
l46 = sch.fuse(l44, l45, preserve_unit_iters=True)
sch.vectorize(loop=l46)
b47 = sch.get_block(name="pool_sum_rf", func_name="main")
l48, l49, l50, l51, l52, l53, l54, l55 = sch.get_loops(block=b47)
b56 = sch.decompose_reduction(block=b47, loop=l55)
b57 = sch.get_block(name="pool_sum", func_name="main")
l58, l59, l60, l61, l62, l63 = sch.get_loops(block=b57)
b64 = sch.decompose_reduction(block=b57, loop=l59)
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #47: GFLOPs: 57.6940. Time: 10.8711 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #48: GFLOPs: 22.1549. Time: 28.3098 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #49: GFLOPs: 58.7323. Time: 10.6790 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #50: GFLOPs: 15.7747. Time: 39.7600 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #51: GFLOPs: 45.8789. Time: 13.6708 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #52: GFLOPs: 58.8300. Time: 10.6612 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #53: GFLOPs: 57.8623. Time: 10.8395 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #54: GFLOPs: 20.6295. Time: 30.4031 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #55: GFLOPs: 14.5147. Time: 43.2114 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #56: GFLOPs: 32.8895. Time: 19.0699 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #57: GFLOPs: 52.2795. Time: 11.9971 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #58: GFLOPs: 50.7374. Time: 12.3617 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #59: GFLOPs: 17.6971. Time: 35.4409 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #60: GFLOPs: 56.2577. Time: 11.1487 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #61: GFLOPs: 58.8284. Time: 10.6615 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #62: GFLOPs: 52.0850. Time: 12.0418 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #63: GFLOPs: 20.6736. Time: 30.3382 us. Best GFLOPs: 65.9232
2024-04-28 22:48:54 [INFO] [task_scheduler.cc:131] [Task #75: fused_nn_avg_pool2d_2] Trial #64: GFLOPs: 24.5657. Time: 25.5316 us. Best GFLOPs: 65.9232
