2024-04-28 20:44:32 [INFO] [task_scheduler.cc:160] Initializing Task #11: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11"
2024-04-28 20:44:32 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(160), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4), T.int64(640), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:44:32 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:44:32 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(160), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(2)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(640), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[20, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:44:32 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(160), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(640), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(7), oh_0 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[20, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:44:32 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(160), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(2)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(640), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(7), oh_0 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[20, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 21:04:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:04:56 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:04:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x87064d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb5e5398)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6741ae8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9a8a078)]: 0 failure(s)
2024-04-28 21:04:58 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:05:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x87064d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb5e5398)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6741ae8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9a8a078)]: 0 failure(s)
2024-04-28 21:05:04 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x87064d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb5e5398)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6741ae8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9a8a078)]: 0 failure(s)
2024-04-28 21:05:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x87064d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb5e5398)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6741ae8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9a8a078)]: 0 failure(s)
2024-04-28 21:05:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x87064d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0xb5e5398)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6741ae8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x9a8a078)]: 0 failure(s)
2024-04-28 21:05:11 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9995  0.9987  0.9986  0.9981  0.9976  0.9973  0.9969  0.9966  0.9961  0.9953  0.9952  0.9951  0.9935  0.9933  0.9920
[17 : 32]:	0.9918  0.9912  0.9906  0.9905  0.9898  0.9896  0.9875  0.9875  0.9871  0.9867  0.9866  0.9865  0.9863  0.9853  0.9850  0.9850
[33 : 48]:	0.9847  0.9836  0.9831  0.9824  0.9819  0.9816  0.9815  0.9814  0.9813  0.9803  0.9797  0.9797  0.9781  0.9774  0.9763  0.9741
[49 : 64]:	0.9740  0.9735  0.9731  0.9726  0.9714  0.9711  0.9705  0.9700  0.9688  0.9685  0.9681  0.9664  0.9664  0.9661  0.9659  0.9659
2024-04-28 21:05:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:05:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #1: GFLOPs: 9.7069. Time: 828.3461 us. Best GFLOPs: 9.7069
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #2: GFLOPs: 87.1841. Time: 92.2268 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #3: GFLOPs: 28.3348. Time: 283.7747 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #4: GFLOPs: 13.9278. Time: 577.3115 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #5: GFLOPs: 28.2124. Time: 285.0059 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #6: GFLOPs: 35.1747. Time: 228.5932 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #7: GFLOPs: 8.4213. Time: 954.8040 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #8: GFLOPs: 2.6856. Time: 2993.9744 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #9: GFLOPs: 2.9382. Time: 2736.5942 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #10: GFLOPs: 20.1413. Time: 399.2141 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #11: GFLOPs: 58.2618. Time: 138.0098 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #12: GFLOPs: 18.4081. Time: 436.8016 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #13: GFLOPs: 22.3211. Time: 360.2282 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #14: GFLOPs: 4.9148. Time: 1636.0128 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #15: GFLOPs: 55.6118. Time: 144.5862 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #16: GFLOPs: 26.0295. Time: 308.9072 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #17: GFLOPs: 71.5411. Time: 112.3928 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #18: GFLOPs: 55.7043. Time: 144.3462 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #19: GFLOPs: 1.8413. Time: 4366.9412 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #20: GFLOPs: 54.2174. Time: 148.3048 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #21: GFLOPs: 59.4577. Time: 135.2341 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #22: GFLOPs: 0.8476. Time: 9485.9838 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #23: GFLOPs: 13.7800. Time: 583.5050 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #24: GFLOPs: 53.0580. Time: 151.5457 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #25: GFLOPs: 12.7489. Time: 630.6997 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #26: GFLOPs: 29.3507. Time: 273.9527 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #27: GFLOPs: 74.7219. Time: 107.6083 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #28: GFLOPs: 20.3238. Time: 395.6293 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #29: GFLOPs: 26.0358. Time: 308.8325 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #30: GFLOPs: 2.7448. Time: 2929.4147 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #31: GFLOPs: 46.8699. Time: 171.5539 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:121] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #32: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(160), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(16), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(7), oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(7), ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(640), ic_0 * T.int64(5) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(7), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(4) * T.int64(8) + ax1)
                    v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 5])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b101)
b119 = sch.decompose_reduction(block=b101, loop=l103)
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #33: GFLOPs: 4.0572. Time: 1981.8306 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #34: GFLOPs: 85.9653. Time: 93.5343 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #35: GFLOPs: 12.4369. Time: 646.5218 us. Best GFLOPs: 87.1841
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #36: GFLOPs: 89.7202. Time: 89.6198 us. Best GFLOPs: 89.7202
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #37: GFLOPs: 62.7250. Time: 128.1898 us. Best GFLOPs: 89.7202
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #38: GFLOPs: 2.2859. Time: 3517.4528 us. Best GFLOPs: 89.7202
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #39: GFLOPs: 103.1311. Time: 77.9658 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #40: GFLOPs: 85.3912. Time: 94.1632 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #41: GFLOPs: 28.4938. Time: 282.1917 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #42: GFLOPs: 5.1105. Time: 1573.3601 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #43: GFLOPs: 76.0277. Time: 105.7602 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #44: GFLOPs: 33.5220. Time: 239.8634 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #45: GFLOPs: 2.5231. Time: 3186.8216 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #46: GFLOPs: 7.2282. Time: 1112.4104 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #47: GFLOPs: 1.5351. Time: 5237.7496 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #48: GFLOPs: 2.0026. Time: 4015.0670 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #49: GFLOPs: 27.5336. Time: 292.0319 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #50: GFLOPs: 63.8487. Time: 125.9337 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #51: GFLOPs: 0.8764. Time: 9174.7310 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #52: GFLOPs: 4.7171. Time: 1704.5748 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #53: GFLOPs: 34.4320. Time: 233.5241 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #54: GFLOPs: 17.0110. Time: 472.6780 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #55: GFLOPs: 3.2826. Time: 2449.4562 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #56: GFLOPs: 2.1900. Time: 3671.4785 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #57: GFLOPs: 0.8710. Time: 9231.7443 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #58: GFLOPs: 44.5772. Time: 180.3771 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #59: GFLOPs: 56.9969. Time: 141.0727 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #60: GFLOPs: 3.0717. Time: 2617.6761 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #61: GFLOPs: 22.5697. Time: 356.2608 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #62: GFLOPs: 32.0493. Time: 250.8857 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #63: GFLOPs: 36.3842. Time: 220.9941 us. Best GFLOPs: 103.1311
2024-04-28 22:42:50 [INFO] [task_scheduler.cc:131] [Task #11: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_11] Trial #64: GFLOPs: 25.7321. Time: 312.4771 us. Best GFLOPs: 103.1311
