2024-04-28 20:46:48 [INFO] [task_scheduler.cc:160] Initializing Task #46: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44"
2024-04-28 20:46:48 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(88), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(88), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(352), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:46:48 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:46:48 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(88), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(88), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(7), T.int64(1), T.int64(22), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(4), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(352), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 28, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[22, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:46:48 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(88), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(88), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(7), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(22), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(352), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), oh_1 + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_1 * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 28, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[22, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:46:48 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(88), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(88), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(7), T.int64(1), T.int64(22), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(352), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 28, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[22, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 21:58:24 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:58:24 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:58:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa450318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x84d0f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62e8e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb06a848)]: 0 failure(s)
2024-04-28 21:58:27 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:58:29 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa450318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x84d0f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62e8e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb06a848)]: 0 failure(s)
2024-04-28 21:58:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa450318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x84d0f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62e8e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb06a848)]: 0 failure(s)
2024-04-28 21:58:36 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa450318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x84d0f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62e8e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb06a848)]: 0 failure(s)
2024-04-28 21:58:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa450318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x84d0f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62e8e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb06a848)]: 0 failure(s)
2024-04-28 21:58:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9998  0.9997  0.9996  0.9991  0.9988  0.9984  0.9982  0.9975  0.9973  0.9971  0.9963  0.9962  0.9956  0.9955  0.9950
[17 : 32]:	0.9949  0.9939  0.9936  0.9933  0.9925  0.9922  0.9919  0.9917  0.9917  0.9908  0.9894  0.9889  0.9878  0.9878  0.9863  0.9861
[33 : 48]:	0.9859  0.9858  0.9855  0.9848  0.9840  0.9840  0.9837  0.9831  0.9829  0.9828  0.9820  0.9818  0.9810  0.9809  0.9801  0.9800
[49 : 64]:	0.9798  0.9795  0.9780  0.9778  0.9777  0.9774  0.9767  0.9755  0.9751  0.9748  0.9748  0.9744  0.9742  0.9736  0.9729  0.9721
2024-04-28 21:58:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:58:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #1: GFLOPs: 59.2075. Time: 1196.6128 us. Best GFLOPs: 59.2075
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #2: GFLOPs: 98.3104. Time: 720.6617 us. Best GFLOPs: 98.3104
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #3: GFLOPs: 67.2808. Time: 1053.0266 us. Best GFLOPs: 98.3104
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #4: GFLOPs: 72.6417. Time: 975.3147 us. Best GFLOPs: 98.3104
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #5: GFLOPs: 11.5010. Time: 6160.1916 us. Best GFLOPs: 98.3104
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #6: GFLOPs: 49.2155. Time: 1439.5567 us. Best GFLOPs: 98.3104
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #7: GFLOPs: 79.7699. Time: 888.1614 us. Best GFLOPs: 98.3104
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #8: GFLOPs: 80.9223. Time: 875.5126 us. Best GFLOPs: 98.3104
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #9: GFLOPs: 115.4372. Time: 613.7408 us. Best GFLOPs: 115.4372
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #10: GFLOPs: 26.7178. Time: 2651.7319 us. Best GFLOPs: 115.4372
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #11: GFLOPs: 3.2392. Time: 21872.2992 us. Best GFLOPs: 115.4372
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #12: GFLOPs: 62.1093. Time: 1140.7061 us. Best GFLOPs: 115.4372
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #13: GFLOPs: 110.2184. Time: 642.8013 us. Best GFLOPs: 115.4372
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #14: GFLOPs: 45.2632. Time: 1565.2580 us. Best GFLOPs: 115.4372
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #15: GFLOPs: 2.3060. Time: 30724.0235 us. Best GFLOPs: 115.4372
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #16: GFLOPs: 140.0776. Time: 505.7804 us. Best GFLOPs: 140.0776
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #17: GFLOPs: 70.0800. Time: 1010.9666 us. Best GFLOPs: 140.0776
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #18: GFLOPs: 4.0434. Time: 17522.0938 us. Best GFLOPs: 140.0776
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #19: GFLOPs: 33.9975. Time: 2083.9360 us. Best GFLOPs: 140.0776
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #20: GFLOPs: 13.8700. Time: 5108.0437 us. Best GFLOPs: 140.0776
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #21: GFLOPs: 179.5443. Time: 394.6019 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #22: GFLOPs: 52.2010. Time: 1357.2245 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #23: GFLOPs: 100.1807. Time: 707.2074 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #24: GFLOPs: 14.2514. Time: 4971.3436 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #25: GFLOPs: 36.4335. Time: 1944.5957 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #26: GFLOPs: 81.9405. Time: 864.6338 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #27: GFLOPs: 2.5729. Time: 27536.8728 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #28: GFLOPs: 30.1444. Time: 2350.3043 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #29: GFLOPs: 47.2687. Time: 1498.8463 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #30: GFLOPs: 137.8509. Time: 513.9502 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #31: GFLOPs: 29.8210. Time: 2375.7945 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #32: GFLOPs: 22.0301. Time: 3215.9816 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #33: GFLOPs: 54.6857. Time: 1295.5575 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #34: GFLOPs: 102.7200. Time: 689.7247 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #35: GFLOPs: 67.0108. Time: 1057.2696 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #36: GFLOPs: 5.7596. Time: 12300.9297 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #37: GFLOPs: 39.1860. Time: 1808.0040 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #38: GFLOPs: 1.6742. Time: 42317.4177 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #39: GFLOPs: 74.7451. Time: 947.8689 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #40: GFLOPs: 3.0336. Time: 23354.8483 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:121] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #41: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(88), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(88), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(2), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(14) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(14) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(44), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(14) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(352), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[44, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #42: GFLOPs: 132.5713. Time: 534.4181 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #43: GFLOPs: 1.8390. Time: 38526.2243 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #44: GFLOPs: 167.2293. Time: 423.6609 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #45: GFLOPs: 5.0301. Time: 14084.8212 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #46: GFLOPs: 43.9833. Time: 1610.8041 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #47: GFLOPs: 112.2282. Time: 631.2898 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #48: GFLOPs: 4.1125. Time: 17227.5327 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #49: GFLOPs: 8.6010. Time: 8237.2162 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #50: GFLOPs: 134.9308. Time: 525.0730 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #51: GFLOPs: 45.0924. Time: 1571.1869 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #52: GFLOPs: 87.1166. Time: 813.2610 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #53: GFLOPs: 107.1024. Time: 661.5027 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #54: GFLOPs: 151.6625. Time: 467.1459 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #55: GFLOPs: 5.5241. Time: 12825.3538 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #56: GFLOPs: 45.1350. Time: 1569.7008 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #57: GFLOPs: 103.7350. Time: 682.9757 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:121] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #58: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(88), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(88), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(2), T.int64(1), T.int64(16), T.int64(2), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(32) + oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(28) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(14) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(44), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(16) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(28) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(14) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(352), ic_0 * T.int64(8) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(28)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 14, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[44, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #59: GFLOPs: 53.0378. Time: 1335.8127 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #60: GFLOPs: 30.4385. Time: 2327.5932 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #61: GFLOPs: 50.8736. Time: 1392.6380 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #62: GFLOPs: 57.6424. Time: 1229.1033 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #63: GFLOPs: 3.3554. Time: 21114.7878 us. Best GFLOPs: 179.5443
2024-04-28 22:45:27 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #64: GFLOPs: 55.8793. Time: 1267.8858 us. Best GFLOPs: 179.5443
2024-04-28 23:55:00 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:55:01 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-28 23:55:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa450318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x84d0f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62e8e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb06a848)]: 0 failure(s)
2024-04-28 23:55:03 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-28 23:55:08 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa450318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x84d0f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62e8e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb06a848)]: 0 failure(s)
2024-04-28 23:55:14 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa450318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x84d0f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62e8e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb06a848)]: 0 failure(s)
2024-04-28 23:55:19 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa450318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x84d0f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62e8e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb06a848)]: 0 failure(s)
2024-04-28 23:55:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa450318)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x84d0f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62e8e28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xb06a848)]: 0 failure(s)
2024-04-28 23:55:28 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8499  0.8450  0.8437  0.8437  0.8395  0.8395  0.8305  0.8187  0.8082  0.8044  0.8035  0.7668  0.7598  0.7587  0.7579  0.7553
[17 : 32]:	0.7536  0.7471  0.7471  0.7471  0.7471  0.7468  0.7462  0.7403  0.7383  0.7375  0.7358  0.7346  0.7343  0.7340  0.7301  0.7267
[33 : 48]:	0.7199  0.7097  0.7082  0.7079  0.7018  0.7018  0.6980  0.6978  0.6973  0.6949  0.6945  0.6938  0.6920  0.6912  0.6870  0.6849
[49 : 64]:	0.6845  0.6800  0.6798  0.6774  0.6759  0.6759  0.6759  0.6742  0.6732  0.6717  0.6684  0.6593  0.6590  0.6590  0.6582  0.6577
2024-04-28 23:55:28 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:55:28 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #65: GFLOPs: 124.7194. Time: 568.0633 us. Best GFLOPs: 179.5443
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #66: GFLOPs: 143.0310. Time: 495.3367 us. Best GFLOPs: 179.5443
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #67: GFLOPs: 94.5305. Time: 749.4775 us. Best GFLOPs: 179.5443
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #68: GFLOPs: 90.7996. Time: 780.2733 us. Best GFLOPs: 179.5443
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #69: GFLOPs: 80.6371. Time: 878.6089 us. Best GFLOPs: 179.5443
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #70: GFLOPs: 163.1616. Time: 434.2230 us. Best GFLOPs: 179.5443
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #71: GFLOPs: 207.7707. Time: 340.9938 us. Best GFLOPs: 207.7707
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #72: GFLOPs: 234.7080. Time: 301.8581 us. Best GFLOPs: 234.7080
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #73: GFLOPs: 136.7009. Time: 518.2739 us. Best GFLOPs: 234.7080
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #74: GFLOPs: 96.0407. Time: 737.6928 us. Best GFLOPs: 234.7080
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #75: GFLOPs: 208.9165. Time: 339.1236 us. Best GFLOPs: 234.7080
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #76: GFLOPs: 129.6194. Time: 546.5887 us. Best GFLOPs: 234.7080
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #77: GFLOPs: 69.0562. Time: 1025.9549 us. Best GFLOPs: 234.7080
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #78: GFLOPs: 225.5985. Time: 314.0469 us. Best GFLOPs: 234.7080
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #79: GFLOPs: 73.8183. Time: 959.7694 us. Best GFLOPs: 234.7080
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #80: GFLOPs: 210.8372. Time: 336.0341 us. Best GFLOPs: 234.7080
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #81: GFLOPs: 145.4324. Time: 487.1577 us. Best GFLOPs: 234.7080
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #82: GFLOPs: 129.7722. Time: 545.9454 us. Best GFLOPs: 234.7080
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #83: GFLOPs: 126.6009. Time: 559.6208 us. Best GFLOPs: 234.7080
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #84: GFLOPs: 131.4091. Time: 539.1446 us. Best GFLOPs: 234.7080
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #85: GFLOPs: 129.8809. Time: 545.4883 us. Best GFLOPs: 234.7080
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #86: GFLOPs: 270.0347. Time: 262.3682 us. Best GFLOPs: 270.0347
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #87: GFLOPs: 151.8248. Time: 466.6465 us. Best GFLOPs: 270.0347
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #88: GFLOPs: 73.1379. Time: 968.6973 us. Best GFLOPs: 270.0347
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #89: GFLOPs: 80.0099. Time: 885.4971 us. Best GFLOPs: 270.0347
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #90: GFLOPs: 174.0867. Time: 406.9727 us. Best GFLOPs: 270.0347
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #91: GFLOPs: 225.5041. Time: 314.1784 us. Best GFLOPs: 270.0347
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #92: GFLOPs: 158.0171. Time: 448.3597 us. Best GFLOPs: 270.0347
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #93: GFLOPs: 54.8595. Time: 1291.4539 us. Best GFLOPs: 270.0347
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #94: GFLOPs: 87.5744. Time: 809.0090 us. Best GFLOPs: 270.0347
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #95: GFLOPs: 166.2774. Time: 426.0864 us. Best GFLOPs: 270.0347
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #96: GFLOPs: 101.0720. Time: 700.9707 us. Best GFLOPs: 270.0347
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #97: GFLOPs: 115.5708. Time: 613.0311 us. Best GFLOPs: 270.0347
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #98: GFLOPs: 354.2849. Time: 199.9761 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #99: GFLOPs: 134.0919. Time: 528.3579 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #100: GFLOPs: 157.5457. Time: 449.7013 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #101: GFLOPs: 202.9008. Time: 349.1781 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #102: GFLOPs: 233.6107. Time: 303.2760 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #103: GFLOPs: 149.3682. Time: 474.3211 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #104: GFLOPs: 124.3879. Time: 569.5772 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #105: GFLOPs: 227.0128. Time: 312.0904 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #106: GFLOPs: 155.1561. Time: 456.6272 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #107: GFLOPs: 122.8194. Time: 576.8513 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #108: GFLOPs: 85.0094. Time: 833.4201 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #109: GFLOPs: 200.0732. Time: 354.1130 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #110: GFLOPs: 97.9574. Time: 723.2583 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #111: GFLOPs: 70.0190. Time: 1011.8475 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #112: GFLOPs: 153.6433. Time: 461.1232 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #113: GFLOPs: 127.5442. Time: 555.4822 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #114: GFLOPs: 231.5497. Time: 305.9753 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #115: GFLOPs: 63.9286. Time: 1108.2437 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #116: GFLOPs: 115.8128. Time: 611.7501 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #117: GFLOPs: 80.7466. Time: 877.4179 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #118: GFLOPs: 80.9458. Time: 875.2586 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #119: GFLOPs: 96.0317. Time: 737.7617 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #120: GFLOPs: 209.9405. Time: 337.4694 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #121: GFLOPs: 214.4306. Time: 330.4030 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #122: GFLOPs: 187.3224. Time: 378.2171 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #123: GFLOPs: 90.1239. Time: 786.1233 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #124: GFLOPs: 132.0116. Time: 536.6841 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #125: GFLOPs: 164.8282. Time: 429.8323 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #126: GFLOPs: 1.8400. Time: 38505.4413 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #127: GFLOPs: 16.2154. Time: 4369.2024 us. Best GFLOPs: 354.2849
2024-04-28 23:57:01 [INFO] [task_scheduler.cc:131] [Task #46: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_44] Trial #128: GFLOPs: 3.3902. Time: 20898.1806 us. Best GFLOPs: 354.2849
