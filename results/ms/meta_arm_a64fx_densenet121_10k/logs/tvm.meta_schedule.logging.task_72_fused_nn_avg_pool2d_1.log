2024-04-28 20:48:11 [INFO] [task_scheduler.cc:160] Initializing Task #72: "fused_nn_avg_pool2d_1"
2024-04-28 20:48:11 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4), T.int64(2), T.int64(2)):
            with T.block("pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                with T.init():
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_avg"})
                pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
2024-04-28 20:48:11 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:48:11 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4), T.int64(4)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(64)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(4), T.int64(1)):
                    with T.block("pool_sum_rf"):
                        vrv0_rv1_fused_0, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(0)
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
                for ax2, ax3, ax4 in T.grid(T.int64(14), T.int64(14), T.int64(4)):
                    for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1, ax5 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("pool_sum"):
                            vrv0_rv1_fused_0, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                            v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax2_1)
                            v_ax2 = T.axis.spatial(T.int64(14), ax2 + ax3_1)
                            v_ax3 = T.axis.spatial(T.int64(14), ax3 + ax4_1)
                            v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax5)
                            T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                            T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            with T.init():
                                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0]
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[4, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=4)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-28 20:48:11 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
            pool_sum_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4), T.int64(1)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(64)):
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(4), T.int64(4)):
                    with T.block("pool_sum_rf"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(0)
                        pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4]
                for ax0_1, ax1_1, ax2, ax3, ax4, ax5 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(4)):
                    with T.block("pool_sum"):
                        vrv0_rv1_fused_1, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax2)
                        v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax3, ax4, ax5])
                        T.reads(pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + pool_sum_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1]
                for ax2, ax3, ax4 in T.grid(T.int64(14), T.int64(14), T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b0)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[4, 1])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
b17, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l18 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
l19 = sch.sample_compute_location(block=b17, decision=1)
sch.compute_at(block=b17, loop=l19, preserve_unit_loops=True, index=-1)
2024-04-28 20:48:11 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(14), T.int64(14), T.int64(4)))
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(64), T.int64(14)):
                for ax0_1, ax1_1, ax2_1, ax3, ax4, ax5, ax6 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(4), T.int64(2), T.int64(2)):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(64), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2 + ax2_1)
                        v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSRR", [ax3, ax4, ax5, ax6])
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                        T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        with T.init():
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(0)
                        pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4]
                for ax3, ax4 in T.grid(T.int64(14), T.int64(4)):
                    with T.block("pool_avg"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] / T.Cast("float32", T.max((T.min(v_ax2, T.int64(0)) * T.int64(2) + T.min(v_ax2 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax2 * T.int64(2)) * (T.min(v_ax3, T.int64(0)) * T.int64(2) + T.min(v_ax3 * T.int64(2) + T.int64(1), T.int64(27)) + T.int64(1) - v_ax3 * T.int64(2)), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-28 22:33:03 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:33:03 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 22:33:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9717ea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8700798)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6570978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7b54628)]: 0 failure(s)
2024-04-28 22:33:05 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 22:33:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9717ea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8700798)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6570978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7b54628)]: 0 failure(s)
2024-04-28 22:33:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9717ea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8700798)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6570978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7b54628)]: 0 failure(s)
2024-04-28 22:33:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9717ea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8700798)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6570978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7b54628)]: 0 failure(s)
2024-04-28 22:33:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9717ea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x8700798)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6570978)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x7b54628)]: 0 failure(s)
2024-04-28 22:33:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9988  0.9987  0.9970  0.9953  0.9947  0.9940  0.9919  0.9876  0.9875  0.9864  0.9854  0.9803  0.9796  0.9779  0.9775
[17 : 32]:	0.9746  0.9741  0.9733  0.9669  0.9665  0.9645  0.9637  0.9632  0.9559  0.9546  0.9530  0.9530  0.9520  0.9480  0.9476  0.9464
[33 : 48]:	0.9434  0.9406  0.9393  0.9387  0.9379  0.9377  0.9366  0.9346  0.9285  0.9271  0.9256  0.9254  0.9180  0.9178  0.9160  0.9140
[49 : 64]:	0.9123  0.9119  0.9096  0.9092  0.9043  0.9037  0.8990  0.8990  0.8984  0.8979  0.8946  0.8944  0.8938  0.8932  0.8914  0.8899
2024-04-28 22:33:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:33:22 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #1: GFLOPs: 45.8901. Time: 27.3349 us. Best GFLOPs: 45.8901
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #2: GFLOPs: 48.8609. Time: 25.6729 us. Best GFLOPs: 48.8609
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #3: GFLOPs: 66.3034. Time: 18.9191 us. Best GFLOPs: 66.3034
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #4: GFLOPs: 36.6797. Time: 34.1987 us. Best GFLOPs: 66.3034
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #5: GFLOPs: 50.0423. Time: 25.0668 us. Best GFLOPs: 66.3034
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #6: GFLOPs: 30.7253. Time: 40.8262 us. Best GFLOPs: 66.3034
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #7: GFLOPs: 86.1015. Time: 14.5689 us. Best GFLOPs: 86.1015
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #8: GFLOPs: 90.4466. Time: 13.8690 us. Best GFLOPs: 90.4466
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #9: GFLOPs: 24.7320. Time: 50.7198 us. Best GFLOPs: 90.4466
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #10: GFLOPs: 42.7001. Time: 29.3770 us. Best GFLOPs: 90.4466
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #11: GFLOPs: 86.4218. Time: 14.5149 us. Best GFLOPs: 90.4466
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #12: GFLOPs: 35.4557. Time: 35.3793 us. Best GFLOPs: 90.4466
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #13: GFLOPs: 73.1188. Time: 17.1556 us. Best GFLOPs: 90.4466
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #14: GFLOPs: 41.1044. Time: 30.5174 us. Best GFLOPs: 90.4466
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #15: GFLOPs: 18.7137. Time: 67.0310 us. Best GFLOPs: 90.4466
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #16: GFLOPs: 46.6914. Time: 26.8658 us. Best GFLOPs: 90.4466
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #17: GFLOPs: 44.4908. Time: 28.1946 us. Best GFLOPs: 90.4466
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #18: GFLOPs: 34.7436. Time: 36.1045 us. Best GFLOPs: 90.4466
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #19: GFLOPs: 30.1441. Time: 41.6135 us. Best GFLOPs: 90.4466
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #20: GFLOPs: 27.2186. Time: 46.0862 us. Best GFLOPs: 90.4466
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #21: GFLOPs: 84.6999. Time: 14.8099 us. Best GFLOPs: 90.4466
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #22: GFLOPs: 33.1019. Time: 37.8952 us. Best GFLOPs: 90.4466
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #23: GFLOPs: 44.7626. Time: 28.0234 us. Best GFLOPs: 90.4466
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #24: GFLOPs: 74.7534. Time: 16.7805 us. Best GFLOPs: 90.4466
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #25: GFLOPs: 36.0036. Time: 34.8409 us. Best GFLOPs: 90.4466
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #26: GFLOPs: 90.6306. Time: 13.8408 us. Best GFLOPs: 90.6306
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #27: GFLOPs: 86.6036. Time: 14.4844 us. Best GFLOPs: 90.6306
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #28: GFLOPs: 55.5701. Time: 22.5733 us. Best GFLOPs: 90.6306
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #29: GFLOPs: 94.7176. Time: 13.2436 us. Best GFLOPs: 94.7176
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #30: GFLOPs: 78.8956. Time: 15.8995 us. Best GFLOPs: 94.7176
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #31: GFLOPs: 40.5175. Time: 30.9594 us. Best GFLOPs: 94.7176
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #32: GFLOPs: 38.9031. Time: 32.2442 us. Best GFLOPs: 94.7176
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #33: GFLOPs: 57.6512. Time: 21.7584 us. Best GFLOPs: 94.7176
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #34: GFLOPs: 53.4787. Time: 23.4561 us. Best GFLOPs: 94.7176
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #35: GFLOPs: 71.9784. Time: 17.4275 us. Best GFLOPs: 94.7176
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #36: GFLOPs: 34.7170. Time: 36.1322 us. Best GFLOPs: 94.7176
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #37: GFLOPs: 69.2784. Time: 18.1067 us. Best GFLOPs: 94.7176
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #38: GFLOPs: 87.3882. Time: 14.3543 us. Best GFLOPs: 94.7176
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #39: GFLOPs: 70.0687. Time: 17.9024 us. Best GFLOPs: 94.7176
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #40: GFLOPs: 113.6831. Time: 11.0342 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #41: GFLOPs: 41.0134. Time: 30.5852 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #42: GFLOPs: 57.3844. Time: 21.8596 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #43: GFLOPs: 48.3213. Time: 25.9596 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #44: GFLOPs: 46.1346. Time: 27.1900 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #45: GFLOPs: 41.5647. Time: 30.1795 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #46: GFLOPs: 45.4673. Time: 27.5891 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #47: GFLOPs: 33.8011. Time: 37.1112 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #48: GFLOPs: 52.1191. Time: 24.0679 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #49: GFLOPs: 51.4648. Time: 24.3739 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #50: GFLOPs: 55.7858. Time: 22.4860 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #51: GFLOPs: 20.1067. Time: 62.3872 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #52: GFLOPs: 41.3490. Time: 30.3369 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #53: GFLOPs: 95.0318. Time: 13.1998 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #54: GFLOPs: 74.0623. Time: 16.9371 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #55: GFLOPs: 107.5143. Time: 11.6673 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #56: GFLOPs: 58.5764. Time: 21.4148 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #57: GFLOPs: 60.0029. Time: 20.9056 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #58: GFLOPs: 54.9442. Time: 22.8305 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #59: GFLOPs: 35.7702. Time: 35.0683 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #60: GFLOPs: 112.1477. Time: 11.1853 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #61: GFLOPs: 45.7794. Time: 27.4010 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #62: GFLOPs: 113.0107. Time: 11.0998 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #63: GFLOPs: 40.9470. Time: 30.6347 us. Best GFLOPs: 113.6831
2024-04-28 22:48:32 [INFO] [task_scheduler.cc:131] [Task #72: fused_nn_avg_pool2d_1] Trial #64: GFLOPs: 33.3993. Time: 37.5577 us. Best GFLOPs: 113.6831
