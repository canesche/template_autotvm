2024-04-28 20:44:39 [INFO] [task_scheduler.cc:160] Initializing Task #13: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13"
2024-04-28 20:44:39 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(144), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4), T.int64(576), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:44:39 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:44:39 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(144), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(18), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(576), ic_0 * T.int64(18) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 8, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 18])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:44:39 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(144), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(18), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(576), ic_0 * T.int64(18) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 8, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 18])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:44:39 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(144), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(4)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(18), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 * T.int64(7) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(576), ic_0 * T.int64(18) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(7), ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ow_0 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 8, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 18])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 21:07:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:07:56 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:07:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaf5f2f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7228f98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x59a02c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa5ffd88)]: 0 failure(s)
2024-04-28 21:07:58 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:08:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaf5f2f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7228f98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x59a02c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa5ffd88)]: 0 failure(s)
2024-04-28 21:08:04 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaf5f2f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7228f98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x59a02c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa5ffd88)]: 0 failure(s)
2024-04-28 21:08:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaf5f2f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7228f98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x59a02c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa5ffd88)]: 0 failure(s)
2024-04-28 21:08:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xaf5f2f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x7228f98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x59a02c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0xa5ffd88)]: 0 failure(s)
2024-04-28 21:08:11 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9990  0.9986  0.9974  0.9959  0.9958  0.9957  0.9938  0.9936  0.9933  0.9930  0.9929  0.9927  0.9923  0.9911  0.9910
[17 : 32]:	0.9903  0.9903  0.9894  0.9890  0.9884  0.9881  0.9869  0.9869  0.9859  0.9859  0.9848  0.9844  0.9837  0.9835  0.9834  0.9819
[33 : 48]:	0.9819  0.9813  0.9813  0.9795  0.9789  0.9788  0.9760  0.9751  0.9748  0.9742  0.9738  0.9738  0.9738  0.9735  0.9733  0.9731
[49 : 64]:	0.9727  0.9723  0.9718  0.9714  0.9714  0.9712  0.9709  0.9703  0.9688  0.9685  0.9684  0.9677  0.9675  0.9672  0.9668  0.9666
2024-04-28 21:08:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:08:12 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #1: GFLOPs: 15.1232. Time: 478.5951 us. Best GFLOPs: 15.1232
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #2: GFLOPs: 8.7756. Time: 824.7750 us. Best GFLOPs: 15.1232
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #3: GFLOPs: 21.6137. Time: 334.8755 us. Best GFLOPs: 21.6137
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #4: GFLOPs: 19.9784. Time: 362.2863 us. Best GFLOPs: 21.6137
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #5: GFLOPs: 61.2293. Time: 118.2096 us. Best GFLOPs: 61.2293
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #6: GFLOPs: 78.8735. Time: 91.7658 us. Best GFLOPs: 78.8735
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #7: GFLOPs: 4.3715. Time: 1655.6903 us. Best GFLOPs: 78.8735
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #8: GFLOPs: 1.0241. Time: 7067.2602 us. Best GFLOPs: 78.8735
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #9: GFLOPs: 48.6781. Time: 148.6889 us. Best GFLOPs: 78.8735
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #10: GFLOPs: 7.4249. Time: 974.8189 us. Best GFLOPs: 78.8735
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #11: GFLOPs: 27.5795. Time: 262.4374 us. Best GFLOPs: 78.8735
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #12: GFLOPs: 69.5931. Time: 104.0030 us. Best GFLOPs: 78.8735
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #13: GFLOPs: 48.6992. Time: 148.6245 us. Best GFLOPs: 78.8735
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #14: GFLOPs: 24.3521. Time: 297.2178 us. Best GFLOPs: 78.8735
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #15: GFLOPs: 4.0161. Time: 1802.2281 us. Best GFLOPs: 78.8735
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #16: GFLOPs: 11.2375. Time: 644.0812 us. Best GFLOPs: 78.8735
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #17: GFLOPs: 2.4728. Time: 2926.9989 us. Best GFLOPs: 78.8735
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #18: GFLOPs: 33.3440. Time: 217.0673 us. Best GFLOPs: 78.8735
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #19: GFLOPs: 9.3066. Time: 777.7147 us. Best GFLOPs: 78.8735
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #20: GFLOPs: 10.8691. Time: 665.9149 us. Best GFLOPs: 78.8735
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #21: GFLOPs: 89.0841. Time: 81.2479 us. Best GFLOPs: 89.0841
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #22: GFLOPs: 3.4901. Time: 2073.8607 us. Best GFLOPs: 89.0841
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #23: GFLOPs: 61.2915. Time: 118.0896 us. Best GFLOPs: 89.0841
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #24: GFLOPs: 1.5563. Time: 4650.7105 us. Best GFLOPs: 89.0841
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #25: GFLOPs: 1.5433. Time: 4689.9444 us. Best GFLOPs: 89.0841
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #26: GFLOPs: 0.9274. Time: 7804.4032 us. Best GFLOPs: 89.0841
2024-04-28 22:42:56 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #27: GFLOPs: 62.4519. Time: 115.8953 us. Best GFLOPs: 89.0841
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #28: GFLOPs: 9.9915. Time: 724.4030 us. Best GFLOPs: 89.0841
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #29: GFLOPs: 56.8992. Time: 127.2054 us. Best GFLOPs: 89.0841
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #30: GFLOPs: 10.9502. Time: 660.9808 us. Best GFLOPs: 89.0841
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #31: GFLOPs: 44.8538. Time: 161.3663 us. Best GFLOPs: 89.0841
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #32: GFLOPs: 90.5160. Time: 79.9626 us. Best GFLOPs: 90.5160
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #33: GFLOPs: 28.4331. Time: 254.5588 us. Best GFLOPs: 90.5160
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #34: GFLOPs: 33.7251. Time: 214.6142 us. Best GFLOPs: 90.5160
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #35: GFLOPs: 1.4155. Time: 5113.3579 us. Best GFLOPs: 90.5160
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #36: GFLOPs: 96.5885. Time: 74.9353 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #37: GFLOPs: 57.6345. Time: 125.5826 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #38: GFLOPs: 57.5312. Time: 125.8080 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #39: GFLOPs: 0.2648. Time: 27333.1712 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #40: GFLOPs: 65.3517. Time: 110.7529 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #41: GFLOPs: 3.6236. Time: 1997.4162 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #42: GFLOPs: 23.7728. Time: 304.4607 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #43: GFLOPs: 17.6799. Time: 409.3856 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #44: GFLOPs: 5.2372. Time: 1382.0093 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #45: GFLOPs: 64.8693. Time: 111.5764 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #46: GFLOPs: 4.2034. Time: 1721.8928 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #47: GFLOPs: 41.0277. Time: 176.4145 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #48: GFLOPs: 27.6750. Time: 261.5317 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #49: GFLOPs: 15.6238. Time: 463.2605 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #50: GFLOPs: 1.4039. Time: 5155.5502 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #51: GFLOPs: 0.4920. Time: 14712.2193 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #52: GFLOPs: 0.2485. Time: 29122.5357 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #53: GFLOPs: 21.6525. Time: 334.2755 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #54: GFLOPs: 1.8229. Time: 3970.6342 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #55: GFLOPs: 88.9608. Time: 81.3604 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #56: GFLOPs: 4.5950. Time: 1575.1763 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #57: GFLOPs: 67.1157. Time: 107.8420 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #58: GFLOPs: 0.8365. Time: 8652.2972 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #59: GFLOPs: 5.4133. Time: 1337.0524 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #60: GFLOPs: 1.9725. Time: 3669.3665 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #61: GFLOPs: 2.3583. Time: 3069.1753 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #62: GFLOPs: 19.5719. Time: 369.8109 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #63: GFLOPs: 17.5590. Time: 412.2039 us. Best GFLOPs: 96.5885
2024-04-28 22:42:57 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_13] Trial #64: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(144), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(16) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(7), ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(36), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(16) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(576), ic_0 * T.int64(36) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(2) * T.int64(4) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(7), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(16) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(7), ax3)
                    v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(16) // T.int64(8) * T.int64(2) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) + ax4)
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 2, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 36])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
b101 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b101)
b119 = sch.decompose_reduction(block=b101, loop=l103)
