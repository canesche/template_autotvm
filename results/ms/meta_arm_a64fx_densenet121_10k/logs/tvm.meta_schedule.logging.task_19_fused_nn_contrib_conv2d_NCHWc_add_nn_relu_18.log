2024-04-28 20:45:02 [INFO] [task_scheduler.cc:160] Initializing Task #19: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18"
2024-04-28 20:45:02 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(232), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4), T.int64(928), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:45:02 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:45:02 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(232), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(2), T.int64(4), T.int64(232), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(928), ic_0 * T.int64(4) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 8, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[232, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:45:02 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(232), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(2), T.int64(4)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(232), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(928), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(2) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 8, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[232, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:45:02 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(232), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(8), T.int64(7), T.int64(2), T.int64(4), T.int64(232), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + oc_chunk_1 * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(928), ic_0 * T.int64(4) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(16), T.int64(14), T.int64(2), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 8, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[232, 4])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 21:17:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:17:11 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:17:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb6f86c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c0dd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x84d84b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6b729b8)]: 0 failure(s)
2024-04-28 21:17:14 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:17:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb6f86c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c0dd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x84d84b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6b729b8)]: 0 failure(s)
2024-04-28 21:17:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb6f86c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c0dd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x84d84b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6b729b8)]: 0 failure(s)
2024-04-28 21:17:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb6f86c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c0dd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x84d84b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6b729b8)]: 0 failure(s)
2024-04-28 21:17:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb6f86c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c0dd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x84d84b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6b729b8)]: 0 failure(s)
2024-04-28 21:17:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9993  0.9992  0.9983  0.9981  0.9980  0.9977  0.9976  0.9976  0.9969  0.9969  0.9967  0.9966  0.9959  0.9943  0.9942
[17 : 32]:	0.9941  0.9940  0.9939  0.9932  0.9931  0.9928  0.9927  0.9926  0.9910  0.9907  0.9897  0.9897  0.9896  0.9884  0.9882  0.9871
[33 : 48]:	0.9870  0.9870  0.9865  0.9860  0.9857  0.9843  0.9839  0.9838  0.9837  0.9830  0.9825  0.9821  0.9820  0.9819  0.9817  0.9814
[49 : 64]:	0.9813  0.9811  0.9810  0.9809  0.9808  0.9806  0.9796  0.9795  0.9791  0.9784  0.9780  0.9771  0.9758  0.9751  0.9750  0.9743
2024-04-28 21:17:28 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:17:28 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #1: GFLOPs: 43.0732. Time: 1082.1931 us. Best GFLOPs: 43.0732
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #2: GFLOPs: 14.1046. Time: 3304.8436 us. Best GFLOPs: 43.0732
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #3: GFLOPs: 2.3701. Time: 19667.1457 us. Best GFLOPs: 43.0732
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #4: GFLOPs: 57.5777. Time: 809.5750 us. Best GFLOPs: 57.5777
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #5: GFLOPs: 17.3773. Time: 2682.4354 us. Best GFLOPs: 57.5777
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #6: GFLOPs: 5.1154. Time: 9112.3665 us. Best GFLOPs: 57.5777
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #7: GFLOPs: 5.1723. Time: 9012.1081 us. Best GFLOPs: 57.5777
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #8: GFLOPs: 62.3014. Time: 748.1939 us. Best GFLOPs: 62.3014
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #9: GFLOPs: 54.6937. Time: 852.2643 us. Best GFLOPs: 62.3014
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #10: GFLOPs: 0.3088. Time: 150966.4900 us. Best GFLOPs: 62.3014
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #11: GFLOPs: 2.2925. Time: 20332.6488 us. Best GFLOPs: 62.3014
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #12: GFLOPs: 34.5835. Time: 1347.8547 us. Best GFLOPs: 62.3014
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #13: GFLOPs: 32.0522. Time: 1454.2983 us. Best GFLOPs: 62.3014
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #14: GFLOPs: 44.6747. Time: 1043.3975 us. Best GFLOPs: 62.3014
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #15: GFLOPs: 94.2417. Time: 494.6166 us. Best GFLOPs: 94.2417
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #16: GFLOPs: 9.0462. Time: 5152.8453 us. Best GFLOPs: 94.2417
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #17: GFLOPs: 104.0562. Time: 447.9648 us. Best GFLOPs: 104.0562
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #18: GFLOPs: 110.7942. Time: 420.7215 us. Best GFLOPs: 110.7942
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #19: GFLOPs: 0.7633. Time: 61071.0740 us. Best GFLOPs: 110.7942
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #20: GFLOPs: 79.3980. Time: 587.0867 us. Best GFLOPs: 110.7942
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #21: GFLOPs: 41.3684. Time: 1126.7890 us. Best GFLOPs: 110.7942
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #22: GFLOPs: 18.2890. Time: 2548.7132 us. Best GFLOPs: 110.7942
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #23: GFLOPs: 1.6210. Time: 28756.7440 us. Best GFLOPs: 110.7942
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #24: GFLOPs: 54.0112. Time: 863.0348 us. Best GFLOPs: 110.7942
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #25: GFLOPs: 7.6909. Time: 6060.8647 us. Best GFLOPs: 110.7942
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #26: GFLOPs: 58.1810. Time: 801.1814 us. Best GFLOPs: 110.7942
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #27: GFLOPs: 5.8898. Time: 7914.2812 us. Best GFLOPs: 110.7942
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #28: GFLOPs: 63.1956. Time: 737.6071 us. Best GFLOPs: 110.7942
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #29: GFLOPs: 36.3118. Time: 1283.7015 us. Best GFLOPs: 110.7942
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #30: GFLOPs: 8.3147. Time: 5606.1648 us. Best GFLOPs: 110.7942
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #31: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(232), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0 in T.serial(T.int64(1), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(2), T.int64(1)):
                    for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(14), T.int64(7), T.int64(1)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(2) + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2_init * T.int64(14) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2_init + oc_block_3_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(7), T.int64(1)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(2) + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(14) + oh_2 * T.int64(14) + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 * T.int64(4) + oc_block_2 + oc_block_3)
                            v_ic = T.axis.reduce(T.int64(928), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(14)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_relu"):
                            v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 16, 2, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[29, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
sch.annotate(block_or_loop=l68, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l68, ann_key="pragma_unroll_explicit", ann_val=1)
l94, l95, l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b67)
l104 = sch.fuse(l102, l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b105)
b132 = sch.decompose_reduction(block=b105, loop=l116)
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #32: GFLOPs: 1.1228. Time: 41515.3347 us. Best GFLOPs: 110.7942
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #33: GFLOPs: 1.0198. Time: 45709.4000 us. Best GFLOPs: 110.7942
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #34: GFLOPs: 17.8957. Time: 2604.7319 us. Best GFLOPs: 110.7942
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #35: GFLOPs: 58.3266. Time: 799.1810 us. Best GFLOPs: 110.7942
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #36: GFLOPs: 33.2664. Time: 1401.2191 us. Best GFLOPs: 110.7942
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #37: GFLOPs: 33.6463. Time: 1385.3976 us. Best GFLOPs: 110.7942
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #38: GFLOPs: 220.0632. Time: 211.8187 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #39: GFLOPs: 61.5618. Time: 757.1818 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #40: GFLOPs: 52.6257. Time: 885.7556 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #41: GFLOPs: 56.7980. Time: 820.6895 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #42: GFLOPs: 49.7842. Time: 936.3115 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #43: GFLOPs: 4.7755. Time: 9760.8815 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #44: GFLOPs: 112.7615. Time: 413.3815 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #45: GFLOPs: 14.1300. Time: 3298.9023 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #46: GFLOPs: 47.4833. Time: 981.6815 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #47: GFLOPs: 5.3197. Time: 8762.3663 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #48: GFLOPs: 2.5421. Time: 18336.7233 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #49: GFLOPs: 5.2658. Time: 8852.0696 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #50: GFLOPs: 96.1874. Time: 484.6113 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #51: GFLOPs: 32.7611. Time: 1422.8311 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #52: GFLOPs: 50.3990. Time: 924.8888 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #53: GFLOPs: 13.5328. Time: 3444.4770 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #54: GFLOPs: 62.7640. Time: 742.6793 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #55: GFLOPs: 49.5367. Time: 940.9901 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #56: GFLOPs: 2.5173. Time: 18517.2267 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #57: GFLOPs: 84.2303. Time: 553.4052 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #58: GFLOPs: 4.1018. Time: 11364.1822 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #59: GFLOPs: 75.1585. Time: 620.2029 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #60: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(232), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(464), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(928), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(16), T.int64(14)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 4, 2, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[464, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #61: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(232), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(16), T.int64(14), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2_init * T.int64(16) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(14), oh_2_init * T.int64(14) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused * T.int64(2) + oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(116), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(14), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2 * T.int64(16) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(14), oh_2 * T.int64(14) + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(928), ic_0 * T.int64(8) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 16])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 14])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[116, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #62: GFLOPs: 1.1685. Time: 39893.4163 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #63: GFLOPs: 99.9010. Time: 466.5968 us. Best GFLOPs: 220.0632
2024-04-28 22:43:17 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #64: GFLOPs: 43.6951. Time: 1066.7894 us. Best GFLOPs: 220.0632
2024-04-29 01:05:12 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:05:13 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 01:05:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb6f86c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c0dd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x84d84b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6b729b8)]: 0 failure(s)
2024-04-29 01:05:15 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 01:05:21 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb6f86c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c0dd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x84d84b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6b729b8)]: 0 failure(s)
2024-04-29 01:05:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb6f86c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c0dd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x84d84b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6b729b8)]: 0 failure(s)
2024-04-29 01:05:31 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb6f86c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c0dd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x84d84b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6b729b8)]: 0 failure(s)
2024-04-29 01:05:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xb6f86c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c0dd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x84d84b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6b729b8)]: 0 failure(s)
2024-04-29 01:05:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9679  0.9590  0.9504  0.9504  0.9195  0.8715  0.8465  0.8465  0.8465  0.8336  0.8336  0.7918  0.7875  0.7846  0.7806  0.7632
[17 : 32]:	0.7613  0.7524  0.7443  0.7443  0.7430  0.7311  0.7311  0.7310  0.7310  0.7237  0.7012  0.6939  0.6770  0.6756  0.6717  0.6636
[33 : 48]:	0.6636  0.6625  0.6521  0.6519  0.6518  0.6482  0.6461  0.6417  0.6415  0.6379  0.6379  0.6344  0.6327  0.6324  0.6289  0.6258
[49 : 64]:	0.6239  0.6222  0.6212  0.6194  0.6183  0.6138  0.6134  0.6113  0.6055  0.6009  0.5990  0.5988  0.5955  0.5947  0.5944  0.5944
2024-04-29 01:05:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:05:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:07:24 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #65: GFLOPs: 200.9506. Time: 231.9650 us. Best GFLOPs: 220.0632
2024-04-29 01:07:24 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #66: GFLOPs: 208.3592. Time: 223.7170 us. Best GFLOPs: 220.0632
2024-04-29 01:07:24 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #67: GFLOPs: 167.8404. Time: 277.7252 us. Best GFLOPs: 220.0632
2024-04-29 01:07:24 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #68: GFLOPs: 166.6149. Time: 279.7679 us. Best GFLOPs: 220.0632
2024-04-29 01:07:24 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #69: GFLOPs: 96.4277. Time: 483.4037 us. Best GFLOPs: 220.0632
2024-04-29 01:07:24 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #70: GFLOPs: 86.9149. Time: 536.3123 us. Best GFLOPs: 220.0632
2024-04-29 01:07:24 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #71: GFLOPs: 139.2181. Time: 334.8235 us. Best GFLOPs: 220.0632
2024-04-29 01:07:24 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #72: GFLOPs: 136.0626. Time: 342.5887 us. Best GFLOPs: 220.0632
2024-04-29 01:07:24 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #73: GFLOPs: 137.8491. Time: 338.1489 us. Best GFLOPs: 220.0632
2024-04-29 01:07:24 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #74: GFLOPs: 120.1584. Time: 387.9337 us. Best GFLOPs: 220.0632
2024-04-29 01:07:24 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #75: GFLOPs: 117.4768. Time: 396.7889 us. Best GFLOPs: 220.0632
2024-04-29 01:07:24 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #76: GFLOPs: 156.4825. Time: 297.8831 us. Best GFLOPs: 220.0632
2024-04-29 01:07:24 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #77: GFLOPs: 91.6739. Time: 508.4708 us. Best GFLOPs: 220.0632
2024-04-29 01:07:24 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #78: GFLOPs: 91.5291. Time: 509.2753 us. Best GFLOPs: 220.0632
2024-04-29 01:07:24 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #79: GFLOPs: 89.9329. Time: 518.3145 us. Best GFLOPs: 220.0632
2024-04-29 01:07:24 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #80: GFLOPs: 251.3034. Time: 185.4870 us. Best GFLOPs: 251.3034
2024-04-29 01:07:24 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #81: GFLOPs: 139.4235. Time: 334.3302 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #82: GFLOPs: 116.2183. Time: 401.0856 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #83: GFLOPs: 113.2361. Time: 411.6488 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #84: GFLOPs: 113.4240. Time: 410.9669 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #85: GFLOPs: 171.3457. Time: 272.0436 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #86: GFLOPs: 100.3092. Time: 464.6982 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #87: GFLOPs: 106.5941. Time: 437.2990 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #88: GFLOPs: 87.2986. Time: 533.9549 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #89: GFLOPs: 88.4328. Time: 527.1065 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #90: GFLOPs: 180.3173. Time: 258.5082 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #91: GFLOPs: 135.1032. Time: 345.0214 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #92: GFLOPs: 181.7233. Time: 256.5081 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #93: GFLOPs: 113.9924. Time: 408.9175 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #94: GFLOPs: 129.6792. Time: 359.4523 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #95: GFLOPs: 140.1734. Time: 332.5417 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #96: GFLOPs: 232.1436. Time: 200.7960 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #97: GFLOPs: 233.4501. Time: 199.6722 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #98: GFLOPs: 131.8872. Time: 353.4347 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #99: GFLOPs: 168.3045. Time: 276.9594 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #100: GFLOPs: 85.0675. Time: 547.9591 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #101: GFLOPs: 150.5580. Time: 309.6050 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #102: GFLOPs: 147.3448. Time: 316.3567 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #103: GFLOPs: 172.7931. Time: 269.7648 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #104: GFLOPs: 144.5091. Time: 322.5645 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #105: GFLOPs: 127.3969. Time: 365.8921 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #106: GFLOPs: 67.8708. Time: 686.7976 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #107: GFLOPs: 163.3695. Time: 285.3257 us. Best GFLOPs: 251.3034
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #108: GFLOPs: 272.0433. Time: 171.3459 us. Best GFLOPs: 272.0433
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:121] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #109: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(232), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(8) + oc_chunk_2_init + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for oc_block_3_fused in T.vectorized(T.int64(4)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(8) + oc_chunk_2 + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 * T.int64(4) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(928), ic_0 * T.int64(32) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(1)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(98) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(98) // T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(7) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 8, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 1, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[29, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #110: GFLOPs: 152.9304. Time: 304.8021 us. Best GFLOPs: 272.0433
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #111: GFLOPs: 94.8938. Time: 491.2177 us. Best GFLOPs: 272.0433
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #112: GFLOPs: 159.8464. Time: 291.6143 us. Best GFLOPs: 272.0433
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #113: GFLOPs: 137.9618. Time: 337.8725 us. Best GFLOPs: 272.0433
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #114: GFLOPs: 58.0290. Time: 803.2800 us. Best GFLOPs: 272.0433
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #115: GFLOPs: 171.1511. Time: 272.3529 us. Best GFLOPs: 272.0433
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #116: GFLOPs: 132.9603. Time: 350.5822 us. Best GFLOPs: 272.0433
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #117: GFLOPs: 113.2438. Time: 411.6210 us. Best GFLOPs: 272.0433
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #118: GFLOPs: 51.9081. Time: 898.0013 us. Best GFLOPs: 272.0433
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #119: GFLOPs: 107.5478. Time: 433.4214 us. Best GFLOPs: 272.0433
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #120: GFLOPs: 93.0120. Time: 501.1556 us. Best GFLOPs: 272.0433
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #121: GFLOPs: 84.4984. Time: 551.6493 us. Best GFLOPs: 272.0433
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #122: GFLOPs: 61.1634. Time: 762.1149 us. Best GFLOPs: 272.0433
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #123: GFLOPs: 100.8551. Time: 462.1827 us. Best GFLOPs: 272.0433
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #124: GFLOPs: 164.4647. Time: 283.4257 us. Best GFLOPs: 272.0433
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #125: GFLOPs: 104.2618. Time: 447.0813 us. Best GFLOPs: 272.0433
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #126: GFLOPs: 68.9183. Time: 676.3591 us. Best GFLOPs: 272.0433
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #127: GFLOPs: 51.9784. Time: 896.7868 us. Best GFLOPs: 272.0433
2024-04-29 01:07:25 [INFO] [task_scheduler.cc:131] [Task #19: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_18] Trial #128: GFLOPs: 5.9893. Time: 7782.8128 us. Best GFLOPs: 272.0433
