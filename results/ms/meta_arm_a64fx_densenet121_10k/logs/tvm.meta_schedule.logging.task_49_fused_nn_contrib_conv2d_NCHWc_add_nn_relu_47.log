2024-04-28 20:47:00 [INFO] [task_scheduler.cc:160] Initializing Task #49: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47"
2024-04-28 20:47:00 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(256), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:47:00 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:47:00 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(4), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(32) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(4) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 32])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:47:00 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(32) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(14), T.int64(1)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(28), ow_1 * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_1 + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 32])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:47:00 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(14), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(32) + oc_chunk_1 * T.int64(32) + oc_chunk_2 * T.int64(32) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(4) + oc_block_1 + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 32])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 4])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 14, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 22:03:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:03:37 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 22:03:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x73f3628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9616808)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6b91878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8e54d88)]: 0 failure(s)
2024-04-28 22:03:40 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 22:03:43 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x73f3628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9616808)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6b91878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8e54d88)]: 0 failure(s)
2024-04-28 22:03:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x73f3628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9616808)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6b91878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8e54d88)]: 0 failure(s)
2024-04-28 22:03:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x73f3628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9616808)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6b91878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8e54d88)]: 0 failure(s)
2024-04-28 22:03:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x73f3628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9616808)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6b91878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8e54d88)]: 0 failure(s)
2024-04-28 22:03:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9990  0.9987  0.9983  0.9977  0.9957  0.9954  0.9945  0.9939  0.9932  0.9932  0.9927  0.9926  0.9920  0.9919  0.9907
[17 : 32]:	0.9904  0.9904  0.9900  0.9894  0.9893  0.9887  0.9877  0.9875  0.9871  0.9862  0.9844  0.9837  0.9831  0.9823  0.9820  0.9792
[33 : 48]:	0.9792  0.9775  0.9770  0.9745  0.9742  0.9741  0.9738  0.9736  0.9736  0.9730  0.9730  0.9729  0.9724  0.9718  0.9717  0.9715
[49 : 64]:	0.9714  0.9698  0.9696  0.9693  0.9687  0.9678  0.9677  0.9676  0.9670  0.9658  0.9644  0.9635  0.9631  0.9624  0.9621  0.9621
2024-04-28 22:03:53 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:03:53 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #1: GFLOPs: 4.7400. Time: 10882.1175 us. Best GFLOPs: 4.7400
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #2: GFLOPs: 1.4988. Time: 34414.4380 us. Best GFLOPs: 4.7400
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #3: GFLOPs: 3.0374. Time: 16982.0220 us. Best GFLOPs: 4.7400
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #4: GFLOPs: 8.1078. Time: 6361.9144 us. Best GFLOPs: 8.1078
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #5: GFLOPs: 37.5691. Time: 1372.9611 us. Best GFLOPs: 37.5691
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #6: GFLOPs: 197.3670. Time: 261.3453 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #7: GFLOPs: 15.3369. Time: 3363.1928 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #8: GFLOPs: 38.1847. Time: 1350.8260 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #9: GFLOPs: 76.2167. Time: 676.7670 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #10: GFLOPs: 25.5093. Time: 2022.0453 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #11: GFLOPs: 67.6231. Time: 762.7705 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #12: GFLOPs: 78.1068. Time: 660.3900 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #13: GFLOPs: 16.3478. Time: 3155.2220 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #14: GFLOPs: 61.8354. Time: 834.1645 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #15: GFLOPs: 15.0496. Time: 3427.3967 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #16: GFLOPs: 42.0062. Time: 1227.9364 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #17: GFLOPs: 57.1288. Time: 902.8888 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #18: GFLOPs: 46.6294. Time: 1106.1898 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #19: GFLOPs: 4.9281. Time: 10466.6477 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #20: GFLOPs: 51.9873. Time: 992.1824 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #21: GFLOPs: 6.2788. Time: 8215.0336 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #22: GFLOPs: 111.3610. Time: 463.1867 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #23: GFLOPs: 71.5191. Time: 721.2186 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #24: GFLOPs: 39.1839. Time: 1316.3811 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #25: GFLOPs: 54.3077. Time: 949.7902 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #26: GFLOPs: 93.7771. Time: 550.0377 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #27: GFLOPs: 108.3508. Time: 476.0551 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #28: GFLOPs: 36.2860. Time: 1421.5109 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #29: GFLOPs: 53.9733. Time: 955.6748 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #30: GFLOPs: 5.3289. Time: 9679.4395 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #31: GFLOPs: 52.9959. Time: 973.2997 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #32: GFLOPs: 65.9346. Time: 782.3044 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #33: GFLOPs: 5.5337. Time: 9321.2525 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #34: GFLOPs: 61.6771. Time: 836.3057 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #35: GFLOPs: 119.6894. Time: 430.9566 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #36: GFLOPs: 13.4283. Time: 3841.2083 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #37: GFLOPs: 34.0222. Time: 1516.0981 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #38: GFLOPs: 155.8752. Time: 330.9117 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #39: GFLOPs: 51.6943. Time: 997.8077 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:121] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #40: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(32), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2_init * T.int64(32) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) + ow_2_init + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_2 * T.int64(32) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(8) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(4)):
                for ax3_ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(28) * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(28))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 32])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 28, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[32, 8])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #41: GFLOPs: 145.6704. Time: 354.0935 us. Best GFLOPs: 197.3670
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #42: GFLOPs: 209.7699. Time: 245.8929 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #43: GFLOPs: 49.1498. Time: 1049.4636 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #44: GFLOPs: 105.5200. Time: 488.8263 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #45: GFLOPs: 2.3233. Time: 22201.3350 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #46: GFLOPs: 92.6614. Time: 556.6603 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #47: GFLOPs: 59.0852. Time: 872.9926 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #48: GFLOPs: 84.0619. Time: 613.6065 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #49: GFLOPs: 6.2913. Time: 8198.7365 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #50: GFLOPs: 6.2653. Time: 8232.8315 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #51: GFLOPs: 45.2618. Time: 1139.6137 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #52: GFLOPs: 108.2812. Time: 476.3610 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #53: GFLOPs: 5.5213. Time: 9342.1064 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #54: GFLOPs: 107.0506. Time: 481.8368 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #55: GFLOPs: 39.2722. Time: 1313.4204 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #56: GFLOPs: 16.9413. Time: 3044.6882 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:121] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #57: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(7), T.int64(2)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(4) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2_init + oc_block_3_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(1)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(4) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(32), T.int64(4)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_relu"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(2) * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(14) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 4, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 1, 2])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[16, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b102)
b125 = sch.decompose_reduction(block=b102, loop=l109)
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #58: GFLOPs: 6.2601. Time: 8239.5968 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #59: GFLOPs: 39.1179. Time: 1318.6033 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #60: GFLOPs: 4.4103. Time: 11695.5581 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #61: GFLOPs: 84.8067. Time: 608.2175 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #62: GFLOPs: 155.3553. Time: 332.0190 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #63: GFLOPs: 92.7515. Time: 556.1195 us. Best GFLOPs: 209.7699
2024-04-28 22:45:45 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #64: GFLOPs: 49.4500. Time: 1043.0936 us. Best GFLOPs: 209.7699
2024-04-29 00:47:24 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:47:25 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-29 00:47:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x73f3628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9616808)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6b91878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8e54d88)]: 0 failure(s)
2024-04-29 00:47:27 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2024-04-29 00:47:32 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x73f3628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9616808)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6b91878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8e54d88)]: 0 failure(s)
2024-04-29 00:47:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x73f3628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9616808)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6b91878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8e54d88)]: 0 failure(s)
2024-04-29 00:47:43 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x73f3628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9616808)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6b91878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8e54d88)]: 0 failure(s)
2024-04-29 00:47:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x73f3628)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x9616808)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x6b91878)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x8e54d88)]: 0 failure(s)
2024-04-29 00:47:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9475  0.8602  0.8283  0.8196  0.8018  0.8010  0.7905  0.7783  0.7754  0.7646  0.7608  0.7551  0.7531  0.7531  0.7409  0.7341
[17 : 32]:	0.7331  0.7267  0.7253  0.7220  0.7206  0.7180  0.7147  0.7138  0.7137  0.7132  0.7108  0.6991  0.6973  0.6973  0.6935  0.6881
[33 : 48]:	0.6878  0.6825  0.6818  0.6794  0.6794  0.6753  0.6718  0.6569  0.6554  0.6530  0.6507  0.6495  0.6491  0.6478  0.6430  0.6416
[49 : 64]:	0.6374  0.6367  0.6364  0.6358  0.6355  0.6341  0.6327  0.6322  0.6292  0.6286  0.6282  0.6277  0.6275  0.6258  0.6248  0.6231
2024-04-29 00:47:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:47:52 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #65: GFLOPs: 103.5377. Time: 498.1850 us. Best GFLOPs: 209.7699
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #66: GFLOPs: 78.1461. Time: 660.0580 us. Best GFLOPs: 209.7699
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #67: GFLOPs: 97.8740. Time: 527.0136 us. Best GFLOPs: 209.7699
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #68: GFLOPs: 140.2104. Time: 367.8824 us. Best GFLOPs: 209.7699
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #69: GFLOPs: 140.7907. Time: 366.3661 us. Best GFLOPs: 209.7699
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #70: GFLOPs: 332.0514. Time: 155.3402 us. Best GFLOPs: 332.0514
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #71: GFLOPs: 153.2155. Time: 336.6562 us. Best GFLOPs: 332.0514
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #72: GFLOPs: 134.1349. Time: 384.5452 us. Best GFLOPs: 332.0514
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #73: GFLOPs: 188.6211. Time: 273.4632 us. Best GFLOPs: 332.0514
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #74: GFLOPs: 171.6451. Time: 300.5092 us. Best GFLOPs: 332.0514
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #75: GFLOPs: 241.9775. Time: 213.1642 us. Best GFLOPs: 332.0514
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #76: GFLOPs: 186.4408. Time: 276.6611 us. Best GFLOPs: 332.0514
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #77: GFLOPs: 312.9888. Time: 164.8012 us. Best GFLOPs: 332.0514
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #78: GFLOPs: 135.9020. Time: 379.5451 us. Best GFLOPs: 332.0514
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #79: GFLOPs: 144.3747. Time: 357.2712 us. Best GFLOPs: 332.0514
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #80: GFLOPs: 126.9312. Time: 406.3692 us. Best GFLOPs: 332.0514
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #81: GFLOPs: 186.1130. Time: 277.1485 us. Best GFLOPs: 332.0514
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #82: GFLOPs: 194.5457. Time: 265.1353 us. Best GFLOPs: 332.0514
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #83: GFLOPs: 135.0607. Time: 381.9093 us. Best GFLOPs: 332.0514
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #84: GFLOPs: 182.3410. Time: 282.8817 us. Best GFLOPs: 332.0514
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #85: GFLOPs: 71.2753. Time: 723.6861 us. Best GFLOPs: 332.0514
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #86: GFLOPs: 147.0928. Time: 350.6694 us. Best GFLOPs: 332.0514
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #87: GFLOPs: 132.1119. Time: 390.4338 us. Best GFLOPs: 332.0514
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #88: GFLOPs: 236.1408. Time: 218.4330 us. Best GFLOPs: 332.0514
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:121] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #89: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(56) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(8) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(56) // T.int64(14) * T.int64(7) + oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(56) * T.int64(8) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(8) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(56) // T.int64(14) * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(32) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(56) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(56) // T.int64(14) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(14) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 1, 1, 8])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 1, 7, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[8, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #90: GFLOPs: 334.6439. Time: 154.1368 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #91: GFLOPs: 200.2482. Time: 257.5850 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #92: GFLOPs: 149.1382. Time: 345.8600 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #93: GFLOPs: 186.5628. Time: 276.4803 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #94: GFLOPs: 112.9527. Time: 456.6594 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #95: GFLOPs: 158.6505. Time: 325.1231 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #96: GFLOPs: 108.0795. Time: 477.2498 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #97: GFLOPs: 170.1952. Time: 303.0692 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #98: GFLOPs: 179.8857. Time: 286.7428 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #99: GFLOPs: 198.4047. Time: 259.9784 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #100: GFLOPs: 198.3547. Time: 260.0438 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #101: GFLOPs: 169.0788. Time: 305.0703 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #102: GFLOPs: 190.6316. Time: 270.5792 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #103: GFLOPs: 162.2704. Time: 317.8702 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #104: GFLOPs: 22.6603. Time: 2276.2668 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #105: GFLOPs: 156.1290. Time: 330.3738 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #106: GFLOPs: 187.2466. Time: 275.4705 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #107: GFLOPs: 167.3120. Time: 308.2919 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #108: GFLOPs: 12.7006. Time: 4061.3127 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #109: GFLOPs: 182.5615. Time: 282.5400 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #110: GFLOPs: 135.8731. Time: 379.6258 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #111: GFLOPs: 175.2233. Time: 294.3725 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #112: GFLOPs: 161.5589. Time: 319.2701 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #113: GFLOPs: 163.0051. Time: 316.4374 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #114: GFLOPs: 188.2018. Time: 274.0724 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #115: GFLOPs: 198.3041. Time: 260.1103 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #116: GFLOPs: 161.4628. Time: 319.4602 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #117: GFLOPs: 161.4976. Time: 319.3912 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #118: GFLOPs: 146.5533. Time: 351.9602 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #119: GFLOPs: 151.7402. Time: 339.9293 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #120: GFLOPs: 170.5825. Time: 302.3811 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #121: GFLOPs: 102.2516. Time: 504.4510 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:121] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #122: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(64), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(4), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(49) * T.int64(4) + oc_chunk_1 + oc_chunk_2_init + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(4) + ow_1 + ow_2_init + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2_init * T.int64(4) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for oc_block_3_fused in T.vectorized(T.int64(4)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(49) * T.int64(4) + oc_chunk_1 + oc_chunk_2 + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(4) + ow_1 + ow_2 + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), oc_block_1 * T.int64(4) + oc_block_2 * T.int64(4) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(256), ic_0 * T.int64(2) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(4), T.int64(4)):
                for ax3_ax4_fused in T.vectorized(T.int64(16)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(49) * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(7) * T.int64(4) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 4, 1, 1])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 4, 1, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 4])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[128, 2])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l100, l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #123: GFLOPs: 119.7713. Time: 430.6617 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #124: GFLOPs: 143.9633. Time: 358.2921 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #125: GFLOPs: 111.7269. Time: 461.6696 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #126: GFLOPs: 93.2127. Time: 553.3683 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #127: GFLOPs: 14.7426. Time: 3498.7668 us. Best GFLOPs: 334.6439
2024-04-29 00:49:39 [INFO] [task_scheduler.cc:131] [Task #49: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_47] Trial #128: GFLOPs: 96.0305. Time: 537.1309 us. Best GFLOPs: 334.6439
