2024-04-28 20:47:08 [INFO] [task_scheduler.cc:160] Initializing Task #51: "fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49"
2024-04-28 20:47:08 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n, oc_chunk, oh, ow, oc_block, ic, kh, kw in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4), T.int64(192), T.int64(1), T.int64(1)):
            with T.block("conv2d_NCHWc"):
                v_n, v_oc_chunk, v_oh, v_ow, v_oc_block, v_ic, v_kh, v_kw = T.axis.remap("SSSSSRRR", [n, oc_chunk, oh, ow, oc_block, ic, kh, kw])
                T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                with T.init():
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.float32(0))
2024-04-28 20:47:08 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:47:08 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1)):
                with T.block("conv2d_NCHWc"):
                    v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(16) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    with T.init():
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)):
                with T.block("T_relu"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[12, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
2024-04-28 20:47:08 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0, n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1)):
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(7), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(4) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), oh_1 * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[12, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 20:47:08 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
            for n_0, oc_chunk_0, oh_0, ow_0, oc_block_0 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(2)):
                for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1, ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1)):
                    with T.block("conv2d_NCHWc"):
                        v_n = T.axis.spatial(T.int64(1), n_0 + n_1 + n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + oc_chunk_1 * T.int64(4) + oc_chunk_2 * T.int64(4) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(7) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ow_1 * T.int64(7) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 + oc_block_3)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(16) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(14), T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), oc_chunk_0 * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_0 * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), oc_block_0 * T.int64(2) + ax4)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[4, 2, 1, 4])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 7, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[12, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
2024-04-28 22:06:32 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:06:32 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 22:06:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x703e878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x495ff18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62a5068)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6003d88)]: 0 failure(s)
2024-04-28 22:06:35 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 22:06:38 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x703e878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x495ff18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62a5068)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6003d88)]: 0 failure(s)
2024-04-28 22:06:41 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x703e878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x495ff18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62a5068)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6003d88)]: 0 failure(s)
2024-04-28 22:06:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x703e878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x495ff18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62a5068)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6003d88)]: 0 failure(s)
2024-04-28 22:06:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x703e878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x495ff18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62a5068)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6003d88)]: 0 failure(s)
2024-04-28 22:06:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9996  0.9995  0.9989  0.9979  0.9978  0.9969  0.9963  0.9956  0.9955  0.9955  0.9954  0.9938  0.9929  0.9929  0.9928
[17 : 32]:	0.9927  0.9926  0.9921  0.9919  0.9916  0.9909  0.9902  0.9901  0.9900  0.9888  0.9885  0.9882  0.9879  0.9876  0.9874  0.9871
[33 : 48]:	0.9854  0.9850  0.9848  0.9845  0.9845  0.9843  0.9838  0.9820  0.9817  0.9814  0.9811  0.9811  0.9807  0.9804  0.9791  0.9790
[49 : 64]:	0.9778  0.9777  0.9772  0.9771  0.9769  0.9768  0.9765  0.9761  0.9753  0.9749  0.9742  0.9741  0.9737  0.9733  0.9718  0.9709
2024-04-28 22:06:49 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:06:49 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #1: GFLOPs: 75.2383. Time: 514.8425 us. Best GFLOPs: 75.2383
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #2: GFLOPs: 80.1031. Time: 483.5753 us. Best GFLOPs: 80.1031
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #3: GFLOPs: 11.1767. Time: 3465.7663 us. Best GFLOPs: 80.1031
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #4: GFLOPs: 114.4627. Time: 338.4148 us. Best GFLOPs: 114.4627
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #5: GFLOPs: 155.1794. Time: 249.6199 us. Best GFLOPs: 155.1794
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #6: GFLOPs: 26.5649. Time: 1458.1613 us. Best GFLOPs: 155.1794
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #7: GFLOPs: 6.7581. Time: 5731.7715 us. Best GFLOPs: 155.1794
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #8: GFLOPs: 92.7722. Time: 417.5375 us. Best GFLOPs: 155.1794
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #9: GFLOPs: 99.6486. Time: 388.7245 us. Best GFLOPs: 155.1794
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #10: GFLOPs: 156.3943. Time: 247.6808 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #11: GFLOPs: 35.1607. Time: 1101.6814 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #12: GFLOPs: 1.6481. Time: 23503.1332 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #13: GFLOPs: 111.0747. Time: 348.7371 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #14: GFLOPs: 58.9973. Time: 656.5706 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #15: GFLOPs: 80.6729. Time: 480.1600 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #16: GFLOPs: 75.7829. Time: 511.1429 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #17: GFLOPs: 73.5135. Time: 526.9221 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #18: GFLOPs: 65.9401. Time: 587.4402 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #19: GFLOPs: 64.0450. Time: 604.8226 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #20: GFLOPs: 16.2948. Time: 2377.1866 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #21: GFLOPs: 88.8187. Time: 436.1229 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #22: GFLOPs: 16.2104. Time: 2389.5656 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:121] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #23: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(1)):
                for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_init"):
                        v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                        v_oh = T.axis.spatial(T.int64(28), oh_2_init * T.int64(28) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(8) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ow_2_init + ow_3_init)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                        T.reads()
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(1)):
                for oc_block_3_fused in T.vectorized(T.int64(2)):
                    with T.block("conv2d_NCHWc_update"):
                        v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                        v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(56) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_2 * T.int64(28) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(56) // T.int64(8) * T.int64(4) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(2) * T.int64(2) + ow_2 + ow_3)
                        v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                        v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(3) + ic_1)
                        v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                        T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                        T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(1568)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_relu"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(3136) // T.int64(112))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(112) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[8, 2, 1, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 28])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 2, 2, 1])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[64, 3])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v63 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v63)
sch.enter_postproc()
b64 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b64, ann_key="meta_schedule.unroll_explicit")
b65, b66 = sch.get_child_blocks(b64)
l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92 = sch.get_loops(block=b65)
l93 = sch.fuse(l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l93)
l94 = sch.fuse(l92, preserve_unit_iters=True)
sch.vectorize(loop=l94)
sch.annotate(block_or_loop=l93, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l93, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b66)
l100 = sch.fuse(l95, l96, l97, l98, l99, preserve_unit_iters=True)
l101, l102 = sch.split(loop=l100, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b103)
b121 = sch.decompose_reduction(block=b103, loop=l105)
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #24: GFLOPs: 1.5672. Time: 24717.0684 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #25: GFLOPs: 37.3005. Time: 1038.4807 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #26: GFLOPs: 89.6429. Time: 432.1133 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #27: GFLOPs: 17.6430. Time: 2195.5323 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #28: GFLOPs: 4.9040. Time: 7898.8863 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #29: GFLOPs: 3.1477. Time: 12306.0650 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #30: GFLOPs: 27.6956. Time: 1398.6284 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #31: GFLOPs: 6.8458. Time: 5658.3613 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #32: GFLOPs: 36.7830. Time: 1053.0927 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #33: GFLOPs: 84.7449. Time: 457.0879 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #34: GFLOPs: 71.5713. Time: 541.2208 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #35: GFLOPs: 78.9986. Time: 490.3364 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #36: GFLOPs: 117.9690. Time: 328.3564 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #37: GFLOPs: 2.0673. Time: 18737.6717 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #38: GFLOPs: 70.8351. Time: 546.8455 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #39: GFLOPs: 69.5083. Time: 557.2844 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #40: GFLOPs: 61.4840. Time: 630.0158 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #41: GFLOPs: 9.1529. Time: 4232.0848 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #42: GFLOPs: 86.0510. Time: 450.1503 us. Best GFLOPs: 156.3943
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #43: GFLOPs: 192.0428. Time: 201.7044 us. Best GFLOPs: 192.0428
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #44: GFLOPs: 41.2168. Time: 939.8074 us. Best GFLOPs: 192.0428
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #45: GFLOPs: 5.8825. Time: 6584.9772 us. Best GFLOPs: 192.0428
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #46: GFLOPs: 79.7117. Time: 485.9494 us. Best GFLOPs: 192.0428
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #47: GFLOPs: 47.9600. Time: 807.6710 us. Best GFLOPs: 192.0428
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #48: GFLOPs: 56.2035. Time: 689.2072 us. Best GFLOPs: 192.0428
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #49: GFLOPs: 30.0166. Time: 1290.4822 us. Best GFLOPs: 192.0428
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #50: GFLOPs: 4.7500. Time: 8154.8863 us. Best GFLOPs: 192.0428
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #51: GFLOPs: 43.2451. Time: 895.7280 us. Best GFLOPs: 192.0428
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:121] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #52: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_1, oc_chunk_1, oh_1, ow_1, oc_block_1 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1)):
                for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(14)):
                    for oc_block_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_init"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2_init + n_3_init)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(28) + oh_2_init * T.int64(28) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + ow_1 * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2_init * T.int64(2) + oc_block_3_fused_init)
                            T.reads()
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
                for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(14)):
                    for oc_block_3_fused in T.vectorized(T.int64(2)):
                        with T.block("conv2d_NCHWc_update"):
                            v_n = T.axis.spatial(T.int64(1), n_1 + n_2 + n_3)
                            v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(16) + oc_chunk_1 * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(28) + oh_2 * T.int64(28) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + ow_1 * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                            v_oc_block = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + oc_block_1 * T.int64(2) + oc_block_2 * T.int64(2) + oc_block_3_fused)
                            v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(16) + ic_1)
                            v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                            T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                            T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(28), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused // T.int64(4) * T.int64(16) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 28])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 14])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[12, 16])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l94)
l95 = sch.fuse(l93, preserve_unit_iters=True)
sch.vectorize(loop=l95)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b67)
l102 = sch.fuse(l101, preserve_unit_iters=True)
sch.vectorize(loop=l102)
b103 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b103)
b126 = sch.decompose_reduction(block=b103, loop=l110)
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #53: GFLOPs: 122.6019. Time: 315.9484 us. Best GFLOPs: 192.0428
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #54: GFLOPs: 24.4976. Time: 1581.2130 us. Best GFLOPs: 192.0428
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #55: GFLOPs: 98.0104. Time: 395.2220 us. Best GFLOPs: 192.0428
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #56: GFLOPs: 58.1350. Time: 666.3090 us. Best GFLOPs: 192.0428
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #57: GFLOPs: 247.9829. Time: 156.2038 us. Best GFLOPs: 247.9829
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #58: GFLOPs: 11.2796. Time: 3434.1625 us. Best GFLOPs: 247.9829
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #59: GFLOPs: 68.8351. Time: 562.7341 us. Best GFLOPs: 247.9829
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #60: GFLOPs: 54.1550. Time: 715.2778 us. Best GFLOPs: 247.9829
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #61: GFLOPs: 62.6288. Time: 618.4997 us. Best GFLOPs: 247.9829
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #62: GFLOPs: 41.7519. Time: 927.7626 us. Best GFLOPs: 247.9829
2024-04-28 22:45:57 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #63: GFLOPs: 42.0116. Time: 922.0282 us. Best GFLOPs: 247.9829
2024-04-29 01:57:08 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:57:08 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-04-29 01:57:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x703e878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x495ff18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62a5068)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6003d88)]: 0 failure(s)
2024-04-29 01:57:11 [INFO] [evolutionary_search.cc:723] Sampled 451 candidate(s)
2024-04-29 01:57:16 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x703e878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x495ff18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62a5068)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6003d88)]: 0 failure(s)
2024-04-29 01:57:21 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x703e878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x495ff18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62a5068)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6003d88)]: 0 failure(s)
2024-04-29 01:57:27 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x703e878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x495ff18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62a5068)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6003d88)]: 0 failure(s)
2024-04-29 01:57:32 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x703e878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x495ff18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x62a5068)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x6003d88)]: 0 failure(s)
2024-04-29 01:57:35 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9465  0.9316  0.7746  0.7328  0.7238  0.7237  0.7063  0.7031  0.6945  0.6945  0.6905  0.6800  0.6738  0.6652  0.6619  0.6429
[17 : 32]:	0.6429  0.6380  0.6358  0.6357  0.6351  0.6297  0.6232  0.6220  0.6213  0.6187  0.6166  0.6124  0.6110  0.6102  0.6083  0.5997
[33 : 48]:	0.5997  0.5979  0.5965  0.5943  0.5930  0.5915  0.5900  0.5899  0.5893  0.5841  0.5830  0.5809  0.5792  0.5790  0.5790  0.5778
[49 : 64]:	0.5767  0.5765  0.5740  0.5738  0.5735  0.5727  0.5713  0.5704  0.5665  0.5660  0.5650  0.5649  0.5648  0.5647  0.5637  0.5602
2024-04-29 01:57:36 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:57:36 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #64: GFLOPs: 235.8935. Time: 164.2092 us. Best GFLOPs: 247.9829
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #65: GFLOPs: 224.9124. Time: 172.2265 us. Best GFLOPs: 247.9829
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #66: GFLOPs: 192.1979. Time: 201.5416 us. Best GFLOPs: 247.9829
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #67: GFLOPs: 98.5652. Time: 392.9973 us. Best GFLOPs: 247.9829
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #68: GFLOPs: 167.0838. Time: 231.8350 us. Best GFLOPs: 247.9829
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #69: GFLOPs: 152.9518. Time: 253.2554 us. Best GFLOPs: 247.9829
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #70: GFLOPs: 108.7253. Time: 356.2727 us. Best GFLOPs: 247.9829
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #71: GFLOPs: 186.2103. Time: 208.0222 us. Best GFLOPs: 247.9829
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #72: GFLOPs: 142.1910. Time: 272.4215 us. Best GFLOPs: 247.9829
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #73: GFLOPs: 143.4926. Time: 269.9504 us. Best GFLOPs: 247.9829
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #74: GFLOPs: 291.3766. Time: 132.9409 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #75: GFLOPs: 192.9587. Time: 200.7470 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #76: GFLOPs: 132.2195. Time: 292.9663 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #77: GFLOPs: 151.7705. Time: 255.2267 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #78: GFLOPs: 139.5712. Time: 277.5349 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #79: GFLOPs: 185.1300. Time: 209.2361 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #80: GFLOPs: 274.4141. Time: 141.1584 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #81: GFLOPs: 123.3448. Time: 314.0456 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #82: GFLOPs: 103.6082. Time: 373.8688 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #83: GFLOPs: 107.2904. Time: 361.0376 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #84: GFLOPs: 183.9963. Time: 210.5253 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #85: GFLOPs: 182.4202. Time: 212.3442 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #86: GFLOPs: 200.4299. Time: 193.2639 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #87: GFLOPs: 156.8886. Time: 246.9005 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #88: GFLOPs: 165.1120. Time: 234.6037 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #89: GFLOPs: 111.9063. Time: 346.1456 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #90: GFLOPs: 102.6993. Time: 377.1777 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #91: GFLOPs: 124.4900. Time: 311.1566 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #92: GFLOPs: 154.8216. Time: 250.1968 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #93: GFLOPs: 73.1696. Time: 529.3983 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #94: GFLOPs: 116.4304. Time: 332.6956 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #95: GFLOPs: 154.4788. Time: 250.7520 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #96: GFLOPs: 175.6258. Time: 220.5591 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #97: GFLOPs: 146.0236. Time: 265.2713 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:121] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #98: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(32), T.int64(48), T.int64(1), T.int64(1), T.int64(4), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_NCHWc = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(4)))
        for n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_2_init, oc_chunk_2_init, oh_2_init, ow_2_init, oc_block_2_init, n_3_init, oc_chunk_3_init, oh_3_init, ow_3_init, oc_block_3_init in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_init"):
                    v_n = T.axis.spatial(T.int64(1), n_2_init + n_3_init)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(8) + oc_chunk_2_init * T.int64(2) + oc_chunk_3_init)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(8) * T.int64(2) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2_init + oc_block_3_init)
                    T.reads()
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = T.float32(0)
            for ic_0, kh_0, kw_0, n_2, oc_chunk_2, oh_2, ow_2, oc_block_2, ic_1, kh_1, kw_1, n_3, oc_chunk_3, oh_3, ow_3, oc_block_3 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(4), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1)):
                with T.block("conv2d_NCHWc_update"):
                    v_n = T.axis.spatial(T.int64(1), n_2 + n_3)
                    v_oc_chunk = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(8) + oc_chunk_2 * T.int64(2) + oc_chunk_3)
                    v_oh = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(8) * T.int64(2) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                    v_oc_block = T.axis.spatial(T.int64(4), oc_block_2 + oc_block_3)
                    v_ic = T.axis.reduce(T.int64(192), ic_0 * T.int64(32) + ic_1)
                    v_kh = T.axis.reduce(T.int64(1), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(1), kw_0 + kw_1)
                    T.reads(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block], p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)], p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block])
                    T.writes(conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] = conv2d_NCHWc[v_n, v_oc_chunk, v_oh, v_ow, v_oc_block] + p0[v_n, v_ic // T.int64(4), v_oh + v_kh, v_ow + v_kw, v_ic % T.int64(4)] * p1[v_oc_chunk, v_ic // T.int64(4), v_kh, v_kw, v_ic % T.int64(4), v_oc_block]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(8), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_relu"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(32), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused // T.int64(112) * T.int64(16) + n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(8) // T.int64(4) * T.int64(8) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(112) // T.int64(8) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), n_0_oc_chunk_0_oh_0_ow_0_oc_block_0_n_1_oc_chunk_1_oh_1_ow_1_oc_block_1_fused % T.int64(4) * T.int64(7) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(conv2d_NCHWc[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4], T.float32(0))
b0 = sch.get_block(name="conv2d_NCHWc", func_name="main")
b1 = sch.get_block(name="T_add", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b0)
v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l15, l16, l17, l18 = sch.split(loop=l3, factors=[v11, v12, v13, v14], preserve_unit_iters=True)
v19, v20, v21, v22 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[2, 2, 4, 2])
l23, l24, l25, l26 = sch.split(loop=l4, factors=[v19, v20, v21, v22], preserve_unit_iters=True)
v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l31, l32, l33, l34 = sch.split(loop=l5, factors=[v27, v28, v29, v30], preserve_unit_iters=True)
v35, v36, v37, v38 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 4, 1, 7])
l39, l40, l41, l42 = sch.split(loop=l6, factors=[v35, v36, v37, v38], preserve_unit_iters=True)
v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l47, l48, l49, l50 = sch.split(loop=l7, factors=[v43, v44, v45, v46], preserve_unit_iters=True)
v51, v52 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[6, 32])
l53, l54 = sch.split(loop=l8, factors=[v51, v52], preserve_unit_iters=True)
v55, v56 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 1])
l57, l58 = sch.split(loop=l9, factors=[v55, v56], preserve_unit_iters=True)
v59, v60 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 1])
l61, l62 = sch.split(loop=l10, factors=[v59, v60], preserve_unit_iters=True)
sch.reorder(l15, l23, l31, l39, l47, l16, l24, l32, l40, l48, l53, l57, l61, l17, l25, l33, l41, l49, l54, l58, l62, l18, l26, l34, l42, l50)
b63, = sch.get_consumers(block=b0)
sch.reverse_compute_at(block=b63, loop=l48, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v64 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v64)
sch.enter_postproc()
b65 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b65, ann_key="meta_schedule.unroll_explicit")
b66, b67 = sch.get_child_blocks(b65)
l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93 = sch.get_loops(block=b66)
l94 = sch.fuse(l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, preserve_unit_iters=True)
sch.parallel(loop=l94)
sch.annotate(block_or_loop=l94, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l94, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b67)
l101 = sch.fuse(l99, l100, preserve_unit_iters=True)
sch.vectorize(loop=l101)
b102 = sch.get_block(name="conv2d_NCHWc", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b102)
b120 = sch.decompose_reduction(block=b102, loop=l104)
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #99: GFLOPs: 137.8636. Time: 280.9725 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #100: GFLOPs: 183.6842. Time: 210.8830 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #101: GFLOPs: 170.3495. Time: 227.3906 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #102: GFLOPs: 172.3843. Time: 224.7065 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #103: GFLOPs: 200.8332. Time: 192.8758 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #104: GFLOPs: 146.1341. Time: 265.0708 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #105: GFLOPs: 193.8919. Time: 199.7807 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #106: GFLOPs: 137.7521. Time: 281.1998 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #107: GFLOPs: 185.8096. Time: 208.4708 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #108: GFLOPs: 160.9221. Time: 240.7119 us. Best GFLOPs: 291.3766
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #109: GFLOPs: 340.8583. Time: 113.6422 us. Best GFLOPs: 340.8583
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #110: GFLOPs: 100.3810. Time: 385.8883 us. Best GFLOPs: 340.8583
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #111: GFLOPs: 156.8799. Time: 246.9142 us. Best GFLOPs: 340.8583
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #112: GFLOPs: 194.3842. Time: 199.2748 us. Best GFLOPs: 340.8583
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #113: GFLOPs: 187.8657. Time: 206.1892 us. Best GFLOPs: 340.8583
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #114: GFLOPs: 119.8005. Time: 323.3365 us. Best GFLOPs: 340.8583
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #115: GFLOPs: 194.2545. Time: 199.4079 us. Best GFLOPs: 340.8583
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #116: GFLOPs: 101.3293. Time: 382.2771 us. Best GFLOPs: 340.8583
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #117: GFLOPs: 184.5094. Time: 209.9398 us. Best GFLOPs: 340.8583
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #118: GFLOPs: 93.6821. Time: 413.4822 us. Best GFLOPs: 340.8583
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #119: GFLOPs: 153.8695. Time: 251.7449 us. Best GFLOPs: 340.8583
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #120: GFLOPs: 171.8087. Time: 225.4593 us. Best GFLOPs: 340.8583
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #121: GFLOPs: 170.8773. Time: 226.6882 us. Best GFLOPs: 340.8583
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #122: GFLOPs: 159.1959. Time: 243.3221 us. Best GFLOPs: 340.8583
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #123: GFLOPs: 150.1190. Time: 258.0344 us. Best GFLOPs: 340.8583
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #124: GFLOPs: 89.0178. Time: 435.1473 us. Best GFLOPs: 340.8583
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #125: GFLOPs: 79.7327. Time: 485.8216 us. Best GFLOPs: 340.8583
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #126: GFLOPs: 16.0073. Time: 2419.8891 us. Best GFLOPs: 340.8583
2024-04-29 01:59:28 [INFO] [task_scheduler.cc:131] [Task #51: fused_nn_contrib_conv2d_NCHWc_add_nn_relu_49] Trial #127: GFLOPs: 142.7684. Time: 271.3196 us. Best GFLOPs: 340.8583
