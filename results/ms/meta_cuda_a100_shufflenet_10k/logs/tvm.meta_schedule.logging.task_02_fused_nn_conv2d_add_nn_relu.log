2024-04-28 19:50:48 [INFO] [task_scheduler.cc:160] Initializing Task #2: "fused_nn_conv2d_add_nn_relu"
2024-04-28 19:50:48 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(232), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(232), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(232), T.int64(14), T.int64(14), T.int64(232), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(232), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(232), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-28 19:50:48 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:50:48 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(232), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(58), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(112)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(232), rc_0 * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(928)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(232), ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(232), rc_0 * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(29), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(232), nn_2_ff_2_yy_2_xx_2_fused * T.int64(29) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(232), rc_0 * T.int64(4) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(29), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(232), nn_2_ff_2_yy_2_xx_2_fused * T.int64(29) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 8, 29, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[58, 2, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-28 19:50:48 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(232), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(58), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(112)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(232), rc_0_ry_0_rx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(928)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(232), ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(232), rc_0_ry_0_rx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(29), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(232), nn_2_ff_2_yy_2_xx_2_fused * T.int64(29) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(232), rc_0_ry_0_rx_0_fused * T.int64(4) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(29), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(232), nn_2_ff_2_yy_2_xx_2_fused * T.int64(29) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 8, 29, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[58, 2, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-28 19:50:48 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(232), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(58), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(112)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(232), rc_0_ry_0_rx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(928)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(232), ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(232), rc_0_ry_0_rx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(29), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(232), nn_2_ff_2_yy_2_xx_2_fused * T.int64(29) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(232), rc_0_ry_0_rx_0_fused * T.int64(4) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(29), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(232), nn_2_ff_2_yy_2_xx_2_fused * T.int64(29) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 8, 29, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[58, 2, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-28 19:52:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 19:52:36 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 19:52:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 479 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 19:52:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 953 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 19:52:41 [INFO] [evolutionary_search.cc:723] Sampled 71 candidate(s)
2024-04-28 19:52:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 19:52:48 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 76 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 19:52:51 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 19:52:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 71 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 19:52:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9991  0.9971  0.9967  0.9951  0.9951  0.9944  0.9939  0.9936  0.9932  0.9931  0.9920  0.9919  0.9917  0.9907  0.9903
[17 : 32]:	0.9895  0.9881  0.9876  0.9875  0.9874  0.9871  0.9863  0.9861  0.9860  0.9853  0.9837  0.9825  0.9821  0.9806  0.9804  0.9802
[33 : 48]:	0.9795  0.9794  0.9785  0.9777  0.9775  0.9772  0.9769  0.9769  0.9760  0.9753  0.9736  0.9719  0.9718  0.9715  0.9714  0.9705
[49 : 64]:	0.9702  0.9700  0.9691  0.9690  0.9689  0.9684  0.9682  0.9680  0.9671  0.9665  0.9653  0.9652  0.9649  0.9647  0.9642  0.9622
2024-04-28 19:52:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 19:52:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #1: GFLOPs: 354.9707. Time: 59.6949 us. Best GFLOPs: 354.9707
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #2: GFLOPs: 391.0029. Time: 54.1939 us. Best GFLOPs: 391.0029
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #3: GFLOPs: 5.8441. Time: 3625.8744 us. Best GFLOPs: 391.0029
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #4: GFLOPs: 83.0275. Time: 255.2162 us. Best GFLOPs: 391.0029
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #5: GFLOPs: 635.2035. Time: 33.3593 us. Best GFLOPs: 635.2035
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #6: GFLOPs: 163.8657. Time: 129.3129 us. Best GFLOPs: 635.2035
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #7: GFLOPs: 71.0466. Time: 298.2542 us. Best GFLOPs: 635.2035
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #8: GFLOPs: 159.4201. Time: 132.9189 us. Best GFLOPs: 635.2035
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #9: GFLOPs: 433.0975. Time: 48.9265 us. Best GFLOPs: 635.2035
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #10: GFLOPs: 143.7175. Time: 147.4417 us. Best GFLOPs: 635.2035
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #11: GFLOPs: 38.3488. Time: 552.5588 us. Best GFLOPs: 635.2035
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #12: GFLOPs: 385.6305. Time: 54.9488 us. Best GFLOPs: 635.2035
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #13: GFLOPs: 423.8806. Time: 49.9904 us. Best GFLOPs: 635.2035
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #14: GFLOPs: 132.0152. Time: 160.5115 us. Best GFLOPs: 635.2035
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #15: GFLOPs: 80.9850. Time: 261.6529 us. Best GFLOPs: 635.2035
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #16: GFLOPs: 599.3846. Time: 35.3528 us. Best GFLOPs: 635.2035
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #17: GFLOPs: 107.2892. Time: 197.5030 us. Best GFLOPs: 635.2035
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #18: GFLOPs: 328.4388. Time: 64.5172 us. Best GFLOPs: 635.2035
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #19: GFLOPs: 29.5818. Time: 716.3173 us. Best GFLOPs: 635.2035
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #20: GFLOPs: 336.1074. Time: 63.0452 us. Best GFLOPs: 635.2035
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #21: GFLOPs: 143.0471. Time: 148.1327 us. Best GFLOPs: 635.2035
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #22: GFLOPs: 9.9703. Time: 2125.2985 us. Best GFLOPs: 635.2035
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #23: GFLOPs: 913.9296. Time: 23.1855 us. Best GFLOPs: 913.9296
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #24: GFLOPs: 421.1689. Time: 50.3122 us. Best GFLOPs: 913.9296
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #25: GFLOPs: 65.0229. Time: 325.8844 us. Best GFLOPs: 913.9296
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #26: GFLOPs: 10.4023. Time: 2037.0472 us. Best GFLOPs: 913.9296
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #27: GFLOPs: 1425.1565. Time: 14.8685 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #28: GFLOPs: 589.7343. Time: 35.9314 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #29: GFLOPs: 92.8510. Time: 228.2145 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #30: GFLOPs: 276.3164. Time: 76.6873 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #31: GFLOPs: 455.3965. Time: 46.5308 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #32: GFLOPs: 17.3781. Time: 1219.3512 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #33: GFLOPs: 368.8640. Time: 57.4465 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #34: GFLOPs: 395.9567. Time: 53.5158 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #35: GFLOPs: 277.5788. Time: 76.3385 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #36: GFLOPs: 165.7477. Time: 127.8446 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #37: GFLOPs: 307.3560. Time: 68.9427 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #38: GFLOPs: 173.1349. Time: 122.3898 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #39: GFLOPs: 372.7453. Time: 56.8483 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #40: GFLOPs: 87.2748. Time: 242.7957 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #41: GFLOPs: 592.6225. Time: 35.7562 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #42: GFLOPs: 58.8277. Time: 360.2035 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #43: GFLOPs: 401.7319. Time: 52.7465 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #44: GFLOPs: 12.7977. Time: 1655.7576 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #45: GFLOPs: 107.2282. Time: 197.6155 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #46: GFLOPs: 322.5990. Time: 65.6851 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #47: GFLOPs: 12.5488. Time: 1688.5975 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #48: GFLOPs: 714.4136. Time: 29.6606 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #49: GFLOPs: 142.4069. Time: 148.7986 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #50: GFLOPs: 663.3775. Time: 31.9425 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #51: GFLOPs: 603.5391. Time: 35.1095 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #52: GFLOPs: 62.3495. Time: 339.8578 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #53: GFLOPs: 25.0890. Time: 844.5898 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #54: GFLOPs: 689.2759. Time: 30.7423 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #55: GFLOPs: 497.6098. Time: 42.5835 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #56: GFLOPs: 453.5616. Time: 46.7190 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #57: GFLOPs: 135.0427. Time: 156.9130 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #58: GFLOPs: 892.1236. Time: 23.7523 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #59: GFLOPs: 637.1998. Time: 33.2548 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #60: GFLOPs: 354.2052. Time: 59.8239 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #61: GFLOPs: 148.4651. Time: 142.7268 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #62: GFLOPs: 269.6184. Time: 78.5924 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #63: GFLOPs: 356.1968. Time: 59.4894 us. Best GFLOPs: 1425.1565
2024-04-28 20:20:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #64: GFLOPs: 230.1769. Time: 92.0594 us. Best GFLOPs: 1425.1565
2024-04-28 20:35:16 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:35:16 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-28 20:35:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 417 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 20:35:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 832 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 20:35:20 [INFO] [evolutionary_search.cc:723] Sampled 64 candidate(s)
2024-04-28 20:35:24 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 20:35:28 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 20:35:33 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 20:35:38 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 20:35:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0187  1.0176  1.0125  1.0070  1.0064  1.0055  1.0013  0.9931  0.9899  0.9878  0.9823  0.9782  0.9776  0.9752  0.9667  0.9602
[17 : 32]:	0.9564  0.9559  0.9524  0.9451  0.9384  0.9373  0.9277  0.9251  0.9239  0.9230  0.9226  0.9185  0.9132  0.9077  0.9070  0.9059
[33 : 48]:	0.8945  0.8886  0.8883  0.8771  0.8749  0.8703  0.8588  0.8547  0.8546  0.8531  0.8471  0.8423  0.8269  0.8253  0.8192  0.8146
[49 : 64]:	0.8122  0.8019  0.8003  0.7980  0.7920  0.7920  0.7906  0.7905  0.7894  0.7854  0.7851  0.7829  0.7814  0.7753  0.7735  0.7727
2024-04-28 20:35:39 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:35:39 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #65: GFLOPs: 914.2554. Time: 23.1773 us. Best GFLOPs: 1425.1565
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #66: GFLOPs: 879.2294. Time: 24.1006 us. Best GFLOPs: 1425.1565
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #67: GFLOPs: 1320.4292. Time: 16.0478 us. Best GFLOPs: 1425.1565
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #68: GFLOPs: 853.6217. Time: 24.8236 us. Best GFLOPs: 1425.1565
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #69: GFLOPs: 954.9437. Time: 22.1897 us. Best GFLOPs: 1425.1565
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #70: GFLOPs: 797.8893. Time: 26.5575 us. Best GFLOPs: 1425.1565
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #71: GFLOPs: 1407.2546. Time: 15.0577 us. Best GFLOPs: 1425.1565
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #72: GFLOPs: 620.9579. Time: 34.1246 us. Best GFLOPs: 1425.1565
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #73: GFLOPs: 1317.0571. Time: 16.0889 us. Best GFLOPs: 1425.1565
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #74: GFLOPs: 954.9269. Time: 22.1901 us. Best GFLOPs: 1425.1565
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #75: GFLOPs: 795.1469. Time: 26.6491 us. Best GFLOPs: 1425.1565
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #76: GFLOPs: 716.9932. Time: 29.5539 us. Best GFLOPs: 1425.1565
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #77: GFLOPs: 926.5410. Time: 22.8700 us. Best GFLOPs: 1425.1565
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #78: GFLOPs: 1337.2865. Time: 15.8455 us. Best GFLOPs: 1425.1565
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #79: GFLOPs: 1304.7174. Time: 16.2410 us. Best GFLOPs: 1425.1565
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #80: GFLOPs: 1463.6752. Time: 14.4772 us. Best GFLOPs: 1463.6752
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #81: GFLOPs: 1012.0123. Time: 20.9384 us. Best GFLOPs: 1463.6752
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #82: GFLOPs: 952.9697. Time: 22.2357 us. Best GFLOPs: 1463.6752
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #83: GFLOPs: 1297.3253. Time: 16.3336 us. Best GFLOPs: 1463.6752
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #84: GFLOPs: 952.9896. Time: 22.2352 us. Best GFLOPs: 1463.6752
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #85: GFLOPs: 1374.5252. Time: 15.4162 us. Best GFLOPs: 1463.6752
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #86: GFLOPs: 1482.2753. Time: 14.2956 us. Best GFLOPs: 1482.2753
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #87: GFLOPs: 1474.2516. Time: 14.3734 us. Best GFLOPs: 1482.2753
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #88: GFLOPs: 1309.6297. Time: 16.1801 us. Best GFLOPs: 1482.2753
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #89: GFLOPs: 1058.1358. Time: 20.0257 us. Best GFLOPs: 1482.2753
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #90: GFLOPs: 1307.0415. Time: 16.2121 us. Best GFLOPs: 1482.2753
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #91: GFLOPs: 1540.8012. Time: 13.7526 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #92: GFLOPs: 928.5006. Time: 22.8217 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #93: GFLOPs: 1535.9743. Time: 13.7958 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #94: GFLOPs: 542.3890. Time: 39.0678 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #95: GFLOPs: 1449.5955. Time: 14.6178 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #96: GFLOPs: 1486.1228. Time: 14.2585 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #97: GFLOPs: 937.7601. Time: 22.5963 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #98: GFLOPs: 1470.2671. Time: 14.4123 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #99: GFLOPs: 830.5948. Time: 25.5118 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #100: GFLOPs: 1471.0379. Time: 14.4048 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #101: GFLOPs: 1471.3119. Time: 14.4021 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #102: GFLOPs: 1393.4479. Time: 15.2068 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #103: GFLOPs: 1380.7659. Time: 15.3465 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #104: GFLOPs: 1488.3317. Time: 14.2374 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #105: GFLOPs: 1388.7789. Time: 15.2580 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #106: GFLOPs: 1388.7789. Time: 15.2580 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #107: GFLOPs: 1400.8401. Time: 15.1266 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #108: GFLOPs: 1382.6435. Time: 15.3257 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #109: GFLOPs: 1315.0581. Time: 16.1133 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #110: GFLOPs: 1305.4272. Time: 16.2322 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #111: GFLOPs: 1310.7005. Time: 16.1669 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #112: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(232), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(406), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(232), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(116) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(14) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(8), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(406), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(232), rc_0 * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(406) + ax0_ax1_ax2_ax3_fused_1) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(14) * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(406) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(406) + ax0_ax1_ax2_ax3_fused_1 < T.int64(203))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(406), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(232), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(116) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1624) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(29))
                                        v1 = T.axis.spatial(T.int64(232), rc_0 * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1624) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(29))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(406) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3364))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(232), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(116) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(14) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(232), rc_0 * T.int64(29) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(232), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(116) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(14) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 58, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 29, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109 = sch.split(loop=l107, factors=[None, 406], preserve_unit_iters=True)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b87)
l117, l118, l119 = sch.split(loop=l116, factors=[None, 406, 4], preserve_unit_iters=True)
sch.vectorize(loop=l119)
sch.bind(loop=l118, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b121)
l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b122)
l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l142, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l142, ann_key="pragma_unroll_explicit", ann_val=1)
l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b124)
b169 = sch.get_block(name="conv2d_nchw", func_name="main")
l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189 = sch.get_loops(block=b169)
b190 = sch.decompose_reduction(block=b169, loop=l173)
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #113: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(232), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(98), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(232), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(8), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(232), rc_0 * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1 < T.int64(58))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(29)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(232), (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(29))
                                        v1 = T.axis.spatial(T.int64(232), rc_0 * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(29))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(232), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(232), rc_0 * T.int64(29) + rc_1 * T.int64(29) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(232), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 116, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 1, 29])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109 = sch.split(loop=l107, factors=[None, 116], preserve_unit_iters=True)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b87)
l117, l118, l119 = sch.split(loop=l116, factors=[None, 116, 2], preserve_unit_iters=True)
sch.vectorize(loop=l119)
sch.bind(loop=l118, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b121)
l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b122)
l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b123)
l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b124)
b169 = sch.get_block(name="conv2d_nchw", func_name="main")
l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189 = sch.get_loops(block=b169)
b190 = sch.decompose_reduction(block=b169, loop=l173)
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #114: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(232), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(232), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(8), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(232), rc_0 * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2))
                                        v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(58))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(29)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(232), (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(29))
                                        v1 = T.axis.spatial(T.int64(232), rc_0 * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(29))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(232), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(232), rc_0 * T.int64(29) + rc_1 * T.int64(29) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(232), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 116, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 1, 29])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 116, 2], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119, l120 = sch.split(loop=l117, factors=[None, 116, 2], preserve_unit_iters=True)
sch.vectorize(loop=l120)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b121 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b121, ann_key="meta_schedule.unroll_explicit")
b122, b123, b124, b125 = sch.get_child_blocks(b121)
l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b122)
l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b123)
l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163 = sch.get_loops(block=b124)
sch.annotate(block_or_loop=l144, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l144, ann_key="pragma_unroll_explicit", ann_val=1)
l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b125)
b171 = sch.get_block(name="conv2d_nchw", func_name="main")
l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190, l191 = sch.get_loops(block=b171)
b192 = sch.decompose_reduction(block=b171, loop=l175)
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #115: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(232), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(232), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + yy_3_init * T.int64(2) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(8), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(232), rc_0 * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2))
                                        v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(58))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(29)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(232), (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(29))
                                        v1 = T.axis.spatial(T.int64(232), rc_0 * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(29))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(232), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(232), rc_0 * T.int64(29) + rc_1 * T.int64(29) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(232), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 116, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 1, 29])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 116, 2], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119, l120 = sch.split(loop=l117, factors=[None, 116, 2], preserve_unit_iters=True)
sch.vectorize(loop=l120)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b121 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b121, ann_key="meta_schedule.unroll_explicit")
b122, b123, b124, b125 = sch.get_child_blocks(b121)
l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b122)
l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b123)
l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163 = sch.get_loops(block=b124)
sch.annotate(block_or_loop=l144, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l144, ann_key="pragma_unroll_explicit", ann_val=1)
l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b125)
b171 = sch.get_block(name="conv2d_nchw", func_name="main")
l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190, l191 = sch.get_loops(block=b171)
b192 = sch.decompose_reduction(block=b171, loop=l175)
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #116: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(232), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(232), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(232), nn_0_ff_0_yy_0_xx_0_fused + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(232)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(232), rc_0 * T.int64(58) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(232), nn_0_ff_0_yy_0_xx_0_fused)
                                    v1 = T.axis.spatial(T.int64(232), rc_0 * T.int64(58) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1 < T.int64(58))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(232), nn_0_ff_0_yy_0_xx_0_fused + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(232), rc_0 * T.int64(58) + rc_1 * T.int64(29) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(232), nn_0_ff_0_yy_0_xx_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[232, 1, 1, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 2, 29])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109 = sch.split(loop=l107, factors=[None, 49], preserve_unit_iters=True)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b87)
l117, l118 = sch.split(loop=l116, factors=[None, 49], preserve_unit_iters=True)
sch.bind(loop=l118, thread_axis="threadIdx.x")
b119 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b119, ann_key="meta_schedule.unroll_explicit")
b120, b121, b122, b123 = sch.get_child_blocks(b119)
l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b120)
l132, l133, l134, l135, l136, l137, l138, l139 = sch.get_loops(block=b121)
l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b122)
sch.annotate(block_or_loop=l140, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l140, ann_key="pragma_unroll_explicit", ann_val=1)
l160, l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b123)
b167 = sch.get_block(name="conv2d_nchw", func_name="main")
l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b167)
b188 = sch.decompose_reduction(block=b167, loop=l171)
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #117: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(232), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(232), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(232), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(2) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(15)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(232), rc_0 * T.int64(58) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(98))
                                        v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(98) // T.int64(14))
                                        v3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(232), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(58))
                                        v1 = T.axis.spatial(T.int64(232), rc_0 * T.int64(58) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(58))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(116))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(232), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(232), rc_0 * T.int64(58) + rc_1 * T.int64(29) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(232), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[116, 1, 1, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 2, 29])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 98, 4], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119, l120 = sch.split(loop=l117, factors=[None, 98, 4], preserve_unit_iters=True)
sch.vectorize(loop=l120)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b121 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b121, ann_key="meta_schedule.unroll_explicit")
b122, b123, b124, b125 = sch.get_child_blocks(b121)
l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b122)
l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b123)
l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163 = sch.get_loops(block=b124)
sch.annotate(block_or_loop=l144, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l144, ann_key="pragma_unroll_explicit", ann_val=1)
l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b125)
b171 = sch.get_block(name="conv2d_nchw", func_name="main")
l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190, l191 = sch.get_loops(block=b171)
b192 = sch.decompose_reduction(block=b171, loop=l175)
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #118: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(232), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(232), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(232), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(2) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(29)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(232), rc_0 * T.int64(58) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(98))
                                        v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(98) // T.int64(14))
                                        v3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(232), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(58))
                                        v1 = T.axis.spatial(T.int64(232), rc_0 * T.int64(58) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(58))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(116))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(232), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(232), rc_0 * T.int64(58) + rc_1 * T.int64(29) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(232), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[116, 1, 1, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 2, 29])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 98, 2], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119, l120 = sch.split(loop=l117, factors=[None, 98, 4], preserve_unit_iters=True)
sch.vectorize(loop=l120)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b121 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b121, ann_key="meta_schedule.unroll_explicit")
b122, b123, b124, b125 = sch.get_child_blocks(b121)
l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b122)
l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b123)
l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163 = sch.get_loops(block=b124)
sch.annotate(block_or_loop=l144, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l144, ann_key="pragma_unroll_explicit", ann_val=1)
l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b125)
b171 = sch.get_block(name="conv2d_nchw", func_name="main")
l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190, l191 = sch.get_loops(block=b171)
b192 = sch.decompose_reduction(block=b171, loop=l175)
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:121] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #119: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(232), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(232), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(232), T.int64(232), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(98), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(232), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(8), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(232), rc_0 * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2))
                                        v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(58))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(29)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(232), (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(29))
                                        v1 = T.axis.spatial(T.int64(232), rc_0 * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(29))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(232), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(232), rc_0 * T.int64(29) + rc_1 * T.int64(29) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(232), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 116, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 1, 29])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 116, 2], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119, l120 = sch.split(loop=l117, factors=[None, 116, 2], preserve_unit_iters=True)
sch.vectorize(loop=l120)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b121 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b121, ann_key="meta_schedule.unroll_explicit")
b122, b123, b124, b125 = sch.get_child_blocks(b121)
l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b122)
l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b123)
l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163 = sch.get_loops(block=b124)
l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b125)
b171 = sch.get_block(name="conv2d_nchw", func_name="main")
l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190, l191 = sch.get_loops(block=b171)
b192 = sch.decompose_reduction(block=b171, loop=l175)
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #120: GFLOPs: 1245.6921. Time: 17.0106 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #121: GFLOPs: 958.2046. Time: 22.1142 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #122: GFLOPs: 1365.5486. Time: 15.5175 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #123: GFLOPs: 1299.7078. Time: 16.3036 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #124: GFLOPs: 859.6519. Time: 24.6495 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #125: GFLOPs: 1327.4831. Time: 15.9625 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #126: GFLOPs: 788.8905. Time: 26.8604 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #127: GFLOPs: 103.8926. Time: 203.9602 us. Best GFLOPs: 1540.8012
2024-04-28 20:36:45 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #128: GFLOPs: 35.7712. Time: 592.3746 us. Best GFLOPs: 1540.8012
2024-04-28 21:03:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:03:41 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 21:03:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 371 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 21:03:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 752 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 21:03:44 [INFO] [evolutionary_search.cc:723] Sampled 68 candidate(s)
2024-04-28 21:03:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 21:03:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 21:03:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 21:04:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 130 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 21:04:04 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0506  1.0076  1.0074  1.0042  1.0035  0.9980  0.9945  0.9942  0.9931  0.9931  0.9887  0.9878  0.9878  0.9876  0.9867  0.9752
[17 : 32]:	0.9740  0.9728  0.9710  0.9710  0.9705  0.9647  0.9607  0.9577  0.9563  0.9554  0.9548  0.9543  0.9519  0.9486  0.9479  0.9479
[33 : 48]:	0.9471  0.9471  0.9452  0.9452  0.9447  0.9435  0.9434  0.9416  0.9405  0.9390  0.9379  0.9379  0.9379  0.9374  0.9352  0.9351
[49 : 64]:	0.9345  0.9344  0.9340  0.9327  0.9327  0.9324  0.9316  0.9316  0.9316  0.9307  0.9293  0.9289  0.9283  0.9278  0.9266  0.9266
2024-04-28 21:04:04 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:04:04 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #129: GFLOPs: 1888.7012. Time: 11.2193 us. Best GFLOPs: 1888.7012
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #130: GFLOPs: 1516.3520. Time: 13.9743 us. Best GFLOPs: 1888.7012
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #131: GFLOPs: 1997.4895. Time: 10.6083 us. Best GFLOPs: 1997.4895
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #132: GFLOPs: 1976.1514. Time: 10.7228 us. Best GFLOPs: 1997.4895
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #133: GFLOPs: 1542.3071. Time: 13.7391 us. Best GFLOPs: 1997.4895
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #134: GFLOPs: 1442.1034. Time: 14.6938 us. Best GFLOPs: 1997.4895
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #135: GFLOPs: 1601.0202. Time: 13.2353 us. Best GFLOPs: 1997.4895
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #136: GFLOPs: 1090.6211. Time: 19.4293 us. Best GFLOPs: 1997.4895
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #137: GFLOPs: 1475.2311. Time: 14.3638 us. Best GFLOPs: 1997.4895
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #138: GFLOPs: 1092.4512. Time: 19.3967 us. Best GFLOPs: 1997.4895
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #139: GFLOPs: 1000.6301. Time: 21.1766 us. Best GFLOPs: 1997.4895
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #140: GFLOPs: 1817.0633. Time: 11.6616 us. Best GFLOPs: 1997.4895
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #141: GFLOPs: 1851.3115. Time: 11.4459 us. Best GFLOPs: 1997.4895
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #142: GFLOPs: 1025.0133. Time: 20.6729 us. Best GFLOPs: 1997.4895
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #143: GFLOPs: 1600.8067. Time: 13.2370 us. Best GFLOPs: 1997.4895
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #144: GFLOPs: 2025.2788. Time: 10.4627 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #145: GFLOPs: 1393.9916. Time: 15.2009 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #146: GFLOPs: 1464.8535. Time: 14.4656 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #147: GFLOPs: 1540.2245. Time: 13.7577 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #148: GFLOPs: 1088.7334. Time: 19.4629 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #149: GFLOPs: 1492.6392. Time: 14.1963 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #150: GFLOPs: 1072.4453. Time: 19.7585 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #151: GFLOPs: 1944.5275. Time: 10.8972 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #152: GFLOPs: 1969.1824. Time: 10.7608 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #153: GFLOPs: 1497.3544. Time: 14.1516 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #154: GFLOPs: 1130.1534. Time: 18.7496 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #155: GFLOPs: 1540.7932. Time: 13.7526 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #156: GFLOPs: 1307.6482. Time: 16.2046 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #157: GFLOPs: 1307.7207. Time: 16.2037 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #158: GFLOPs: 1944.9368. Time: 10.8949 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #159: GFLOPs: 1290.9536. Time: 16.4142 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #160: GFLOPs: 1483.2652. Time: 14.2860 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #161: GFLOPs: 1476.8318. Time: 14.3483 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #162: GFLOPs: 1541.3581. Time: 13.7476 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #163: GFLOPs: 1498.3527. Time: 14.1422 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #164: GFLOPs: 1601.2336. Time: 13.2335 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #165: GFLOPs: 1309.7890. Time: 16.1781 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #166: GFLOPs: 1422.3532. Time: 14.8978 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #167: GFLOPs: 1542.9282. Time: 13.7336 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #168: GFLOPs: 1438.0695. Time: 14.7350 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #169: GFLOPs: 1480.6389. Time: 14.3114 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #170: GFLOPs: 1455.2169. Time: 14.5614 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #171: GFLOPs: 1442.5069. Time: 14.6897 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #172: GFLOPs: 1397.5734. Time: 15.1620 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #173: GFLOPs: 1400.0154. Time: 15.1355 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #174: GFLOPs: 1387.7226. Time: 15.2696 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #175: GFLOPs: 1393.1764. Time: 15.2098 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #176: GFLOPs: 1406.8285. Time: 15.0622 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #177: GFLOPs: 1413.6306. Time: 14.9897 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #178: GFLOPs: 1601.4472. Time: 13.2318 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #179: GFLOPs: 1433.4724. Time: 14.7823 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #180: GFLOPs: 1412.9171. Time: 14.9973 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #181: GFLOPs: 1412.9356. Time: 14.9971 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #182: GFLOPs: 1422.9017. Time: 14.8921 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #183: GFLOPs: 1421.7393. Time: 14.9042 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #184: GFLOPs: 1461.9791. Time: 14.4940 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #185: GFLOPs: 1451.4947. Time: 14.5987 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #186: GFLOPs: 1534.2729. Time: 13.8111 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #187: GFLOPs: 988.2311. Time: 21.4423 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #188: GFLOPs: 1747.6325. Time: 12.1249 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #189: GFLOPs: 1325.6209. Time: 15.9849 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #190: GFLOPs: 466.6002. Time: 45.4135 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #191: GFLOPs: 82.2707. Time: 257.5639 us. Best GFLOPs: 2025.2788
2024-04-28 21:05:23 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #192: GFLOPs: 193.1363. Time: 109.7150 us. Best GFLOPs: 2025.2788
2024-04-28 21:49:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:49:53 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 21:49:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 367 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 21:49:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 742 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 21:49:57 [INFO] [evolutionary_search.cc:723] Sampled 78 candidate(s)
2024-04-28 21:50:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 21:50:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 21:50:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 100 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 21:50:16 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 21:50:17 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9628  0.9617  0.9563  0.9493  0.9465  0.9459  0.9441  0.9411  0.9408  0.9399  0.9385  0.9379  0.9357  0.9352  0.9339  0.9275
[17 : 32]:	0.9171  0.9155  0.9150  0.9130  0.9130  0.9126  0.9083  0.9065  0.9060  0.9007  0.9004  0.8996  0.8994  0.8983  0.8957  0.8952
[33 : 48]:	0.8940  0.8936  0.8934  0.8903  0.8892  0.8871  0.8865  0.8859  0.8849  0.8826  0.8810  0.8807  0.8795  0.8795  0.8781  0.8730
[49 : 64]:	0.8713  0.8690  0.8686  0.8613  0.8543  0.8538  0.8523  0.8520  0.8514  0.8492  0.8490  0.8490  0.8484  0.8484  0.8483  0.8453
2024-04-28 21:50:17 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:50:17 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #193: GFLOPs: 2019.6010. Time: 10.4921 us. Best GFLOPs: 2025.2788
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #194: GFLOPs: 2019.3980. Time: 10.4932 us. Best GFLOPs: 2025.2788
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #195: GFLOPs: 1988.5247. Time: 10.6561 us. Best GFLOPs: 2025.2788
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #196: GFLOPs: 2012.9584. Time: 10.5268 us. Best GFLOPs: 2025.2788
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #197: GFLOPs: 1782.4980. Time: 11.8878 us. Best GFLOPs: 2025.2788
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #198: GFLOPs: 1983.3574. Time: 10.6839 us. Best GFLOPs: 2025.2788
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #199: GFLOPs: 1949.2080. Time: 10.8711 us. Best GFLOPs: 2025.2788
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #200: GFLOPs: 1816.8468. Time: 11.6630 us. Best GFLOPs: 2025.2788
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #201: GFLOPs: 1956.9212. Time: 10.8282 us. Best GFLOPs: 2025.2788
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #202: GFLOPs: 2032.9729. Time: 10.4231 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #203: GFLOPs: 1968.9957. Time: 10.7618 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #204: GFLOPs: 1680.2753. Time: 12.6110 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #205: GFLOPs: 1906.4036. Time: 11.1151 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #206: GFLOPs: 1902.8865. Time: 11.1357 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #207: GFLOPs: 2011.2749. Time: 10.5356 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #208: GFLOPs: 1978.2461. Time: 10.7115 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #209: GFLOPs: 1969.3389. Time: 10.7599 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #210: GFLOPs: 1680.5922. Time: 12.6086 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #211: GFLOPs: 1880.6952. Time: 11.2671 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #212: GFLOPs: 1965.4569. Time: 10.7812 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #213: GFLOPs: 1968.9917. Time: 10.7618 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #214: GFLOPs: 1969.5451. Time: 10.7588 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #215: GFLOPs: 1516.0826. Time: 13.9768 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #216: GFLOPs: 1969.2335. Time: 10.7605 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #217: GFLOPs: 1518.6456. Time: 13.9532 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #218: GFLOPs: 1903.4473. Time: 11.1324 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #219: GFLOPs: 2013.3198. Time: 10.5249 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #220: GFLOPs: 1495.6235. Time: 14.1680 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #221: GFLOPs: 1991.7267. Time: 10.6390 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #222: GFLOPs: 1988.5247. Time: 10.6561 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #223: GFLOPs: 1912.9865. Time: 11.0769 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #224: GFLOPs: 2000.4442. Time: 10.5926 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #225: GFLOPs: 1982.5639. Time: 10.6882 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #226: GFLOPs: 1526.8790. Time: 13.8780 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #227: GFLOPs: 1942.0535. Time: 10.9111 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #228: GFLOPs: 1816.6240. Time: 11.6645 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #229: GFLOPs: 1936.7118. Time: 10.9412 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #230: GFLOPs: 1489.5439. Time: 14.2258 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #231: GFLOPs: 1499.3050. Time: 14.1332 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #232: GFLOPs: 1730.9668. Time: 12.2417 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #233: GFLOPs: 1721.7746. Time: 12.3070 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #234: GFLOPs: 1969.1539. Time: 10.7609 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #235: GFLOPs: 1968.6724. Time: 10.7636 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #236: GFLOPs: 1484.3492. Time: 14.2756 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #237: GFLOPs: 1967.9246. Time: 10.7677 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #238: GFLOPs: 1710.2520. Time: 12.3900 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #239: GFLOPs: 1735.2337. Time: 12.2116 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #240: GFLOPs: 1969.8399. Time: 10.7572 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #241: GFLOPs: 1572.5936. Time: 13.4745 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #242: GFLOPs: 1766.6370. Time: 11.9945 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #243: GFLOPs: 1713.6128. Time: 12.3657 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #244: GFLOPs: 1688.7829. Time: 12.5475 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #245: GFLOPs: 1750.9636. Time: 12.1019 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #246: GFLOPs: 1771.3509. Time: 11.9626 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #247: GFLOPs: 1757.5011. Time: 12.0569 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #248: GFLOPs: 1733.0365. Time: 12.2271 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #249: GFLOPs: 1756.4232. Time: 12.0643 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #250: GFLOPs: 1308.9101. Time: 16.1890 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #251: GFLOPs: 1516.5352. Time: 13.9726 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #252: GFLOPs: 1516.2161. Time: 13.9755 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #253: GFLOPs: 1306.4708. Time: 16.2192 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #254: GFLOPs: 416.4256. Time: 50.8853 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #255: GFLOPs: 19.7009. Time: 1075.5854 us. Best GFLOPs: 2032.9729
2024-04-28 21:51:24 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #256: GFLOPs: 303.6330. Time: 69.7880 us. Best GFLOPs: 2032.9729
2024-04-28 22:05:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:05:32 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 22:05:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 378 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 22:05:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 759 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 22:05:36 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2024-04-28 22:05:40 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 22:05:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 143 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 22:05:50 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 125 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 22:05:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 22:05:57 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9807  0.9791  0.9756  0.9743  0.9734  0.9727  0.9720  0.9717  0.9717  0.9711  0.9693  0.9660  0.9653  0.9653  0.9653  0.9646
[17 : 32]:	0.9640  0.9636  0.9636  0.9630  0.9620  0.9620  0.9620  0.9613  0.9611  0.9604  0.9597  0.9596  0.9593  0.9589  0.9584  0.9578
[33 : 48]:	0.9575  0.9573  0.9556  0.9556  0.9556  0.9556  0.9550  0.9539  0.9537  0.9536  0.9531  0.9523  0.9522  0.9522  0.9515  0.9515
[49 : 64]:	0.9513  0.9508  0.9507  0.9501  0.9477  0.9475  0.9467  0.9463  0.9459  0.9459  0.9454  0.9451  0.9451  0.9451  0.9448  0.9399
2024-04-28 22:05:57 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:05:57 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #257: GFLOPs: 1963.7611. Time: 10.7905 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #258: GFLOPs: 2010.7344. Time: 10.5384 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #259: GFLOPs: 1963.6825. Time: 10.7909 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #260: GFLOPs: 1956.0479. Time: 10.8330 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #261: GFLOPs: 1958.1140. Time: 10.8216 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #262: GFLOPs: 1962.4567. Time: 10.7977 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #263: GFLOPs: 1955.9773. Time: 10.8334 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #264: GFLOPs: 2004.8085. Time: 10.5696 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #265: GFLOPs: 1957.4052. Time: 10.8255 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #266: GFLOPs: 1958.0804. Time: 10.8218 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #267: GFLOPs: 1956.2393. Time: 10.8320 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #268: GFLOPs: 2003.7622. Time: 10.5751 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #269: GFLOPs: 1965.9093. Time: 10.7787 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #270: GFLOPs: 1960.9583. Time: 10.8059 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #271: GFLOPs: 1954.4368. Time: 10.8420 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #272: GFLOPs: 1919.6839. Time: 11.0383 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #273: GFLOPs: 1952.4360. Time: 10.8531 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #274: GFLOPs: 1958.1790. Time: 10.8213 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #275: GFLOPs: 1958.0040. Time: 10.8222 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #276: GFLOPs: 1965.8087. Time: 10.7793 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #277: GFLOPs: 2003.5151. Time: 10.5764 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #278: GFLOPs: 2003.8351. Time: 10.5747 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #279: GFLOPs: 2003.9679. Time: 10.5740 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #280: GFLOPs: 1952.5601. Time: 10.8524 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #281: GFLOPs: 1952.6399. Time: 10.8520 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #282: GFLOPs: 1952.5743. Time: 10.8523 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #283: GFLOPs: 1919.3595. Time: 11.0401 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #284: GFLOPs: 1961.0394. Time: 10.8055 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #285: GFLOPs: 1879.7163. Time: 11.2730 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #286: GFLOPs: 1953.0612. Time: 10.8496 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #287: GFLOPs: 1891.0322. Time: 11.2055 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #288: GFLOPs: 1954.8423. Time: 10.8397 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #289: GFLOPs: 1954.4374. Time: 10.8420 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #290: GFLOPs: 1954.7312. Time: 10.8403 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #291: GFLOPs: 2011.9260. Time: 10.5322 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #292: GFLOPs: 1966.0812. Time: 10.7778 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #293: GFLOPs: 1966.3394. Time: 10.7763 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #294: GFLOPs: 1936.1518. Time: 10.9444 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #295: GFLOPs: 1934.2906. Time: 10.9549 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #296: GFLOPs: 2011.5192. Time: 10.5343 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #297: GFLOPs: 1880.3793. Time: 11.2690 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #298: GFLOPs: 1952.3679. Time: 10.8535 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #299: GFLOPs: 1963.3416. Time: 10.7928 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #300: GFLOPs: 1930.6504. Time: 10.9756 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #301: GFLOPs: 1906.0811. Time: 11.1170 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #302: GFLOPs: 1906.5210. Time: 11.1145 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #303: GFLOPs: 1930.8193. Time: 10.9746 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #304: GFLOPs: 2007.1199. Time: 10.5574 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #305: GFLOPs: 1963.5365. Time: 10.7917 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #306: GFLOPs: 1963.9761. Time: 10.7893 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #307: GFLOPs: 2010.6333. Time: 10.5389 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #308: GFLOPs: 1952.1545. Time: 10.8546 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #309: GFLOPs: 1956.2066. Time: 10.8322 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #310: GFLOPs: 1934.6738. Time: 10.9527 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #311: GFLOPs: 1956.3592. Time: 10.8313 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #312: GFLOPs: 1871.1199. Time: 11.3247 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #313: GFLOPs: 2010.8743. Time: 10.5377 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #314: GFLOPs: 2010.0854. Time: 10.5418 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #315: GFLOPs: 1934.1960. Time: 10.9554 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #316: GFLOPs: 1934.5256. Time: 10.9536 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #317: GFLOPs: 1933.8212. Time: 10.9576 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #318: GFLOPs: 169.6260. Time: 124.9216 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #319: GFLOPs: 514.6171. Time: 41.1762 us. Best GFLOPs: 2032.9729
2024-04-28 22:07:00 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #320: GFLOPs: 1115.9670. Time: 18.9880 us. Best GFLOPs: 2032.9729
2024-04-28 22:31:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:31:30 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 22:31:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 376 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 22:31:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 754 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 22:31:33 [INFO] [evolutionary_search.cc:723] Sampled 66 candidate(s)
2024-04-28 22:31:38 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 144 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 22:31:43 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 132 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 22:31:48 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 138 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 22:31:54 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 149 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 22:31:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9765  0.9735  0.9718  0.9707  0.9699  0.9680  0.9677  0.9677  0.9670  0.9669  0.9667  0.9643  0.9629  0.9612  0.9612  0.9612
[17 : 32]:	0.9604  0.9602  0.9601  0.9598  0.9598  0.9588  0.9588  0.9581  0.9575  0.9567  0.9567  0.9566  0.9560  0.9552  0.9537  0.9536
[33 : 48]:	0.9533  0.9532  0.9526  0.9522  0.9522  0.9516  0.9514  0.9508  0.9491  0.9485  0.9474  0.9470  0.9468  0.9453  0.9434  0.9426
[49 : 64]:	0.9422  0.9422  0.9416  0.9408  0.9408  0.9357  0.9350  0.9345  0.9334  0.9334  0.9303  0.9283  0.9280  0.9266  0.9261  0.9259
2024-04-28 22:31:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:31:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #321: GFLOPs: 1475.6073. Time: 14.3602 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #322: GFLOPs: 2017.4501. Time: 10.5033 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #323: GFLOPs: 1975.1946. Time: 10.7280 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #324: GFLOPs: 1975.1376. Time: 10.7283 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #325: GFLOPs: 2017.5108. Time: 10.5030 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #326: GFLOPs: 2019.5871. Time: 10.4922 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #327: GFLOPs: 1981.0724. Time: 10.6962 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #328: GFLOPs: 1980.6804. Time: 10.6983 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #329: GFLOPs: 2019.7825. Time: 10.4912 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #330: GFLOPs: 2016.6909. Time: 10.5073 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #331: GFLOPs: 1980.6662. Time: 10.6984 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #332: GFLOPs: 1947.3197. Time: 10.8816 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #333: GFLOPs: 1976.3674. Time: 10.7217 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #334: GFLOPs: 1945.8119. Time: 10.8900 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #335: GFLOPs: 1945.8119. Time: 10.8900 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #336: GFLOPs: 1945.9021. Time: 10.8895 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #337: GFLOPs: 2019.9546. Time: 10.4903 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #338: GFLOPs: 1945.7959. Time: 10.8901 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #339: GFLOPs: 1980.2744. Time: 10.7005 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #340: GFLOPs: 1975.8044. Time: 10.7247 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #341: GFLOPs: 1975.9883. Time: 10.7237 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #342: GFLOPs: 1975.9046. Time: 10.7242 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #343: GFLOPs: 1976.0669. Time: 10.7233 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #344: GFLOPs: 1980.5544. Time: 10.6990 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #345: GFLOPs: 1976.0368. Time: 10.7235 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #346: GFLOPs: 1979.6802. Time: 10.7037 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #347: GFLOPs: 1980.0976. Time: 10.7015 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #348: GFLOPs: 1902.4588. Time: 11.1382 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #349: GFLOPs: 1944.0125. Time: 10.9001 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #350: GFLOPs: 1976.1693. Time: 10.7227 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #351: GFLOPs: 1894.8030. Time: 11.1832 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #352: GFLOPs: 1945.2134. Time: 10.8934 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #353: GFLOPs: 1896.0224. Time: 11.1760 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #354: GFLOPs: 1895.1705. Time: 11.1810 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #355: GFLOPs: 1945.1632. Time: 10.8937 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #356: GFLOPs: 1896.3672. Time: 11.1740 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #357: GFLOPs: 1976.0161. Time: 10.7236 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #358: GFLOPs: 1980.1521. Time: 10.7012 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #359: GFLOPs: 1896.3480. Time: 11.1741 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #360: GFLOPs: 1896.3615. Time: 11.1740 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #361: GFLOPs: 1947.0491. Time: 10.8831 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #362: GFLOPs: 1865.3696. Time: 11.3597 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #363: GFLOPs: 1943.9450. Time: 10.9005 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #364: GFLOPs: 1976.1797. Time: 10.7227 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #365: GFLOPs: 1945.6617. Time: 10.8909 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #366: GFLOPs: 1945.2612. Time: 10.8931 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #367: GFLOPs: 1866.0602. Time: 11.3554 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #368: GFLOPs: 1508.9911. Time: 14.0425 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #369: GFLOPs: 2012.7823. Time: 10.5277 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #370: GFLOPs: 1664.4364. Time: 12.7310 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #371: GFLOPs: 1950.6733. Time: 10.8629 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #372: GFLOPs: 1664.4248. Time: 12.7311 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #373: GFLOPs: 1664.1471. Time: 12.7332 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #374: GFLOPs: 1664.0429. Time: 12.7340 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #375: GFLOPs: 1430.7589. Time: 14.8103 us. Best GFLOPs: 2032.9729
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #376: GFLOPs: 2043.2010. Time: 10.3710 us. Best GFLOPs: 2043.2010
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #377: GFLOPs: 2012.1594. Time: 10.5310 us. Best GFLOPs: 2043.2010
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #378: GFLOPs: 2012.6836. Time: 10.5282 us. Best GFLOPs: 2043.2010
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #379: GFLOPs: 2042.5360. Time: 10.3743 us. Best GFLOPs: 2043.2010
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #380: GFLOPs: 1572.2389. Time: 13.4776 us. Best GFLOPs: 2043.2010
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #381: GFLOPs: 1696.9854. Time: 12.4868 us. Best GFLOPs: 2043.2010
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #382: GFLOPs: 179.9211. Time: 117.7736 us. Best GFLOPs: 2043.2010
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #383: GFLOPs: 46.4853. Time: 455.8420 us. Best GFLOPs: 2043.2010
2024-04-28 22:32:59 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #384: GFLOPs: 689.0617. Time: 30.7519 us. Best GFLOPs: 2043.2010
2024-04-28 23:20:01 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:20:02 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:20:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 381 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 23:20:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 753 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 23:20:06 [INFO] [evolutionary_search.cc:723] Sampled 67 candidate(s)
2024-04-28 23:20:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 140 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 23:20:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 141 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 23:20:20 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 122 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 23:20:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 158 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 23:20:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9774  0.9768  0.9768  0.9692  0.9656  0.9651  0.9649  0.9623  0.9615  0.9614  0.9614  0.9612  0.9598  0.9562  0.9561  0.9561
[17 : 32]:	0.9559  0.9551  0.9535  0.9533  0.9528  0.9522  0.9522  0.9518  0.9511  0.9500  0.9476  0.9470  0.9467  0.9459  0.9459  0.9427
[33 : 48]:	0.9426  0.9426  0.9424  0.9423  0.9377  0.9375  0.9372  0.9372  0.9372  0.9365  0.9334  0.9328  0.9320  0.9317  0.9317  0.9314
[49 : 64]:	0.9312  0.9309  0.9298  0.9293  0.9288  0.9284  0.9278  0.9276  0.9275  0.9273  0.9250  0.9198  0.9160  0.9141  0.9112  0.9097
2024-04-28 23:20:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:20:27 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #385: GFLOPs: 2038.1289. Time: 10.3968 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #386: GFLOPs: 2038.2993. Time: 10.3959 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #387: GFLOPs: 2038.2069. Time: 10.3964 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #388: GFLOPs: 2030.1860. Time: 10.4374 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #389: GFLOPs: 1970.2182. Time: 10.7551 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #390: GFLOPs: 2030.0692. Time: 10.4380 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #391: GFLOPs: 1994.9264. Time: 10.6219 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #392: GFLOPs: 1994.7406. Time: 10.6229 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #393: GFLOPs: 2038.0177. Time: 10.3973 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #394: GFLOPs: 1916.6375. Time: 11.0558 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #395: GFLOPs: 1916.7941. Time: 11.0549 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #396: GFLOPs: 2004.4232. Time: 10.5716 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #397: GFLOPs: 1978.4225. Time: 10.7105 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #398: GFLOPs: 1985.2640. Time: 10.6736 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #399: GFLOPs: 2032.5029. Time: 10.4255 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #400: GFLOPs: 2032.7000. Time: 10.4245 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #401: GFLOPs: 1956.8087. Time: 10.8288 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #402: GFLOPs: 1969.1231. Time: 10.7611 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #403: GFLOPs: 1956.8370. Time: 10.8287 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #404: GFLOPs: 1956.5418. Time: 10.8303 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #405: GFLOPs: 1877.8026. Time: 11.2844 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #406: GFLOPs: 1877.1713. Time: 11.2882 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #407: GFLOPs: 1877.1877. Time: 11.2881 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #408: GFLOPs: 1956.4347. Time: 10.8309 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #409: GFLOPs: 1978.2604. Time: 10.7114 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #410: GFLOPs: 1985.3433. Time: 10.6732 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #411: GFLOPs: 1958.4262. Time: 10.8199 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #412: GFLOPs: 1958.4165. Time: 10.8199 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #413: GFLOPs: 1958.6091. Time: 10.8189 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #414: GFLOPs: 1978.3211. Time: 10.7111 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #415: GFLOPs: 1979.4675. Time: 10.7049 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #416: GFLOPs: 1956.4716. Time: 10.8307 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #417: GFLOPs: 1958.4898. Time: 10.8195 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #418: GFLOPs: 1958.3840. Time: 10.8201 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #419: GFLOPs: 1958.1861. Time: 10.8212 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #420: GFLOPs: 1958.3840. Time: 10.8201 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #421: GFLOPs: 1651.4568. Time: 12.8311 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #422: GFLOPs: 1877.5199. Time: 11.2861 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #423: GFLOPs: 1954.1426. Time: 10.8436 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #424: GFLOPs: 1651.7948. Time: 12.8284 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #425: GFLOPs: 1652.1459. Time: 12.8257 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #426: GFLOPs: 1915.7026. Time: 11.0612 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #427: GFLOPs: 1915.3150. Time: 11.0634 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #428: GFLOPs: 1916.4575. Time: 11.0568 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #429: GFLOPs: 1958.6091. Time: 10.8189 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #430: GFLOPs: 1958.3981. Time: 10.8200 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #431: GFLOPs: 1953.9863. Time: 10.8445 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #432: GFLOPs: 1914.0221. Time: 11.0709 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #433: GFLOPs: 1514.5375. Time: 13.9910 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #434: GFLOPs: 1513.1114. Time: 14.0042 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #435: GFLOPs: 1955.3553. Time: 10.8369 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #436: GFLOPs: 1953.6661. Time: 10.8463 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #437: GFLOPs: 1913.2765. Time: 11.0752 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #438: GFLOPs: 1955.0813. Time: 10.8384 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #439: GFLOPs: 1484.2285. Time: 14.2767 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #440: GFLOPs: 1910.5877. Time: 11.0908 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #441: GFLOPs: 1953.6661. Time: 10.8463 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #442: GFLOPs: 1915.2178. Time: 11.0640 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #443: GFLOPs: 1955.4291. Time: 10.8365 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #444: GFLOPs: 1783.1297. Time: 11.8836 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #445: GFLOPs: 1651.3976. Time: 12.8315 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #446: GFLOPs: 576.8297. Time: 36.7352 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #447: GFLOPs: 263.7637. Time: 80.3369 us. Best GFLOPs: 2043.2010
2024-04-28 23:21:32 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #448: GFLOPs: 196.4660. Time: 107.8556 us. Best GFLOPs: 2043.2010
2024-04-28 23:42:34 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:42:34 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:42:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 379 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 23:42:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 761 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 23:42:38 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2024-04-28 23:42:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 137 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 23:42:47 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 146 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 23:42:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 23:42:58 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3a517d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d47a18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cce498)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3a0e9c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4689f88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4c29128)]: 145 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4cd5928)]: 0 failure(s)
2024-04-28 23:43:00 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9755  0.9709  0.9706  0.9706  0.9706  0.9687  0.9676  0.9675  0.9642  0.9642  0.9615  0.9599  0.9583  0.9578  0.9565  0.9546
[17 : 32]:	0.9535  0.9527  0.9523  0.9522  0.9511  0.9504  0.9480  0.9462  0.9455  0.9443  0.9394  0.9392  0.9382  0.9323  0.9319  0.9312
[33 : 48]:	0.9287  0.9219  0.9213  0.9211  0.9210  0.9209  0.9196  0.9196  0.9196  0.9196  0.9196  0.9195  0.9195  0.9195  0.9195  0.9195
[49 : 64]:	0.9195  0.9190  0.9177  0.9177  0.9177  0.9177  0.9168  0.9167  0.9155  0.9152  0.9152  0.9145  0.9144  0.9129  0.9128  0.9123
2024-04-28 23:43:00 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:43:00 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #449: GFLOPs: 1967.5092. Time: 10.7699 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #450: GFLOPs: 2015.5351. Time: 10.5133 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #451: GFLOPs: 1967.7930. Time: 10.7684 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #452: GFLOPs: 1967.7066. Time: 10.7689 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #453: GFLOPs: 1967.5329. Time: 10.7698 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #454: GFLOPs: 2039.5452. Time: 10.3895 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #455: GFLOPs: 1985.3666. Time: 10.6731 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #456: GFLOPs: 1985.6619. Time: 10.6715 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #457: GFLOPs: 1954.6332. Time: 10.8409 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #458: GFLOPs: 1953.6382. Time: 10.8464 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #459: GFLOPs: 2017.7616. Time: 10.5017 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #460: GFLOPs: 1985.3664. Time: 10.6731 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #461: GFLOPs: 2015.8199. Time: 10.5118 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #462: GFLOPs: 2015.7294. Time: 10.5123 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #463: GFLOPs: 1953.9043. Time: 10.8449 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #464: GFLOPs: 1939.0521. Time: 10.9280 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #465: GFLOPs: 1967.5755. Time: 10.7696 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #466: GFLOPs: 1967.4620. Time: 10.7702 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #467: GFLOPs: 1967.5329. Time: 10.7698 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #468: GFLOPs: 1968.4171. Time: 10.7650 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #469: GFLOPs: 1971.4333. Time: 10.7485 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #470: GFLOPs: 1971.3050. Time: 10.7492 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #471: GFLOPs: 1938.9581. Time: 10.9285 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #472: GFLOPs: 1954.1839. Time: 10.8434 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #473: GFLOPs: 1954.2082. Time: 10.8432 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #474: GFLOPs: 1547.5851. Time: 13.6923 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #475: GFLOPs: 1547.7140. Time: 13.6911 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #476: GFLOPs: 1547.3380. Time: 13.6945 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #477: GFLOPs: 1517.3348. Time: 13.9652 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #478: GFLOPs: 1778.1581. Time: 11.9168 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #479: GFLOPs: 1893.8785. Time: 11.1887 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #480: GFLOPs: 1554.9896. Time: 13.6271 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #481: GFLOPs: 1929.4436. Time: 10.9824 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #482: GFLOPs: 1890.3985. Time: 11.2093 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #483: GFLOPs: 1813.2716. Time: 11.6860 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #484: GFLOPs: 1890.2637. Time: 11.2101 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #485: GFLOPs: 1590.7611. Time: 13.3206 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #486: GFLOPs: 1816.0861. Time: 11.6679 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #487: GFLOPs: 1590.5614. Time: 13.3223 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #488: GFLOPs: 1590.6415. Time: 13.3216 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #489: GFLOPs: 1590.8952. Time: 13.3195 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #490: GFLOPs: 1590.5931. Time: 13.3220 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #491: GFLOPs: 1590.6834. Time: 13.3213 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #492: GFLOPs: 1815.8491. Time: 11.6694 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #493: GFLOPs: 1815.9001. Time: 11.6691 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #494: GFLOPs: 1816.1254. Time: 11.6677 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #495: GFLOPs: 1815.8212. Time: 11.6696 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #496: GFLOPs: 1495.4982. Time: 14.1692 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #497: GFLOPs: 1495.4540. Time: 14.1696 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #498: GFLOPs: 1781.8414. Time: 11.8922 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #499: GFLOPs: 1782.0084. Time: 11.8911 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #500: GFLOPs: 1781.9298. Time: 11.8916 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #501: GFLOPs: 1782.1445. Time: 11.8901 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #502: GFLOPs: 1782.0891. Time: 11.8905 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #503: GFLOPs: 1710.5237. Time: 12.3880 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #504: GFLOPs: 1815.9768. Time: 11.6686 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #505: GFLOPs: 1682.1418. Time: 12.5970 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #506: GFLOPs: 1682.4266. Time: 12.5949 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #507: GFLOPs: 1682.3548. Time: 12.5954 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #508: GFLOPs: 1815.4785. Time: 11.6718 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #509: GFLOPs: 1682.2837. Time: 12.5959 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #510: GFLOPs: 941.9127. Time: 22.4967 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #511: GFLOPs: 10.3799. Time: 2041.4380 us. Best GFLOPs: 2043.2010
2024-04-28 23:44:15 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_conv2d_add_nn_relu] Trial #512: GFLOPs: 253.4071. Time: 83.6202 us. Best GFLOPs: 2043.2010
