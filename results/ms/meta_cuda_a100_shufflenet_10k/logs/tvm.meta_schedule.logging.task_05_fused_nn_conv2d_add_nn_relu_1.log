2024-04-28 19:50:49 [INFO] [task_scheduler.cc:160] Initializing Task #5: "fused_nn_conv2d_add_nn_relu_1"
2024-04-28 19:50:49 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(116), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(116), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(116), T.int64(28), T.int64(28), T.int64(116), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(116), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(116), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-28 19:50:49 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:50:49 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(116), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(3248), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(22736)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(116), rc_0 * T.int64(58) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6728)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(116), ax0_ax1_ax2_ax3_fused // T.int64(58))
                                    v1 = T.axis.spatial(T.int64(116), rc_0 * T.int64(58) + ax0_ax1_ax2_ax3_fused % T.int64(58))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(116), nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(28) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(116), rc_0 * T.int64(58) + rc_1 * T.int64(29) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(116), nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(28) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 58, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 2, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 2, 29])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-28 19:50:49 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(116), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(3248), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(22736)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(116), rc_0_ry_0_rx_0_fused * T.int64(58) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6728)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(116), ax0_ax1_ax2_ax3_fused // T.int64(58))
                                    v1 = T.axis.spatial(T.int64(116), rc_0_ry_0_rx_0_fused * T.int64(58) + ax0_ax1_ax2_ax3_fused % T.int64(58))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(116), nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(28) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(116), rc_0_ry_0_rx_0_fused * T.int64(58) + rc_1 * T.int64(29) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(116), nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(28) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 58, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 2, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 2, 29])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-28 19:50:49 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(116), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(3248), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(22736)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(116), rc_0_ry_0_rx_0_fused * T.int64(58) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6728)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(116), ax0_ax1_ax2_ax3_fused // T.int64(58))
                                    v1 = T.axis.spatial(T.int64(116), rc_0_ry_0_rx_0_fused * T.int64(58) + ax0_ax1_ax2_ax3_fused % T.int64(58))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(116), nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(28) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(116), rc_0_ry_0_rx_0_fused * T.int64(58) + rc_1 * T.int64(29) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(116), nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(28) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 58, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 2, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 2, 29])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-28 19:55:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 19:55:52 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 19:55:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 481 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 19:55:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 955 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 19:55:56 [INFO] [evolutionary_search.cc:723] Sampled 69 candidate(s)
2024-04-28 19:56:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 122 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 19:56:04 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 19:56:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 19:56:12 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 19:56:12 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9998  0.9983  0.9981  0.9971  0.9971  0.9967  0.9948  0.9948  0.9946  0.9943  0.9942  0.9916  0.9907  0.9903  0.9896
[17 : 32]:	0.9890  0.9884  0.9881  0.9875  0.9867  0.9865  0.9860  0.9858  0.9849  0.9847  0.9846  0.9836  0.9833  0.9829  0.9821  0.9808
[33 : 48]:	0.9801  0.9798  0.9798  0.9794  0.9784  0.9777  0.9774  0.9772  0.9765  0.9756  0.9755  0.9751  0.9747  0.9745  0.9744  0.9743
[49 : 64]:	0.9734  0.9732  0.9731  0.9730  0.9729  0.9724  0.9715  0.9714  0.9710  0.9708  0.9708  0.9707  0.9705  0.9704  0.9701  0.9700
2024-04-28 19:56:12 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 19:56:12 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #1: GFLOPs: 1000.9704. Time: 21.2603 us. Best GFLOPs: 1000.9704
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #2: GFLOPs: 147.4297. Time: 144.3461 us. Best GFLOPs: 1000.9704
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #3: GFLOPs: 1001.3317. Time: 21.2526 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #4: GFLOPs: 512.9760. Time: 41.4852 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #5: GFLOPs: 256.8659. Time: 82.8483 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #6: GFLOPs: 23.2834. Time: 913.9945 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #7: GFLOPs: 372.8943. Time: 57.0695 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #8: GFLOPs: 138.8920. Time: 153.2190 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #9: GFLOPs: 162.1998. Time: 131.2018 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #10: GFLOPs: 23.6117. Time: 901.2861 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #11: GFLOPs: 15.4926. Time: 1373.6189 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #12: GFLOPs: 299.3762. Time: 71.0841 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #13: GFLOPs: 162.9752. Time: 130.5775 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #14: GFLOPs: 125.6631. Time: 169.3489 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #15: GFLOPs: 348.6776. Time: 61.0332 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #16: GFLOPs: 491.5575. Time: 43.2928 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #17: GFLOPs: 182.0494. Time: 116.8963 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #18: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "Objects/call.c", line 200, in PyVectorcall_Call
  File "Python/ceval.c", line 4963, in call_function
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  333: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::allocator<char>, tvm::runtime::TVMArgs const&)
  332: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  331: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  330: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  329: tvm::transform::Pass::operator()(tvm::IRModule) const
  328: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  327: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  326: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  325: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  324: _ZN3tvm7runtime13PackedFun
  323: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
  322: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  321: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  320: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  319: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  318: _ZZN3tvm3tir11StmtFunctorI
  317: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  316: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  315: _ZZN3tvm3tir11StmtFunctorI
  314: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  313: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  312: _ZZN3tvm3tir11StmtFunctorI
  311: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  310: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  309: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  308: _ZZN3tvm3tir11StmtFunctorI
  307: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  306: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  305: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  304: _ZZN3tvm3tir11StmtFunctorI
  303: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  302: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  301: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  300: _ZZN3tvm3tir11StmtFunctorI
  299: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  298: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  297: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  296: _ZZN3tvm3tir11StmtFunctorI
  295: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  294: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  293: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  292: _ZZN3tvm3tir11StmtFunctorI
  291: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  290: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  289: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  288: _ZZN3tvm3tir11StmtFunctorI
  287: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  286: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  285: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  284: _ZZN3tvm3tir11StmtFunctorI
  283: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  282: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  281: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  280: _ZZN3tvm3tir11StmtFunctorI
  279: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  278: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  277: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  276: _ZZN3tvm3tir11StmtFunctorI
  275: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  274: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  273: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  272: _ZZN3tvm3tir11StmtFunctorI
  271: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  270: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  269: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  268: _ZZN3tvm3tir11StmtFunctorI
  267: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  266: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  265: _ZZN3tvm3tir11StmtFunctorI
  264: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  263: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  262: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  261: _ZZN3tvm3tir11StmtFunctorI
  260: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  259: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  258: _ZZN3tvm3tir11StmtFunctorI
  257: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  256: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  255: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  254: _ZZN3tvm3tir11StmtFunctorI
  253: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  252: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  251: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  250: _ZZN3tvm3tir11StmtFunctorI
  249: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  248: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  247: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  246: _ZZN3tvm3tir11StmtFunctorI
  245: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  244: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  243: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  242: _ZZN3tvm3tir11StmtFunctorI
  241: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  240: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  239: _ZZN3tvm3tir11StmtFunctorI
  238: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  237: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  236: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  235: _ZZN3tvm3tir11StmtFunctorI
  234: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  233: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  232: _ZZN3tvm3tir11StmtFunctorI
  231: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  230: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  229: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  228: _ZZN3tvm3tir11StmtFunctorI
  227: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  226: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  225: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  224: _ZZN3tvm3tir11StmtFunctorI
  223: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  222: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  221: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  220: _ZZN3tvm3tir11StmtFunctorI
  219: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  218: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  217: _ZZN3tvm3tir11StmtFunctorI
  216: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  215: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  214: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  213: _ZZN3tvm3tir11StmtFunctorI
  212: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  211: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  210: _ZZN3tvm3tir11StmtFunctorI
  209: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  208: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  207: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  206: _ZZN3tvm3tir11StmtFunctorI
  205: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  204: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  203: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  202: _ZZN3tvm3tir11StmtFunctorI
  201: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  200: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  199: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  198: _ZZN3tvm3tir11StmtFunctorI
  197: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  196: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  195: _ZZN3tvm3tir11StmtFunctorI
  194: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  193: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  192: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  191: _ZZN3tvm3tir11StmtFunctorI
  190: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  189: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  188: _ZZN3tvm3tir11StmtFunctorI
  187: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  186: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  185: _ZZN3tvm3tir11StmtFunctorI
  184: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  183: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  182: _ZZN3tvm3tir11StmtFunctorI
  181: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  180: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  179: _ZZN3tvm3tir11StmtFunctorI
  178: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  177: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  176: _ZZN3tvm3tir11StmtFunctorI
  175: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  174: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  173: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  172: _ZZN3tvm3tir11StmtFunctorI
  171: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  170: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  169: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  168: _ZZN3tvm3tir11StmtFunctorI
  167: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  166: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  165: _ZZN3tvm3tir11StmtFunctorI
  164: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  163: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  162: _ZZN3tvm3tir11StmtFunctorI
  161: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  160: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  159: _ZZN3tvm3tir11StmtFunctorI
  158: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  157: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  156: _ZZN3tvm3tir11StmtFunctorI
  155: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  154: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  153: _ZZN3tvm3tir11StmtFunctorI
  152: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  151: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  150: _ZZN3tvm3tir11StmtFunctorI
  149: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  148: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  147: _ZZN3tvm3tir11StmtFunctorIFNS
  146: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  145: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  144: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  143: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  142: _ZZN3tvm3tir11StmtFunctorI
  141: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  140: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  139: _ZZN3tvm3tir11StmtFunctorI
  138: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  137: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  136: _ZZN3tvm3tir11StmtFunctorI
  135: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  134: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  133: _ZZN3tvm3tir11StmtFunctorI
  132: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  131: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  130: _ZZN3tvm3tir11StmtFunctorI
  129: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  128: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  127: _ZZN3tvm3tir11StmtFunctorI
  126: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  125: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  124: _ZZN3tvm3tir11StmtFunctorI
  123: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  122: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  121: _ZZN3tvm3tir11StmtFunctorI
  120: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  119: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  118: _ZZN3tvm3tir11StmtFunctorI
  117: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  116: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  115: _ZZN3tvm3tir11StmtFunctorIFNS
  114: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  113: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  112: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  111: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  110: _ZZN3tvm3tir11StmtFunctorI
  109: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  108: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  107: _ZZN3tvm3tir11StmtFunctorI
  106: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  105: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  104: _ZZN3tvm3tir11StmtFunctorI
  103: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  102: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  101: _ZZN3tvm3tir11StmtFunctorI
  100: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  99: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  98: _ZZN3tvm3tir11StmtFunctorI
  97: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  96: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  95: _ZZN3tvm3tir11StmtFunctorI
  94: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  93: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  92: _ZZN3tvm3tir11StmtFunctorI
  91: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  90: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  89: _ZZN3tvm3tir11StmtFunctorI
  88: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  87: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  86: _ZZN3tvm3tir11StmtFunctorI
  85: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  84: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  83: _ZZN3tvm3tir11StmtFunctorI
  82: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  81: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  80: _ZZN3tvm3tir11StmtFunctorIFNS
  79: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  78: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  77: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  76: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  75: _ZZN3tvm3tir11StmtFunctorI
  74: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  73: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  72: _ZZN3tvm3tir11StmtFunctorI
  71: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  70: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  69: _ZZN3tvm3tir11StmtFunctorI
  68: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  67: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  66: _ZZN3tvm3tir11StmtFunctorI
  65: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  64: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  63: _ZZN3tvm3tir11StmtFunctorI
  62: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  61: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  60: _ZZN3tvm3tir11StmtFunctorI
  59: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  58: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  57: _ZZN3tvm3tir11StmtFunctorI
  56: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  55: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  54: _ZZN3tvm3tir11StmtFunctorI
  53: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  52: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  51: _ZZN3tvm3tir11StmtFunctorI
  50: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  49: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  48: _ZZN3tvm3tir11StmtFunctorI
  47: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  46: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  45: _ZZN3tvm3tir11StmtFunctorIFNS
  44: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  43: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  42: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  41: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  40: _ZZN3tvm3tir11StmtFunctorI
  39: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  38: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  37: _ZZN3tvm3tir11StmtFunctorI
  36: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  35: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  34: _ZZN3tvm3tir11StmtFunctorI
  33: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  32: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  31: _ZZN3tvm3tir11StmtFunctorI
  30: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  29: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  28: _ZZN3tvm3tir11StmtFunctorI
  27: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  26: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  25: _ZZN3tvm3tir11StmtFunctorI
  24: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  23: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  22: _ZZN3tvm3tir11StmtFunctorI
  21: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  20: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  19: _ZZN3tvm3tir11StmtFunctorIFNS
  18: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  17: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  16: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  15: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  14: _ZZN3tvm3tir11StmtFunctorI
  13: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  12: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  11: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  10: _ZZN3tvm3tir11StmtFunctorI
  9: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  8: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  7: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS
  5: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  4: _ZZN3tvm3tir11ExprFunctorI
  3: tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  2: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  1: tvm::tir::APIType(tvm::runtime::DataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/tir/transforms/ir_utils.h", line 157
InternalError: Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(116), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(116), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(116), ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(7) + yy_3_init * T.int64(7) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(58), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(14)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(116), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(784))
                                        v2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(784) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(116), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(116), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(232))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(116), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(116), ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(116), rc_0_ry_0_rx_0_fused * T.int64(2) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(116), T.int64(7), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 116, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[58, 2, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #19: GFLOPs: 259.5402. Time: 81.9946 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #20: GFLOPs: 863.4206. Time: 24.6472 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #21: GFLOPs: 15.0242. Time: 1416.4372 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #22: GFLOPs: 54.9704. Time: 387.1334 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #23: GFLOPs: 117.3594. Time: 181.3310 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #24: GFLOPs: 360.9818. Time: 58.9528 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #25: GFLOPs: 449.4041. Time: 47.3536 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #26: GFLOPs: 203.1638. Time: 104.7475 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #27: GFLOPs: 147.5752. Time: 144.2038 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #28: GFLOPs: 677.4946. Time: 31.4112 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #29: GFLOPs: 648.7598. Time: 32.8024 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #30: GFLOPs: 163.0294. Time: 130.5341 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #31: GFLOPs: 145.2552. Time: 146.5069 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #32: GFLOPs: 564.6743. Time: 37.6870 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #33: GFLOPs: 507.7763. Time: 41.9100 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #34: GFLOPs: 25.4909. Time: 834.8416 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #35: GFLOPs: 355.3076. Time: 59.8943 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #36: GFLOPs: 42.7897. Time: 497.3363 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #37: GFLOPs: 86.3197. Time: 246.5359 us. Best GFLOPs: 1001.3317
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #38: GFLOPs: 1216.8308. Time: 17.4888 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #39: GFLOPs: 617.1944. Time: 34.4801 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #40: GFLOPs: 21.6213. Time: 984.2547 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #41: GFLOPs: 350.2651. Time: 60.7565 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #42: GFLOPs: 857.3911. Time: 24.8205 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #43: GFLOPs: 724.7515. Time: 29.3630 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #44: GFLOPs: 26.4414. Time: 804.8312 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #45: GFLOPs: 393.8196. Time: 54.0372 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #46: GFLOPs: 1026.5741. Time: 20.7300 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #47: GFLOPs: 287.2929. Time: 74.0739 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #48: GFLOPs: 711.8233. Time: 29.8963 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #49: GFLOPs: 10.6858. Time: 1991.5194 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #50: GFLOPs: 124.6449. Time: 170.7322 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #51: GFLOPs: 9.7133. Time: 2190.8926 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #52: GFLOPs: 66.4682. Time: 320.1666 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #53: GFLOPs: 54.0110. Time: 394.0102 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #54: GFLOPs: 125.9861. Time: 168.9146 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #55: GFLOPs: 8.2228. Time: 2588.0418 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #56: GFLOPs: 426.0201. Time: 49.9528 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #57: GFLOPs: 296.0090. Time: 71.8927 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #58: GFLOPs: 491.8766. Time: 43.2647 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #59: GFLOPs: 92.6863. Time: 229.6013 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #60: GFLOPs: 499.1840. Time: 42.6314 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #61: GFLOPs: 140.9602. Time: 150.9710 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #62: GFLOPs: 586.1667. Time: 36.3052 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #63: GFLOPs: 25.3212. Time: 840.4372 us. Best GFLOPs: 1216.8308
2024-04-28 20:20:38 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #64: GFLOPs: 689.5060. Time: 30.8640 us. Best GFLOPs: 1216.8308
2024-04-28 20:31:03 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:31:03 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-28 20:31:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 397 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 20:31:05 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-28 20:31:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 20:31:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 20:31:20 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 73 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 20:31:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 80 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 20:31:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9914  0.9798  0.9796  0.9735  0.9730  0.9726  0.9680  0.9539  0.9518  0.9468  0.9422  0.9209  0.9184  0.9108  0.9073  0.9056
[17 : 32]:	0.8981  0.8980  0.8964  0.8950  0.8933  0.8924  0.8886  0.8884  0.8875  0.8862  0.8828  0.8821  0.8819  0.8819  0.8817  0.8797
[33 : 48]:	0.8760  0.8743  0.8743  0.8733  0.8714  0.8691  0.8688  0.8673  0.8673  0.8605  0.8602  0.8599  0.8576  0.8571  0.8568  0.8559
[49 : 64]:	0.8559  0.8541  0.8530  0.8502  0.8478  0.8471  0.8464  0.8454  0.8446  0.8442  0.8440  0.8427  0.8422  0.8415  0.8408  0.8391
2024-04-28 20:31:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:31:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #65: GFLOPs: 1383.1765. Time: 15.3855 us. Best GFLOPs: 1383.1765
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #66: GFLOPs: 1383.5876. Time: 15.3810 us. Best GFLOPs: 1383.5876
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #67: GFLOPs: 1328.8882. Time: 16.0141 us. Best GFLOPs: 1383.5876
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #68: GFLOPs: 1385.3700. Time: 15.3612 us. Best GFLOPs: 1385.3700
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #69: GFLOPs: 1362.7504. Time: 15.6161 us. Best GFLOPs: 1385.3700
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #70: GFLOPs: 1328.8032. Time: 16.0151 us. Best GFLOPs: 1385.3700
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #71: GFLOPs: 1265.3623. Time: 16.8180 us. Best GFLOPs: 1385.3700
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #72: GFLOPs: 1351.4525. Time: 15.7467 us. Best GFLOPs: 1385.3700
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #73: GFLOPs: 2182.3146. Time: 9.7515 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #74: GFLOPs: 1328.6872. Time: 16.0165 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #75: GFLOPs: 1385.5296. Time: 15.3594 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #76: GFLOPs: 1308.7610. Time: 16.2603 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #77: GFLOPs: 1469.7574. Time: 14.4792 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #78: GFLOPs: 1295.2158. Time: 16.4304 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #79: GFLOPs: 1445.4432. Time: 14.7227 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #80: GFLOPs: 1294.3495. Time: 16.4414 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #81: GFLOPs: 1351.5754. Time: 15.7453 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #82: GFLOPs: 1280.4561. Time: 16.6198 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #83: GFLOPs: 1259.6866. Time: 16.8938 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #84: GFLOPs: 1383.8444. Time: 15.3781 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #85: GFLOPs: 1327.2725. Time: 16.0336 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #86: GFLOPs: 1276.6689. Time: 16.6691 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #87: GFLOPs: 1385.4651. Time: 15.3601 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #88: GFLOPs: 1253.9780. Time: 16.9707 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #89: GFLOPs: 1243.8658. Time: 17.1087 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #90: GFLOPs: 1247.8628. Time: 17.0539 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #91: GFLOPs: 1332.0429. Time: 15.9761 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #92: GFLOPs: 2153.5198. Time: 9.8819 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #93: GFLOPs: 1364.5542. Time: 15.5955 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #94: GFLOPs: 997.0132. Time: 21.3446 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #95: GFLOPs: 1427.1607. Time: 14.9114 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #96: GFLOPs: 1293.0637. Time: 16.4577 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #97: GFLOPs: 1308.6164. Time: 16.2621 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #98: GFLOPs: 1158.7673. Time: 18.3651 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #99: GFLOPs: 1275.5536. Time: 16.6837 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #100: GFLOPs: 1282.3362. Time: 16.5954 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #101: GFLOPs: 1477.5418. Time: 14.4029 us. Best GFLOPs: 2182.3146
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #102: GFLOPs: 2242.6383. Time: 9.4892 us. Best GFLOPs: 2242.6383
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #103: GFLOPs: 1234.7241. Time: 17.2353 us. Best GFLOPs: 2242.6383
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #104: GFLOPs: 2461.6099. Time: 8.6451 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #105: GFLOPs: 1028.4948. Time: 20.6913 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #106: GFLOPs: 1048.5270. Time: 20.2960 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #107: GFLOPs: 2133.9836. Time: 9.9724 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #108: GFLOPs: 929.5185. Time: 22.8945 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #109: GFLOPs: 1294.6218. Time: 16.4379 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #110: GFLOPs: 1493.8624. Time: 14.2456 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #111: GFLOPs: 1294.6308. Time: 16.4378 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #112: GFLOPs: 1153.9337. Time: 18.4420 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #113: GFLOPs: 1345.9625. Time: 15.8109 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #114: GFLOPs: 997.1891. Time: 21.3409 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #115: GFLOPs: 1277.8450. Time: 16.6537 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #116: GFLOPs: 912.2515. Time: 23.3279 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #117: GFLOPs: 920.6945. Time: 23.1140 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #118: GFLOPs: 998.1686. Time: 21.3199 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #119: GFLOPs: 1309.3869. Time: 16.2526 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #120: GFLOPs: 2116.7333. Time: 10.0537 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #121: GFLOPs: 1382.1892. Time: 15.3965 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #122: GFLOPs: 1264.2000. Time: 16.8335 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #123: GFLOPs: 1028.5291. Time: 20.6906 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #124: GFLOPs: 997.3713. Time: 21.3370 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #125: GFLOPs: 1029.3323. Time: 20.6745 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #126: GFLOPs: 484.4835. Time: 43.9249 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #127: GFLOPs: 770.3427. Time: 27.6252 us. Best GFLOPs: 2461.6099
2024-04-28 20:32:29 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #128: GFLOPs: 12.2227. Time: 1741.1005 us. Best GFLOPs: 2461.6099
2024-04-28 21:28:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:28:52 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 21:28:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 384 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 21:28:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 766 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 21:28:56 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-28 21:29:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 76 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 21:29:05 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 21:29:10 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 21:29:15 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 21:29:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9761  0.9517  0.9427  0.9386  0.9347  0.9264  0.9208  0.9199  0.9199  0.9196  0.9171  0.9124  0.9116  0.9090  0.9069  0.9068
[17 : 32]:	0.9067  0.9043  0.9036  0.9011  0.8998  0.8992  0.8977  0.8968  0.8954  0.8942  0.8940  0.8915  0.8915  0.8914  0.8907  0.8907
[33 : 48]:	0.8905  0.8896  0.8889  0.8884  0.8883  0.8871  0.8868  0.8866  0.8865  0.8865  0.8858  0.8854  0.8829  0.8828  0.8828  0.8822
[49 : 64]:	0.8817  0.8812  0.8799  0.8791  0.8783  0.8765  0.8759  0.8756  0.8755  0.8753  0.8742  0.8739  0.8734  0.8731  0.8730  0.8721
2024-04-28 21:29:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:29:16 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #129: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(116), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(464), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(116), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(58) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(16) * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) // T.int64(4) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(464), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(116), rc_0 * T.int64(58) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(928) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(16))
                                        v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(928) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16) // T.int64(4))
                                        v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(928) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(4))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(464), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(116), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(58) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(928) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(58))
                                        v1 = T.axis.spatial(T.int64(116), rc_0 * T.int64(58) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(928) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(58))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(464) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3364))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(58), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(116), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(58) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(16) * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) // T.int64(4) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(116), rc_0 * T.int64(58) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(116), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(58) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(16) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) // T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 29, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 58, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 464, 2], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119, l120 = sch.split(loop=l117, factors=[None, 464, 2], preserve_unit_iters=True)
sch.vectorize(loop=l120)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b121 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b121, ann_key="meta_schedule.unroll_explicit")
b122, b123, b124, b125 = sch.get_child_blocks(b121)
l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b122)
l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b123)
l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163 = sch.get_loops(block=b124)
sch.annotate(block_or_loop=l144, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l144, ann_key="pragma_unroll_explicit", ann_val=1)
l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b125)
b171 = sch.get_block(name="conv2d_nchw", func_name="main")
l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190, l191 = sch.get_loops(block=b171)
b192 = sch.decompose_reduction(block=b171, loop=l175)
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #130: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(116), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(116), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(116), rc_0 * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) // T.int64(16))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) % T.int64(16) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(116), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) // T.int64(29))
                                    v1 = T.axis.spatial(T.int64(116), rc_0 * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) % T.int64(29))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1 < T.int64(841))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(116), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(116), rc_0 * T.int64(29) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(116), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 29, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 4, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 29, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109 = sch.split(loop=l107, factors=[None, 116], preserve_unit_iters=True)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b87)
l117, l118 = sch.split(loop=l116, factors=[None, 116], preserve_unit_iters=True)
sch.bind(loop=l118, thread_axis="threadIdx.x")
b119 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b119, ann_key="meta_schedule.unroll_explicit")
b120, b121, b122, b123 = sch.get_child_blocks(b119)
l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b120)
l132, l133, l134, l135, l136, l137, l138, l139 = sch.get_loops(block=b121)
l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b122)
sch.annotate(block_or_loop=l140, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l140, ann_key="pragma_unroll_explicit", ann_val=1)
l160, l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b123)
b167 = sch.get_block(name="conv2d_nchw", func_name="main")
l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b167)
b188 = sch.decompose_reduction(block=b167, loop=l171)
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #131: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(116), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(116), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(116), rc_0 * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(16))
                                        v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16) // T.int64(4))
                                        v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(4))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(116), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) // T.int64(29))
                                    v1 = T.axis.spatial(T.int64(116), rc_0 * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) % T.int64(29))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1 < T.int64(841))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(116), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(116), rc_0 * T.int64(29) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(116), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 29, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 2, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 29, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 116, 2], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119 = sch.split(loop=l117, factors=[None, 116], preserve_unit_iters=True)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b121)
l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b122)
l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l142, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l142, ann_key="pragma_unroll_explicit", ann_val=1)
l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b124)
b169 = sch.get_block(name="conv2d_nchw", func_name="main")
l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189 = sch.get_loops(block=b169)
b190 = sch.decompose_reduction(block=b169, loop=l173)
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #132: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(116), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(116), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(58) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(116), rc_0 * T.int64(58) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) // T.int64(16))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) % T.int64(16) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(29)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(116), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(58) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) // T.int64(58))
                                    v1 = T.axis.spatial(T.int64(116), rc_0 * T.int64(58) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) % T.int64(58))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(58), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(116), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(58) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(116), rc_0 * T.int64(58) + rc_1 * T.int64(58) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(116), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(58) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 29, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 4, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 1, 58])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109 = sch.split(loop=l107, factors=[None, 116], preserve_unit_iters=True)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b87)
l117, l118 = sch.split(loop=l116, factors=[None, 116], preserve_unit_iters=True)
sch.bind(loop=l118, thread_axis="threadIdx.x")
b119 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b119, ann_key="meta_schedule.unroll_explicit")
b120, b121, b122, b123 = sch.get_child_blocks(b119)
l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b120)
l132, l133, l134, l135, l136, l137, l138, l139 = sch.get_loops(block=b121)
l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b122)
sch.annotate(block_or_loop=l140, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l140, ann_key="pragma_unroll_explicit", ann_val=1)
l160, l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b123)
b167 = sch.get_block(name="conv2d_nchw", func_name="main")
l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b167)
b188 = sch.decompose_reduction(block=b167, loop=l171)
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #133: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(116), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(116), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(116), rc_0 * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(464) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(16))
                                        v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(464) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16) // T.int64(4))
                                        v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(464) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(4))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(116), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) // T.int64(29))
                                    v1 = T.axis.spatial(T.int64(116), rc_0 * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) % T.int64(29))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1 < T.int64(841))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(116), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(116), rc_0 * T.int64(29) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(116), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 29, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 2, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 29, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 116, 4], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119 = sch.split(loop=l117, factors=[None, 116], preserve_unit_iters=True)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b121)
l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b122)
l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l142, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l142, ann_key="pragma_unroll_explicit", ann_val=1)
l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b124)
b169 = sch.get_block(name="conv2d_nchw", func_name="main")
l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189 = sch.get_loops(block=b169)
b190 = sch.decompose_reduction(block=b169, loop=l173)
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #134: GFLOPs: 2162.9877. Time: 9.8387 us. Best GFLOPs: 2461.6099
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #135: GFLOPs: 2584.3895. Time: 8.2344 us. Best GFLOPs: 2584.3895
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #136: GFLOPs: 2167.8748. Time: 9.8165 us. Best GFLOPs: 2584.3895
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #137: GFLOPs: 2167.3863. Time: 9.8187 us. Best GFLOPs: 2584.3895
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #138: GFLOPs: 2220.9905. Time: 9.5817 us. Best GFLOPs: 2584.3895
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #139: GFLOPs: 2351.3203. Time: 9.0506 us. Best GFLOPs: 2584.3895
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #140: GFLOPs: 2060.9266. Time: 10.3259 us. Best GFLOPs: 2584.3895
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #141: GFLOPs: 2524.4462. Time: 8.4299 us. Best GFLOPs: 2584.3895
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #142: GFLOPs: 1868.7445. Time: 11.3878 us. Best GFLOPs: 2584.3895
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #143: GFLOPs: 2535.1909. Time: 8.3942 us. Best GFLOPs: 2584.3895
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #144: GFLOPs: 2516.8367. Time: 8.4554 us. Best GFLOPs: 2584.3895
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #145: GFLOPs: 2437.1173. Time: 8.7320 us. Best GFLOPs: 2584.3895
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #146: GFLOPs: 2189.1803. Time: 9.7209 us. Best GFLOPs: 2584.3895
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #147: GFLOPs: 2583.6831. Time: 8.2367 us. Best GFLOPs: 2584.3895
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #148: GFLOPs: 2436.1889. Time: 8.7353 us. Best GFLOPs: 2584.3895
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #149: GFLOPs: 2650.8397. Time: 8.0280 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #150: GFLOPs: 2257.8042. Time: 9.4255 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #151: GFLOPs: 2186.6948. Time: 9.7320 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #152: GFLOPs: 2219.8010. Time: 9.5868 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #153: GFLOPs: 2155.4152. Time: 9.8732 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #154: GFLOPs: 2321.6257. Time: 9.1664 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #155: GFLOPs: 2187.4157. Time: 9.7288 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #156: GFLOPs: 2162.0983. Time: 9.8427 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #157: GFLOPs: 2162.0985. Time: 9.8427 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #158: GFLOPs: 2590.2688. Time: 8.2157 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #159: GFLOPs: 2188.9454. Time: 9.7220 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #160: GFLOPs: 2188.9672. Time: 9.7219 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #161: GFLOPs: 2052.2321. Time: 10.3696 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #162: GFLOPs: 1300.6522. Time: 16.3617 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #163: GFLOPs: 2185.4432. Time: 9.7376 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #164: GFLOPs: 2458.6344. Time: 8.6556 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #165: GFLOPs: 2057.9020. Time: 10.3411 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #166: GFLOPs: 2225.1439. Time: 9.5638 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #167: GFLOPs: 2344.3874. Time: 9.0774 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #168: GFLOPs: 1419.3330. Time: 14.9936 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #169: GFLOPs: 2350.6138. Time: 9.0533 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #170: GFLOPs: 2007.4741. Time: 10.6008 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #171: GFLOPs: 2472.7912. Time: 8.6060 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #172: GFLOPs: 2284.9094. Time: 9.3137 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #173: GFLOPs: 2169.9682. Time: 9.8070 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #174: GFLOPs: 2227.0429. Time: 9.5557 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #175: GFLOPs: 2162.2717. Time: 9.8419 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #176: GFLOPs: 2336.4477. Time: 9.1082 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #177: GFLOPs: 2501.4331. Time: 8.5075 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #178: GFLOPs: 2136.2689. Time: 9.9617 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #179: GFLOPs: 2521.9909. Time: 8.4381 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #180: GFLOPs: 2225.4712. Time: 9.5624 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #181: GFLOPs: 2229.0906. Time: 9.5469 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #182: GFLOPs: 2124.3404. Time: 10.0176 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #183: GFLOPs: 2297.8406. Time: 9.2613 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #184: GFLOPs: 2297.5126. Time: 9.2626 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #185: GFLOPs: 2473.2174. Time: 8.6045 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #186: GFLOPs: 2473.6374. Time: 8.6031 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #187: GFLOPs: 2410.6887. Time: 8.8277 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #188: GFLOPs: 2110.3293. Time: 10.0842 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #189: GFLOPs: 2473.1060. Time: 8.6049 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #190: GFLOPs: 48.9664. Time: 434.6017 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #191: GFLOPs: 370.9231. Time: 57.3728 us. Best GFLOPs: 2650.8397
2024-04-28 21:30:20 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #192: GFLOPs: 826.5140. Time: 25.7478 us. Best GFLOPs: 2650.8397
2024-04-28 22:15:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:15:53 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 22:15:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 363 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 22:15:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 737 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 22:15:57 [INFO] [evolutionary_search.cc:723] Sampled 83 candidate(s)
2024-04-28 22:16:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 22:16:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 64 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 22:16:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 22:16:16 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 22:16:18 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9704  0.9688  0.9657  0.9642  0.9604  0.9604  0.9603  0.9603  0.9587  0.9579  0.9560  0.9543  0.9541  0.9532  0.9529  0.9505
[17 : 32]:	0.9482  0.9478  0.9475  0.9471  0.9467  0.9467  0.9466  0.9465  0.9465  0.9456  0.9454  0.9454  0.9454  0.9454  0.9452  0.9452
[33 : 48]:	0.9440  0.9427  0.9425  0.9419  0.9411  0.9408  0.9408  0.9396  0.9376  0.9360  0.9351  0.9350  0.9329  0.9322  0.9313  0.9303
[49 : 64]:	0.9303  0.9301  0.9296  0.9248  0.9246  0.9239  0.9219  0.9211  0.9208  0.9207  0.9207  0.9195  0.9188  0.9173  0.9168  0.9168
2024-04-28 22:16:18 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:16:18 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #193: GFLOPs: 2530.9417. Time: 8.4083 us. Best GFLOPs: 2650.8397
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #194: GFLOPs: 2652.7864. Time: 8.0221 us. Best GFLOPs: 2652.7864
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #195: GFLOPs: 2650.5855. Time: 8.0288 us. Best GFLOPs: 2652.7864
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #196: GFLOPs: 2652.1441. Time: 8.0240 us. Best GFLOPs: 2652.7864
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #197: GFLOPs: 2647.4343. Time: 8.0383 us. Best GFLOPs: 2652.7864
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #198: GFLOPs: 2652.8440. Time: 8.0219 us. Best GFLOPs: 2652.8440
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #199: GFLOPs: 2584.2187. Time: 8.2349 us. Best GFLOPs: 2652.8440
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #200: GFLOPs: 2584.2566. Time: 8.2348 us. Best GFLOPs: 2652.8440
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #201: GFLOPs: 2753.0223. Time: 7.7300 us. Best GFLOPs: 2753.0223
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #202: GFLOPs: 2616.9765. Time: 8.1319 us. Best GFLOPs: 2753.0223
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #203: GFLOPs: 2584.6882. Time: 8.2334 us. Best GFLOPs: 2753.0223
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #204: GFLOPs: 2753.1624. Time: 7.7296 us. Best GFLOPs: 2753.1624
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #205: GFLOPs: 2590.7263. Time: 8.2143 us. Best GFLOPs: 2753.1624
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #206: GFLOPs: 2469.7886. Time: 8.6165 us. Best GFLOPs: 2753.1624
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #207: GFLOPs: 2586.2878. Time: 8.2284 us. Best GFLOPs: 2753.1624
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #208: GFLOPs: 2587.5825. Time: 8.2242 us. Best GFLOPs: 2753.1624
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #209: GFLOPs: 2497.1886. Time: 8.5219 us. Best GFLOPs: 2753.1624
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #210: GFLOPs: 2408.3487. Time: 8.8363 us. Best GFLOPs: 2753.1624
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #211: GFLOPs: 2538.4052. Time: 8.3836 us. Best GFLOPs: 2753.1624
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #212: GFLOPs: 2650.5855. Time: 8.0288 us. Best GFLOPs: 2753.1624
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #213: GFLOPs: 2587.4121. Time: 8.2248 us. Best GFLOPs: 2753.1624
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #214: GFLOPs: 2530.5412. Time: 8.4096 us. Best GFLOPs: 2753.1624
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #215: GFLOPs: 2570.6621. Time: 8.2784 us. Best GFLOPs: 2753.1624
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #216: GFLOPs: 2586.3536. Time: 8.2281 us. Best GFLOPs: 2753.1624
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #217: GFLOPs: 2274.0766. Time: 9.3580 us. Best GFLOPs: 2753.1624
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #218: GFLOPs: 2438.8331. Time: 8.7259 us. Best GFLOPs: 2753.1624
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #219: GFLOPs: 2764.0226. Time: 7.6992 us. Best GFLOPs: 2764.0226
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #220: GFLOPs: 2755.2443. Time: 7.7238 us. Best GFLOPs: 2764.0226
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #221: GFLOPs: 2755.2975. Time: 7.7236 us. Best GFLOPs: 2764.0226
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #222: GFLOPs: 2473.8090. Time: 8.6025 us. Best GFLOPs: 2764.0226
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #223: GFLOPs: 2592.7120. Time: 8.2080 us. Best GFLOPs: 2764.0226
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #224: GFLOPs: 2592.6354. Time: 8.2082 us. Best GFLOPs: 2764.0226
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #225: GFLOPs: 2576.6822. Time: 8.2590 us. Best GFLOPs: 2764.0226
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #226: GFLOPs: 2652.6516. Time: 8.0225 us. Best GFLOPs: 2764.0226
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #227: GFLOPs: 2570.5118. Time: 8.2789 us. Best GFLOPs: 2764.0226
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #228: GFLOPs: 2640.9006. Time: 8.0582 us. Best GFLOPs: 2764.0226
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #229: GFLOPs: 2764.0474. Time: 7.6992 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #230: GFLOPs: 2551.4090. Time: 8.3408 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #231: GFLOPs: 2261.3088. Time: 9.4109 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #232: GFLOPs: 2577.9422. Time: 8.2550 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #233: GFLOPs: 2664.5461. Time: 7.9867 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #234: GFLOPs: 2622.0588. Time: 8.1161 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #235: GFLOPs: 2306.5137. Time: 9.2264 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #236: GFLOPs: 2363.4373. Time: 9.0042 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #237: GFLOPs: 2287.5657. Time: 9.3029 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #238: GFLOPs: 2076.7667. Time: 10.2471 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #239: GFLOPs: 2442.0663. Time: 8.7143 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #240: GFLOPs: 2362.7233. Time: 9.0069 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #241: GFLOPs: 2577.6871. Time: 8.2558 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #242: GFLOPs: 2291.2847. Time: 9.2878 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #243: GFLOPs: 2412.3664. Time: 8.8216 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #244: GFLOPs: 2473.3132. Time: 8.6042 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #245: GFLOPs: 2172.9896. Time: 9.7934 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #246: GFLOPs: 2166.0205. Time: 9.8249 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #247: GFLOPs: 2297.3161. Time: 9.2634 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #248: GFLOPs: 2293.7377. Time: 9.2778 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #249: GFLOPs: 2541.8942. Time: 8.3721 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #250: GFLOPs: 2642.2887. Time: 8.0540 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #251: GFLOPs: 2641.1832. Time: 8.0573 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #252: GFLOPs: 2274.5925. Time: 9.3559 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #253: GFLOPs: 2637.9981. Time: 8.0671 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #254: GFLOPs: 78.1849. Time: 272.1868 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #255: GFLOPs: 26.2671. Time: 810.1744 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #256: GFLOPs: 19.8447. Time: 1072.3738 us. Best GFLOPs: 2764.0474
2024-04-28 22:17:25 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:17:25 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 22:17:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 380 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 22:17:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 760 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 22:17:29 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2024-04-28 22:17:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 67 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 22:17:37 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 68 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 22:17:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 22:17:47 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 71 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 22:17:49 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9753  0.9715  0.9680  0.9660  0.9654  0.9654  0.9647  0.9639  0.9624  0.9622  0.9607  0.9586  0.9574  0.9572  0.9572  0.9553
[17 : 32]:	0.9549  0.9530  0.9527  0.9525  0.9517  0.9513  0.9512  0.9509  0.9493  0.9489  0.9467  0.9443  0.9443  0.9438  0.9435  0.9433
[33 : 48]:	0.9429  0.9416  0.9416  0.9415  0.9412  0.9401  0.9395  0.9391  0.9389  0.9388  0.9388  0.9388  0.9378  0.9375  0.9365  0.9362
[49 : 64]:	0.9362  0.9362  0.9355  0.9340  0.9335  0.9334  0.9334  0.9334  0.9309  0.9309  0.9308  0.9307  0.9307  0.9307  0.9305  0.9304
2024-04-28 22:17:49 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:17:49 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #257: GFLOPs: 2563.8613. Time: 8.3003 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #258: GFLOPs: 2752.6822. Time: 7.7310 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #259: GFLOPs: 2747.2340. Time: 7.7463 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #260: GFLOPs: 2747.1296. Time: 7.7466 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #261: GFLOPs: 2751.8029. Time: 7.7334 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #262: GFLOPs: 2752.3460. Time: 7.7319 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #263: GFLOPs: 2622.7265. Time: 8.1140 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #264: GFLOPs: 2660.3109. Time: 7.9994 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #265: GFLOPs: 2530.8028. Time: 8.4088 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #266: GFLOPs: 2658.9185. Time: 8.0036 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #267: GFLOPs: 2658.8910. Time: 8.0037 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #268: GFLOPs: 2531.7429. Time: 8.4056 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #269: GFLOPs: 2669.8325. Time: 7.9709 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #270: GFLOPs: 2665.7680. Time: 7.9830 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #271: GFLOPs: 2665.5585. Time: 7.9837 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #272: GFLOPs: 2603.0851. Time: 8.1753 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #273: GFLOPs: 2673.6061. Time: 7.9596 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #274: GFLOPs: 2604.2368. Time: 8.1716 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #275: GFLOPs: 2530.4864. Time: 8.4098 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #276: GFLOPs: 2534.8254. Time: 8.3954 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #277: GFLOPs: 2664.1113. Time: 7.9880 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #278: GFLOPs: 2498.1219. Time: 8.5188 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #279: GFLOPs: 2749.4667. Time: 7.7400 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #280: GFLOPs: 2673.4473. Time: 7.9601 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #281: GFLOPs: 2663.1467. Time: 7.9909 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #282: GFLOPs: 2673.5081. Time: 7.9599 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #283: GFLOPs: 2665.3639. Time: 7.9842 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #284: GFLOPs: 2677.5107. Time: 7.9480 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #285: GFLOPs: 2678.0215. Time: 7.9465 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #286: GFLOPs: 2056.0641. Time: 10.3503 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #287: GFLOPs: 2592.3536. Time: 8.2091 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #288: GFLOPs: 2579.9741. Time: 8.2485 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #289: GFLOPs: 2620.3631. Time: 8.1214 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #290: GFLOPs: 2291.1188. Time: 9.2884 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #291: GFLOPs: 2536.5248. Time: 8.3898 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #292: GFLOPs: 2580.2199. Time: 8.2477 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #293: GFLOPs: 2678.3876. Time: 7.9454 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #294: GFLOPs: 2509.9719. Time: 8.4785 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #295: GFLOPs: 2591.7998. Time: 8.2109 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #296: GFLOPs: 2576.7040. Time: 8.2590 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #297: GFLOPs: 2570.3615. Time: 8.2793 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #298: GFLOPs: 2533.0189. Time: 8.4014 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #299: GFLOPs: 2533.6571. Time: 8.3993 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #300: GFLOPs: 2532.9354. Time: 8.4017 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #301: GFLOPs: 2574.5926. Time: 8.2657 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #302: GFLOPs: 2511.1080. Time: 8.4747 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #303: GFLOPs: 2419.9966. Time: 8.7938 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #304: GFLOPs: 2678.4149. Time: 7.9453 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #305: GFLOPs: 2677.9822. Time: 7.9466 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #306: GFLOPs: 2677.9430. Time: 7.9467 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #307: GFLOPs: 2590.9936. Time: 8.2134 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #308: GFLOPs: 2500.0807. Time: 8.5121 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #309: GFLOPs: 2499.8499. Time: 8.5129 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #310: GFLOPs: 2586.1370. Time: 8.2288 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #311: GFLOPs: 2585.7237. Time: 8.2302 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #312: GFLOPs: 2512.4966. Time: 8.4700 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #313: GFLOPs: 2289.2077. Time: 9.2962 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #314: GFLOPs: 2072.2455. Time: 10.2695 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #315: GFLOPs: 2584.0256. Time: 8.2356 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #316: GFLOPs: 2592.5210. Time: 8.2086 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #317: GFLOPs: 2592.4635. Time: 8.2088 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #318: GFLOPs: 383.5600. Time: 55.4826 us. Best GFLOPs: 2764.0474
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:121] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #319: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "Objects/call.c", line 200, in PyVectorcall_Call
  File "Python/ceval.c", line 4963, in call_function
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  333: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::allocator<char>, tvm::runtime::TVMArgs const&)
  332: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  331: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  330: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  329: tvm::transform::Pass::operator()(tvm::IRModule) const
  328: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  327: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  326: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  325: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  324: _ZN3tvm7runtime13PackedFun
  323: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
  322: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  321: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  320: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  319: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  318: _ZZN3tvm3tir11StmtFunctorI
  317: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  316: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  315: _ZZN3tvm3tir11StmtFunctorI
  314: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  313: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  312: _ZZN3tvm3tir11StmtFunctorI
  311: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  310: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  309: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  308: _ZZN3tvm3tir11StmtFunctorI
  307: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  306: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  305: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  304: _ZZN3tvm3tir11StmtFunctorI
  303: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  302: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  301: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  300: _ZZN3tvm3tir11StmtFunctorI
  299: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  298: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  297: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  296: _ZZN3tvm3tir11StmtFunctorI
  295: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  294: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  293: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  292: _ZZN3tvm3tir11StmtFunctorI
  291: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  290: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  289: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  288: _ZZN3tvm3tir11StmtFunctorI
  287: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  286: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  285: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  284: _ZZN3tvm3tir11StmtFunctorI
  283: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  282: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  281: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  280: _ZZN3tvm3tir11StmtFunctorI
  279: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  278: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  277: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  276: _ZZN3tvm3tir11StmtFunctorI
  275: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  274: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  273: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  272: _ZZN3tvm3tir11StmtFunctorI
  271: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  270: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  269: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  268: _ZZN3tvm3tir11StmtFunctorI
  267: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  266: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  265: _ZZN3tvm3tir11StmtFunctorI
  264: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  263: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  262: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  261: _ZZN3tvm3tir11StmtFunctorI
  260: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  259: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  258: _ZZN3tvm3tir11StmtFunctorI
  257: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  256: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  255: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  254: _ZZN3tvm3tir11StmtFunctorI
  253: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  252: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  251: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  250: _ZZN3tvm3tir11StmtFunctorI
  249: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  248: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  247: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  246: _ZZN3tvm3tir11StmtFunctorI
  245: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  244: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  243: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  242: _ZZN3tvm3tir11StmtFunctorI
  241: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  240: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  239: _ZZN3tvm3tir11StmtFunctorI
  238: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  237: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  236: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  235: _ZZN3tvm3tir11StmtFunctorI
  234: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  233: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  232: _ZZN3tvm3tir11StmtFunctorI
  231: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  230: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  229: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  228: _ZZN3tvm3tir11StmtFunctorI
  227: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  226: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  225: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  224: _ZZN3tvm3tir11StmtFunctorI
  223: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  222: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  221: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  220: _ZZN3tvm3tir11StmtFunctorI
  219: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  218: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  217: _ZZN3tvm3tir11StmtFunctorI
  216: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  215: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  214: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  213: _ZZN3tvm3tir11StmtFunctorI
  212: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  211: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  210: _ZZN3tvm3tir11StmtFunctorI
  209: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  208: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  207: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  206: _ZZN3tvm3tir11StmtFunctorI
  205: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  204: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  203: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  202: _ZZN3tvm3tir11StmtFunctorI
  201: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  200: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  199: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  198: _ZZN3tvm3tir11StmtFunctorI
  197: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  196: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  195: _ZZN3tvm3tir11StmtFunctorI
  194: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  193: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  192: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  191: _ZZN3tvm3tir11StmtFunctorI
  190: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  189: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  188: _ZZN3tvm3tir11StmtFunctorI
  187: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  186: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  185: _ZZN3tvm3tir11StmtFunctorI
  184: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  183: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  182: _ZZN3tvm3tir11StmtFunctorI
  181: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  180: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  179: _ZZN3tvm3tir11StmtFunctorI
  178: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  177: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  176: _ZZN3tvm3tir11StmtFunctorI
  175: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  174: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  173: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  172: _ZZN3tvm3tir11StmtFunctorI
  171: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  170: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  169: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  168: _ZZN3tvm3tir11StmtFunctorI
  167: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  166: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  165: _ZZN3tvm3tir11StmtFunctorI
  164: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  163: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  162: _ZZN3tvm3tir11StmtFunctorI
  161: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  160: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  159: _ZZN3tvm3tir11StmtFunctorI
  158: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  157: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  156: _ZZN3tvm3tir11StmtFunctorI
  155: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  154: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  153: _ZZN3tvm3tir11StmtFunctorI
  152: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  151: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  150: _ZZN3tvm3tir11StmtFunctorI
  149: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  148: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  147: _ZZN3tvm3tir11StmtFunctorIFNS
  146: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  145: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  144: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  143: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  142: _ZZN3tvm3tir11StmtFunctorI
  141: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  140: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  139: _ZZN3tvm3tir11StmtFunctorI
  138: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  137: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  136: _ZZN3tvm3tir11StmtFunctorI
  135: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  134: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  133: _ZZN3tvm3tir11StmtFunctorI
  132: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  131: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  130: _ZZN3tvm3tir11StmtFunctorI
  129: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  128: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  127: _ZZN3tvm3tir11StmtFunctorI
  126: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  125: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  124: _ZZN3tvm3tir11StmtFunctorI
  123: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  122: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  121: _ZZN3tvm3tir11StmtFunctorI
  120: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  119: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  118: _ZZN3tvm3tir11StmtFunctorI
  117: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  116: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  115: _ZZN3tvm3tir11StmtFunctorIFNS
  114: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  113: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  112: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  111: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  110: _ZZN3tvm3tir11StmtFunctorI
  109: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  108: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  107: _ZZN3tvm3tir11StmtFunctorI
  106: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  105: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  104: _ZZN3tvm3tir11StmtFunctorI
  103: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  102: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  101: _ZZN3tvm3tir11StmtFunctorI
  100: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  99: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  98: _ZZN3tvm3tir11StmtFunctorI
  97: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  96: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  95: _ZZN3tvm3tir11StmtFunctorI
  94: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  93: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  92: _ZZN3tvm3tir11StmtFunctorI
  91: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  90: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  89: _ZZN3tvm3tir11StmtFunctorI
  88: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  87: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  86: _ZZN3tvm3tir11StmtFunctorI
  85: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  84: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  83: _ZZN3tvm3tir11StmtFunctorI
  82: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  81: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  80: _ZZN3tvm3tir11StmtFunctorIFNS
  79: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  78: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  77: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  76: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  75: _ZZN3tvm3tir11StmtFunctorI
  74: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  73: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  72: _ZZN3tvm3tir11StmtFunctorI
  71: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  70: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  69: _ZZN3tvm3tir11StmtFunctorI
  68: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  67: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  66: _ZZN3tvm3tir11StmtFunctorI
  65: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  64: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  63: _ZZN3tvm3tir11StmtFunctorI
  62: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  61: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  60: _ZZN3tvm3tir11StmtFunctorI
  59: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  58: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  57: _ZZN3tvm3tir11StmtFunctorI
  56: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  55: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  54: _ZZN3tvm3tir11StmtFunctorI
  53: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  52: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  51: _ZZN3tvm3tir11StmtFunctorI
  50: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  49: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  48: _ZZN3tvm3tir11StmtFunctorI
  47: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  46: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  45: _ZZN3tvm3tir11StmtFunctorIFNS
  44: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  43: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  42: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  41: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  40: _ZZN3tvm3tir11StmtFunctorI
  39: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  38: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  37: _ZZN3tvm3tir11StmtFunctorI
  36: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  35: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  34: _ZZN3tvm3tir11StmtFunctorI
  33: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  32: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  31: _ZZN3tvm3tir11StmtFunctorI
  30: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  29: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  28: _ZZN3tvm3tir11StmtFunctorI
  27: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  26: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  25: _ZZN3tvm3tir11StmtFunctorI
  24: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  23: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  22: _ZZN3tvm3tir11StmtFunctorI
  21: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  20: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  19: _ZZN3tvm3tir11StmtFunctorIFNS
  18: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  17: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  16: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  15: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  14: _ZZN3tvm3tir11StmtFunctorI
  13: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  12: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  11: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  10: _ZZN3tvm3tir11StmtFunctorI
  9: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  8: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  7: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS
  5: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  4: _ZZN3tvm3tir11ExprFunctorI
  3: tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  2: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  1: tvm::tir::APIType(tvm::runtime::DataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/tir/transforms/ir_utils.h", line 157
InternalError: Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(116), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(116), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(116), T.int64(116), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(116), nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(29) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(7) + yy_3_init * T.int64(7) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(58), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(116), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(784))
                                        v2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(784) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(116), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(116), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(232))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(116), nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(29) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(116), rc_0_ry_0_rx_0_fused * T.int64(2) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(29), T.int64(7), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(116), nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(29) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 4, 29, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 4, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 14, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[58, 1, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-04-28 22:18:51 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #320: GFLOPs: 58.2829. Time: 365.1307 us. Best GFLOPs: 2764.0474
2024-04-28 23:29:18 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:29:18 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:29:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 382 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 23:29:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 755 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 23:29:22 [INFO] [evolutionary_search.cc:723] Sampled 65 candidate(s)
2024-04-28 23:29:26 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 59 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 23:29:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 61 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 23:29:36 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 23:29:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x35fa748)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d0a458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2d568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4bff468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x47e7cb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d47a98)]: 69 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d0a808)]: 0 failure(s)
2024-04-28 23:29:43 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0088  0.9839  0.9826  0.9821  0.9804  0.9802  0.9798  0.9798  0.9794  0.9787  0.9786  0.9774  0.9770  0.9769  0.9769  0.9762
[17 : 32]:	0.9745  0.9745  0.9745  0.9745  0.9743  0.9735  0.9733  0.9731  0.9717  0.9716  0.9713  0.9712  0.9693  0.9693  0.9688  0.9663
[33 : 48]:	0.9660  0.9658  0.9655  0.9650  0.9643  0.9641  0.9641  0.9632  0.9618  0.9617  0.9614  0.9608  0.9601  0.9596  0.9590  0.9590
[49 : 64]:	0.9587  0.9581  0.9578  0.9570  0.9570  0.9562  0.9558  0.9558  0.9553  0.9550  0.9549  0.9546  0.9538  0.9538  0.9534  0.9531
2024-04-28 23:29:43 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:29:43 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #321: GFLOPs: 2188.9610. Time: 9.7219 us. Best GFLOPs: 2764.0474
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #322: GFLOPs: 2751.0279. Time: 7.7356 us. Best GFLOPs: 2764.0474
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #323: GFLOPs: 2838.0705. Time: 7.4984 us. Best GFLOPs: 2838.0705
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #324: GFLOPs: 2752.5122. Time: 7.7314 us. Best GFLOPs: 2838.0705
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #325: GFLOPs: 2674.5017. Time: 7.9570 us. Best GFLOPs: 2838.0705
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #326: GFLOPs: 2838.3495. Time: 7.4976 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #327: GFLOPs: 2599.0323. Time: 8.1880 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #328: GFLOPs: 2754.4862. Time: 7.7259 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #329: GFLOPs: 2758.0531. Time: 7.7159 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #330: GFLOPs: 2525.1218. Time: 8.4277 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #331: GFLOPs: 2754.2783. Time: 7.7265 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #332: GFLOPs: 2753.6260. Time: 7.7283 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #333: GFLOPs: 2753.5625. Time: 7.7285 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #334: GFLOPs: 2758.2843. Time: 7.7153 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #335: GFLOPs: 2785.3347. Time: 7.6403 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #336: GFLOPs: 2750.6640. Time: 7.7366 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #337: GFLOPs: 2608.0168. Time: 8.1598 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #338: GFLOPs: 2752.9548. Time: 7.7302 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #339: GFLOPs: 2752.3875. Time: 7.7318 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #340: GFLOPs: 2837.9731. Time: 7.4986 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #341: GFLOPs: 2595.1213. Time: 8.2003 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #342: GFLOPs: 2600.4921. Time: 8.1834 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #343: GFLOPs: 2834.2157. Time: 7.5086 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #344: GFLOPs: 2777.7506. Time: 7.6612 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #345: GFLOPs: 2599.0131. Time: 8.1881 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #346: GFLOPs: 2558.9223. Time: 8.3164 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #347: GFLOPs: 2754.6434. Time: 7.7255 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #348: GFLOPs: 2534.9360. Time: 8.3950 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #349: GFLOPs: 2327.2818. Time: 9.1441 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #350: GFLOPs: 2771.4700. Time: 7.6786 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #351: GFLOPs: 2457.2414. Time: 8.6605 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #352: GFLOPs: 2703.6023. Time: 7.8713 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #353: GFLOPs: 2671.3659. Time: 7.9663 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #354: GFLOPs: 2599.6658. Time: 8.1860 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #355: GFLOPs: 2581.9569. Time: 8.2422 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #356: GFLOPs: 2757.4498. Time: 7.7176 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #357: GFLOPs: 2593.1055. Time: 8.2067 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #358: GFLOPs: 2749.6288. Time: 7.7396 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #359: GFLOPs: 2754.2430. Time: 7.7266 us. Best GFLOPs: 2838.3495
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #360: GFLOPs: 2839.7172. Time: 7.4940 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #361: GFLOPs: 2593.2852. Time: 8.2062 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #362: GFLOPs: 2753.2392. Time: 7.7294 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #363: GFLOPs: 2757.6901. Time: 7.7169 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #364: GFLOPs: 2751.2045. Time: 7.7351 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #365: GFLOPs: 2599.8931. Time: 8.1853 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #366: GFLOPs: 2673.4298. Time: 7.9601 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #367: GFLOPs: 2642.8904. Time: 8.0521 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #368: GFLOPs: 2643.7740. Time: 8.0494 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #369: GFLOPs: 2702.6779. Time: 7.8740 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #370: GFLOPs: 2834.3447. Time: 7.5082 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #371: GFLOPs: 2754.0828. Time: 7.7270 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #372: GFLOPs: 2591.4836. Time: 8.2119 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #373: GFLOPs: 2667.6679. Time: 7.9773 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #374: GFLOPs: 2753.2600. Time: 7.7293 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #375: GFLOPs: 2675.2744. Time: 7.9547 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #376: GFLOPs: 2675.5170. Time: 7.9539 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #377: GFLOPs: 2697.4978. Time: 7.8891 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #378: GFLOPs: 2669.8181. Time: 7.9709 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #379: GFLOPs: 2673.8614. Time: 7.9589 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #380: GFLOPs: 2692.3291. Time: 7.9043 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #381: GFLOPs: 2675.9592. Time: 7.9526 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #382: GFLOPs: 875.1870. Time: 24.3158 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #383: GFLOPs: 30.3865. Time: 700.3400 us. Best GFLOPs: 2839.7172
2024-04-28 23:30:46 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_conv2d_add_nn_relu_1] Trial #384: GFLOPs: 29.3077. Time: 726.1199 us. Best GFLOPs: 2839.7172
