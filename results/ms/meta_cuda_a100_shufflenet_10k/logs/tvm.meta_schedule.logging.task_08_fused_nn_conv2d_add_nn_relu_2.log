2024-04-28 19:50:50 [INFO] [task_scheduler.cc:160] Initializing Task #8: "fused_nn_conv2d_add_nn_relu_2"
2024-04-28 19:50:50 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(58), T.int64(24), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(24), T.int64(56), T.int64(56)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(58), T.int64(56), T.int64(56), T.int64(24), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(58), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(58), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-28 19:50:50 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:50:50 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(58), T.int64(24), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(58), T.int64(24), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(37632)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(24), rc_0 * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(696)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(24), rc_0 * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(14)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(58), ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + xx_3 * T.int64(14) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(24), rc_0 * T.int64(12) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(58), T.int64(4), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0, v1 = T.axis.remap("SS", [ax0, ax1])
                                v2 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 29, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 14])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 12, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-28 19:50:50 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(58), T.int64(24), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(58), T.int64(24), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(37632)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(24), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(696)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(24), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(14)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(58), ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + xx_3 * T.int64(14) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(24), rc_0_ry_0_rx_0_fused * T.int64(12) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(58), T.int64(4), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0, v1 = T.axis.remap("SS", [ax0, ax1])
                                v2 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 29, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 14])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 12, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-28 19:50:50 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(58), T.int64(24), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(58), T.int64(24), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(37632)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(24), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(696)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(24), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(14)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(58), ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + xx_3 * T.int64(14) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(24), rc_0_ry_0_rx_0_fused * T.int64(12) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(58), T.int64(4), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0, v1 = T.axis.remap("SS", [ax0, ax1])
                                v2 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 29, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 14])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 12, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-28 19:59:18 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 19:59:18 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 19:59:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 459 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 19:59:20 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-28 19:59:24 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 19:59:28 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 19:59:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 19:59:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 19:59:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9992  0.9990  0.9981  0.9979  0.9958  0.9951  0.9942  0.9940  0.9930  0.9928  0.9924  0.9920  0.9892  0.9888  0.9882
[17 : 32]:	0.9879  0.9878  0.9871  0.9863  0.9856  0.9847  0.9832  0.9832  0.9827  0.9826  0.9824  0.9819  0.9812  0.9802  0.9802  0.9782
[33 : 48]:	0.9779  0.9776  0.9754  0.9723  0.9718  0.9709  0.9702  0.9700  0.9690  0.9686  0.9679  0.9672  0.9670  0.9669  0.9663  0.9650
[49 : 64]:	0.9647  0.9640  0.9640  0.9625  0.9624  0.9622  0.9621  0.9619  0.9611  0.9560  0.9557  0.9541  0.9525  0.9525  0.9516  0.9501
2024-04-28 19:59:36 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 19:59:36 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #1: GFLOPs: 560.2746. Time: 16.2320 us. Best GFLOPs: 560.2746
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #2: GFLOPs: 787.0370. Time: 11.5552 us. Best GFLOPs: 787.0370
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #3: GFLOPs: 108.0041. Time: 84.2042 us. Best GFLOPs: 787.0370
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #4: GFLOPs: 437.1601. Time: 20.8034 us. Best GFLOPs: 787.0370
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #5: GFLOPs: 832.8612. Time: 10.9195 us. Best GFLOPs: 832.8612
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #6: GFLOPs: 48.2590. Time: 188.4499 us. Best GFLOPs: 832.8612
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #7: GFLOPs: 219.0455. Time: 41.5183 us. Best GFLOPs: 832.8612
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #8: GFLOPs: 85.7036. Time: 106.1146 us. Best GFLOPs: 832.8612
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #9: GFLOPs: 938.4239. Time: 9.6911 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #10: GFLOPs: 77.8631. Time: 116.7999 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #11: GFLOPs: 285.0680. Time: 31.9026 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #12: GFLOPs: 229.0727. Time: 39.7009 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #13: GFLOPs: 773.0070. Time: 11.7650 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #14: GFLOPs: 242.6807. Time: 37.4748 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #15: GFLOPs: 822.8348. Time: 11.0525 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #16: GFLOPs: 92.0319. Time: 98.8179 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #17: GFLOPs: 73.7872. Time: 123.2518 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #18: GFLOPs: 90.6930. Time: 100.2767 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #19: GFLOPs: 393.5941. Time: 23.1060 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #20: GFLOPs: 248.4074. Time: 36.6108 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #21: GFLOPs: 74.1693. Time: 122.6168 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #22: GFLOPs: 292.3814. Time: 31.1046 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #23: GFLOPs: 228.9085. Time: 39.7294 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #24: GFLOPs: 71.8940. Time: 126.4973 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #25: GFLOPs: 371.5787. Time: 24.4750 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #26: GFLOPs: 768.3036. Time: 11.8370 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #27: GFLOPs: 610.0505. Time: 14.9076 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #28: GFLOPs: 20.6182. Time: 441.0859 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #29: GFLOPs: 32.9307. Time: 276.1676 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #30: GFLOPs: 111.4163. Time: 81.6254 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #31: GFLOPs: 250.6348. Time: 36.2855 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #32: GFLOPs: 216.8142. Time: 41.9456 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #33: GFLOPs: 210.2356. Time: 43.2581 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #34: GFLOPs: 72.2071. Time: 125.9488 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #35: GFLOPs: 13.4987. Time: 673.7233 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #36: GFLOPs: 33.7235. Time: 269.6756 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #37: GFLOPs: 83.3803. Time: 109.0714 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #38: GFLOPs: 21.5537. Time: 421.9415 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #39: GFLOPs: 37.4313. Time: 242.9622 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #40: GFLOPs: 711.3466. Time: 12.7848 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #41: GFLOPs: 61.1516. Time: 148.7189 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #42: GFLOPs: 231.3930. Time: 39.3028 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #43: GFLOPs: 469.0353. Time: 19.3896 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #44: GFLOPs: 67.7988. Time: 134.1380 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #45: GFLOPs: 186.2404. Time: 48.8315 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #46: GFLOPs: 82.0651. Time: 110.8193 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #47: GFLOPs: 163.8385. Time: 55.5083 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #48: GFLOPs: 220.7164. Time: 41.2040 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #49: GFLOPs: 24.9308. Time: 364.7860 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #50: GFLOPs: 428.2549. Time: 21.2360 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #51: GFLOPs: 73.9011. Time: 123.0617 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #52: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "Objects/call.c", line 200, in PyVectorcall_Call
  File "Python/ceval.c", line 4963, in call_function
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  337: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::allocator<char>, tvm::runtime::TVMArgs const&)
  336: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  335: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  334: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  333: tvm::transform::Pass::operator()(tvm::IRModule) const
  332: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  331: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  330: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  329: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  328: _ZN3tvm7runtime13PackedFun
  327: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const, tvm::runtime::TVMRetValue) const
  326: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  325: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  324: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  323: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  322: _ZZN3tvm3tir11StmtFunctorI
  321: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  320: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  319: _ZZN3tvm3tir11StmtFunctorI
  318: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  317: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  316: _ZZN3tvm3tir11StmtFunctorI
  315: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  314: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  313: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  312: _ZZN3tvm3tir11StmtFunctorI
  311: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  310: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  309: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  308: _ZZN3tvm3tir11StmtFunctorI
  307: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  306: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  305: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  304: _ZZN3tvm3tir11StmtFunctorI
  303: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  302: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  301: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  300: _ZZN3tvm3tir11StmtFunctorI
  299: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  298: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  297: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  296: _ZZN3tvm3tir11StmtFunctorI
  295: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  294: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  293: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  292: _ZZN3tvm3tir11StmtFunctorI
  291: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  290: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  289: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  288: _ZZN3tvm3tir11StmtFunctorI
  287: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  286: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  285: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  284: _ZZN3tvm3tir11StmtFunctorI
  283: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  282: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  281: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  280: _ZZN3tvm3tir11StmtFunctorI
  279: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  278: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  277: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  276: _ZZN3tvm3tir11StmtFunctorI
  275: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  274: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  273: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  272: _ZZN3tvm3tir11StmtFunctorI
  271: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  270: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  269: _ZZN3tvm3tir11StmtFunctorI
  268: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  267: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  266: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  265: _ZZN3tvm3tir11StmtFunctorI
  264: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  263: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  262: _ZZN3tvm3tir11StmtFunctorI
  261: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  260: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  259: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  258: _ZZN3tvm3tir11StmtFunctorI
  257: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  256: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  255: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  254: _ZZN3tvm3tir11StmtFunctorI
  253: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  252: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  251: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  250: _ZZN3tvm3tir11StmtFunctorI
  249: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  248: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  247: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  246: _ZZN3tvm3tir11StmtFunctorI
  245: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  244: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  243: _ZZN3tvm3tir11StmtFunctorI
  242: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  241: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  240: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  239: _ZZN3tvm3tir11StmtFunctorI
  238: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  237: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  236: _ZZN3tvm3tir11StmtFunctorI
  235: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  234: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  233: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  232: _ZZN3tvm3tir11StmtFunctorI
  231: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  230: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  229: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  228: _ZZN3tvm3tir11StmtFunctorI
  227: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  226: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  225: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  224: _ZZN3tvm3tir11StmtFunctorI
  223: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  222: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  221: _ZZN3tvm3tir11StmtFunctorI
  220: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  219: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  218: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  217: _ZZN3tvm3tir11StmtFunctorI
  216: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  215: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  214: _ZZN3tvm3tir11StmtFunctorI
  213: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  212: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  211: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  210: _ZZN3tvm3tir11StmtFunctorI
  209: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  208: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  207: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  206: _ZZN3tvm3tir11StmtFunctorI
  205: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  204: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  203: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  202: _ZZN3tvm3tir11StmtFunctorI
  201: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  200: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  199: _ZZN3tvm3tir11StmtFunctorI
  198: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  197: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  196: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  195: _ZZN3tvm3tir11StmtFunctorI
  194: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  193: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  192: _ZZN3tvm3tir11StmtFunctorI
  191: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  190: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  189: _ZZN3tvm3tir11StmtFunctorI
  188: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  187: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  186: _ZZN3tvm3tir11StmtFunctorI
  185: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  184: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  183: _ZZN3tvm3tir11StmtFunctorI
  182: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  181: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  180: _ZZN3tvm3tir11StmtFunctorI
  179: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  178: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  177: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  176: _ZZN3tvm3tir11StmtFunctorI
  175: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  174: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  173: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  172: _ZZN3tvm3tir11StmtFunctorI
  171: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  170: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  169: _ZZN3tvm3tir11StmtFunctorI
  168: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  167: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  166: _ZZN3tvm3tir11StmtFunctorI
  165: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  164: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  163: _ZZN3tvm3tir11StmtFunctorI
  162: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  161: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  160: _ZZN3tvm3tir11StmtFunctorI
  159: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  158: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  157: _ZZN3tvm3tir11StmtFunctorI
  156: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  155: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  154: _ZZN3tvm3tir11StmtFunctorI
  153: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  152: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  151: _ZZN3tvm3tir11StmtFunctorIFNS
  150: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  149: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  148: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  147: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  146: _ZZN3tvm3tir11StmtFunctorI
  145: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  144: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  143: _ZZN3tvm3tir11StmtFunctorI
  142: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  141: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  140: _ZZN3tvm3tir11StmtFunctorI
  139: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  138: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  137: _ZZN3tvm3tir11StmtFunctorI
  136: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  135: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  134: _ZZN3tvm3tir11StmtFunctorI
  133: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  132: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  131: _ZZN3tvm3tir11StmtFunctorI
  130: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  129: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  128: _ZZN3tvm3tir11StmtFunctorI
  127: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  126: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  125: _ZZN3tvm3tir11StmtFunctorI
  124: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  123: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  122: _ZZN3tvm3tir11StmtFunctorI
  121: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  120: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  119: _ZZN3tvm3tir11StmtFunctorIFNS
  118: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  117: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  116: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  115: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  114: _ZZN3tvm3tir11StmtFunctorI
  113: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  112: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  111: _ZZN3tvm3tir11StmtFunctorI
  110: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  109: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  108: _ZZN3tvm3tir11StmtFunctorI
  107: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  106: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  105: _ZZN3tvm3tir11StmtFunctorI
  104: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  103: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  102: _ZZN3tvm3tir11StmtFunctorI
  101: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  100: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  99: _ZZN3tvm3tir11StmtFunctorI
  98: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  97: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  96: _ZZN3tvm3tir11StmtFunctorI
  95: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  94: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  93: _ZZN3tvm3tir11StmtFunctorI
  92: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  91: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  90: _ZZN3tvm3tir11StmtFunctorI
  89: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  88: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  87: _ZZN3tvm3tir11StmtFunctorI
  86: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  85: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  84: _ZZN3tvm3tir11StmtFunctorIFNS
  83: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  82: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  81: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  80: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  79: _ZZN3tvm3tir11StmtFunctorI
  78: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  77: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  76: _ZZN3tvm3tir11StmtFunctorI
  75: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  74: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  73: _ZZN3tvm3tir11StmtFunctorI
  72: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  71: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  70: _ZZN3tvm3tir11StmtFunctorI
  69: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  68: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  67: _ZZN3tvm3tir11StmtFunctorI
  66: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  65: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  64: _ZZN3tvm3tir11StmtFunctorI
  63: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  62: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  61: _ZZN3tvm3tir11StmtFunctorI
  60: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  59: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  58: _ZZN3tvm3tir11StmtFunctorI
  57: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  56: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  55: _ZZN3tvm3tir11StmtFunctorI
  54: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  53: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  52: _ZZN3tvm3tir11StmtFunctorI
  51: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  50: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  49: _ZZN3tvm3tir11StmtFunctorIFNS
  48: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  47: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  46: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  45: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  44: _ZZN3tvm3tir11StmtFunctorI
  43: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  42: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  41: _ZZN3tvm3tir11StmtFunctorI
  40: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  39: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  38: _ZZN3tvm3tir11StmtFunctorI
  37: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  36: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  35: _ZZN3tvm3tir11StmtFunctorI
  34: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  33: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  32: _ZZN3tvm3tir11StmtFunctorI
  31: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  30: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  29: _ZZN3tvm3tir11StmtFunctorI
  28: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  27: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  26: _ZZN3tvm3tir11StmtFunctorI
  25: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  24: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  23: _ZZN3tvm3tir11StmtFunctorIFNS
  22: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>::value, void>::type const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  21: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::Object, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  20: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  19: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  18: _ZZN3tvm3tir11StmtFunctorI
  17: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  16: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  15: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  14: _ZZN3tvm3tir11StmtFunctorI
  13: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  12: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  11: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  10: _ZZN3tvm3tir11StmtFunctorI
  9: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  8: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  7: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS
  5: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  4: _ZZN3tvm3tir11ExprFunctorI
  3: tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  2: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  1: tvm::tir::APIType(tvm::runtime::DataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/tir/transforms/ir_utils.h", line 157
InternalError: Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(58), T.int64(24), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(24), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(232), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(58), nn_1_ff_1_yy_1_xx_1_fused * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) // T.int64(2) * T.int64(14) + yy_3_init * T.int64(14) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(232), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(24), rc_0_ry_0_rx_0_fused * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(928) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(112))
                                        v2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(928) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(928) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1344))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(232), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), (ax0_ax1_ax2_ax3_fused_0 * T.int64(464) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12))
                                        v1 = T.axis.spatial(T.int64(24), rc_0_ry_0_rx_0_fused * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(464) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(696))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(58), nn_1_ff_1_yy_1_xx_1_fused * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) // T.int64(2) * T.int64(14) + yy_3 * T.int64(14) + yy_4)
                                v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(24), rc_0_ry_0_rx_0_fused * T.int64(12) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), nn_1_ff_1_yy_1_xx_1_fused * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) // T.int64(2) * T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 29, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 14])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[28, 1, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 6, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 232, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 232, 2], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #53: GFLOPs: 541.9974. Time: 16.7794 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #54: GFLOPs: 712.8368. Time: 12.7580 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #55: GFLOPs: 542.3961. Time: 16.7671 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #56: GFLOPs: 218.6233. Time: 41.5985 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #57: GFLOPs: 82.9554. Time: 109.6300 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #58: GFLOPs: 914.1415. Time: 9.9486 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #59: GFLOPs: 172.5611. Time: 52.7025 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #60: GFLOPs: 74.2861. Time: 122.4240 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #61: GFLOPs: 828.1636. Time: 10.9814 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #62: GFLOPs: 195.9260. Time: 46.4175 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #63: GFLOPs: 364.9936. Time: 24.9166 us. Best GFLOPs: 938.4239
2024-04-28 20:20:41 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #64: GFLOPs: 85.6992. Time: 106.1200 us. Best GFLOPs: 938.4239
2024-04-28 20:47:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:47:11 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-04-28 20:47:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 20:47:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 811 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 20:47:15 [INFO] [evolutionary_search.cc:723] Sampled 87 candidate(s)
2024-04-28 20:47:20 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 20:47:25 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 20:47:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 20:47:35 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 20:47:37 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1429  1.1417  1.1404  1.1321  1.1308  1.1257  1.1213  1.1150  1.1142  1.1142  1.1107  1.0886  1.0870  1.0805  1.0791  1.0753
[17 : 32]:	1.0745  1.0693  1.0601  1.0567  1.0500  1.0410  1.0300  1.0241  1.0191  1.0181  1.0167  1.0137  1.0077  1.0067  1.0067  1.0054
[33 : 48]:	1.0040  1.0032  0.9993  0.9963  0.9961  0.9958  0.9951  0.9936  0.9929  0.9927  0.9927  0.9918  0.9909  0.9881  0.9868  0.9866
[49 : 64]:	0.9849  0.9848  0.9840  0.9836  0.9833  0.9823  0.9823  0.9782  0.9773  0.9770  0.9761  0.9718  0.9717  0.9713  0.9711  0.9705
2024-04-28 20:47:37 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:47:37 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #65: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(58), T.int64(24), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(24), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(58), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(24), rc_0_ry_0_rx_0_fused * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) // T.int64(16))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) % T.int64(16) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1 < T.int64(192))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12))
                                        v1 = T.axis.spatial(T.int64(24), rc_0_ry_0_rx_0_fused * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(58), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(24), rc_0_ry_0_rx_0_fused * T.int64(12) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) * T.int64(2) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 29, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 4, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[28, 2, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 12, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108 = sch.split(loop=l106, factors=[None, 116], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113 = sch.get_loops(block=b87)
l114, l115, l116 = sch.split(loop=l113, factors=[None, 116, 2], preserve_unit_iters=True)
sch.vectorize(loop=l116)
sch.bind(loop=l115, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b118)
l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #66: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(58), T.int64(24), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(24), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(58), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(24), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(16))
                                        v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(128))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(24), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(58), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(24), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(4) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 29, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 2, 2, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[28, 1, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 2, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 116, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116 = sch.split(loop=l114, factors=[None, 116], preserve_unit_iters=True)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b118)
l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:121] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #67: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(58), T.int64(24), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(24), T.int64(56), T.int64(56)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(24), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(58), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(24), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(16))
                                        v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(128))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(24), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(58), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(24), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(4) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(29) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 29, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 2, 2, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[28, 1, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 2, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 116, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116 = sch.split(loop=l114, factors=[None, 116], preserve_unit_iters=True)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b118)
l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #68: GFLOPs: 934.6688. Time: 9.7301 us. Best GFLOPs: 938.4239
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #69: GFLOPs: 934.8685. Time: 9.7280 us. Best GFLOPs: 938.4239
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #70: GFLOPs: 909.6049. Time: 9.9982 us. Best GFLOPs: 938.4239
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #71: GFLOPs: 895.1003. Time: 10.1602 us. Best GFLOPs: 938.4239
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #72: GFLOPs: 917.3930. Time: 9.9133 us. Best GFLOPs: 938.4239
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #73: GFLOPs: 1310.1787. Time: 6.9413 us. Best GFLOPs: 1310.1787
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #74: GFLOPs: 1326.1379. Time: 6.8578 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #75: GFLOPs: 1325.1331. Time: 6.8630 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #76: GFLOPs: 939.4535. Time: 9.6805 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #77: GFLOPs: 962.6858. Time: 9.4469 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #78: GFLOPs: 776.3255. Time: 11.7147 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #79: GFLOPs: 899.3809. Time: 10.1118 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #80: GFLOPs: 954.8497. Time: 9.5244 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #81: GFLOPs: 953.3691. Time: 9.5392 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #82: GFLOPs: 953.5374. Time: 9.5375 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #83: GFLOPs: 891.7902. Time: 10.1979 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #84: GFLOPs: 957.8529. Time: 9.4946 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #85: GFLOPs: 965.5795. Time: 9.4186 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #86: GFLOPs: 932.9054. Time: 9.7485 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #87: GFLOPs: 967.5384. Time: 9.3995 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #88: GFLOPs: 934.8454. Time: 9.7282 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #89: GFLOPs: 973.8976. Time: 9.3381 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #90: GFLOPs: 934.6904. Time: 9.7299 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #91: GFLOPs: 934.6697. Time: 9.7301 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #92: GFLOPs: 931.9053. Time: 9.7589 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #93: GFLOPs: 937.1554. Time: 9.7043 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #94: GFLOPs: 962.9698. Time: 9.4441 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #95: GFLOPs: 963.5684. Time: 9.4383 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #96: GFLOPs: 970.2030. Time: 9.3737 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #97: GFLOPs: 921.7306. Time: 9.8667 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #98: GFLOPs: 961.1116. Time: 9.4624 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #99: GFLOPs: 964.4356. Time: 9.4298 us. Best GFLOPs: 1326.1379
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #100: GFLOPs: 1470.3751. Time: 6.1851 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #101: GFLOPs: 661.2848. Time: 13.7526 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #102: GFLOPs: 1315.8589. Time: 6.9114 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #103: GFLOPs: 1469.3009. Time: 6.1896 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #104: GFLOPs: 654.5837. Time: 13.8934 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #105: GFLOPs: 1444.9523. Time: 6.2939 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #106: GFLOPs: 925.6565. Time: 9.8248 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #107: GFLOPs: 925.4416. Time: 9.8271 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #108: GFLOPs: 1410.4609. Time: 6.4478 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #109: GFLOPs: 790.0722. Time: 11.5108 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #110: GFLOPs: 798.7684. Time: 11.3855 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #111: GFLOPs: 1465.7642. Time: 6.2045 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #112: GFLOPs: 980.1817. Time: 9.2783 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #113: GFLOPs: 790.3481. Time: 11.5068 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #114: GFLOPs: 852.6685. Time: 10.6658 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #115: GFLOPs: 1413.8665. Time: 6.4323 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #116: GFLOPs: 935.6538. Time: 9.7198 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #117: GFLOPs: 1448.9928. Time: 6.2764 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #118: GFLOPs: 886.0469. Time: 10.2640 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #119: GFLOPs: 885.8675. Time: 10.2661 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #120: GFLOPs: 963.1188. Time: 9.4427 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #121: GFLOPs: 957.1282. Time: 9.5018 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #122: GFLOPs: 659.6702. Time: 13.7863 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #123: GFLOPs: 1315.3264. Time: 6.9142 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #124: GFLOPs: 890.8085. Time: 10.2092 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #125: GFLOPs: 1351.5531. Time: 6.7289 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #126: GFLOPs: 880.8937. Time: 10.3241 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #127: GFLOPs: 123.6814. Time: 73.5309 us. Best GFLOPs: 1470.3751
2024-04-28 20:48:39 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #128: GFLOPs: 684.2233. Time: 13.2916 us. Best GFLOPs: 1470.3751
2024-04-28 21:59:25 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:59:26 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 21:59:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 380 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 21:59:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 752 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 21:59:29 [INFO] [evolutionary_search.cc:723] Sampled 68 candidate(s)
2024-04-28 21:59:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 21:59:39 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 21:59:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 21:59:49 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 21:59:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9789  0.9789  0.9786  0.9761  0.9760  0.9741  0.9734  0.9734  0.9731  0.9717  0.9702  0.9697  0.9663  0.9663  0.9659  0.9656
[17 : 32]:	0.9651  0.9636  0.9636  0.9633  0.9615  0.9561  0.9558  0.9545  0.9540  0.9537  0.9537  0.9534  0.9533  0.9533  0.9532  0.9532
[33 : 48]:	0.9514  0.9513  0.9513  0.9513  0.9510  0.9510  0.9510  0.9484  0.9483  0.9466  0.9460  0.9454  0.9435  0.9420  0.9359  0.9324
[49 : 64]:	0.9284  0.9280  0.9263  0.9237  0.9234  0.9218  0.9184  0.9158  0.9151  0.9131  0.9123  0.9059  0.9044  0.9044  0.9043  0.9000
2024-04-28 21:59:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:59:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #129: GFLOPs: 1393.0579. Time: 6.5284 us. Best GFLOPs: 1470.3751
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #130: GFLOPs: 1390.2460. Time: 6.5416 us. Best GFLOPs: 1470.3751
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #131: GFLOPs: 1398.4014. Time: 6.5034 us. Best GFLOPs: 1470.3751
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #132: GFLOPs: 1389.8026. Time: 6.5437 us. Best GFLOPs: 1470.3751
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #133: GFLOPs: 1389.4077. Time: 6.5455 us. Best GFLOPs: 1470.3751
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #134: GFLOPs: 1402.1793. Time: 6.4859 us. Best GFLOPs: 1470.3751
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #135: GFLOPs: 1392.6727. Time: 6.5302 us. Best GFLOPs: 1470.3751
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #136: GFLOPs: 1454.4502. Time: 6.2528 us. Best GFLOPs: 1470.3751
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #137: GFLOPs: 1390.8116. Time: 6.5389 us. Best GFLOPs: 1470.3751
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #138: GFLOPs: 1400.8346. Time: 6.4921 us. Best GFLOPs: 1470.3751
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #139: GFLOPs: 1443.3917. Time: 6.3007 us. Best GFLOPs: 1470.3751
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #140: GFLOPs: 1397.9332. Time: 6.5056 us. Best GFLOPs: 1470.3751
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #141: GFLOPs: 1390.0794. Time: 6.5424 us. Best GFLOPs: 1470.3751
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #142: GFLOPs: 1391.5248. Time: 6.5356 us. Best GFLOPs: 1470.3751
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #143: GFLOPs: 1438.7198. Time: 6.3212 us. Best GFLOPs: 1470.3751
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #144: GFLOPs: 1389.3407. Time: 6.5458 us. Best GFLOPs: 1470.3751
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #145: GFLOPs: 1443.2116. Time: 6.3015 us. Best GFLOPs: 1470.3751
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #146: GFLOPs: 1391.4227. Time: 6.5360 us. Best GFLOPs: 1470.3751
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #147: GFLOPs: 1491.5034. Time: 6.0975 us. Best GFLOPs: 1491.5034
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #148: GFLOPs: 1390.6413. Time: 6.5397 us. Best GFLOPs: 1491.5034
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #149: GFLOPs: 1424.0615. Time: 6.3862 us. Best GFLOPs: 1491.5034
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #150: GFLOPs: 1389.6316. Time: 6.5445 us. Best GFLOPs: 1491.5034
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #151: GFLOPs: 1389.3316. Time: 6.5459 us. Best GFLOPs: 1491.5034
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #152: GFLOPs: 1456.4000. Time: 6.2444 us. Best GFLOPs: 1491.5034
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #153: GFLOPs: 1388.6745. Time: 6.5490 us. Best GFLOPs: 1491.5034
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #154: GFLOPs: 1345.8727. Time: 6.7573 us. Best GFLOPs: 1491.5034
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #155: GFLOPs: 1344.5623. Time: 6.7638 us. Best GFLOPs: 1491.5034
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #156: GFLOPs: 1390.1404. Time: 6.5421 us. Best GFLOPs: 1491.5034
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #157: GFLOPs: 1410.3852. Time: 6.4482 us. Best GFLOPs: 1491.5034
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #158: GFLOPs: 1391.0115. Time: 6.5380 us. Best GFLOPs: 1491.5034
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #159: GFLOPs: 1341.9038. Time: 6.7772 us. Best GFLOPs: 1491.5034
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #160: GFLOPs: 1552.5272. Time: 5.8578 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #161: GFLOPs: 773.3721. Time: 11.7594 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #162: GFLOPs: 1390.9942. Time: 6.5381 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #163: GFLOPs: 1393.9437. Time: 6.5242 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #164: GFLOPs: 1393.7923. Time: 6.5249 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #165: GFLOPs: 1345.5644. Time: 6.7588 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #166: GFLOPs: 1418.1942. Time: 6.4127 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #167: GFLOPs: 1347.7097. Time: 6.7480 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #168: GFLOPs: 1389.1486. Time: 6.5467 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #169: GFLOPs: 1399.8918. Time: 6.4965 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #170: GFLOPs: 1417.7258. Time: 6.4148 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #171: GFLOPs: 1344.6202. Time: 6.7635 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #172: GFLOPs: 1387.7798. Time: 6.5532 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #173: GFLOPs: 1399.3972. Time: 6.4988 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #174: GFLOPs: 1344.4777. Time: 6.7643 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #175: GFLOPs: 1403.3563. Time: 6.4805 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #176: GFLOPs: 1394.3833. Time: 6.5222 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #177: GFLOPs: 1388.7367. Time: 6.5487 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #178: GFLOPs: 1427.4395. Time: 6.3711 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #179: GFLOPs: 1344.2802. Time: 6.7653 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #180: GFLOPs: 808.3408. Time: 11.2507 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #181: GFLOPs: 1342.8338. Time: 6.7725 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #182: GFLOPs: 1438.3408. Time: 6.3228 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #183: GFLOPs: 778.7626. Time: 11.6780 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #184: GFLOPs: 1345.3559. Time: 6.7598 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #185: GFLOPs: 740.0687. Time: 12.2886 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #186: GFLOPs: 804.4908. Time: 11.3045 us. Best GFLOPs: 1552.5272
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #187: GFLOPs: 1673.4283. Time: 5.4346 us. Best GFLOPs: 1673.4283
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #188: GFLOPs: 1390.6502. Time: 6.5397 us. Best GFLOPs: 1673.4283
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #189: GFLOPs: 1341.9445. Time: 6.7770 us. Best GFLOPs: 1673.4283
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #190: GFLOPs: 139.5020. Time: 65.1919 us. Best GFLOPs: 1673.4283
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #191: GFLOPs: 21.3478. Time: 426.0117 us. Best GFLOPs: 1673.4283
2024-04-28 22:00:51 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #192: GFLOPs: 224.5659. Time: 40.4977 us. Best GFLOPs: 1673.4283
2024-04-28 23:09:23 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:09:23 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:09:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 377 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 23:09:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 756 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 23:09:27 [INFO] [evolutionary_search.cc:723] Sampled 64 candidate(s)
2024-04-28 23:09:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 131 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 23:09:37 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 120 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 23:09:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 23:09:47 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 134 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 23:09:49 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9356  0.9356  0.9327  0.9327  0.9327  0.9298  0.9273  0.9270  0.9268  0.9214  0.9050  0.9044  0.8913  0.8847  0.8836  0.8712
[17 : 32]:	0.8694  0.8692  0.8687  0.8687  0.8675  0.8665  0.8647  0.8642  0.8633  0.8617  0.8610  0.8594  0.8588  0.8584  0.8579  0.8574
[33 : 48]:	0.8571  0.8571  0.8554  0.8551  0.8546  0.8538  0.8527  0.8522  0.8521  0.8519  0.8510  0.8509  0.8507  0.8501  0.8494  0.8493
[49 : 64]:	0.8493  0.8492  0.8489  0.8488  0.8487  0.8485  0.8477  0.8475  0.8475  0.8472  0.8471  0.8466  0.8465  0.8462  0.8457  0.8457
2024-04-28 23:09:49 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:09:49 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #193: GFLOPs: 1785.6063. Time: 5.0932 us. Best GFLOPs: 1785.6063
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #194: GFLOPs: 1867.7456. Time: 4.8692 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #195: GFLOPs: 1783.5124. Time: 5.0992 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #196: GFLOPs: 1706.1068. Time: 5.3305 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #197: GFLOPs: 1688.0550. Time: 5.3875 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #198: GFLOPs: 1775.3961. Time: 5.1225 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #199: GFLOPs: 1712.9720. Time: 5.3091 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #200: GFLOPs: 1706.1995. Time: 5.3302 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #201: GFLOPs: 1705.5615. Time: 5.3322 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #202: GFLOPs: 1782.2297. Time: 5.1028 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #203: GFLOPs: 898.9139. Time: 10.1171 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #204: GFLOPs: 1701.0032. Time: 5.3465 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #205: GFLOPs: 1705.2018. Time: 5.3333 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #206: GFLOPs: 1816.8378. Time: 5.0056 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #207: GFLOPs: 986.4758. Time: 9.2191 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #208: GFLOPs: 1453.3065. Time: 6.2577 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #209: GFLOPs: 1581.4529. Time: 5.7507 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #210: GFLOPs: 1519.5769. Time: 5.9848 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #211: GFLOPs: 1462.3470. Time: 6.2190 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #212: GFLOPs: 1464.1447. Time: 6.2114 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #213: GFLOPs: 1563.3970. Time: 5.8171 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #214: GFLOPs: 1519.6343. Time: 5.9846 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #215: GFLOPs: 1581.2653. Time: 5.7513 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #216: GFLOPs: 1694.4117. Time: 5.3673 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #217: GFLOPs: 1519.0562. Time: 5.9869 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #218: GFLOPs: 1465.2022. Time: 6.2069 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #219: GFLOPs: 1465.2295. Time: 6.2068 us. Best GFLOPs: 1867.7456
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #220: GFLOPs: 1879.5480. Time: 4.8386 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #221: GFLOPs: 1465.2920. Time: 6.2065 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #222: GFLOPs: 1465.3432. Time: 6.2063 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #223: GFLOPs: 1857.2829. Time: 4.8966 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #224: GFLOPs: 1537.0634. Time: 5.9167 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #225: GFLOPs: 1461.3906. Time: 6.2231 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #226: GFLOPs: 1494.1354. Time: 6.0867 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #227: GFLOPs: 1465.2773. Time: 6.2066 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #228: GFLOPs: 1648.1940. Time: 5.5178 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #229: GFLOPs: 1551.4092. Time: 5.8620 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #230: GFLOPs: 1409.9071. Time: 6.4504 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #231: GFLOPs: 1444.8395. Time: 6.2944 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #232: GFLOPs: 1409.7983. Time: 6.4509 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #233: GFLOPs: 1463.3686. Time: 6.2147 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #234: GFLOPs: 1410.3644. Time: 6.4483 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #235: GFLOPs: 1720.7737. Time: 5.2851 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #236: GFLOPs: 1580.9795. Time: 5.7524 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #237: GFLOPs: 1459.0576. Time: 6.2331 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #238: GFLOPs: 1154.9506. Time: 7.8743 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #239: GFLOPs: 1412.4777. Time: 6.4386 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #240: GFLOPs: 1459.6782. Time: 6.2304 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #241: GFLOPs: 1459.5251. Time: 6.2311 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #242: GFLOPs: 1463.3432. Time: 6.2148 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #243: GFLOPs: 1456.9509. Time: 6.2421 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #244: GFLOPs: 1410.9779. Time: 6.4455 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #245: GFLOPs: 1583.8231. Time: 5.7421 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #246: GFLOPs: 1470.2332. Time: 6.1857 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #247: GFLOPs: 1528.3635. Time: 5.9504 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #248: GFLOPs: 1459.0536. Time: 6.2331 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #249: GFLOPs: 1460.4490. Time: 6.2271 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #250: GFLOPs: 1470.7648. Time: 6.1834 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #251: GFLOPs: 1420.9314. Time: 6.4003 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #252: GFLOPs: 1461.7535. Time: 6.2216 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #253: GFLOPs: 1341.2322. Time: 6.7806 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #254: GFLOPs: 274.1851. Time: 33.1688 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #255: GFLOPs: 62.6112. Time: 145.2520 us. Best GFLOPs: 1879.5480
2024-04-28 23:10:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #256: GFLOPs: 1315.9579. Time: 6.9109 us. Best GFLOPs: 1879.5480
2024-04-28 23:32:22 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:32:23 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:32:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 371 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 23:32:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 739 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 23:32:27 [INFO] [evolutionary_search.cc:723] Sampled 81 candidate(s)
2024-04-28 23:32:32 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 132 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 23:32:37 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 120 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 23:32:43 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 132 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 23:32:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x349f7b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9948)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cede48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x39c4658)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4833058)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d254a8)]: 126 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d38688)]: 0 failure(s)
2024-04-28 23:32:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9460  0.9434  0.9429  0.9407  0.9403  0.9400  0.9398  0.9392  0.9386  0.9385  0.9383  0.9377  0.9371  0.9355  0.9350  0.9320
[17 : 32]:	0.9318  0.9310  0.9308  0.9305  0.9290  0.9281  0.9273  0.9272  0.9267  0.9251  0.9249  0.9248  0.9246  0.9223  0.9216  0.9213
[33 : 48]:	0.9204  0.9194  0.9189  0.9180  0.9178  0.9174  0.9168  0.9167  0.9162  0.9160  0.9151  0.9144  0.9139  0.9129  0.9121  0.9116
[49 : 64]:	0.9112  0.9110  0.9108  0.9105  0.9101  0.9096  0.9060  0.9054  0.9054  0.9052  0.9046  0.9031  0.9030  0.9025  0.9018  0.9012
2024-04-28 23:32:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:32:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #257: GFLOPs: 1837.8707. Time: 4.9483 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #258: GFLOPs: 1834.5840. Time: 4.9572 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #259: GFLOPs: 1834.1306. Time: 4.9584 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #260: GFLOPs: 1746.8449. Time: 5.2062 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #261: GFLOPs: 1835.8254. Time: 4.9538 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #262: GFLOPs: 1751.8892. Time: 5.1912 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #263: GFLOPs: 1744.7311. Time: 5.2125 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #264: GFLOPs: 1752.9808. Time: 5.1880 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #265: GFLOPs: 1752.4402. Time: 5.1896 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #266: GFLOPs: 1678.8869. Time: 5.4169 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #267: GFLOPs: 1740.1303. Time: 5.2263 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #268: GFLOPs: 1707.3916. Time: 5.3265 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #269: GFLOPs: 1671.7273. Time: 5.4401 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #270: GFLOPs: 1674.6132. Time: 5.4307 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #271: GFLOPs: 1671.7551. Time: 5.4400 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #272: GFLOPs: 1674.3601. Time: 5.4316 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #273: GFLOPs: 1747.8374. Time: 5.2032 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #274: GFLOPs: 1828.3519. Time: 4.9741 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #275: GFLOPs: 1751.0002. Time: 5.1938 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #276: GFLOPs: 1746.4980. Time: 5.2072 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #277: GFLOPs: 1843.1459. Time: 4.9342 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #278: GFLOPs: 1750.7649. Time: 5.1945 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #279: GFLOPs: 1836.0233. Time: 4.9533 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #280: GFLOPs: 1827.3749. Time: 4.9768 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #281: GFLOPs: 1830.6614. Time: 4.9678 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #282: GFLOPs: 1752.3268. Time: 5.1899 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #283: GFLOPs: 1532.4579. Time: 5.9345 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #284: GFLOPs: 1745.9782. Time: 5.2088 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #285: GFLOPs: 1777.5616. Time: 5.1162 us. Best GFLOPs: 1879.5480
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #286: GFLOPs: 1886.7650. Time: 4.8201 us. Best GFLOPs: 1886.7650
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #287: GFLOPs: 1497.4795. Time: 6.0731 us. Best GFLOPs: 1886.7650
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #288: GFLOPs: 1753.0360. Time: 5.1878 us. Best GFLOPs: 1886.7650
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #289: GFLOPs: 1753.9827. Time: 5.1850 us. Best GFLOPs: 1886.7650
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #290: GFLOPs: 1748.5613. Time: 5.2011 us. Best GFLOPs: 1886.7650
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #291: GFLOPs: 1749.2309. Time: 5.1991 us. Best GFLOPs: 1886.7650
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #292: GFLOPs: 1821.3326. Time: 4.9933 us. Best GFLOPs: 1886.7650
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #293: GFLOPs: 1814.9834. Time: 5.0107 us. Best GFLOPs: 1886.7650
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #294: GFLOPs: 1750.1841. Time: 5.1963 us. Best GFLOPs: 1886.7650
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #295: GFLOPs: 1847.8766. Time: 4.9215 us. Best GFLOPs: 1886.7650
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #296: GFLOPs: 1750.3395. Time: 5.1958 us. Best GFLOPs: 1886.7650
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #297: GFLOPs: 1747.8746. Time: 5.2031 us. Best GFLOPs: 1886.7650
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #298: GFLOPs: 1820.4620. Time: 4.9957 us. Best GFLOPs: 1886.7650
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #299: GFLOPs: 1769.4278. Time: 5.1397 us. Best GFLOPs: 1886.7650
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #300: GFLOPs: 1754.9939. Time: 5.1820 us. Best GFLOPs: 1886.7650
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #301: GFLOPs: 1931.0010. Time: 4.7097 us. Best GFLOPs: 1931.0010
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #302: GFLOPs: 1729.6218. Time: 5.2580 us. Best GFLOPs: 1931.0010
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #303: GFLOPs: 1672.9030. Time: 5.4363 us. Best GFLOPs: 1931.0010
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #304: GFLOPs: 1723.2698. Time: 5.2774 us. Best GFLOPs: 1931.0010
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #305: GFLOPs: 1674.0983. Time: 5.4324 us. Best GFLOPs: 1931.0010
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #306: GFLOPs: 1751.6571. Time: 5.1919 us. Best GFLOPs: 1931.0010
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #307: GFLOPs: 1717.3740. Time: 5.2955 us. Best GFLOPs: 1931.0010
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #308: GFLOPs: 1750.0978. Time: 5.1965 us. Best GFLOPs: 1931.0010
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #309: GFLOPs: 1747.6168. Time: 5.2039 us. Best GFLOPs: 1931.0010
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #310: GFLOPs: 1821.2983. Time: 4.9934 us. Best GFLOPs: 1931.0010
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #311: GFLOPs: 1753.8134. Time: 5.1855 us. Best GFLOPs: 1931.0010
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #312: GFLOPs: 1675.3329. Time: 5.4284 us. Best GFLOPs: 1931.0010
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #313: GFLOPs: 1860.7822. Time: 4.8874 us. Best GFLOPs: 1931.0010
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #314: GFLOPs: 1753.4068. Time: 5.1867 us. Best GFLOPs: 1931.0010
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #315: GFLOPs: 1745.9140. Time: 5.2090 us. Best GFLOPs: 1931.0010
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #316: GFLOPs: 1753.7718. Time: 5.1856 us. Best GFLOPs: 1931.0010
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #317: GFLOPs: 1754.6330. Time: 5.1831 us. Best GFLOPs: 1931.0010
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #318: GFLOPs: 88.1954. Time: 103.1165 us. Best GFLOPs: 1931.0010
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #319: GFLOPs: 52.6062. Time: 172.8770 us. Best GFLOPs: 1931.0010
2024-04-28 23:33:57 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_conv2d_add_nn_relu_2] Trial #320: GFLOPs: 310.6895. Time: 29.2717 us. Best GFLOPs: 1931.0010
