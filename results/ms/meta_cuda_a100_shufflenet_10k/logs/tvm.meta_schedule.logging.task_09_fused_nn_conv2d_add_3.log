2024-04-28 19:50:50 [INFO] [task_scheduler.cc:160] Initializing Task #9: "fused_nn_conv2d_add_3"
2024-04-28 19:50:50 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(58), T.int64(58)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(58), T.int64(58), T.int64(58)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3])
                PaddedInput[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for b, c, i, j, di, dj in T.grid(T.int64(1), T.int64(58), T.int64(28), T.int64(28), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_c, v_i, v_j, v_di, v_dj = T.axis.remap("SSSSRR", [b, c, i, j, di, dj])
                T.reads(PaddedInput[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1[v_c, T.int64(0), v_di, v_dj])
                T.writes(DepthwiseConv2d[v_b, v_c, v_i, v_j])
                with T.init():
                    DepthwiseConv2d[v_b, v_c, v_i, v_j] = T.float32(0)
                DepthwiseConv2d[v_b, v_c, v_i, v_j] = DepthwiseConv2d[v_b, v_c, v_i, v_j] + PaddedInput[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1[v_c, T.int64(0), v_di, v_dj]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(58), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
2024-04-28 19:50:50 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:50:50 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(58), T.int64(58)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(406), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(8410)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused // T.int64(145))
                                    v2 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(145) // T.int64(5))
                                    v3 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(5))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(522)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(58), b_1_c_1_i_1_j_1_fused // T.int64(7) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(14) + b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(58), b_1_c_1_i_1_j_1_fused // T.int64(7) + ax1)
                                v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(14) + b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused + ax2)
                                v3 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_add[v0, v1, v2, v3])
                                T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 58, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 7, 2, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v90 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v90)
2024-04-28 19:50:50 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(58), T.int64(58)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(406), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(8410)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused // T.int64(145))
                                    v2 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(145) // T.int64(5))
                                    v3 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(5))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(522)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(58), b_1_c_1_i_1_j_1_fused // T.int64(7) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(14) + b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_1 * T.int64(3) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(58), b_1_c_1_i_1_j_1_fused // T.int64(7) + ax1)
                                v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(14) + b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused + ax2)
                                v3 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_add[v0, v1, v2, v3])
                                T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 58, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 7, 2, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
2024-04-28 19:50:50 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(58), T.int64(58)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(406), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(8410)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused // T.int64(145))
                                    v2 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(145) // T.int64(5))
                                    v3 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(5))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(522)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(58), b_1_c_1_i_1_j_1_fused // T.int64(7) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(14) + b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_1 * T.int64(3) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(58), b_1_c_1_i_1_j_1_fused // T.int64(7) + ax1)
                                v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(14) + b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused + ax2)
                                v3 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_add[v0, v1, v2, v3])
                                T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 58, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 7, 2, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
2024-04-28 20:00:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:00:49 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:00:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 502 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 20:00:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 1007 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 20:00:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 1508 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 20:00:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 2007 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 20:01:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 2512 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 20:01:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 3019 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 20:01:04 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-28 20:01:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 158 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 20:01:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 131 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 20:01:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 20:01:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 20:01:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9986  0.9961  0.9956  0.9955  0.9954  0.9952  0.9943  0.9939  0.9917  0.9909  0.9903  0.9884  0.9876  0.9869  0.9858  0.9855
[17 : 32]:	0.9853  0.9848  0.9838  0.9835  0.9828  0.9816  0.9814  0.9802  0.9780  0.9770  0.9756  0.9746  0.9742  0.9740  0.9707  0.9700
[33 : 48]:	0.9700  0.9693  0.9683  0.9682  0.9680  0.9679  0.9679  0.9674  0.9670  0.9669  0.9668  0.9653  0.9640  0.9631  0.9617  0.9611
[49 : 64]:	0.9607  0.9601  0.9599  0.9599  0.9591  0.9580  0.9573  0.9570  0.9525  0.9522  0.9516  0.9510  0.9508  0.9481  0.9481  0.9479
2024-04-28 20:01:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:01:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #1: GFLOPs: 40.2157. Time: 21.4833 us. Best GFLOPs: 40.2157
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #2: GFLOPs: 156.4082. Time: 5.5238 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #3: GFLOPs: 83.2222. Time: 10.3815 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #4: GFLOPs: 85.5983. Time: 10.0933 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #5: GFLOPs: 124.6131. Time: 6.9332 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #6: GFLOPs: 122.2489. Time: 7.0673 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #7: GFLOPs: 113.9164. Time: 7.5842 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #8: GFLOPs: 127.2646. Time: 6.7888 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #9: GFLOPs: 25.3857. Time: 34.0337 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #10: GFLOPs: 108.6136. Time: 7.9545 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #11: GFLOPs: 6.9408. Time: 124.4774 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #12: GFLOPs: 95.5787. Time: 9.0393 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #13: GFLOPs: 45.1994. Time: 19.1146 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #14: GFLOPs: 6.2129. Time: 139.0596 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #15: GFLOPs: 155.7811. Time: 5.5460 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #16: GFLOPs: 84.4747. Time: 10.2275 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #17: GFLOPs: 92.6452. Time: 9.3256 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #18: GFLOPs: 14.9107. Time: 57.9430 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #19: GFLOPs: 83.6223. Time: 10.3318 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #20: GFLOPs: 91.5184. Time: 9.4404 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #21: GFLOPs: 35.6306. Time: 24.2480 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #22: GFLOPs: 25.9425. Time: 33.3031 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #23: GFLOPs: 80.8236. Time: 10.6896 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #24: GFLOPs: 6.2206. Time: 138.8885 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #25: GFLOPs: 122.0245. Time: 7.0803 us. Best GFLOPs: 156.4082
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #26: GFLOPs: 205.1228. Time: 4.2120 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #27: GFLOPs: 21.5384. Time: 40.1130 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #28: GFLOPs: 83.1109. Time: 10.3954 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #29: GFLOPs: 90.5970. Time: 9.5364 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #30: GFLOPs: 69.4849. Time: 12.4339 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #31: GFLOPs: 78.4706. Time: 11.0101 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #32: GFLOPs: 61.2094. Time: 14.1150 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #33: GFLOPs: 22.5071. Time: 38.3865 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #34: GFLOPs: 20.7132. Time: 41.7111 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #35: GFLOPs: 21.5139. Time: 40.1587 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #36: GFLOPs: 31.7964. Time: 27.1718 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #37: GFLOPs: 31.5734. Time: 27.3638 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #38: GFLOPs: 30.8225. Time: 28.0305 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #39: GFLOPs: 68.8256. Time: 12.5530 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #40: GFLOPs: 76.8009. Time: 11.2495 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #41: GFLOPs: 12.8917. Time: 67.0176 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #42: GFLOPs: 57.1041. Time: 15.1297 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #43: GFLOPs: 169.7260. Time: 5.0904 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #44: GFLOPs: 42.8351. Time: 20.1696 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #45: GFLOPs: 6.9044. Time: 125.1338 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #46: GFLOPs: 9.4832. Time: 91.1056 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #47: GFLOPs: 184.6386. Time: 4.6792 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #48: GFLOPs: 156.4144. Time: 5.5236 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #49: GFLOPs: 18.7532. Time: 46.0704 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #50: GFLOPs: 184.2519. Time: 4.6891 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #51: GFLOPs: 6.1739. Time: 139.9388 us. Best GFLOPs: 205.1228
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #52: GFLOPs: 215.2024. Time: 4.0147 us. Best GFLOPs: 215.2024
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #53: GFLOPs: 138.6284. Time: 6.2323 us. Best GFLOPs: 215.2024
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #54: GFLOPs: 19.1256. Time: 45.1733 us. Best GFLOPs: 215.2024
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #55: GFLOPs: 25.9315. Time: 33.3173 us. Best GFLOPs: 215.2024
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #56: GFLOPs: 41.2307. Time: 20.9545 us. Best GFLOPs: 215.2024
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #57: GFLOPs: 125.5226. Time: 6.8830 us. Best GFLOPs: 215.2024
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #58: GFLOPs: 25.1376. Time: 34.3696 us. Best GFLOPs: 215.2024
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #59: GFLOPs: 68.8137. Time: 12.5552 us. Best GFLOPs: 215.2024
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #60: GFLOPs: 193.8439. Time: 4.4570 us. Best GFLOPs: 215.2024
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #61: GFLOPs: 7.0609. Time: 122.3601 us. Best GFLOPs: 215.2024
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #62: GFLOPs: 73.2152. Time: 11.8004 us. Best GFLOPs: 215.2024
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #63: GFLOPs: 5.2218. Time: 165.4552 us. Best GFLOPs: 215.2024
2024-04-28 20:20:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #64: GFLOPs: 6.6177. Time: 130.5549 us. Best GFLOPs: 215.2024
2024-04-28 21:33:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:33:53 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-28 21:33:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 440 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 21:33:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 883 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 21:34:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 1325 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 21:34:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 1763 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 21:34:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 2203 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 21:34:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 2643 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 21:34:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 3084 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 21:34:08 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-28 21:34:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 146 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 21:34:22 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 130 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 21:34:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 122 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 21:34:37 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 115 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 21:34:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9444  0.9422  0.9404  0.9348  0.9325  0.9258  0.9168  0.9162  0.9162  0.9126  0.9126  0.9113  0.9113  0.9113  0.9057  0.8846
[17 : 32]:	0.8825  0.8822  0.8813  0.8785  0.8782  0.8777  0.8767  0.8766  0.8758  0.8740  0.8732  0.8732  0.8732  0.8728  0.8715  0.8715
[33 : 48]:	0.8715  0.8715  0.8690  0.8690  0.8689  0.8689  0.8661  0.8654  0.8628  0.8623  0.8623  0.8619  0.8619  0.8619  0.8610  0.8599
[49 : 64]:	0.8593  0.8593  0.8589  0.8573  0.8548  0.8536  0.8513  0.8448  0.8440  0.8424  0.8411  0.8401  0.8382  0.8340  0.8332  0.8331
2024-04-28 21:34:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:34:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_conv2d_add_3] Trial #65: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(58), T.int64(58)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(203), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(2) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(28) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(513))
                                        v2 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(513) // T.int64(57))
                                        v3 = T.axis.spatial(T.int64(58), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(57))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1026))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(18))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(2) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(28) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(28) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 1, 2, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v90 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v90)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 112, 2], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b78)
l106, l107, l108 = sch.split(loop=l105, factors=[None, 112, 3], preserve_unit_iters=True)
sch.vectorize(loop=l108)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b110)
l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b111)
l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l130, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l130, ann_key="pragma_unroll_explicit", ann_val=1)
l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b113)
b154 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b154)
b172 = sch.decompose_reduction(block=b154, loop=l158)
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_conv2d_add_3] Trial #66: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(58), T.int64(58)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(203), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(2) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(28) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(513))
                                        v2 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(513) // T.int64(57))
                                        v3 = T.axis.spatial(T.int64(58), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(57))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1026))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(18))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(2) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(28) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(28) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 1, 2, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v90 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v90)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 112, 2], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b78)
l106, l107, l108 = sch.split(loop=l105, factors=[None, 112, 3], preserve_unit_iters=True)
sch.vectorize(loop=l108)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b110)
l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b111)
l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l130, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l130, ann_key="pragma_unroll_explicit", ann_val=1)
l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b113)
b154 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b154)
b172 = sch.decompose_reduction(block=b154, loop=l158)
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_conv2d_add_3] Trial #67: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(58), T.int64(58)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(203), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(2) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(28) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(513))
                                        v2 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(513) // T.int64(57))
                                        v3 = T.axis.spatial(T.int64(58), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(57))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1026))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(18))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(2) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(28) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i * T.int64(2) + v_di, v_j * T.int64(2) + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(28) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 1, 2, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v90 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v90)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 112, 2], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b78)
l106, l107, l108 = sch.split(loop=l105, factors=[None, 112, 3], preserve_unit_iters=True)
sch.vectorize(loop=l108)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b110)
l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b111)
l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l130, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l130, ann_key="pragma_unroll_explicit", ann_val=1)
l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b113)
b154 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b154)
b172 = sch.decompose_reduction(block=b154, loop=l158)
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #68: GFLOPs: 167.1249. Time: 5.1696 us. Best GFLOPs: 215.2024
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #69: GFLOPs: 207.7548. Time: 4.1586 us. Best GFLOPs: 215.2024
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #70: GFLOPs: 166.9188. Time: 5.1760 us. Best GFLOPs: 215.2024
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #71: GFLOPs: 209.2640. Time: 4.1286 us. Best GFLOPs: 215.2024
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #72: GFLOPs: 207.8199. Time: 4.1573 us. Best GFLOPs: 215.2024
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #73: GFLOPs: 207.8328. Time: 4.1570 us. Best GFLOPs: 215.2024
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #74: GFLOPs: 209.2785. Time: 4.1283 us. Best GFLOPs: 215.2024
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #75: GFLOPs: 209.2599. Time: 4.1287 us. Best GFLOPs: 215.2024
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #76: GFLOPs: 194.6482. Time: 4.4386 us. Best GFLOPs: 215.2024
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #77: GFLOPs: 194.6482. Time: 4.4386 us. Best GFLOPs: 215.2024
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #78: GFLOPs: 194.6452. Time: 4.4387 us. Best GFLOPs: 215.2024
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #79: GFLOPs: 206.6213. Time: 4.1814 us. Best GFLOPs: 215.2024
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #80: GFLOPs: 219.9583. Time: 3.9279 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #81: GFLOPs: 207.8013. Time: 4.1577 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #82: GFLOPs: 209.5540. Time: 4.1229 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #83: GFLOPs: 207.6227. Time: 4.1612 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #84: GFLOPs: 206.7767. Time: 4.1783 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #85: GFLOPs: 209.4750. Time: 4.1244 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #86: GFLOPs: 219.6467. Time: 3.9334 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #87: GFLOPs: 219.8296. Time: 3.9302 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #88: GFLOPs: 207.0912. Time: 4.1719 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #89: GFLOPs: 219.9359. Time: 3.9283 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #90: GFLOPs: 194.5347. Time: 4.4412 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #91: GFLOPs: 187.9173. Time: 4.5976 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #92: GFLOPs: 188.3529. Time: 4.5870 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #93: GFLOPs: 190.2557. Time: 4.5411 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #94: GFLOPs: 187.9394. Time: 4.5971 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #95: GFLOPs: 194.2942. Time: 4.4467 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #96: GFLOPs: 195.1350. Time: 4.4275 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #97: GFLOPs: 195.1868. Time: 4.4264 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #98: GFLOPs: 195.0507. Time: 4.4295 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #99: GFLOPs: 184.4343. Time: 4.6844 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #100: GFLOPs: 184.8477. Time: 4.6739 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #101: GFLOPs: 194.5782. Time: 4.4402 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #102: GFLOPs: 194.6587. Time: 4.4384 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #103: GFLOPs: 185.9694. Time: 4.6458 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #104: GFLOPs: 219.1196. Time: 3.9429 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #105: GFLOPs: 196.9088. Time: 4.3877 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #106: GFLOPs: 179.6688. Time: 4.8087 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #107: GFLOPs: 174.4414. Time: 4.9528 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #108: GFLOPs: 179.7240. Time: 4.8072 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #109: GFLOPs: 184.9900. Time: 4.6703 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #110: GFLOPs: 179.6405. Time: 4.8094 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #111: GFLOPs: 209.6261. Time: 4.1215 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #112: GFLOPs: 206.3879. Time: 4.1861 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #113: GFLOPs: 177.2994. Time: 4.8729 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #114: GFLOPs: 179.9336. Time: 4.8016 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #115: GFLOPs: 179.8362. Time: 4.8042 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #116: GFLOPs: 206.5525. Time: 4.1828 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #117: GFLOPs: 184.4368. Time: 4.6844 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #118: GFLOPs: 202.1928. Time: 4.2730 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #119: GFLOPs: 102.8807. Time: 8.3978 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #120: GFLOPs: 207.6376. Time: 4.1609 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #121: GFLOPs: 209.6261. Time: 4.1215 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #122: GFLOPs: 186.5580. Time: 4.6311 us. Best GFLOPs: 219.9583
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #123: GFLOPs: 223.0656. Time: 3.8732 us. Best GFLOPs: 223.0656
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #124: GFLOPs: 120.6494. Time: 7.1610 us. Best GFLOPs: 223.0656
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #125: GFLOPs: 210.7346. Time: 4.0998 us. Best GFLOPs: 223.0656
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #126: GFLOPs: 101.6948. Time: 8.4957 us. Best GFLOPs: 223.0656
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #127: GFLOPs: 206.8113. Time: 4.1776 us. Best GFLOPs: 223.0656
2024-04-28 21:35:42 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #128: GFLOPs: 85.2384. Time: 10.1359 us. Best GFLOPs: 223.0656
2024-04-28 23:00:05 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:00:06 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:00:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 23:00:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 803 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 23:00:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 1209 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 23:00:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 1612 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 23:00:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 2017 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 23:00:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 2416 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 23:00:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 2823 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 23:00:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 3226 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 23:00:23 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-28 23:00:29 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 23:00:37 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 23:00:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 23:00:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4deed78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cc9dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4cca3a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b35d78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3fc5b58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4cd79c8)]: 122 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d260b8)]: 0 failure(s)
2024-04-28 23:00:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9842  0.9808  0.9784  0.9782  0.9759  0.9750  0.9734  0.9725  0.9701  0.9682  0.9682  0.9676  0.9674  0.9672  0.9654  0.9654
[17 : 32]:	0.9654  0.9650  0.9648  0.9648  0.9648  0.9648  0.9648  0.9638  0.9619  0.9619  0.9598  0.9597  0.9569  0.9561  0.9560  0.9540
[33 : 48]:	0.9538  0.9513  0.9511  0.9490  0.9486  0.9483  0.9481  0.9479  0.9478  0.9455  0.9453  0.9453  0.9440  0.9438  0.9437  0.9437
[49 : 64]:	0.9432  0.9432  0.9431  0.9425  0.9424  0.9419  0.9414  0.9414  0.9414  0.9412  0.9406  0.9401  0.9398  0.9386  0.9379  0.9367
2024-04-28 23:00:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:00:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #129: GFLOPs: 233.8127. Time: 3.6951 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #130: GFLOPs: 208.6221. Time: 4.1413 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #131: GFLOPs: 225.8110. Time: 3.8261 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #132: GFLOPs: 226.2542. Time: 3.8186 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #133: GFLOPs: 233.7569. Time: 3.6960 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #134: GFLOPs: 209.0265. Time: 4.1333 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #135: GFLOPs: 219.9583. Time: 3.9279 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #136: GFLOPs: 208.5836. Time: 4.1421 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #137: GFLOPs: 233.7997. Time: 3.6953 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #138: GFLOPs: 226.2670. Time: 3.8184 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #139: GFLOPs: 226.1659. Time: 3.8201 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #140: GFLOPs: 225.7536. Time: 3.8270 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #141: GFLOPs: 226.2268. Time: 3.8190 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #142: GFLOPs: 226.3746. Time: 3.8165 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #143: GFLOPs: 208.5871. Time: 4.1420 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #144: GFLOPs: 224.9250. Time: 3.8411 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #145: GFLOPs: 224.9159. Time: 3.8413 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #146: GFLOPs: 209.0675. Time: 4.1325 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #147: GFLOPs: 226.1580. Time: 3.8202 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #148: GFLOPs: 209.0592. Time: 4.1326 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #149: GFLOPs: 209.1872. Time: 4.1301 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #150: GFLOPs: 209.1665. Time: 4.1305 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #151: GFLOPs: 209.2413. Time: 4.1291 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #152: GFLOPs: 232.9360. Time: 3.7090 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #153: GFLOPs: 224.9347. Time: 3.8410 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #154: GFLOPs: 224.9755. Time: 3.8403 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #155: GFLOPs: 219.6955. Time: 3.9326 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #156: GFLOPs: 208.9427. Time: 4.1350 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #157: GFLOPs: 208.0545. Time: 4.1526 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #158: GFLOPs: 219.4731. Time: 3.9366 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #159: GFLOPs: 225.6734. Time: 3.8284 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #160: GFLOPs: 208.4410. Time: 4.1449 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #161: GFLOPs: 207.6316. Time: 4.1611 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #162: GFLOPs: 208.4497. Time: 4.1447 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #163: GFLOPs: 208.9512. Time: 4.1348 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #164: GFLOPs: 208.3906. Time: 4.1459 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #165: GFLOPs: 208.2760. Time: 4.1482 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #166: GFLOPs: 208.0887. Time: 4.1519 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #167: GFLOPs: 208.5836. Time: 4.1421 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #168: GFLOPs: 207.6221. Time: 4.1613 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #169: GFLOPs: 208.6596. Time: 4.1406 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #170: GFLOPs: 209.0703. Time: 4.1324 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #171: GFLOPs: 208.4008. Time: 4.1457 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #172: GFLOPs: 209.3055. Time: 4.1278 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #173: GFLOPs: 219.9075. Time: 3.9288 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #174: GFLOPs: 208.1615. Time: 4.1505 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #175: GFLOPs: 208.2829. Time: 4.1481 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #176: GFLOPs: 208.2946. Time: 4.1478 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #177: GFLOPs: 208.2121. Time: 4.1495 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #178: GFLOPs: 208.3048. Time: 4.1476 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #179: GFLOPs: 208.1113. Time: 4.1515 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #180: GFLOPs: 208.3628. Time: 4.1465 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #181: GFLOPs: 210.9713. Time: 4.0952 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #182: GFLOPs: 208.0607. Time: 4.1525 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #183: GFLOPs: 220.1581. Time: 3.9243 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #184: GFLOPs: 220.2606. Time: 3.9225 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #185: GFLOPs: 220.4238. Time: 3.9196 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #186: GFLOPs: 208.3298. Time: 4.1471 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #187: GFLOPs: 210.9578. Time: 4.0955 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #188: GFLOPs: 209.3022. Time: 4.1279 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #189: GFLOPs: 219.9882. Time: 3.9273 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #190: GFLOPs: 68.6319. Time: 12.5884 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #191: GFLOPs: 86.2894. Time: 10.0124 us. Best GFLOPs: 233.8127
2024-04-28 23:01:56 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_3] Trial #192: GFLOPs: 72.0080. Time: 11.9982 us. Best GFLOPs: 233.8127
