2024-04-28 19:50:49 [INFO] [task_scheduler.cc:160] Initializing Task #7: "fused_nn_conv2d_add_2"
2024-04-28 19:50:49 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(58), T.int64(30), T.int64(30)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3])
                PaddedInput[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for b, c, i, j, di, dj in T.grid(T.int64(1), T.int64(58), T.int64(28), T.int64(28), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_c, v_i, v_j, v_di, v_dj = T.axis.remap("SSSSRR", [b, c, i, j, di, dj])
                T.reads(PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj], p1[v_c, T.int64(0), v_di, v_dj])
                T.writes(DepthwiseConv2d[v_b, v_c, v_i, v_j])
                with T.init():
                    DepthwiseConv2d[v_b, v_c, v_i, v_j] = T.float32(0)
                DepthwiseConv2d[v_b, v_c, v_i, v_j] = DepthwiseConv2d[v_b, v_c, v_i, v_j] + PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj] * p1[v_c, T.int64(0), v_di, v_dj]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(58), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
2024-04-28 19:50:49 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 19:50:49 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(58), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(7), thread="threadIdx.x"):
                        for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6960)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused // T.int64(120))
                                    v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(120) // T.int64(30))
                                    v3 = T.axis.spatial(T.int64(30), ax0_ax1_ax2_ax3_fused % T.int64(30))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(522)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(58), b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(2) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused * T.int64(2) + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(28), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused * T.int64(2) + j_3 * T.int64(2) + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(58), b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused * T.int64(2) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_add[v0, v1, v2, v3])
                                T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 29, 1, 2, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[14, 1, 1, 2, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 7, 1, 2])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v90 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v90)
2024-04-28 19:50:49 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(58), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(7), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6960)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused // T.int64(120))
                                    v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(120) // T.int64(30))
                                    v3 = T.axis.spatial(T.int64(30), ax0_ax1_ax2_ax3_fused % T.int64(30))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(522)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(58), b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(2) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused * T.int64(2) + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(28), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused * T.int64(2) + j_3 * T.int64(2) + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(58), b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused * T.int64(2) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_add[v0, v1, v2, v3])
                                T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 29, 1, 2, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[14, 1, 1, 2, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 7, 1, 2])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
2024-04-28 19:50:49 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(58), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(7), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6960)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused // T.int64(120))
                                    v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(120) // T.int64(30))
                                    v3 = T.axis.spatial(T.int64(30), ax0_ax1_ax2_ax3_fused % T.int64(30))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(522)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(58), b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(2) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused * T.int64(2) + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(28), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused * T.int64(2) + j_3 * T.int64(2) + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(58), b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused * T.int64(2) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_add[v0, v1, v2, v3])
                                T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 29, 1, 2, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[14, 1, 1, 2, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 7, 1, 2])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
2024-04-28 19:57:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 19:57:38 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 19:57:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 494 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 19:57:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 977 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 19:57:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 1469 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 19:57:47 [INFO] [evolutionary_search.cc:723] Sampled 67 candidate(s)
2024-04-28 19:57:54 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 132 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 19:58:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 19:58:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 19:58:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 65 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 19:58:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9986  0.9971  0.9939  0.9939  0.9936  0.9934  0.9926  0.9924  0.9916  0.9906  0.9891  0.9888  0.9888  0.9873  0.9871  0.9865
[17 : 32]:	0.9841  0.9838  0.9822  0.9804  0.9803  0.9801  0.9798  0.9793  0.9790  0.9774  0.9768  0.9763  0.9762  0.9750  0.9748  0.9745
[33 : 48]:	0.9740  0.9731  0.9729  0.9715  0.9708  0.9707  0.9700  0.9688  0.9685  0.9679  0.9677  0.9668  0.9623  0.9623  0.9604  0.9599
[49 : 64]:	0.9594  0.9576  0.9569  0.9569  0.9549  0.9540  0.9539  0.9526  0.9521  0.9516  0.9515  0.9512  0.9511  0.9497  0.9475  0.9472
2024-04-28 19:58:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 19:58:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #1: GFLOPs: 122.4417. Time: 7.0562 us. Best GFLOPs: 122.4417
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #2: GFLOPs: 117.8029. Time: 7.3340 us. Best GFLOPs: 122.4417
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #3: GFLOPs: 6.3939. Time: 135.1241 us. Best GFLOPs: 122.4417
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #4: GFLOPs: 51.6096. Time: 16.7405 us. Best GFLOPs: 122.4417
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #5: GFLOPs: 60.7249. Time: 14.2276 us. Best GFLOPs: 122.4417
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #6: GFLOPs: 102.9511. Time: 8.3920 us. Best GFLOPs: 122.4417
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #7: GFLOPs: 144.9043. Time: 5.9623 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #8: GFLOPs: 38.9804. Time: 22.1642 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #9: GFLOPs: 77.5135. Time: 11.1460 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #10: GFLOPs: 138.9889. Time: 6.2161 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #11: GFLOPs: 22.5909. Time: 38.2440 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #12: GFLOPs: 56.1102. Time: 15.3977 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #13: GFLOPs: 7.9153. Time: 109.1518 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #14: GFLOPs: 14.1048. Time: 61.2536 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #15: GFLOPs: 20.1011. Time: 42.9810 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #16: GFLOPs: 6.8602. Time: 125.9398 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #17: GFLOPs: 115.9769. Time: 7.4495 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #18: GFLOPs: 130.1404. Time: 6.6387 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #19: GFLOPs: 15.6894. Time: 55.0671 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #20: GFLOPs: 38.7671. Time: 22.2861 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #21: GFLOPs: 52.3538. Time: 16.5025 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #22: GFLOPs: 16.0086. Time: 53.9690 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #23: GFLOPs: 67.6754. Time: 12.7663 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #24: GFLOPs: 73.0311. Time: 11.8301 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #25: GFLOPs: 10.5323. Time: 82.0301 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #26: GFLOPs: 60.4479. Time: 14.2928 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #27: GFLOPs: 11.3829. Time: 75.9006 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #28: GFLOPs: 28.4538. Time: 30.3639 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #29: GFLOPs: 55.8859. Time: 15.4595 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #30: GFLOPs: 45.2888. Time: 19.0769 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #31: GFLOPs: 55.8719. Time: 15.4634 us. Best GFLOPs: 144.9043
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #32: GFLOPs: 229.9827. Time: 3.7567 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #33: GFLOPs: 37.9072. Time: 22.7916 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #34: GFLOPs: 58.5172. Time: 14.7643 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #35: GFLOPs: 60.7236. Time: 14.2279 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #36: GFLOPs: 16.9029. Time: 51.1137 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #37: GFLOPs: 16.0086. Time: 53.9689 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #38: GFLOPs: 150.5297. Time: 5.7395 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #39: GFLOPs: 168.4965. Time: 5.1275 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #40: GFLOPs: 38.9376. Time: 22.1885 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #41: GFLOPs: 14.9890. Time: 57.6402 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #42: GFLOPs: 55.3006. Time: 15.6231 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #43: GFLOPs: 58.5055. Time: 14.7673 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #44: GFLOPs: 60.1889. Time: 14.3543 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #45: GFLOPs: 116.8100. Time: 7.3964 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #46: GFLOPs: 95.5345. Time: 9.0435 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #47: GFLOPs: 100.3621. Time: 8.6085 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #48: GFLOPs: 215.7020. Time: 4.0054 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #49: GFLOPs: 44.1873. Time: 19.5524 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #50: GFLOPs: 75.8873. Time: 11.3849 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #51: GFLOPs: 16.0052. Time: 53.9804 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #52: GFLOPs: 49.3180. Time: 17.5183 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #53: GFLOPs: 46.3696. Time: 18.6322 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #54: GFLOPs: 60.3996. Time: 14.3042 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #55: GFLOPs: 46.4156. Time: 18.6138 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #56: GFLOPs: 87.2545. Time: 9.9017 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #57: GFLOPs: 88.9892. Time: 9.7087 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #58: GFLOPs: 27.5228. Time: 31.3909 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #59: GFLOPs: 14.8159. Time: 58.3136 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #60: GFLOPs: 60.4821. Time: 14.2847 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #61: GFLOPs: 90.2651. Time: 9.5714 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #62: GFLOPs: 13.8676. Time: 62.3012 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #63: GFLOPs: 36.2501. Time: 23.8336 us. Best GFLOPs: 229.9827
2024-04-28 20:20:40 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #64: GFLOPs: 45.4705. Time: 19.0006 us. Best GFLOPs: 229.9827
2024-04-28 20:39:39 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:39:40 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-28 20:39:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 433 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 20:39:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 865 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 20:39:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 1299 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 20:39:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 1732 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 20:39:50 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2024-04-28 20:39:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 20:40:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 20:40:19 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 20:40:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 20:40:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0042  1.0028  0.9934  0.9928  0.9928  0.9901  0.9893  0.9716  0.9570  0.9564  0.9501  0.9501  0.9500  0.9499  0.9475  0.9448
[17 : 32]:	0.9421  0.9410  0.9376  0.9362  0.9362  0.9316  0.9230  0.9204  0.9202  0.9195  0.9187  0.9129  0.9119  0.9102  0.9084  0.9077
[33 : 48]:	0.9059  0.9013  0.9012  0.8995  0.8981  0.8937  0.8937  0.8932  0.8923  0.8923  0.8923  0.8897  0.8875  0.8844  0.8839  0.8823
[49 : 64]:	0.8763  0.8755  0.8741  0.8738  0.8727  0.8706  0.8678  0.8662  0.8642  0.8642  0.8640  0.8631  0.8627  0.8627  0.8625  0.8620
2024-04-28 20:40:33 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:40:33 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #65: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v2 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(840))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1)
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[58, 1, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 7, 4, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #66: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(2) + i_3_init * T.int64(2) + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused // T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused % T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[58, 1, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 2])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #67: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(2) + i_3_init * T.int64(2) + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused // T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused % T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[58, 1, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 2])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #68: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3_init * T.int64(4) + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v2 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(840))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1)
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3 * T.int64(4) + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[58, 1, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 4])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #69: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v2 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(840))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1)
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[58, 1, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 7, 4, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #70: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused // T.int64(3) + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused % T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #71: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused // T.int64(3) + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused % T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105, l106 = sch.split(loop=l103, factors=[None, 392, 2], preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b108)
l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #72: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(448) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(896))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(6))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #73: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(2) + i_3_init * T.int64(2) + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v2 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(840))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1)
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[58, 1, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 2])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #74: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(784), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(784), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused // T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused % T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(784), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[58, 1, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 784], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 784], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #75: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3_init * T.int64(4) + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(30))
                                    v3 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(30))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(840))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1)
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3 * T.int64(4) + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[58, 1, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 4])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #76: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3_init * T.int64(4) + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(30))
                                    v3 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(30))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(840))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1)
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3 * T.int64(4) + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[58, 1, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 4])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #77: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(448) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(896))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105, l106 = sch.split(loop=l103, factors=[None, 392, 3], preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b108)
l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #78: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x"):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused // T.int64(3) + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused % T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #79: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_2_c_2_i_2_j_2_fused // T.int64(2) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused // T.int64(7) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(3), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) // T.int64(6))
                                    v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused // T.int64(7) + di_0)
                                    v3 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) % T.int64(6))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), di_0)
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(174))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_2_c_2_i_2_j_2_fused // T.int64(2) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused // T.int64(7) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_2_c_2_i_2_j_2_fused // T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 58, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[28, 1, 1, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v90 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v90)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 116], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106, l107 = sch.split(loop=l104, factors=[None, 116, 2], preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b109)
l120, l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b110)
l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l128, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l128, ann_key="pragma_unroll_explicit", ann_val=1)
l145, l146, l147, l148, l149, l150, l151 = sch.get_loops(block=b112)
b152 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169 = sch.get_loops(block=b152)
b170 = sch.decompose_reduction(block=b152, loop=l156)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #80: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused // T.int64(3) + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused % T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 2])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #81: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(784), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(784), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused // T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused % T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(784), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[58, 1, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 784], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 784], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #82: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(448) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(896))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(6))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #83: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(4) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + b_1_c_1_i_1_j_1_fused + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(8))
                                        v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused // T.int64(3) + b_0_c_0_i_0_j_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(8) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused % T.int64(3) + b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1 < T.int64(29))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(4) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + b_1_c_1_i_1_j_1_fused + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + b_1_c_1_i_1_j_1_fused + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[2, 1, 29, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 2, 1, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 116, 2], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106 = sch.split(loop=l104, factors=[None, 116], preserve_unit_iters=True)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b108)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #84: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(392))
                                        v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused // T.int64(3) + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(392) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused % T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 392, 2], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106 = sch.split(loop=l104, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b108)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #85: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(392))
                                        v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused // T.int64(3) + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(392) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused % T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 2])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 392, 2], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106 = sch.split(loop=l104, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b108)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #86: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused // T.int64(3) + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused % T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105, l106 = sch.split(loop=l103, factors=[None, 392, 2], preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b108)
l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #87: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(392))
                                        v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused // T.int64(3) + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(392) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused % T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 392, 2], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106, l107 = sch.split(loop=l104, factors=[None, 392, 2], preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b109)
l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b110)
l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l127, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l127, ann_key="pragma_unroll_explicit", ann_val=1)
l143, l144, l145, l146, l147, l148, l149 = sch.get_loops(block=b112)
b150 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b150)
b167 = sch.decompose_reduction(block=b150, loop=l154)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #88: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(4) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(3)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(348) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12))
                                        v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(348) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(30), dj_0 + b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(348) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), dj_0)
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1 < T.int64(87))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(4) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[2, 1, 29, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 2])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v90 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v90)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 116, 3], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b78)
l106, l107 = sch.split(loop=l105, factors=[None, 116], preserve_unit_iters=True)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b109)
l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b110)
l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l128, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l128, ann_key="pragma_unroll_explicit", ann_val=1)
l145, l146, l147, l148, l149, l150, l151 = sch.get_loops(block=b112)
b152 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169 = sch.get_loops(block=b152)
b170 = sch.decompose_reduction(block=b152, loop=l156)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #89: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(448) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(896))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(6))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #90: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(448) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(896))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105, l106 = sch.split(loop=l103, factors=[None, 392, 3], preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b108)
l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #91: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v2 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(840))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused_0 * T.int64(588) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2)
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[58, 1, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 7, 4, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105, l106 = sch.split(loop=l103, factors=[None, 196, 3], preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b108)
l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #92: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(4) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + b_1_c_1_i_1_j_1_fused + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) // T.int64(8))
                                    v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused // T.int64(3) + b_0_c_0_i_0_j_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) % T.int64(8) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused % T.int64(3) + b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1 < T.int64(29))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(4) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + b_1_c_1_i_1_j_1_fused + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + b_1_c_1_i_1_j_1_fused + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[2, 1, 29, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 2, 1, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 116], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 116], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #93: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3_init * T.int64(4) + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(30))
                                    v3 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(30))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(840))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1)
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3 * T.int64(4) + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[58, 1, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 4])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #94: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(448) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(896))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105, l106 = sch.split(loop=l103, factors=[None, 392, 3], preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b108)
l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #95: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(406), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(14) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(406), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(406) + ax0_ax1_ax2_ax3_fused_1) // T.int64(56))
                                    v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(406) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(406) + ax0_ax1_ax2_ax3_fused_1) % T.int64(4))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(406), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(406) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(406) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(406) + ax0_ax1_ax2_ax3_fused_1 < T.int64(87))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(14) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(14) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[2, 1, 29, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 2])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 406], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 406], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #96: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(420))
                                        v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(420) // T.int64(30))
                                        v3 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(30))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(840))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 392, 4], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106, l107 = sch.split(loop=l104, factors=[None, 392, 2], preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b109)
l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b110)
l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l127, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l127, ann_key="pragma_unroll_explicit", ann_val=1)
l143, l144, l145, l146, l147, l148, l149 = sch.get_loops(block=b112)
b150 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b150)
b167 = sch.decompose_reduction(block=b150, loop=l154)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #97: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(420))
                                    v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(420) // T.int64(30))
                                    v3 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(30))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(840))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105, l106 = sch.split(loop=l103, factors=[None, 392, 3], preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b108)
l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #98: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(448))
                                        v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(448) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(896))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 392, 4], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106, l107 = sch.split(loop=l104, factors=[None, 392, 3], preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b109)
l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b110)
l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l127, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l127, ann_key="pragma_unroll_explicit", ann_val=1)
l143, l144, l145, l146, l147, l148, l149 = sch.get_loops(block=b112)
b150 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b150)
b167 = sch.decompose_reduction(block=b150, loop=l154)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #99: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(420))
                                        v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(420) // T.int64(30))
                                        v3 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(30))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(840))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 392, 3], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106, l107 = sch.split(loop=l104, factors=[None, 392, 3], preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b109)
l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b110)
l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l127, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l127, ann_key="pragma_unroll_explicit", ann_val=1)
l143, l144, l145, l146, l147, l148, l149 = sch.get_loops(block=b112)
b150 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b150)
b167 = sch.decompose_reduction(block=b150, loop=l154)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #100: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(28) * T.int64(2) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(420))
                                        v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(420) // T.int64(30))
                                        v3 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(30))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(840))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(28) * T.int64(2) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(28) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 7, 2, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 392, 4], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106, l107 = sch.split(loop=l104, factors=[None, 392, 3], preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b109)
l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b110)
l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l127, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l127, ann_key="pragma_unroll_explicit", ann_val=1)
l143, l144, l145, l146, l147, l148, l149 = sch.get_loops(block=b112)
b150 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b150)
b167 = sch.decompose_reduction(block=b150, loop=l154)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #101: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(406), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(14) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + i_3_init * T.int64(2) + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(406), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(406) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused // T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(406) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused % T.int64(3) + b_0_c_0_i_0_j_0_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(406), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(406) + ax0_ax1_ax2_ax3_fused_1))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(406) + ax0_ax1_ax2_ax3_fused_1 < T.int64(29))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(14) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[2, 1, 29, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 2])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[28, 1, 1, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 406], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 406], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #102: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3_init * T.int64(4) + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v2 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(840))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused_0 * T.int64(588) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2)
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3 * T.int64(4) + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[58, 1, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 4])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105, l106 = sch.split(loop=l103, factors=[None, 196, 3], preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b108)
l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #103: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v2 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(840))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused_0 * T.int64(588) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2)
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[58, 1, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 7, 4, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105, l106 = sch.split(loop=l103, factors=[None, 196, 3], preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b108)
l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #104: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(4) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(3)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(464) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12))
                                        v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(464) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(30), dj_0 + b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(464) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(348))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), dj_0)
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1 < T.int64(87))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(4) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[2, 1, 29, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 2])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v90 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v90)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 116, 4], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b78)
l106, l107 = sch.split(loop=l105, factors=[None, 116], preserve_unit_iters=True)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b109)
l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b110)
l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l128, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l128, ann_key="pragma_unroll_explicit", ann_val=1)
l145, l146, l147, l148, l149, l150, l151 = sch.get_loops(block=b112)
b152 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169 = sch.get_loops(block=b152)
b170 = sch.decompose_reduction(block=b152, loop=l156)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #105: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(448) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(896))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 2])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105, l106 = sch.split(loop=l103, factors=[None, 392, 3], preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b108)
l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #106: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(448) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(896))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 2])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105, l106 = sch.split(loop=l103, factors=[None, 392, 3], preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b108)
l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #107: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(448) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(896))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105, l106 = sch.split(loop=l103, factors=[None, 392, 3], preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b108)
l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #108: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(448) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(896))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(6))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #109: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(420))
                                    v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(420) // T.int64(30))
                                    v3 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(30))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(840))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105, l106 = sch.split(loop=l103, factors=[None, 392, 3], preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b108)
l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #110: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(448))
                                        v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(448) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(896))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(6))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 392, 2], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106 = sch.split(loop=l104, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b108)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #111: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x"):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(28) * T.int64(2) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(420))
                                        v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(420) // T.int64(30))
                                        v3 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(30))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(840))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(28) * T.int64(2) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(28) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 7, 2, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 392, 4], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106, l107 = sch.split(loop=l104, factors=[None, 392, 3], preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b109)
l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b110)
l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b111)
l143, l144, l145, l146, l147, l148, l149 = sch.get_loops(block=b112)
b150 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b150)
b167 = sch.decompose_reduction(block=b150, loop=l154)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #112: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(448))
                                        v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(448) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(896))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 392, 4], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106, l107 = sch.split(loop=l104, factors=[None, 392, 2], preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b109)
l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b110)
l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l127, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l127, ann_key="pragma_unroll_explicit", ann_val=1)
l143, l144, l145, l146, l147, l148, l149 = sch.get_loops(block=b112)
b150 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b150)
b167 = sch.decompose_reduction(block=b150, loop=l154)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #113: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(392))
                                        v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused // T.int64(3) + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(392) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused % T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(784))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 392, 4], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106 = sch.split(loop=l104, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b108)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #114: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(448))
                                        v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(448) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(896))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 392, 2], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106, l107 = sch.split(loop=l104, factors=[None, 392, 2], preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b109)
l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b110)
l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l127, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l127, ann_key="pragma_unroll_explicit", ann_val=1)
l143, l144, l145, l146, l147, l148, l149 = sch.get_loops(block=b112)
b150 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b150)
b167 = sch.decompose_reduction(block=b150, loop=l154)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #115: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(420))
                                        v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(420) // T.int64(30))
                                        v3 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(30))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(840))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 392, 3], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106, l107 = sch.split(loop=l104, factors=[None, 392, 3], preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b109)
l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b110)
l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l127, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l127, ann_key="pragma_unroll_explicit", ann_val=1)
l143, l144, l145, l146, l147, l148, l149 = sch.get_loops(block=b112)
b150 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b150)
b167 = sch.decompose_reduction(block=b150, loop=l154)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #116: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v2 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(840))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused_0 * T.int64(588) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2)
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[58, 1, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 7, 4, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105, l106 = sch.split(loop=l103, factors=[None, 196, 3], preserve_unit_iters=True)
sch.vectorize(loop=l106)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b108)
l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #117: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(448) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(896))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(6))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(14) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 14, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #118: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(4) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(3)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(348) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12))
                                        v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(348) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(30), dj_0 + b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(348) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(348) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(348) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), dj_0)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(87))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(4) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(98) * T.int64(29) + b_2_c_2_i_2_j_2_fused // T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(98) // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[2, 1, 29, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v90 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v90)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 116, 3], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b78)
l106, l107, l108 = sch.split(loop=l105, factors=[None, 116, 3], preserve_unit_iters=True)
sch.vectorize(loop=l108)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b110)
l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b111)
l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l130, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l130, ann_key="pragma_unroll_explicit", ann_val=1)
l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b113)
b154 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b154)
b172 = sch.decompose_reduction(block=b154, loop=l158)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #119: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(448))
                                        v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(448) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(896))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1176) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 392, 4], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106, l107 = sch.split(loop=l104, factors=[None, 392, 3], preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b109)
l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b110)
l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l127, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l127, ann_key="pragma_unroll_explicit", ann_val=1)
l143, l144, l145, l146, l147, l148, l149 = sch.get_loops(block=b112)
b150 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b150)
b167 = sch.decompose_reduction(block=b150, loop=l154)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #120: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(29), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(784), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(784), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(2352) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(900))
                                        v2 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(2352) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(900) // T.int64(30))
                                        v3 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(2352) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(30))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1800))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(784), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1) // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1) % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 < T.int64(18))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 1, 1, 2])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v90 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v90)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 784, 3], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b78)
l106, l107 = sch.split(loop=l105, factors=[None, 784], preserve_unit_iters=True)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b109)
l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b110)
l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l128, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l128, ann_key="pragma_unroll_explicit", ann_val=1)
l145, l146, l147, l148, l149, l150, l151 = sch.get_loops(block=b112)
b152 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169 = sch.get_loops(block=b152)
b170 = sch.decompose_reduction(block=b152, loop=l156)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #121: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused // T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused % T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[58, 1, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 7, 4, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #122: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3_init * T.int64(4) + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused // T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused % T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3 * T.int64(4) + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[58, 1, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 4])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103 = sch.get_loops(block=b78)
l104, l105 = sch.split(loop=l103, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l105, thread_axis="threadIdx.x")
b106 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.unroll_explicit")
b107, b108, b109, b110 = sch.get_child_blocks(b106)
l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b107)
l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b108)
l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138 = sch.get_loops(block=b109)
sch.annotate(block_or_loop=l123, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l123, ann_key="pragma_unroll_explicit", ann_val=1)
l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b110)
b146 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b146)
b163 = sch.decompose_reduction(block=b146, loop=l150)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #123: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(448))
                                        v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(448) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(896))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(6))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 392, 4], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106 = sch.split(loop=l104, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b108)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #124: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(392))
                                        v2 = T.axis.spatial(T.int64(30), di_0_dj_0_fused // T.int64(3) + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(392) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused % T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1568) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(784))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(2) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(196) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(196) // T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[29, 1, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 392, 4], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106, l107 = sch.split(loop=l104, factors=[None, 392, 2], preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b109)
l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b110)
l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l127, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l127, ann_key="pragma_unroll_explicit", ann_val=1)
l143, l144, l145, l146, l147, l148, l149 = sch.get_loops(block=b112)
b150 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b150)
b167 = sch.decompose_reduction(block=b150, loop=l154)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #125: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(58), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3_init * T.int64(4) + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                        v2 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(588) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(30), di_0_dj_0_fused + (ax0_ax1_ax2_ax3_fused_0 * T.int64(588) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(840))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused)
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1)
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 < T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + i_3 * T.int64(4) + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[58, 1, 1, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 4])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
l90 = sch.fuse(l53, l59, preserve_unit_iters=True)
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l90, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 196, 3], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106 = sch.split(loop=l104, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b108)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b109)
l125, l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b110)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b111)
b148 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b148)
b165 = sch.decompose_reduction(block=b148, loop=l152)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #126: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(58), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(2) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), i_3_init * T.int64(7) + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(180)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(58), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), (ax0_ax1_ax2_ax3_fused_0 * T.int64(58) + ax0_ax1_ax2_ax3_fused_1) // T.int64(180))
                                    v2 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(58) + ax0_ax1_ax2_ax3_fused_1) % T.int64(180) // T.int64(6))
                                    v3 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(58) + ax0_ax1_ax2_ax3_fused_1) % T.int64(6))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(9)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(58), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(58), (ax0_ax1_ax2_ax3_fused_0 * T.int64(58) + ax0_ax1_ax2_ax3_fused_1) // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(58) + ax0_ax1_ax2_ax3_fused_1) % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(58) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(2) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), i_3 * T.int64(7) + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(28), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), ax2)
                            v3 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 29, 2, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 4, 7])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 2, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v90 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v90)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 58], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106 = sch.split(loop=l104, factors=[None, 58], preserve_unit_iters=True)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b107 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b107, ann_key="meta_schedule.unroll_explicit")
b108, b109, b110, b111 = sch.get_child_blocks(b107)
l112, l113, l114, l115, l116, l117, l118 = sch.get_loops(block=b108)
l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b109)
l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b110)
l143, l144, l145, l146, l147, l148, l149 = sch.get_loops(block=b111)
b150 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b150)
b168 = sch.decompose_reduction(block=b150, loop=l154)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #127: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(29) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(2) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(47)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(180))
                                        v2 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(180) // T.int64(6))
                                        v3 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(6))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(5220))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(29) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(261))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(29) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(2) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(29), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(29) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[2, 1, 1, 29, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 2])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v90 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v90)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98, l99 = sch.split(loop=l96, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l99)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b78)
l106, l107, l108 = sch.split(loop=l105, factors=[None, 56, 3], preserve_unit_iters=True)
sch.vectorize(loop=l108)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b110)
l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b111)
l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l130, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l130, ann_key="pragma_unroll_explicit", ann_val=1)
l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b113)
b154 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b154)
b172 = sch.decompose_reduction(block=b154, loop=l158)
2024-04-28 20:41:06 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_2] Trial #128: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(30), T.int64(30)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(58), b_2_c_2_i_2_j_2_fused // T.int64(2) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused * T.int64(4) + i_3_init * T.int64(4) + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(7) + j_3_init * T.int64(7) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(90)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(58), (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) // T.int64(180))
                                    v2 = T.axis.spatial(T.int64(30), b_0_c_0_i_0_j_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) % T.int64(180) // T.int64(30))
                                    v3 = T.axis.spatial(T.int64(30), (ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) % T.int64(30))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(29) and T.int64(1) <= v3 and v3 < T.int64(29), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(116), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(58), (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(232) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(116) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(522))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(7)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(58), b_2_c_2_i_2_j_2_fused // T.int64(2) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused * T.int64(4) + i_3 * T.int64(4) + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(7) + j_3 * T.int64(7) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(7)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(58), b_2_c_2_i_2_j_2_fused // T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_1_c_1_i_1_j_1_fused * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(7) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l4, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 58, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l5, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 4])
l35, l36, l37, l38, l39 = sch.split(loop=l6, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 7])
l45, l46, l47, l48, l49 = sch.split(loop=l7, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l53, l54, l55 = sch.split(loop=l8, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l59, l60, l61 = sch.split(loop=l9, factors=[v56, v57, v58], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l54, l60, l18, l28, l38, l48, l55, l61, l19, l29, l39, l49)
l62 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l62, thread_axis="blockIdx.x")
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="vthread.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b65 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b65, loop=l64, preserve_unit_loops=True, index=-1)
b66 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b66, loop=l59, preserve_unit_loops=True, index=-1)
l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b66)
l76 = sch.fuse(l72, l73, l74, l75, preserve_unit_iters=True)
v77 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch", ann_val=v77)
b78 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l59, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b78)
l88 = sch.fuse(l84, l85, l86, l87, preserve_unit_iters=True)
v89 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v89)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v90 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v90)
sch.enter_postproc()
sch.unannotate(block_or_loop=b66, ann_key="meta_schedule.cooperative_fetch")
l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b66)
l97, l98 = sch.split(loop=l96, factors=[None, 116], preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103, l104 = sch.get_loops(block=b78)
l105, l106, l107 = sch.split(loop=l104, factors=[None, 116, 2], preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.bind(loop=l106, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b109)
l120, l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b110)
l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l128, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l128, ann_key="pragma_unroll_explicit", ann_val=1)
l145, l146, l147, l148, l149, l150, l151 = sch.get_loops(block=b112)
b152 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169 = sch.get_loops(block=b152)
b170 = sch.decompose_reduction(block=b152, loop=l156)
2024-04-28 21:13:01 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:13:02 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-28 21:13:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 429 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 21:13:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 861 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 21:13:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 1290 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 21:13:09 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-28 21:13:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 21:13:27 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 116 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 21:13:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 21:13:47 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 21:13:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9165  0.9155  0.9152  0.8978  0.8971  0.8968  0.8665  0.8598  0.8598  0.8595  0.8574  0.8529  0.8528  0.8504  0.8490  0.8421
[17 : 32]:	0.8420  0.8420  0.8325  0.8310  0.8310  0.8266  0.8249  0.8238  0.8227  0.8226  0.8216  0.8211  0.8204  0.8156  0.8139  0.8135
[33 : 48]:	0.8134  0.8113  0.8112  0.8107  0.8107  0.8092  0.8046  0.8030  0.8027  0.8017  0.8005  0.7994  0.7988  0.7987  0.7986  0.7979
[49 : 64]:	0.7978  0.7917  0.7907  0.7902  0.7902  0.7900  0.7888  0.7888  0.7885  0.7883  0.7881  0.7863  0.7858  0.7846  0.7838  0.7822
2024-04-28 21:13:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:13:52 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #129: GFLOPs: 231.2355. Time: 3.7363 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #130: GFLOPs: 217.7632. Time: 3.9675 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #131: GFLOPs: 212.0873. Time: 4.0736 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #132: GFLOPs: 211.6496. Time: 4.0821 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #133: GFLOPs: 217.7071. Time: 3.9685 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #134: GFLOPs: 217.7365. Time: 3.9680 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #135: GFLOPs: 215.0043. Time: 4.0184 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #136: GFLOPs: 215.0758. Time: 4.0170 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #137: GFLOPs: 175.5198. Time: 4.9223 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #138: GFLOPs: 217.7177. Time: 3.9683 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #139: GFLOPs: 185.2809. Time: 4.6630 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #140: GFLOPs: 216.4692. Time: 3.9912 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #141: GFLOPs: 222.9969. Time: 3.8743 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #142: GFLOPs: 217.6543. Time: 3.9695 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #143: GFLOPs: 217.6966. Time: 3.9687 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #144: GFLOPs: 209.3820. Time: 4.1263 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #145: GFLOPs: 212.0390. Time: 4.0746 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #146: GFLOPs: 175.6791. Time: 4.9179 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #147: GFLOPs: 204.1451. Time: 4.2321 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #148: GFLOPs: 212.0487. Time: 4.0744 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #149: GFLOPs: 212.0282. Time: 4.0748 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #150: GFLOPs: 195.0690. Time: 4.4290 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #151: GFLOPs: 210.9675. Time: 4.0953 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #152: GFLOPs: 217.3036. Time: 3.9759 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #153: GFLOPs: 217.7419. Time: 3.9679 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #154: GFLOPs: 205.6825. Time: 4.2005 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #155: GFLOPs: 217.2236. Time: 3.9773 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #156: GFLOPs: 205.7136. Time: 4.1999 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #157: GFLOPs: 217.2538. Time: 3.9768 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #158: GFLOPs: 161.5615. Time: 5.3476 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #159: GFLOPs: 216.2953. Time: 3.9944 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #160: GFLOPs: 217.6419. Time: 3.9697 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #161: GFLOPs: 216.1926. Time: 3.9963 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #162: GFLOPs: 217.2159. Time: 3.9775 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #163: GFLOPs: 161.3189. Time: 5.3557 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #164: GFLOPs: 176.0291. Time: 4.9081 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #165: GFLOPs: 176.0223. Time: 4.9083 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #166: GFLOPs: 118.6165. Time: 7.2837 us. Best GFLOPs: 231.2355
2024-04-28 21:14:53 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #167: GFLOPs: 209.6735. Time: 4.1205 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #168: GFLOPs: 215.0365. Time: 4.0178 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #169: GFLOPs: 215.1473. Time: 4.0157 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #170: GFLOPs: 218.6579. Time: 3.9512 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #171: GFLOPs: 139.3575. Time: 6.1997 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #172: GFLOPs: 216.8741. Time: 3.9837 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #173: GFLOPs: 218.6681. Time: 3.9510 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #174: GFLOPs: 118.5397. Time: 7.2884 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #175: GFLOPs: 115.2194. Time: 7.4985 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #176: GFLOPs: 109.6625. Time: 7.8784 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #177: GFLOPs: 176.6563. Time: 4.8907 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #178: GFLOPs: 162.8916. Time: 5.3039 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #179: GFLOPs: 214.9748. Time: 4.0189 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #180: GFLOPs: 200.8653. Time: 4.3012 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #181: GFLOPs: 200.8354. Time: 4.3019 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #182: GFLOPs: 217.6068. Time: 3.9703 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #183: GFLOPs: 185.1178. Time: 4.6671 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #184: GFLOPs: 185.1266. Time: 4.6669 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #185: GFLOPs: 217.2107. Time: 3.9776 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #186: GFLOPs: 217.3712. Time: 3.9746 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #187: GFLOPs: 198.1679. Time: 4.3598 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #188: GFLOPs: 205.5157. Time: 4.2039 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #189: GFLOPs: 217.6609. Time: 3.9693 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #190: GFLOPs: 161.5243. Time: 5.3488 us. Best GFLOPs: 231.2355
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #191: GFLOPs: 233.2229. Time: 3.7045 us. Best GFLOPs: 233.2229
2024-04-28 21:14:54 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #192: GFLOPs: 23.9292. Time: 36.1052 us. Best GFLOPs: 233.2229
2024-04-28 21:40:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:40:40 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 21:40:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 397 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 21:40:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 792 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 21:40:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 1183 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 21:40:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 1573 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 21:40:49 [INFO] [evolutionary_search.cc:723] Sampled 67 candidate(s)
2024-04-28 21:40:56 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 21:41:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 128 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 21:41:17 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 142 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 21:41:28 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 21:41:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9899  0.9841  0.9716  0.9707  0.9662  0.9651  0.9617  0.9597  0.9546  0.9531  0.9463  0.9463  0.9449  0.9449  0.9447  0.9440
[17 : 32]:	0.9436  0.9436  0.9424  0.9408  0.9408  0.9408  0.9393  0.9393  0.9393  0.9392  0.9392  0.9390  0.9390  0.9366  0.9354  0.9351
[33 : 48]:	0.9309  0.9300  0.9299  0.9294  0.9291  0.9288  0.9284  0.9282  0.9273  0.9272  0.9269  0.9263  0.9260  0.9241  0.9238  0.9232
[49 : 64]:	0.9229  0.9224  0.9224  0.9223  0.9220  0.9209  0.9208  0.9203  0.9203  0.9196  0.9189  0.9185  0.9180  0.9178  0.9178  0.9166
2024-04-28 21:41:32 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:41:32 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #193: GFLOPs: 237.0551. Time: 3.6446 us. Best GFLOPs: 237.0551
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #194: GFLOPs: 244.5057. Time: 3.5335 us. Best GFLOPs: 244.5057
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #195: GFLOPs: 244.6809. Time: 3.5310 us. Best GFLOPs: 244.6809
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #196: GFLOPs: 244.6936. Time: 3.5308 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #197: GFLOPs: 231.1630. Time: 3.7375 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #198: GFLOPs: 231.1450. Time: 3.7378 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #199: GFLOPs: 244.2183. Time: 3.5377 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #200: GFLOPs: 214.2223. Time: 4.0330 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #201: GFLOPs: 231.1392. Time: 3.7379 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #202: GFLOPs: 244.4631. Time: 3.5341 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #203: GFLOPs: 219.1971. Time: 3.9415 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #204: GFLOPs: 219.1628. Time: 3.9421 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #205: GFLOPs: 219.2011. Time: 3.9414 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #206: GFLOPs: 219.0188. Time: 3.9447 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #207: GFLOPs: 219.3743. Time: 3.9383 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #208: GFLOPs: 231.0174. Time: 3.7398 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #209: GFLOPs: 218.9353. Time: 3.9462 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #210: GFLOPs: 222.4224. Time: 3.8844 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #211: GFLOPs: 218.2873. Time: 3.9579 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #212: GFLOPs: 219.0119. Time: 3.9448 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #213: GFLOPs: 218.9477. Time: 3.9460 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #214: GFLOPs: 218.9938. Time: 3.9452 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #215: GFLOPs: 218.3713. Time: 3.9564 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #216: GFLOPs: 218.3588. Time: 3.9566 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #217: GFLOPs: 218.3624. Time: 3.9566 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #218: GFLOPs: 218.8804. Time: 3.9472 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #219: GFLOPs: 218.8144. Time: 3.9484 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #220: GFLOPs: 218.3739. Time: 3.9564 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #221: GFLOPs: 218.3463. Time: 3.9569 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #222: GFLOPs: 218.4214. Time: 3.9555 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #223: GFLOPs: 221.4418. Time: 3.9016 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #224: GFLOPs: 223.3631. Time: 3.8680 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #225: GFLOPs: 222.8034. Time: 3.8777 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #226: GFLOPs: 218.3577. Time: 3.9567 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #227: GFLOPs: 218.9002. Time: 3.9469 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #228: GFLOPs: 222.7569. Time: 3.8785 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #229: GFLOPs: 229.3951. Time: 3.7663 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #230: GFLOPs: 218.9343. Time: 3.9462 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #231: GFLOPs: 222.9865. Time: 3.8745 us. Best GFLOPs: 244.6936
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #232: GFLOPs: 246.2980. Time: 3.5078 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #233: GFLOPs: 187.6000. Time: 4.6054 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #234: GFLOPs: 218.4912. Time: 3.9542 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #235: GFLOPs: 222.8927. Time: 3.8762 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #236: GFLOPs: 219.3009. Time: 3.9396 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #237: GFLOPs: 222.8926. Time: 3.8762 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #238: GFLOPs: 222.6676. Time: 3.8801 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #239: GFLOPs: 218.4035. Time: 3.9558 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #240: GFLOPs: 221.2197. Time: 3.9055 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #241: GFLOPs: 221.1973. Time: 3.9059 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #242: GFLOPs: 223.0179. Time: 3.8740 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #243: GFLOPs: 223.0382. Time: 3.8736 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #244: GFLOPs: 218.4464. Time: 3.9551 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #245: GFLOPs: 181.2724. Time: 4.7661 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #246: GFLOPs: 229.5165. Time: 3.7643 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #247: GFLOPs: 229.5000. Time: 3.7646 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #248: GFLOPs: 219.2890. Time: 3.9399 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #249: GFLOPs: 222.5083. Time: 3.8829 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #250: GFLOPs: 223.3548. Time: 3.8681 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #251: GFLOPs: 222.6694. Time: 3.8800 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #252: GFLOPs: 208.6789. Time: 4.1402 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #253: GFLOPs: 208.6512. Time: 4.1407 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #254: GFLOPs: 188.0836. Time: 4.5935 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #255: GFLOPs: 44.6777. Time: 19.3378 us. Best GFLOPs: 246.2980
2024-04-28 21:42:34 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #256: GFLOPs: 37.2430. Time: 23.1981 us. Best GFLOPs: 246.2980
2024-04-28 22:13:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:13:56 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 22:13:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 393 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 22:14:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 788 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 22:14:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 1185 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 22:14:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 1587 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 22:14:05 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-28 22:14:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 132 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 22:14:22 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 136 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 22:14:33 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 129 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 22:14:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 22:14:47 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9834  0.9736  0.9687  0.9673  0.9647  0.9413  0.9388  0.9369  0.9325  0.9323  0.9299  0.9290  0.9286  0.9277  0.9263  0.9243
[17 : 32]:	0.9229  0.9219  0.9198  0.9194  0.9188  0.9174  0.9136  0.9100  0.9100  0.9089  0.9086  0.9081  0.9069  0.9064  0.9064  0.9056
[33 : 48]:	0.9034  0.9032  0.9028  0.9023  0.9008  0.9005  0.8999  0.8999  0.8999  0.8998  0.8993  0.8993  0.8992  0.8984  0.8981  0.8981
[49 : 64]:	0.8979  0.8971  0.8970  0.8970  0.8970  0.8967  0.8965  0.8965  0.8965  0.8965  0.8962  0.8954  0.8954  0.8954  0.8948  0.8947
2024-04-28 22:14:47 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:14:47 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #257: GFLOPs: 222.2267. Time: 3.8878 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #258: GFLOPs: 228.8792. Time: 3.7748 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #259: GFLOPs: 227.0271. Time: 3.8056 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #260: GFLOPs: 227.0805. Time: 3.8047 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #261: GFLOPs: 227.0086. Time: 3.8059 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #262: GFLOPs: 208.1320. Time: 4.1511 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #263: GFLOPs: 227.1025. Time: 3.8043 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #264: GFLOPs: 219.1088. Time: 3.9431 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #265: GFLOPs: 199.7451. Time: 4.3254 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #266: GFLOPs: 216.5428. Time: 3.9898 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #267: GFLOPs: 227.0110. Time: 3.8058 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #268: GFLOPs: 226.1289. Time: 3.8207 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #269: GFLOPs: 227.1266. Time: 3.8039 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #270: GFLOPs: 188.9082. Time: 4.5735 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #271: GFLOPs: 188.7757. Time: 4.5767 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #272: GFLOPs: 188.4728. Time: 4.5840 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #273: GFLOPs: 188.3321. Time: 4.5875 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #274: GFLOPs: 199.7260. Time: 4.3258 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #275: GFLOPs: 199.8007. Time: 4.3241 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #276: GFLOPs: 206.2091. Time: 4.1898 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #277: GFLOPs: 188.3743. Time: 4.5864 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #278: GFLOPs: 188.4358. Time: 4.5849 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #279: GFLOPs: 206.2414. Time: 4.1891 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #280: GFLOPs: 212.9977. Time: 4.0562 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #281: GFLOPs: 212.9709. Time: 4.0567 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #282: GFLOPs: 213.2645. Time: 4.0512 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #283: GFLOPs: 213.2127. Time: 4.0521 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #284: GFLOPs: 208.0055. Time: 4.1536 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #285: GFLOPs: 213.3111. Time: 4.0503 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #286: GFLOPs: 213.0454. Time: 4.0553 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #287: GFLOPs: 213.0426. Time: 4.0554 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #288: GFLOPs: 213.0771. Time: 4.0547 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #289: GFLOPs: 212.8389. Time: 4.0593 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #290: GFLOPs: 161.3746. Time: 5.3538 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #291: GFLOPs: 213.2230. Time: 4.0519 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #292: GFLOPs: 213.1059. Time: 4.0542 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #293: GFLOPs: 213.7539. Time: 4.0419 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #294: GFLOPs: 212.9475. Time: 4.0572 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #295: GFLOPs: 213.4950. Time: 4.0468 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #296: GFLOPs: 214.5412. Time: 4.0270 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #297: GFLOPs: 214.1139. Time: 4.0351 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #298: GFLOPs: 212.9817. Time: 4.0565 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #299: GFLOPs: 213.0175. Time: 4.0559 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #300: GFLOPs: 212.8514. Time: 4.0590 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #301: GFLOPs: 212.7753. Time: 4.0605 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #302: GFLOPs: 216.7093. Time: 3.9868 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #303: GFLOPs: 213.1327. Time: 4.0537 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #304: GFLOPs: 212.8553. Time: 4.0589 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #305: GFLOPs: 213.7483. Time: 4.0420 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #306: GFLOPs: 224.4020. Time: 3.8501 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #307: GFLOPs: 213.5326. Time: 4.0461 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #308: GFLOPs: 213.5523. Time: 4.0457 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #309: GFLOPs: 212.6879. Time: 4.0621 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #310: GFLOPs: 212.8043. Time: 4.0599 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #311: GFLOPs: 213.6008. Time: 4.0448 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #312: GFLOPs: 213.8275. Time: 4.0405 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #313: GFLOPs: 213.7397. Time: 4.0421 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #314: GFLOPs: 212.8372. Time: 4.0593 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #315: GFLOPs: 213.6892. Time: 4.0431 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #316: GFLOPs: 213.0038. Time: 4.0561 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #317: GFLOPs: 214.1517. Time: 4.0344 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #318: GFLOPs: 95.5157. Time: 9.0453 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #319: GFLOPs: 28.6111. Time: 30.1970 us. Best GFLOPs: 246.2980
2024-04-28 22:15:50 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #320: GFLOPs: 18.5461. Time: 46.5850 us. Best GFLOPs: 246.2980
2024-04-28 22:43:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:43:20 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 22:43:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 393 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 22:43:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 785 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 22:43:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 1175 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 22:43:27 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-04-28 22:43:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 134 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 22:43:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 122 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 22:43:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 22:44:07 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 22:44:12 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9601  0.9584  0.9577  0.9576  0.9494  0.9481  0.9481  0.9481  0.9481  0.9469  0.9469  0.9464  0.9464  0.9452  0.9447  0.9440
[17 : 32]:	0.9440  0.9440  0.9407  0.9394  0.9394  0.9394  0.9376  0.9370  0.9370  0.9362  0.9362  0.9362  0.9362  0.9358  0.9350  0.9338
[33 : 48]:	0.9338  0.9338  0.9338  0.9338  0.9295  0.9287  0.9287  0.9272  0.9271  0.9271  0.9248  0.9236  0.9218  0.9218  0.9215  0.9215
[49 : 64]:	0.9201  0.9177  0.9141  0.9123  0.9100  0.9066  0.9045  0.9034  0.9021  0.9021  0.9013  0.8997  0.8974  0.8961  0.8955  0.8953
2024-04-28 22:44:12 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:44:12 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #321: GFLOPs: 206.0249. Time: 4.1935 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #322: GFLOPs: 203.4982. Time: 4.2456 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #323: GFLOPs: 205.4192. Time: 4.2059 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #324: GFLOPs: 205.6328. Time: 4.2015 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #325: GFLOPs: 235.0883. Time: 3.6751 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #326: GFLOPs: 231.7920. Time: 3.7273 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #327: GFLOPs: 231.7190. Time: 3.7285 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #328: GFLOPs: 231.8827. Time: 3.7259 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #329: GFLOPs: 235.2902. Time: 3.6719 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #330: GFLOPs: 231.6651. Time: 3.7294 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #331: GFLOPs: 234.1942. Time: 3.6891 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #332: GFLOPs: 206.0379. Time: 4.1932 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #333: GFLOPs: 206.0304. Time: 4.1934 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #334: GFLOPs: 204.9700. Time: 4.2151 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #335: GFLOPs: 202.9722. Time: 4.2566 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #336: GFLOPs: 204.7472. Time: 4.2197 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #337: GFLOPs: 204.3009. Time: 4.2289 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #338: GFLOPs: 205.6023. Time: 4.2021 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #339: GFLOPs: 203.3490. Time: 4.2487 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #340: GFLOPs: 206.0363. Time: 4.1933 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #341: GFLOPs: 205.9984. Time: 4.1941 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #342: GFLOPs: 206.0532. Time: 4.1929 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #343: GFLOPs: 227.7065. Time: 3.7942 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #344: GFLOPs: 205.2766. Time: 4.2088 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #345: GFLOPs: 205.5783. Time: 4.2026 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #346: GFLOPs: 231.0369. Time: 3.7395 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #347: GFLOPs: 230.9988. Time: 3.7401 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #348: GFLOPs: 230.9555. Time: 3.7408 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #349: GFLOPs: 231.0921. Time: 3.7386 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #350: GFLOPs: 204.3850. Time: 4.2272 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #351: GFLOPs: 230.5806. Time: 3.7469 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #352: GFLOPs: 233.1132. Time: 3.7062 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #353: GFLOPs: 233.0946. Time: 3.7065 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #354: GFLOPs: 233.1152. Time: 3.7062 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #355: GFLOPs: 221.7215. Time: 3.8966 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #356: GFLOPs: 227.8006. Time: 3.7927 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #357: GFLOPs: 205.4043. Time: 4.2062 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #358: GFLOPs: 203.8199. Time: 4.2389 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #359: GFLOPs: 203.9148. Time: 4.2369 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #360: GFLOPs: 204.9950. Time: 4.2146 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #361: GFLOPs: 203.6782. Time: 4.2418 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #362: GFLOPs: 203.8583. Time: 4.2381 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #363: GFLOPs: 203.3203. Time: 4.2493 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #364: GFLOPs: 206.0304. Time: 4.1934 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #365: GFLOPs: 220.3297. Time: 3.9212 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #366: GFLOPs: 220.3527. Time: 3.9208 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #367: GFLOPs: 216.8838. Time: 3.9836 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #368: GFLOPs: 216.8704. Time: 3.9838 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #369: GFLOPs: 204.5705. Time: 4.2233 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #370: GFLOPs: 217.0418. Time: 3.9807 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #371: GFLOPs: 216.4059. Time: 3.9923 us. Best GFLOPs: 246.2980
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #372: GFLOPs: 251.2089. Time: 3.4392 us. Best GFLOPs: 251.2089
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #373: GFLOPs: 249.1277. Time: 3.4680 us. Best GFLOPs: 251.2089
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #374: GFLOPs: 216.5634. Time: 3.9894 us. Best GFLOPs: 251.2089
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #375: GFLOPs: 230.3443. Time: 3.7508 us. Best GFLOPs: 251.2089
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #376: GFLOPs: 183.8088. Time: 4.7004 us. Best GFLOPs: 251.2089
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #377: GFLOPs: 216.8565. Time: 3.9841 us. Best GFLOPs: 251.2089
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #378: GFLOPs: 216.8659. Time: 3.9839 us. Best GFLOPs: 251.2089
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #379: GFLOPs: 249.3257. Time: 3.4652 us. Best GFLOPs: 251.2089
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #380: GFLOPs: 248.7719. Time: 3.4729 us. Best GFLOPs: 251.2089
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #381: GFLOPs: 216.4867. Time: 3.9909 us. Best GFLOPs: 251.2089
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #382: GFLOPs: 183.9342. Time: 4.6972 us. Best GFLOPs: 251.2089
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #383: GFLOPs: 82.9855. Time: 10.4111 us. Best GFLOPs: 251.2089
2024-04-28 22:45:12 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #384: GFLOPs: 15.2439. Time: 56.6763 us. Best GFLOPs: 251.2089
2024-04-28 23:14:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:14:08 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:14:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 394 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 23:14:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 787 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 23:14:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 1185 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 23:14:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 1578 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 23:14:17 [INFO] [evolutionary_search.cc:723] Sampled 62 candidate(s)
2024-04-28 23:14:25 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 126 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 23:14:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 125 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 23:14:45 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 23:14:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32f4d28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4cd7818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d2bb58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4964088)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c64b68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d2caa8)]: 137 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x4d24fa8)]: 0 failure(s)
2024-04-28 23:14:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9975  0.9942  0.9909  0.9902  0.9773  0.9719  0.9719  0.9688  0.9685  0.9679  0.9645  0.9640  0.9620  0.9620  0.9572  0.9549
[17 : 32]:	0.9458  0.9417  0.9417  0.9415  0.9404  0.9364  0.9360  0.9350  0.9350  0.9306  0.9280  0.9274  0.9267  0.9267  0.9256  0.9248
[33 : 48]:	0.9248  0.9248  0.9198  0.9187  0.9172  0.9162  0.9162  0.9162  0.9153  0.9145  0.9145  0.9145  0.9134  0.9102  0.9057  0.9046
[49 : 64]:	0.9046  0.9030  0.8966  0.8955  0.8953  0.8928  0.8912  0.8895  0.8891  0.8847  0.8845  0.8838  0.8838  0.8835  0.8797  0.8797
2024-04-28 23:14:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:14:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #385: GFLOPs: 270.5791. Time: 3.1930 us. Best GFLOPs: 270.5791
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #386: GFLOPs: 287.0398. Time: 3.0099 us. Best GFLOPs: 287.0398
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #387: GFLOPs: 287.0479. Time: 3.0098 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #388: GFLOPs: 276.7592. Time: 3.1217 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #389: GFLOPs: 279.5236. Time: 3.0909 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #390: GFLOPs: 266.8237. Time: 3.2380 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #391: GFLOPs: 266.8133. Time: 3.2381 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #392: GFLOPs: 249.0908. Time: 3.4685 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #393: GFLOPs: 266.3814. Time: 3.2434 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #394: GFLOPs: 266.8215. Time: 3.2380 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #395: GFLOPs: 266.8959. Time: 3.2371 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #396: GFLOPs: 249.6806. Time: 3.4603 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #397: GFLOPs: 220.4493. Time: 3.9191 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #398: GFLOPs: 223.9975. Time: 3.8570 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #399: GFLOPs: 220.6153. Time: 3.9162 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #400: GFLOPs: 266.8774. Time: 3.2373 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #401: GFLOPs: 249.4797. Time: 3.4631 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #402: GFLOPs: 249.2451. Time: 3.4663 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #403: GFLOPs: 249.3211. Time: 3.4653 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #404: GFLOPs: 248.3739. Time: 3.4785 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #405: GFLOPs: 170.5997. Time: 5.0643 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #406: GFLOPs: 249.2931. Time: 3.4657 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #407: GFLOPs: 249.1976. Time: 3.4670 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #408: GFLOPs: 171.1041. Time: 5.0494 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #409: GFLOPs: 171.0791. Time: 5.0501 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #410: GFLOPs: 244.9073. Time: 3.5277 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #411: GFLOPs: 208.6393. Time: 4.1410 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #412: GFLOPs: 220.2126. Time: 3.9233 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #413: GFLOPs: 234.5788. Time: 3.6831 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #414: GFLOPs: 234.4844. Time: 3.6845 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #415: GFLOPs: 234.2692. Time: 3.6879 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #416: GFLOPs: 233.1682. Time: 3.7053 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #417: GFLOPs: 233.0498. Time: 3.7072 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #418: GFLOPs: 233.0193. Time: 3.7077 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #419: GFLOPs: 248.6160. Time: 3.4751 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #420: GFLOPs: 197.7844. Time: 4.3682 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #421: GFLOPs: 247.2659. Time: 3.4941 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #422: GFLOPs: 233.3372. Time: 3.7027 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #423: GFLOPs: 233.2627. Time: 3.7038 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #424: GFLOPs: 233.3239. Time: 3.7029 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #425: GFLOPs: 248.5496. Time: 3.4760 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #426: GFLOPs: 233.5016. Time: 3.7001 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #427: GFLOPs: 233.3734. Time: 3.7021 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #428: GFLOPs: 233.3682. Time: 3.7022 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #429: GFLOPs: 248.5021. Time: 3.4767 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #430: GFLOPs: 208.7160. Time: 4.1394 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #431: GFLOPs: 233.6617. Time: 3.6975 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #432: GFLOPs: 239.3187. Time: 3.6101 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #433: GFLOPs: 235.5167. Time: 3.6684 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #434: GFLOPs: 208.0697. Time: 4.1523 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #435: GFLOPs: 247.7923. Time: 3.4867 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #436: GFLOPs: 234.2710. Time: 3.6879 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #437: GFLOPs: 238.6397. Time: 3.6204 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #438: GFLOPs: 233.3239. Time: 3.7029 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #439: GFLOPs: 234.2560. Time: 3.6881 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #440: GFLOPs: 220.3783. Time: 3.9204 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #441: GFLOPs: 208.4010. Time: 4.1457 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #442: GFLOPs: 249.0256. Time: 3.4694 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #443: GFLOPs: 224.9746. Time: 3.8403 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #444: GFLOPs: 234.1301. Time: 3.6901 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #445: GFLOPs: 234.1558. Time: 3.6897 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #446: GFLOPs: 34.1999. Time: 25.2623 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #447: GFLOPs: 102.5417. Time: 8.4255 us. Best GFLOPs: 287.0479
2024-04-28 23:15:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_2] Trial #448: GFLOPs: 27.9625. Time: 30.8974 us. Best GFLOPs: 287.0479
