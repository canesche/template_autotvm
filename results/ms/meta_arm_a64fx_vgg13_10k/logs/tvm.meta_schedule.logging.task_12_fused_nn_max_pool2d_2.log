2024-04-29 10:02:03 [INFO] [task_scheduler.cc:160] Initializing Task #12: "fused_nn_max_pool2d_2"
2024-04-29 10:02:03 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 10:02:03 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 10:02:03 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(4), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(4)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 10:02:04 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(4), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 10:02:04 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(8), T.int64(56), T.int64(56), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28), T.int64(32), T.int64(2), T.int64(2)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-29 10:27:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:27:58 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 10:27:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9c1ba38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x31b5528)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ba1788)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4fd3428)]: 0 failure(s)
2024-04-29 10:27:59 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 10:28:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9c1ba38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x31b5528)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ba1788)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4fd3428)]: 0 failure(s)
2024-04-29 10:28:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9c1ba38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x31b5528)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ba1788)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4fd3428)]: 0 failure(s)
2024-04-29 10:28:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9c1ba38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x31b5528)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ba1788)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4fd3428)]: 0 failure(s)
2024-04-29 10:28:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9c1ba38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x31b5528)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3ba1788)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4fd3428)]: 0 failure(s)
2024-04-29 10:28:05 [INFO] [evolutionary_search.cc:649] Scores of the best 52 candidates:
[1 : 16]:	0.9777  0.9686  0.9499  0.9348  0.8860  0.8564  0.8437  0.8322  0.8184  0.8135  0.8120  0.8042  0.7624  0.7328  0.7297  0.6854
[17 : 32]:	0.6572  0.6414  0.6404  0.6333  0.6309  0.6142  0.6047  0.5648  0.5471  0.5378  0.5341  0.5076  0.5034  0.4550  0.4297  0.4283
[33 : 48]:	0.3630  0.3566  0.3387  0.3288  0.3115  0.2933  0.2817  0.2635  0.2568  0.2021  0.1821  0.1615  0.1101  0.0837  0.0835  0.0515
[49 : 52]:	0.0377  0.0192  0.0181  0.0008
2024-04-29 10:28:05 [INFO] [evolutionary_search.cc:727] Got 52 candidate(s) with evolutionary search
2024-04-29 10:28:05 [INFO] [evolutionary_search.cc:730] Sending 52 candidates(s) for measurement
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #1: GFLOPs: 7.2860. Time: 110.1857 us. Best GFLOPs: 7.2860
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #2: GFLOPs: 9.2739. Time: 86.5672 us. Best GFLOPs: 9.2739
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #3: GFLOPs: 8.7523. Time: 91.7264 us. Best GFLOPs: 9.2739
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #4: GFLOPs: 2.4859. Time: 322.9421 us. Best GFLOPs: 9.2739
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #5: GFLOPs: 24.6156. Time: 32.6142 us. Best GFLOPs: 24.6156
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #6: GFLOPs: 7.1207. Time: 112.7438 us. Best GFLOPs: 24.6156
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #7: GFLOPs: 25.9325. Time: 30.9579 us. Best GFLOPs: 25.9325
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #8: GFLOPs: 16.7578. Time: 47.9071 us. Best GFLOPs: 25.9325
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #9: GFLOPs: 24.6435. Time: 32.5772 us. Best GFLOPs: 25.9325
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #10: GFLOPs: 8.0440. Time: 99.8027 us. Best GFLOPs: 25.9325
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #11: GFLOPs: 12.6449. Time: 63.4894 us. Best GFLOPs: 25.9325
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #12: GFLOPs: 22.2413. Time: 36.0957 us. Best GFLOPs: 25.9325
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #13: GFLOPs: 23.7044. Time: 33.8678 us. Best GFLOPs: 25.9325
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #14: GFLOPs: 2.1864. Time: 367.1849 us. Best GFLOPs: 25.9325
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #15: GFLOPs: 1.7760. Time: 452.0397 us. Best GFLOPs: 25.9325
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #16: GFLOPs: 17.8768. Time: 44.9084 us. Best GFLOPs: 25.9325
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #17: GFLOPs: 5.9451. Time: 135.0374 us. Best GFLOPs: 25.9325
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #18: GFLOPs: 16.4503. Time: 48.8026 us. Best GFLOPs: 25.9325
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #19: GFLOPs: 20.9463. Time: 38.3274 us. Best GFLOPs: 25.9325
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #20: GFLOPs: 4.0415. Time: 198.6429 us. Best GFLOPs: 25.9325
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #21: GFLOPs: 27.3139. Time: 29.3922 us. Best GFLOPs: 27.3139
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #22: GFLOPs: 3.2393. Time: 247.8392 us. Best GFLOPs: 27.3139
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #23: GFLOPs: 16.4960. Time: 48.6674 us. Best GFLOPs: 27.3139
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #24: GFLOPs: 22.7306. Time: 35.3188 us. Best GFLOPs: 27.3139
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #25: GFLOPs: 46.4913. Time: 17.2681 us. Best GFLOPs: 46.4913
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #26: GFLOPs: 47.7442. Time: 16.8149 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #27: GFLOPs: 2.0501. Time: 391.5961 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #28: GFLOPs: 47.5046. Time: 16.8997 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #29: GFLOPs: 16.1040. Time: 49.8521 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #30: GFLOPs: 44.4433. Time: 18.0638 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #31: GFLOPs: 24.4273. Time: 32.8655 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #32: GFLOPs: 9.7984. Time: 81.9335 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #33: GFLOPs: 25.0388. Time: 32.0629 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #34: GFLOPs: 24.9693. Time: 32.1521 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #35: GFLOPs: 12.9086. Time: 62.1923 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #36: GFLOPs: 14.8122. Time: 54.1997 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #37: GFLOPs: 15.9896. Time: 50.2085 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #38: GFLOPs: 15.9500. Time: 50.3332 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #39: GFLOPs: 22.2314. Time: 36.1118 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #40: GFLOPs: 9.7331. Time: 82.4831 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #41: GFLOPs: 17.3407. Time: 46.2967 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #42: GFLOPs: 8.5915. Time: 93.4427 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #43: GFLOPs: 13.7388. Time: 58.4343 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #44: GFLOPs: 11.2197. Time: 71.5539 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #45: GFLOPs: 24.6520. Time: 32.5659 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #46: GFLOPs: 19.6979. Time: 40.7563 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #47: GFLOPs: 3.2334. Time: 248.2893 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #48: GFLOPs: 28.4895. Time: 28.1794 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #49: GFLOPs: 13.4129. Time: 59.8540 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #50: GFLOPs: 3.8637. Time: 207.7823 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #51: GFLOPs: 13.1302. Time: 61.1429 us. Best GFLOPs: 47.7442
2024-04-29 11:11:21 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_max_pool2d_2] Trial #52: GFLOPs: 20.4958. Time: 39.1698 us. Best GFLOPs: 47.7442
