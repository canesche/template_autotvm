2024-04-29 10:01:48 [INFO] [task_scheduler.cc:160] Initializing Task #7: "fused_nn_max_pool2d_1"
2024-04-29 10:01:48 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 10:01:48 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 10:01:48 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(4), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(4)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 10:01:48 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(4), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 10:01:48 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(2), T.int64(2)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-29 10:18:48 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:18:48 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 10:18:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4f9e618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37cf3e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3676008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4f91d38)]: 0 failure(s)
2024-04-29 10:18:48 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 10:18:50 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4f9e618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37cf3e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3676008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4f91d38)]: 0 failure(s)
2024-04-29 10:18:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4f9e618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37cf3e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3676008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4f91d38)]: 0 failure(s)
2024-04-29 10:18:52 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4f9e618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37cf3e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3676008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4f91d38)]: 0 failure(s)
2024-04-29 10:18:53 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4f9e618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x37cf3e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x3676008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4f91d38)]: 0 failure(s)
2024-04-29 10:18:54 [INFO] [evolutionary_search.cc:649] Scores of the best 58 candidates:
[1 : 16]:	0.9599  0.8888  0.8856  0.8754  0.8717  0.8504  0.8483  0.8426  0.8393  0.8295  0.8221  0.8085  0.7919  0.7827  0.7625  0.7456
[17 : 32]:	0.7403  0.7167  0.7020  0.6995  0.6818  0.6374  0.6073  0.6048  0.5764  0.5200  0.5040  0.4820  0.4646  0.4423  0.3905  0.3890
[33 : 48]:	0.3692  0.3687  0.3682  0.3632  0.3409  0.3071  0.2841  0.2748  0.2657  0.2617  0.2318  0.2227  0.2165  0.1949  0.1845  0.1442
[49 : 58]:	0.1401  0.1368  0.0959  0.0667  0.0507  0.0436  0.0402  0.0289  0.0195  0.0035
2024-04-29 10:18:54 [INFO] [evolutionary_search.cc:727] Got 58 candidate(s) with evolutionary search
2024-04-29 10:18:55 [INFO] [evolutionary_search.cc:730] Sending 58 candidates(s) for measurement
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #1: GFLOPs: 0.5503. Time: 2917.6237 us. Best GFLOPs: 0.5503
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #2: GFLOPs: 6.9900. Time: 229.7032 us. Best GFLOPs: 6.9900
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #3: GFLOPs: 14.7583. Time: 108.7951 us. Best GFLOPs: 14.7583
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #4: GFLOPs: 47.3091. Time: 33.9392 us. Best GFLOPs: 47.3091
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #5: GFLOPs: 47.7267. Time: 33.6422 us. Best GFLOPs: 47.7267
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #6: GFLOPs: 6.5086. Time: 246.6936 us. Best GFLOPs: 47.7267
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #7: GFLOPs: 48.1971. Time: 33.3138 us. Best GFLOPs: 48.1971
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #8: GFLOPs: 14.3337. Time: 112.0178 us. Best GFLOPs: 48.1971
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #9: GFLOPs: 42.6693. Time: 37.6296 us. Best GFLOPs: 48.1971
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #10: GFLOPs: 17.4132. Time: 92.2077 us. Best GFLOPs: 48.1971
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #11: GFLOPs: 19.8009. Time: 81.0890 us. Best GFLOPs: 48.1971
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #12: GFLOPs: 42.8655. Time: 37.4574 us. Best GFLOPs: 48.1971
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #13: GFLOPs: 28.0231. Time: 57.2967 us. Best GFLOPs: 48.1971
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #14: GFLOPs: 48.1028. Time: 33.3792 us. Best GFLOPs: 48.1971
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #15: GFLOPs: 88.8034. Time: 18.0808 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #16: GFLOPs: 1.5260. Time: 1052.2153 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #17: GFLOPs: 9.1595. Time: 175.2975 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #18: GFLOPs: 11.8927. Time: 135.0098 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #19: GFLOPs: 42.4366. Time: 37.8360 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_max_pool2d_1] Trial #20: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(4)))
        for ax0_ax1_ax2_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(56), T.int64(64), T.int64(4)):
                with T.block("pool_max_rf_init"):
                    vrv0_rv1_fused_0 = T.axis.spatial(T.int64(4), rv0_rv1_fused_0)
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused // T.int64(56))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused % T.int64(56))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(1)):
                    with T.block("pool_max_rf_update"):
                        vrv0_rv1_fused_0 = T.axis.spatial(T.int64(4), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused // T.int64(56))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused % T.int64(56))
                        v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
        for ax0_ax1_ax2_fused in T.parallel(T.int64(112), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(56), T.int64(64)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused // T.int64(56))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused % T.int64(56))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(4)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_0 = T.axis.reduce(T.int64(4), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_fused // T.int64(56))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_fused % T.int64(56))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, l21, preserve_unit_iters=True)
sch.parallel(loop=l26)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b18)
l33 = sch.fuse(l27, l28, l29, preserve_unit_iters=True)
sch.parallel(loop=l33)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
b34 = sch.get_block(name="pool_max_rf", func_name="main")
l35, l36, l37, l38, l39 = sch.get_loops(block=b34)
b40 = sch.decompose_reduction(block=b34, loop=l39)
b41 = sch.get_block(name="pool_max", func_name="main")
l42, l43, l44, l45 = sch.get_loops(block=b41)
b46 = sch.decompose_reduction(block=b41, loop=l45)
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #21: GFLOPs: 46.2390. Time: 34.7247 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #22: GFLOPs: 42.6989. Time: 37.6036 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #23: GFLOPs: 31.5228. Time: 50.9356 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #24: GFLOPs: 8.6658. Time: 185.2829 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #25: GFLOPs: 23.5188. Time: 68.2701 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #26: GFLOPs: 48.2016. Time: 33.3108 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #27: GFLOPs: 31.1086. Time: 51.6137 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #28: GFLOPs: 1.6394. Time: 979.4190 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #29: GFLOPs: 46.1650. Time: 34.7803 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #30: GFLOPs: 18.2179. Time: 88.1348 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #31: GFLOPs: 1.4397. Time: 1115.2678 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #32: GFLOPs: 10.1293. Time: 158.5129 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #33: GFLOPs: 1.2204. Time: 1315.6077 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #34: GFLOPs: 30.5067. Time: 52.6321 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #35: GFLOPs: 14.3325. Time: 112.0276 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #36: GFLOPs: 1.0864. Time: 1477.9930 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #37: GFLOPs: 23.6453. Time: 67.9050 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #38: GFLOPs: 42.4692. Time: 37.8070 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #39: GFLOPs: 12.6568. Time: 126.8591 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #40: GFLOPs: 10.3787. Time: 154.7047 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #41: GFLOPs: 0.4642. Time: 3458.7205 us. Best GFLOPs: 88.8034
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #42: GFLOPs: 90.4594. Time: 17.7498 us. Best GFLOPs: 90.4594
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #43: GFLOPs: 1.3106. Time: 1225.0746 us. Best GFLOPs: 90.4594
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #44: GFLOPs: 20.0638. Time: 80.0263 us. Best GFLOPs: 90.4594
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #45: GFLOPs: 23.6459. Time: 67.9032 us. Best GFLOPs: 90.4594
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #46: GFLOPs: 16.9727. Time: 94.6009 us. Best GFLOPs: 90.4594
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #47: GFLOPs: 11.9871. Time: 133.9467 us. Best GFLOPs: 90.4594
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #48: GFLOPs: 6.8950. Time: 232.8683 us. Best GFLOPs: 90.4594
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #49: GFLOPs: 23.8290. Time: 67.3814 us. Best GFLOPs: 90.4594
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #50: GFLOPs: 36.9757. Time: 43.4239 us. Best GFLOPs: 90.4594
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #51: GFLOPs: 11.9738. Time: 134.0957 us. Best GFLOPs: 90.4594
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #52: GFLOPs: 49.0581. Time: 32.7292 us. Best GFLOPs: 90.4594
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #53: GFLOPs: 9.9056. Time: 162.0929 us. Best GFLOPs: 90.4594
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_max_pool2d_1] Trial #54: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(64)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(56), T.int64(56), T.int64(64), T.int64(4)))
        for ax0_ax1_ax2_ax3_fused in T.parallel(T.int64(6272), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax4, rv0_rv1_fused_0 in T.grid(T.int64(64), T.int64(4)):
                with T.block("pool_max_rf_init"):
                    vrv0_rv1_fused_0 = T.axis.spatial(T.int64(4), rv0_rv1_fused_0)
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                    v_ax4 = T.axis.spatial(T.int64(64), ax4)
                    T.reads()
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(1)):
                    with T.block("pool_max_rf_update"):
                        vrv0_rv1_fused_0 = T.axis.spatial(T.int64(4), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                        v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SR", [ax4, rv0_rv1_fused_1])
                        T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
        for ax0_ax1_ax2_ax3_fused in T.parallel(T.int64(6272), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax4 in range(T.int64(64)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                    v_ax4 = T.axis.spatial(T.int64(64), ax4)
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(4)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_0 = T.axis.reduce(T.int64(4), rv0_rv1_fused_0)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                        v_ax4 = T.axis.spatial(T.int64(64), ax4)
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, l21, l22, preserve_unit_iters=True)
sch.parallel(loop=l26)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b18)
l33 = sch.fuse(l27, l28, l29, l30, preserve_unit_iters=True)
sch.parallel(loop=l33)
sch.annotate(block_or_loop=l33, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l33, ann_key="pragma_unroll_explicit", ann_val=1)
b34 = sch.get_block(name="pool_max_rf", func_name="main")
l35, l36, l37, l38 = sch.get_loops(block=b34)
b39 = sch.decompose_reduction(block=b34, loop=l38)
b40 = sch.get_block(name="pool_max", func_name="main")
l41, l42, l43 = sch.get_loops(block=b40)
b44 = sch.decompose_reduction(block=b40, loop=l43)
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #55: GFLOPs: 8.9616. Time: 179.1679 us. Best GFLOPs: 90.4594
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #56: GFLOPs: 16.6568. Time: 96.3948 us. Best GFLOPs: 90.4594
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #57: GFLOPs: 8.6002. Time: 186.6978 us. Best GFLOPs: 90.4594
2024-04-29 11:11:11 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_max_pool2d_1] Trial #58: GFLOPs: 89.6170. Time: 17.9166 us. Best GFLOPs: 90.4594
