2024-04-29 10:02:18 [INFO] [task_scheduler.cc:160] Initializing Task #17: "fused_nn_max_pool2d_3"
2024-04-29 10:02:18 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 10:02:18 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 10:02:18 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(4), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(4)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 10:02:18 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(4), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 10:02:18 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(2), T.int64(2)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-29 10:37:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:37:43 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 10:37:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b3a438)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b807d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9c70e88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x331bff8)]: 0 failure(s)
2024-04-29 10:37:44 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 10:37:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b3a438)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b807d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9c70e88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x331bff8)]: 0 failure(s)
2024-04-29 10:37:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b3a438)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b807d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9c70e88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x331bff8)]: 0 failure(s)
2024-04-29 10:37:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b3a438)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b807d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9c70e88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x331bff8)]: 0 failure(s)
2024-04-29 10:37:49 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b3a438)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3b807d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x9c70e88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x331bff8)]: 0 failure(s)
2024-04-29 10:37:50 [INFO] [evolutionary_search.cc:649] Scores of the best 56 candidates:
[1 : 16]:	0.9936  0.9918  0.9818  0.9739  0.9673  0.9495  0.9324  0.9146  0.9098  0.9039  0.9034  0.9031  0.8956  0.8745  0.8506  0.8384
[17 : 32]:	0.8276  0.8272  0.8243  0.8091  0.7748  0.7590  0.7524  0.7495  0.7295  0.6872  0.6629  0.6222  0.5933  0.5781  0.5674  0.5534
[33 : 48]:	0.5472  0.5458  0.5337  0.5096  0.4868  0.4647  0.4483  0.4265  0.4077  0.3270  0.3261  0.3256  0.2568  0.2533  0.2471  0.1911
[49 : 56]:	0.1910  0.1803  0.1634  0.0898  0.0259  0.0170  0.0129  0.0032
2024-04-29 10:37:50 [INFO] [evolutionary_search.cc:727] Got 56 candidate(s) with evolutionary search
2024-04-29 10:37:50 [INFO] [evolutionary_search.cc:730] Sending 56 candidates(s) for measurement
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #1: GFLOPs: 28.8174. Time: 13.9294 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #2: GFLOPs: 8.2864. Time: 48.4419 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #3: GFLOPs: 9.4933. Time: 42.2833 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #4: GFLOPs: 8.5157. Time: 47.1372 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #5: GFLOPs: 10.5519. Time: 38.0412 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #6: GFLOPs: 9.4697. Time: 42.3885 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #7: GFLOPs: 27.5442. Time: 14.5732 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #8: GFLOPs: 27.3930. Time: 14.6536 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #9: GFLOPs: 10.9729. Time: 36.5819 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #10: GFLOPs: 12.5863. Time: 31.8924 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #11: GFLOPs: 11.2629. Time: 35.6397 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #12: GFLOPs: 12.2566. Time: 32.7503 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #13: GFLOPs: 12.3250. Time: 32.5686 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #14: GFLOPs: 6.8943. Time: 58.2229 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #15: GFLOPs: 8.2125. Time: 48.8777 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #16: GFLOPs: 11.3029. Time: 35.5138 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #17: GFLOPs: 13.5179. Time: 29.6945 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #18: GFLOPs: 11.2603. Time: 35.6482 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #19: GFLOPs: 13.8817. Time: 28.9163 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #20: GFLOPs: 5.8314. Time: 68.8356 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #21: GFLOPs: 12.7108. Time: 31.5800 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #22: GFLOPs: 13.7879. Time: 29.1131 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #23: GFLOPs: 8.5606. Time: 46.8901 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_max_pool2d_3] Trial #24: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(4)))
        for ax0_ax1_ax2_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(14), T.int64(16)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(4)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(4), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(14))
                        v_ax2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_fused % T.int64(14))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(1)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(4)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(4), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(14))
                            v_ax2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_fused % T.int64(14))
                            v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
        for ax0_ax1_ax2_fused in T.parallel(T.int64(448), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(14), T.int64(16)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(14))
                    v_ax2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_fused % T.int64(14))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(4)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(4), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(14))
                        v_ax2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_fused % T.int64(14))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 4])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, l21, preserve_unit_iters=True)
sch.parallel(loop=l26)
l27 = sch.fuse(l25, preserve_unit_iters=True)
sch.vectorize(loop=l27)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l28, l29, l30, l31, l32, l33 = sch.get_loops(block=b18)
l34 = sch.fuse(l28, l29, l30, preserve_unit_iters=True)
sch.parallel(loop=l34)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
b35 = sch.get_block(name="pool_max_rf", func_name="main")
l36, l37, l38, l39, l40 = sch.get_loops(block=b35)
b41 = sch.decompose_reduction(block=b35, loop=l39)
b42 = sch.get_block(name="pool_max", func_name="main")
l43, l44, l45, l46 = sch.get_loops(block=b42)
b47 = sch.decompose_reduction(block=b42, loop=l46)
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #25: GFLOPs: 12.7571. Time: 31.4654 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #26: GFLOPs: 11.5861. Time: 34.6456 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #27: GFLOPs: 12.1640. Time: 32.9997 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #28: GFLOPs: 8.6511. Time: 46.3998 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #29: GFLOPs: 19.2276. Time: 20.8767 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #30: GFLOPs: 26.3884. Time: 15.2115 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #31: GFLOPs: 7.2568. Time: 55.3145 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #32: GFLOPs: 7.2796. Time: 55.1413 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #33: GFLOPs: 14.3015. Time: 28.0675 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #34: GFLOPs: 7.0847. Time: 56.6583 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #35: GFLOPs: 13.5735. Time: 29.5730 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #36: GFLOPs: 13.7643. Time: 29.1630 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #37: GFLOPs: 6.6730. Time: 60.1540 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #38: GFLOPs: 7.5981. Time: 52.8297 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #39: GFLOPs: 24.6319. Time: 16.2963 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #40: GFLOPs: 13.5350. Time: 29.6570 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #41: GFLOPs: 26.2144. Time: 15.3125 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #42: GFLOPs: 5.5918. Time: 71.7847 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #43: GFLOPs: 9.2325. Time: 43.4777 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #44: GFLOPs: 10.5642. Time: 37.9969 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #45: GFLOPs: 13.7097. Time: 29.2791 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #46: GFLOPs: 26.3908. Time: 15.2102 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #47: GFLOPs: 9.0932. Time: 44.1436 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #48: GFLOPs: 9.0559. Time: 44.3254 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #49: GFLOPs: 7.9802. Time: 50.3003 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:121] [Task #17: fused_nn_max_pool2d_3] Trial #50: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16), T.int64(4)))
        for ax0_ax1_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(14), T.int64(14), T.int64(16)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(4)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(4), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(1)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(4)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(4), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSR", [ax0_ax1_fused, ax2, ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
        for ax0_ax1_fused in T.parallel(T.int64(32), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax2, ax3, ax4 in T.grid(T.int64(14), T.int64(14), T.int64(16)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(4)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(4), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused, ax2, ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 4])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, preserve_unit_iters=True)
sch.parallel(loop=l26)
l27 = sch.fuse(l25, preserve_unit_iters=True)
sch.vectorize(loop=l27)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l28, l29, l30, l31, l32, l33 = sch.get_loops(block=b18)
l34 = sch.fuse(l28, l29, preserve_unit_iters=True)
sch.parallel(loop=l34)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
b35 = sch.get_block(name="pool_max_rf", func_name="main")
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
b42 = sch.decompose_reduction(block=b35, loop=l40)
b43 = sch.get_block(name="pool_max", func_name="main")
l44, l45, l46, l47, l48 = sch.get_loops(block=b43)
b49 = sch.decompose_reduction(block=b43, loop=l48)
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #51: GFLOPs: 10.5305. Time: 38.1185 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #52: GFLOPs: 14.1122. Time: 28.4440 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #53: GFLOPs: 6.1937. Time: 64.8095 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #54: GFLOPs: 12.0340. Time: 33.3562 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #55: GFLOPs: 5.8169. Time: 69.0068 us. Best GFLOPs: 28.8174
2024-04-29 11:11:32 [INFO] [task_scheduler.cc:131] [Task #17: fused_nn_max_pool2d_3] Trial #56: GFLOPs: 6.7944. Time: 59.0797 us. Best GFLOPs: 28.8174
