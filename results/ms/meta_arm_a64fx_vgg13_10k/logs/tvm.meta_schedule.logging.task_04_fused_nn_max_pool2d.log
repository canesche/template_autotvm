2024-04-29 10:01:36 [INFO] [task_scheduler.cc:160] Initializing Task #4: "fused_nn_max_pool2d"
2024-04-29 10:01:36 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 10:01:36 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 10:01:36 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(4), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(4)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 10:01:36 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(4), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[4, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 10:01:36 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2), T.int64(224), T.int64(224), T.int64(32)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(2), T.int64(112), T.int64(112), T.int64(32), T.int64(2), T.int64(2)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-29 10:09:26 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:09:26 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 10:09:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x377d0d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x309b088)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x30e74a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x332ff98)]: 0 failure(s)
2024-04-29 10:09:26 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 10:09:27 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x377d0d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x309b088)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x30e74a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x332ff98)]: 0 failure(s)
2024-04-29 10:09:28 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x377d0d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x309b088)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x30e74a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x332ff98)]: 0 failure(s)
2024-04-29 10:09:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x377d0d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x309b088)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x30e74a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x332ff98)]: 0 failure(s)
2024-04-29 10:09:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x377d0d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x309b088)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x30e74a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x332ff98)]: 0 failure(s)
2024-04-29 10:09:32 [INFO] [evolutionary_search.cc:649] Scores of the best 51 candidates:
[1 : 16]:	0.9729  0.9384  0.9160  0.9135  0.8831  0.8795  0.8769  0.8521  0.8361  0.8154  0.7562  0.7528  0.7346  0.7327  0.7196  0.6986
[17 : 32]:	0.6797  0.6683  0.6674  0.6539  0.6248  0.5996  0.5901  0.5727  0.5676  0.5552  0.4948  0.4759  0.4329  0.4269  0.4215  0.4047
[33 : 48]:	0.3601  0.3493  0.3394  0.3004  0.2660  0.2405  0.2365  0.2296  0.2198  0.1885  0.1805  0.1430  0.1415  0.1394  0.1350  0.1200
[49 : 51]:	0.0869  0.0793  0.0506
2024-04-29 10:09:32 [INFO] [evolutionary_search.cc:727] Got 51 candidate(s) with evolutionary search
2024-04-29 10:09:32 [INFO] [evolutionary_search.cc:730] Sending 51 candidates(s) for measurement
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #1: GFLOPs: 31.5026. Time: 101.9364 us. Best GFLOPs: 31.5026
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #2: GFLOPs: 30.3980. Time: 105.6407 us. Best GFLOPs: 31.5026
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #3: GFLOPs: 5.2478. Time: 611.9284 us. Best GFLOPs: 31.5026
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #4: GFLOPs: 64.7078. Time: 49.6272 us. Best GFLOPs: 64.7078
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #5: GFLOPs: 75.8417. Time: 42.3417 us. Best GFLOPs: 75.8417
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #6: GFLOPs: 6.7801. Time: 473.6310 us. Best GFLOPs: 75.8417
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #7: GFLOPs: 5.4026. Time: 594.3922 us. Best GFLOPs: 75.8417
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #8: GFLOPs: 25.6880. Time: 125.0105 us. Best GFLOPs: 75.8417
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #9: GFLOPs: 54.1264. Time: 59.3289 us. Best GFLOPs: 75.8417
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #10: GFLOPs: 72.6418. Time: 44.2068 us. Best GFLOPs: 75.8417
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #11: GFLOPs: 20.7487. Time: 154.7697 us. Best GFLOPs: 75.8417
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #12: GFLOPs: 60.0721. Time: 53.4568 us. Best GFLOPs: 75.8417
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #13: GFLOPs: 41.6481. Time: 77.1047 us. Best GFLOPs: 75.8417
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #14: GFLOPs: 12.6779. Time: 253.2963 us. Best GFLOPs: 75.8417
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #15: GFLOPs: 19.9781. Time: 160.7396 us. Best GFLOPs: 75.8417
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #16: GFLOPs: 1.8739. Time: 1713.6845 us. Best GFLOPs: 75.8417
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #17: GFLOPs: 4.8638. Time: 660.2331 us. Best GFLOPs: 75.8417
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #18: GFLOPs: 12.7842. Time: 251.1901 us. Best GFLOPs: 75.8417
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #19: GFLOPs: 64.6139. Time: 49.6993 us. Best GFLOPs: 75.8417
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #20: GFLOPs: 5.4111. Time: 593.4583 us. Best GFLOPs: 75.8417
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #21: GFLOPs: 0.7635. Time: 4205.7315 us. Best GFLOPs: 75.8417
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #22: GFLOPs: 10.4459. Time: 307.4180 us. Best GFLOPs: 75.8417
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #23: GFLOPs: 26.4218. Time: 121.5382 us. Best GFLOPs: 75.8417
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #24: GFLOPs: 73.6919. Time: 43.5769 us. Best GFLOPs: 75.8417
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #25: GFLOPs: 137.1973. Time: 23.4062 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #26: GFLOPs: 100.7449. Time: 31.8752 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #27: GFLOPs: 0.3560. Time: 9019.8560 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #28: GFLOPs: 59.8005. Time: 53.6996 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #29: GFLOPs: 136.1757. Time: 23.5818 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #30: GFLOPs: 17.2167. Time: 186.5198 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #31: GFLOPs: 72.2988. Time: 44.4166 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #32: GFLOPs: 28.0720. Time: 114.3940 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #33: GFLOPs: 12.6295. Time: 254.2661 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #34: GFLOPs: 134.3522. Time: 23.9018 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #35: GFLOPs: 53.0091. Time: 60.5795 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #36: GFLOPs: 136.6857. Time: 23.4938 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #37: GFLOPs: 22.4476. Time: 143.0563 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #38: GFLOPs: 35.3219. Time: 90.9144 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #39: GFLOPs: 0.9202. Time: 3489.6418 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #40: GFLOPs: 1.4854. Time: 2161.8600 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #41: GFLOPs: 40.5473. Time: 79.1980 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #42: GFLOPs: 64.7358. Time: 49.6057 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #43: GFLOPs: 12.5451. Time: 255.9774 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #44: GFLOPs: 18.4258. Time: 174.2812 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #45: GFLOPs: 1.1382. Time: 2821.3230 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #46: GFLOPs: 1.0204. Time: 3147.0538 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #47: GFLOPs: 1.5552. Time: 2064.8990 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #48: GFLOPs: 24.4472. Time: 131.3549 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #49: GFLOPs: 50.6112. Time: 63.4497 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #50: GFLOPs: 26.9932. Time: 118.9657 us. Best GFLOPs: 137.1973
2024-04-29 11:11:05 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d] Trial #51: GFLOPs: 10.6096. Time: 302.6742 us. Best GFLOPs: 137.1973
