2024-04-29 10:02:27 [INFO] [task_scheduler.cc:160] Initializing Task #20: "fused_nn_max_pool2d_4"
2024-04-29 10:02:27 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-29 10:02:27 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 10:02:27 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(1), T.int64(4)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 4])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 10:02:27 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(4)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(1), T.int64(4)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(4) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(4)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 4])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-04-29 10:02:27 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(2), T.int64(2)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-04-29 10:41:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 10:41:54 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 10:41:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x382e8e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x376dd08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x330e828)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4fbaba8)]: 0 failure(s)
2024-04-29 10:41:54 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 10:41:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x382e8e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x376dd08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x330e828)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4fbaba8)]: 0 failure(s)
2024-04-29 10:41:56 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x382e8e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x376dd08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x330e828)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4fbaba8)]: 0 failure(s)
2024-04-29 10:41:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x382e8e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x376dd08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x330e828)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4fbaba8)]: 0 failure(s)
2024-04-29 10:41:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x382e8e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x376dd08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x330e828)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4fbaba8)]: 0 failure(s)
2024-04-29 10:42:00 [INFO] [evolutionary_search.cc:649] Scores of the best 61 candidates:
[1 : 16]:	0.9911  0.9801  0.9600  0.9341  0.9262  0.8873  0.8706  0.8701  0.8529  0.8495  0.8477  0.8202  0.8141  0.7929  0.7915  0.7907
[17 : 32]:	0.7322  0.7291  0.7224  0.7122  0.7114  0.6808  0.6654  0.6650  0.6482  0.6159  0.6014  0.5992  0.5819  0.5810  0.5758  0.5750
[33 : 48]:	0.5572  0.5473  0.5410  0.5247  0.5059  0.4959  0.4706  0.4588  0.4334  0.4186  0.4069  0.3641  0.3570  0.3558  0.3455  0.3332
[49 : 61]:	0.3224  0.3130  0.3125  0.2829  0.2757  0.2713  0.2659  0.2340  0.2056  0.1822  0.1780  0.1692  0.0462
2024-04-29 10:42:00 [INFO] [evolutionary_search.cc:727] Got 61 candidate(s) with evolutionary search
2024-04-29 10:42:00 [INFO] [evolutionary_search.cc:730] Sending 61 candidates(s) for measurement
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #1: GFLOPs: 1.8119. Time: 55.3863 us. Best GFLOPs: 1.8119
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #2: GFLOPs: 4.5523. Time: 22.0441 us. Best GFLOPs: 4.5523
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #3: GFLOPs: 4.8468. Time: 20.7047 us. Best GFLOPs: 4.8468
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #4: GFLOPs: 3.4428. Time: 29.1484 us. Best GFLOPs: 4.8468
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #5: GFLOPs: 4.0987. Time: 24.4837 us. Best GFLOPs: 4.8468
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #6: GFLOPs: 4.7274. Time: 21.2279 us. Best GFLOPs: 4.8468
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #7: GFLOPs: 3.3791. Time: 29.6982 us. Best GFLOPs: 4.8468
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_max_pool2d_4] Trial #8: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(14), T.int64(14), T.int64(16)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7), T.int64(16), T.int64(2)))
        for ax0_ax1_ax2_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(7), T.int64(16)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(2)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(2), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(7))
                        v_ax2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_fused % T.int64(7))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(2)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(2)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(2), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(7))
                            v_ax2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_fused % T.int64(7))
                            v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSR", [ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) // T.int64(2), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(2) + vrv0_rv1_fused_1) % T.int64(2), v_ax4])
        for ax0_ax1_ax2_fused in T.parallel(T.int64(224), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax3, ax4 in T.grid(T.int64(7), T.int64(16)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(7))
                    v_ax2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_fused % T.int64(7))
                    v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(2)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(2), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_fused // T.int64(7))
                        v_ax2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_fused % T.int64(7))
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[2, 2])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
sch.enter_postproc()
b16 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b16, ann_key="meta_schedule.unroll_explicit")
b17, b18 = sch.get_child_blocks(b16)
l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b17)
l26 = sch.fuse(l19, l20, l21, preserve_unit_iters=True)
sch.parallel(loop=l26)
l27 = sch.fuse(l25, preserve_unit_iters=True)
sch.vectorize(loop=l27)
sch.annotate(block_or_loop=l26, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l26, ann_key="pragma_unroll_explicit", ann_val=1)
l28, l29, l30, l31, l32, l33 = sch.get_loops(block=b18)
l34 = sch.fuse(l28, l29, l30, preserve_unit_iters=True)
sch.parallel(loop=l34)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
b35 = sch.get_block(name="pool_max_rf", func_name="main")
l36, l37, l38, l39, l40 = sch.get_loops(block=b35)
b41 = sch.decompose_reduction(block=b35, loop=l39)
b42 = sch.get_block(name="pool_max", func_name="main")
l43, l44, l45, l46 = sch.get_loops(block=b42)
b47 = sch.decompose_reduction(block=b42, loop=l46)
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #9: GFLOPs: 4.2913. Time: 23.3847 us. Best GFLOPs: 4.8468
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #10: GFLOPs: 4.7570. Time: 21.0957 us. Best GFLOPs: 4.8468
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #11: GFLOPs: 4.5132. Time: 22.2351 us. Best GFLOPs: 4.8468
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #12: GFLOPs: 4.1501. Time: 24.1807 us. Best GFLOPs: 4.8468
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #13: GFLOPs: 10.0301. Time: 10.0051 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #14: GFLOPs: 4.3681. Time: 22.9736 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #15: GFLOPs: 3.6669. Time: 27.3670 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #16: GFLOPs: 1.5927. Time: 63.0087 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #17: GFLOPs: 3.4658. Time: 28.9549 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #18: GFLOPs: 4.1220. Time: 24.3455 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #19: GFLOPs: 8.7003. Time: 11.5343 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #20: GFLOPs: 0.9798. Time: 102.4230 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #21: GFLOPs: 9.8766. Time: 10.1605 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #22: GFLOPs: 4.2871. Time: 23.4080 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #23: GFLOPs: 1.6410. Time: 61.1545 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #24: GFLOPs: 4.4859. Time: 22.3704 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #25: GFLOPs: 3.9586. Time: 25.3501 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #26: GFLOPs: 4.9255. Time: 20.3740 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #27: GFLOPs: 4.3116. Time: 23.2748 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #28: GFLOPs: 3.5194. Time: 28.5139 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #29: GFLOPs: 4.6751. Time: 21.4650 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #30: GFLOPs: 1.7711. Time: 56.6623 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #31: GFLOPs: 3.0058. Time: 33.3861 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #32: GFLOPs: 5.0658. Time: 19.8099 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #33: GFLOPs: 4.0825. Time: 24.5813 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #34: GFLOPs: 3.7572. Time: 26.7090 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #35: GFLOPs: 2.7565. Time: 36.4054 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #36: GFLOPs: 5.1656. Time: 19.4270 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #37: GFLOPs: 4.6183. Time: 21.7291 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #38: GFLOPs: 4.7081. Time: 21.3150 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #39: GFLOPs: 4.1934. Time: 23.9307 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #40: GFLOPs: 4.1846. Time: 23.9811 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #41: GFLOPs: 4.8844. Time: 20.5455 us. Best GFLOPs: 10.0301
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #42: GFLOPs: 10.3188. Time: 9.7251 us. Best GFLOPs: 10.3188
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #43: GFLOPs: 4.5908. Time: 21.8595 us. Best GFLOPs: 10.3188
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #44: GFLOPs: 4.3132. Time: 23.2661 us. Best GFLOPs: 10.3188
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #45: GFLOPs: 3.9328. Time: 25.5168 us. Best GFLOPs: 10.3188
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #46: GFLOPs: 4.1016. Time: 24.4663 us. Best GFLOPs: 10.3188
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #47: GFLOPs: 9.1259. Time: 10.9964 us. Best GFLOPs: 10.3188
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #48: GFLOPs: 3.4197. Time: 29.3449 us. Best GFLOPs: 10.3188
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #49: GFLOPs: 3.4913. Time: 28.7438 us. Best GFLOPs: 10.3188
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #50: GFLOPs: 8.4832. Time: 11.8294 us. Best GFLOPs: 10.3188
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #51: GFLOPs: 3.6292. Time: 27.6510 us. Best GFLOPs: 10.3188
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #52: GFLOPs: 4.5795. Time: 21.9131 us. Best GFLOPs: 10.3188
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #53: GFLOPs: 5.0025. Time: 20.0606 us. Best GFLOPs: 10.3188
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #54: GFLOPs: 4.1730. Time: 24.0482 us. Best GFLOPs: 10.3188
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #55: GFLOPs: 4.2265. Time: 23.7434 us. Best GFLOPs: 10.3188
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #56: GFLOPs: 3.9846. Time: 25.1848 us. Best GFLOPs: 10.3188
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #57: GFLOPs: 4.2839. Time: 23.4252 us. Best GFLOPs: 10.3188
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #58: GFLOPs: 10.4444. Time: 9.6082 us. Best GFLOPs: 10.4444
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #59: GFLOPs: 10.3805. Time: 9.6674 us. Best GFLOPs: 10.4444
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #60: GFLOPs: 4.7888. Time: 20.9554 us. Best GFLOPs: 10.4444
2024-04-29 11:11:40 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_max_pool2d_4] Trial #61: GFLOPs: 4.7592. Time: 21.0859 us. Best GFLOPs: 10.4444
