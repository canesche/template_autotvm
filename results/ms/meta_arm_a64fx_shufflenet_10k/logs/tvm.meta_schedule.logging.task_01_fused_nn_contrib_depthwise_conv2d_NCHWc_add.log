2024-04-28 20:37:22 [INFO] [task_scheduler.cc:160] Initializing Task #1: "fused_nn_contrib_depthwise_conv2d_NCHWc_add"
2024-04-28 20:37:22 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(9), T.int64(9), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(58), T.int64(9), T.int64(9), T.int64(4)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b, oco, oh, ow, oci, kh, kw in T.grid(T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_oco, v_oh, v_ow, v_oci, v_kh, v_kw = T.axis.remap("SSSSSRR", [b, oco, oh, ow, oci, kh, kw])
                T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                with T.init():
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
2024-04-28 20:37:23 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:37:23 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(9), T.int64(9), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)))
            for b_0, oco_0, oh_0 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(58), T.int64(3), T.int64(9), T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(9), oh_0 + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(58), oco_0 * T.int64(58) + oco_1 * T.int64(58) + oco_2 * T.int64(29) + oco_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_0 + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)):
                with T.block("T_add"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 29])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v58 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v58)
l59 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l59, preserve_unit_loops=True, index=-1)
2024-04-28 20:37:23 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(9), T.int64(9), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(58), T.int64(3), T.int64(3), T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(9), oh_0 + ax2)
                        v_i3 = T.axis.spatial(T.int64(9), ow_1 + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oci_1 in range(T.int64(4)):
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(58), oco_0 * T.int64(58) + oco_1 * T.int64(58) + oco_2 * T.int64(29) + oco_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(58), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("T_add"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(7), oh_0 + ax2)
                            v_ax3 = T.axis.spatial(T.int64(7), ow_1 + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), oci_1 + ax4)
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 29])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
2024-04-28 20:37:23 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(9), T.int64(9), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)))
            for b_0, oco_0, oh_0 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(58), T.int64(3), T.int64(9), T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(9), oh_0 + ax2)
                        v_i3, v_i4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_0, oci_0 in T.grid(T.int64(1), T.int64(1)):
                    for b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(58), oco_0 * T.int64(58) + oco_1 * T.int64(58) + oco_2 * T.int64(29) + oco_3)
                            v_oh = T.axis.spatial(T.int64(7), oh_0 + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(7), ow_0 * T.int64(7) + ow_1 + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(58), T.int64(1), T.int64(7), T.int64(4)):
                        with T.block("T_add"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(7), oh_0 + ax2)
                            v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 29])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 1])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 4, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:55 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:38:55 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:39:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52c7478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x39f9ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34b8848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3916358)]: 0 failure(s)
2024-04-28 20:39:00 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 20:39:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52c7478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x39f9ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34b8848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3916358)]: 0 failure(s)
2024-04-28 20:39:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52c7478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x39f9ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34b8848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3916358)]: 0 failure(s)
2024-04-28 20:39:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52c7478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x39f9ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34b8848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3916358)]: 0 failure(s)
2024-04-28 20:39:22 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52c7478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x39f9ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34b8848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3916358)]: 0 failure(s)
2024-04-28 20:39:23 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9990  0.9990  0.9986  0.9985  0.9980  0.9968  0.9961  0.9958  0.9957  0.9950  0.9949  0.9948  0.9942  0.9922  0.9922
[17 : 32]:	0.9912  0.9910  0.9907  0.9905  0.9899  0.9888  0.9886  0.9886  0.9880  0.9880  0.9879  0.9878  0.9854  0.9854  0.9849  0.9846
[33 : 48]:	0.9845  0.9844  0.9843  0.9840  0.9832  0.9831  0.9829  0.9828  0.9824  0.9814  0.9813  0.9803  0.9795  0.9787  0.9786  0.9780
[49 : 64]:	0.9780  0.9769  0.9761  0.9750  0.9750  0.9747  0.9735  0.9733  0.9725  0.9724  0.9723  0.9719  0.9716  0.9707  0.9707  0.9703
2024-04-28 20:39:23 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:39:23 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #1: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(9), T.int64(9), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(522)):
            for i3_i4_fused in T.vectorized(T.int64(36)):
                with T.block("PaddedInput"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(58), i0_i1_i2_fused // T.int64(9))
                    v_i2 = T.axis.spatial(T.int64(9), i0_i1_i2_fused % T.int64(9))
                    v_i3 = T.axis.spatial(T.int64(9), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                    PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused in T.parallel(T.int64(98), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(58), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("DepthwiseConv2d_init"):
                    v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                    v_oco = T.axis.spatial(T.int64(58), oco_2_init + oco_3_init)
                    v_oh = T.axis.spatial(T.int64(7), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(14) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(7), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(14) // T.int64(2) + ow_2_init + ow_3_init)
                    v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) * T.int64(2) + oci_2_init + oci_3_init)
                    T.reads()
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(58), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("DepthwiseConv2d_update"):
                    v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                    v_oco = T.axis.spatial(T.int64(58), oco_2 + oco_3)
                    v_oh = T.axis.spatial(T.int64(7), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(14) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(7), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(14) // T.int64(2) + ow_2 + ow_3)
                    v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) * T.int64(2) + oci_2 + oci_3)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(178)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_add"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(58), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(196))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(196) // T.int64(28))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(28) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.where(ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1 < T.int64(11368))
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 58, 1])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 1])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v58 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v58)
l59 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l59, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b60 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.unroll_explicit")
b61, b62, b63 = sch.get_child_blocks(b60)
l64, l65, l66, l67, l68 = sch.get_loops(block=b61)
l69 = sch.fuse(l64, l65, l66, preserve_unit_iters=True)
sch.parallel(loop=l69)
l70 = sch.fuse(l67, l68, preserve_unit_iters=True)
sch.vectorize(loop=l70)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b62)
l95 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l95)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100 = sch.get_loops(block=b63)
l101 = sch.fuse(l96, l97, l98, l99, l100, preserve_unit_iters=True)
l102, l103 = sch.split(loop=l101, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l102)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b104)
b120 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #2: GFLOPs: 2.6541. Time: 81.3794 us. Best GFLOPs: 2.6541
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #3: GFLOPs: 2.4454. Time: 88.3271 us. Best GFLOPs: 2.6541
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #4: GFLOPs: 4.8089. Time: 44.9151 us. Best GFLOPs: 4.8089
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #5: GFLOPs: 6.8289. Time: 31.6292 us. Best GFLOPs: 6.8289
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #6: GFLOPs: 3.1231. Time: 69.1602 us. Best GFLOPs: 6.8289
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #7: GFLOPs: 13.3087. Time: 16.2294 us. Best GFLOPs: 13.3087
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #8: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(58), oco_1 * T.int64(58) + oco_2_init * T.int64(29) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused + oci_1 + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(58), oco_1 * T.int64(58) + oco_2 * T.int64(29) + oco_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused + oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(8) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(8), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(1)):
                with T.block("T_add"):
                    v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                    v_ax4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused + ax4)
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 2, 29])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[4, 1, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 1])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63 = sch.get_child_blocks(b61)
l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b62)
l88 = sch.fuse(l64, l65, l66, l67, l68, preserve_unit_iters=True)
sch.parallel(loop=l88)
sch.annotate(block_or_loop=l88, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l88, ann_key="pragma_unroll_explicit", ann_val=1)
l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b63)
b95 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b95)
b116 = sch.decompose_reduction(block=b95, loop=l102)
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #9: GFLOPs: 1.9312. Time: 111.8439 us. Best GFLOPs: 13.3087
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #10: GFLOPs: 8.7962. Time: 24.5550 us. Best GFLOPs: 13.3087
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #11: GFLOPs: 17.1416. Time: 12.6005 us. Best GFLOPs: 17.1416
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #12: GFLOPs: 4.6714. Time: 46.2368 us. Best GFLOPs: 17.1416
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #13: GFLOPs: 1.9600. Time: 110.1973 us. Best GFLOPs: 17.1416
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #14: GFLOPs: 0.2400. Time: 900.1184 us. Best GFLOPs: 17.1416
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #15: GFLOPs: 4.1066. Time: 52.5969 us. Best GFLOPs: 17.1416
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #16: GFLOPs: 3.2925. Time: 65.6015 us. Best GFLOPs: 17.1416
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #17: GFLOPs: 3.6356. Time: 59.4109 us. Best GFLOPs: 17.1416
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #18: GFLOPs: 6.5220. Time: 33.1173 us. Best GFLOPs: 17.1416
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #19: GFLOPs: 2.1412. Time: 100.8766 us. Best GFLOPs: 17.1416
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #20: GFLOPs: 4.7621. Time: 45.3565 us. Best GFLOPs: 17.1416
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #21: GFLOPs: 1.7307. Time: 124.8013 us. Best GFLOPs: 17.1416
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #22: GFLOPs: 17.9612. Time: 12.0255 us. Best GFLOPs: 17.9612
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #23: GFLOPs: 7.5625. Time: 28.5609 us. Best GFLOPs: 17.9612
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #24: GFLOPs: 3.6743. Time: 58.7847 us. Best GFLOPs: 17.9612
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #25: GFLOPs: 7.0910. Time: 30.4600 us. Best GFLOPs: 17.9612
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #26: GFLOPs: 4.1672. Time: 51.8310 us. Best GFLOPs: 17.9612
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #27: GFLOPs: 2.7863. Time: 77.5203 us. Best GFLOPs: 17.9612
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #28: GFLOPs: 7.2676. Time: 29.7200 us. Best GFLOPs: 17.9612
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #29: GFLOPs: 11.9971. Time: 18.0037 us. Best GFLOPs: 17.9612
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #30: GFLOPs: 6.1449. Time: 35.1498 us. Best GFLOPs: 17.9612
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #31: GFLOPs: 6.4503. Time: 33.4857 us. Best GFLOPs: 17.9612
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #32: GFLOPs: 6.0804. Time: 35.5226 us. Best GFLOPs: 17.9612
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #33: GFLOPs: 5.1482. Time: 41.9547 us. Best GFLOPs: 17.9612
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #34: GFLOPs: 3.3688. Time: 64.1147 us. Best GFLOPs: 17.9612
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #35: GFLOPs: 15.7558. Time: 13.7087 us. Best GFLOPs: 17.9612
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #36: GFLOPs: 20.8378. Time: 10.3654 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #37: GFLOPs: 16.2019. Time: 13.3312 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #38: GFLOPs: 6.0907. Time: 35.4623 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #39: GFLOPs: 8.8578. Time: 24.3845 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #40: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(9), T.int64(9), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(522)):
            for i3_i4_fused in T.vectorized(T.int64(36)):
                with T.block("PaddedInput"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(58), i0_i1_i2_fused // T.int64(9))
                    v_i2 = T.axis.spatial(T.int64(9), i0_i1_i2_fused % T.int64(9))
                    v_i3 = T.axis.spatial(T.int64(9), i3_i4_fused // T.int64(4))
                    v_i4 = T.axis.spatial(T.int64(4), i3_i4_fused % T.int64(4))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                    PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(58), T.int64(1), T.int64(7)):
                for oci_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(58), oco_2_init * T.int64(58) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(7), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_2_init * T.int64(7) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) * T.int64(2) + oci_2_init * T.int64(2) + oci_3_fused_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(58), T.int64(1), T.int64(7)):
                for oci_3_fused in T.vectorized(T.int64(2)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(58), oco_2 * T.int64(58) + oco_3)
                        v_oh = T.axis.spatial(T.int64(7), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_2 * T.int64(7) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) * T.int64(2) + oci_2 * T.int64(2) + oci_3_fused)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(58), T.int64(1), T.int64(7)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_add"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(7), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(7), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 58])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69 = sch.get_loops(block=b62)
l70 = sch.fuse(l65, l66, l67, preserve_unit_iters=True)
sch.parallel(loop=l70)
l71 = sch.fuse(l68, l69, preserve_unit_iters=True)
sch.vectorize(loop=l71)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b63)
l96 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, preserve_unit_iters=True)
sch.parallel(loop=l96)
l97 = sch.fuse(l95, preserve_unit_iters=True)
sch.vectorize(loop=l97)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b64)
l104 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b105)
b121 = sch.decompose_reduction(block=b105, loop=l107)
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #41: GFLOPs: 3.7238. Time: 58.0024 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #42: GFLOPs: 4.3861. Time: 49.2451 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #43: GFLOPs: 8.9986. Time: 24.0028 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #44: GFLOPs: 1.1736. Time: 184.0377 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #45: GFLOPs: 3.5765. Time: 60.3914 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #46: GFLOPs: 13.4828. Time: 16.0198 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #47: GFLOPs: 1.5085. Time: 143.1806 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #48: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)), "float32"), p1: T.Buffer((T.int64(58), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(58), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(58), T.int64(7), T.int64(7), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(7)):
                for oci_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(58), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(2) * T.int64(29) + oco_2_init * T.int64(29) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(7), oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(7), ow_2_init * T.int64(7) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) * T.int64(2) + oci_2_init * T.int64(2) + oci_3_fused_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(29), T.int64(1), T.int64(7)):
                for oci_3_fused in T.vectorized(T.int64(2)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(58), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(2) * T.int64(29) + oco_2 * T.int64(29) + oco_3)
                        v_oh = T.axis.spatial(T.int64(7), oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(7), ow_2 * T.int64(7) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) * T.int64(2) + oci_2 * T.int64(2) + oci_3_fused)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(8) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(8), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(178)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_add"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(58), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(196))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(196) // T.int64(28))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(28) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.where(ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1 < T.int64(11368))
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 2, 1, 29])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 1, 7])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v58 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v58)
l59 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l59, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b60 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.unroll_explicit")
b61, b62 = sch.get_child_blocks(b60)
l63, l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b61)
l87 = sch.fuse(l63, l64, l65, l66, l67, l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l87)
l88 = sch.fuse(l86, preserve_unit_iters=True)
sch.vectorize(loop=l88)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l89, l90, l91, l92, l93 = sch.get_loops(block=b62)
l94 = sch.fuse(l89, l90, l91, l92, l93, preserve_unit_iters=True)
l95, l96 = sch.split(loop=l94, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l95)
sch.vectorize(loop=l96)
b97 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b97)
b113 = sch.decompose_reduction(block=b97, loop=l99)
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #49: GFLOPs: 15.9818. Time: 13.5148 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #50: GFLOPs: 4.5139. Time: 47.8506 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #51: GFLOPs: 12.2984. Time: 17.5626 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #52: GFLOPs: 0.2823. Time: 765.1581 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #53: GFLOPs: 0.9293. Time: 232.4325 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #54: GFLOPs: 18.9197. Time: 11.4163 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #55: GFLOPs: 3.4625. Time: 62.3795 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #56: GFLOPs: 1.1218. Time: 192.5432 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #57: GFLOPs: 13.3622. Time: 16.1645 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #58: GFLOPs: 3.5153. Time: 61.4436 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #59: GFLOPs: 7.4792. Time: 28.8791 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #60: GFLOPs: 6.6527. Time: 32.4666 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #61: GFLOPs: 1.7481. Time: 123.5567 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #62: GFLOPs: 3.4782. Time: 62.0987 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #63: GFLOPs: 4.7620. Time: 45.3569 us. Best GFLOPs: 20.8378
2024-04-28 21:11:31 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #64: GFLOPs: 0.6671. Time: 323.7827 us. Best GFLOPs: 20.8378
2024-04-28 23:01:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:01:30 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-28 23:01:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52c7478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x39f9ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34b8848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3916358)]: 0 failure(s)
2024-04-28 23:01:34 [INFO] [evolutionary_search.cc:723] Sampled 452 candidate(s)
2024-04-28 23:01:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52c7478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x39f9ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34b8848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3916358)]: 0 failure(s)
2024-04-28 23:01:56 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52c7478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x39f9ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34b8848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3916358)]: 0 failure(s)
2024-04-28 23:02:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52c7478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x39f9ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34b8848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3916358)]: 0 failure(s)
2024-04-28 23:02:17 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52c7478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x39f9ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34b8848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3916358)]: 0 failure(s)
2024-04-28 23:02:23 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9905  0.9814  0.9724  0.9398  0.9398  0.9398  0.9143  0.9143  0.9134  0.9134  0.9132  0.9111  0.9111  0.9040  0.8981  0.8981
[17 : 32]:	0.8948  0.8946  0.8946  0.8916  0.8916  0.8884  0.8876  0.8851  0.8819  0.8817  0.8681  0.8656  0.8629  0.8628  0.8600  0.8580
[33 : 48]:	0.8551  0.8526  0.8487  0.8469  0.8469  0.8449  0.8429  0.8429  0.8412  0.8405  0.8400  0.8392  0.8378  0.8374  0.8374  0.8369
[49 : 64]:	0.8365  0.8347  0.8347  0.8343  0.8343  0.8342  0.8340  0.8319  0.8310  0.8303  0.8277  0.8277  0.8277  0.8263  0.8243  0.8216
2024-04-28 23:02:24 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:02:24 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #65: GFLOPs: 7.9319. Time: 27.2308 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #66: GFLOPs: 19.4815. Time: 11.0870 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #67: GFLOPs: 17.5282. Time: 12.3226 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #68: GFLOPs: 13.7501. Time: 15.7084 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #69: GFLOPs: 13.9052. Time: 15.5332 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #70: GFLOPs: 13.2736. Time: 16.2722 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #71: GFLOPs: 18.2542. Time: 11.8325 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #72: GFLOPs: 14.9187. Time: 14.4780 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #73: GFLOPs: 16.9513. Time: 12.7419 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #74: GFLOPs: 15.2868. Time: 14.1293 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #75: GFLOPs: 14.1815. Time: 15.2305 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #76: GFLOPs: 17.2452. Time: 12.5248 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #77: GFLOPs: 16.6605. Time: 12.9643 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #78: GFLOPs: 15.3261. Time: 14.0930 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #79: GFLOPs: 17.3473. Time: 12.4511 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #80: GFLOPs: 18.0674. Time: 11.9548 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #81: GFLOPs: 18.0390. Time: 11.9736 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #82: GFLOPs: 15.2139. Time: 14.1970 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #83: GFLOPs: 17.4248. Time: 12.3957 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #84: GFLOPs: 16.0584. Time: 13.4504 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #85: GFLOPs: 15.9904. Time: 13.5076 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #86: GFLOPs: 13.5270. Time: 15.9674 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #87: GFLOPs: 16.3200. Time: 13.2348 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #88: GFLOPs: 19.4668. Time: 11.0954 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #89: GFLOPs: 18.3396. Time: 11.7774 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #90: GFLOPs: 19.4605. Time: 11.0990 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #91: GFLOPs: 11.7899. Time: 18.3200 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #92: GFLOPs: 20.5054. Time: 10.5334 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #93: GFLOPs: 13.0374. Time: 16.5671 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #94: GFLOPs: 14.7086. Time: 14.6848 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #95: GFLOPs: 14.8091. Time: 14.5851 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #96: GFLOPs: 17.1921. Time: 12.5635 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #97: GFLOPs: 20.0527. Time: 10.7712 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #98: GFLOPs: 18.0820. Time: 11.9451 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #99: GFLOPs: 14.7252. Time: 14.6682 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #100: GFLOPs: 16.6394. Time: 12.9808 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #101: GFLOPs: 16.0536. Time: 13.4544 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #102: GFLOPs: 18.0728. Time: 11.9512 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #103: GFLOPs: 17.7471. Time: 12.1706 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #104: GFLOPs: 17.8406. Time: 12.1068 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #105: GFLOPs: 14.3126. Time: 15.0911 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #106: GFLOPs: 14.2786. Time: 15.1269 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #107: GFLOPs: 16.7180. Time: 12.9197 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #108: GFLOPs: 18.8427. Time: 11.4629 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #109: GFLOPs: 18.9302. Time: 11.4099 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #110: GFLOPs: 17.5464. Time: 12.3098 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #111: GFLOPs: 16.3413. Time: 13.2175 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #112: GFLOPs: 17.5821. Time: 12.2847 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #113: GFLOPs: 10.8334. Time: 19.9375 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #114: GFLOPs: 17.0647. Time: 12.6573 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #115: GFLOPs: 17.5220. Time: 12.3269 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #116: GFLOPs: 18.6629. Time: 11.5733 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #117: GFLOPs: 14.8214. Time: 14.5730 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #118: GFLOPs: 17.5533. Time: 12.3049 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #119: GFLOPs: 17.0758. Time: 12.6490 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #120: GFLOPs: 16.7873. Time: 12.8664 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #121: GFLOPs: 16.7116. Time: 12.9247 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #122: GFLOPs: 17.3414. Time: 12.4553 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #123: GFLOPs: 14.4677. Time: 14.9293 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #124: GFLOPs: 14.8616. Time: 14.5336 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #125: GFLOPs: 15.2488. Time: 14.1645 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #126: GFLOPs: 6.6654. Time: 32.4048 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #127: GFLOPs: 1.6240. Time: 132.9992 us. Best GFLOPs: 20.8378
2024-04-28 23:03:50 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #128: GFLOPs: 1.0782. Time: 200.3344 us. Best GFLOPs: 20.8378
2024-04-29 00:56:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:56:32 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 00:56:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52c7478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x39f9ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34b8848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3916358)]: 0 failure(s)
2024-04-29 00:56:36 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 00:56:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52c7478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x39f9ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34b8848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3916358)]: 0 failure(s)
2024-04-29 00:56:57 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52c7478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x39f9ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34b8848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3916358)]: 0 failure(s)
2024-04-29 00:57:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52c7478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x39f9ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34b8848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3916358)]: 0 failure(s)
2024-04-29 00:57:18 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x52c7478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x39f9ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x34b8848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x3916358)]: 0 failure(s)
2024-04-29 00:57:24 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9766  0.9695  0.9564  0.9564  0.9523  0.9523  0.9445  0.9302  0.9302  0.9302  0.9302  0.9279  0.9279  0.9279  0.9266  0.9266
[17 : 32]:	0.9154  0.9088  0.9085  0.9085  0.9062  0.9031  0.9031  0.9017  0.8977  0.8965  0.8965  0.8965  0.8841  0.8828  0.8787  0.8787
[33 : 48]:	0.8757  0.8754  0.8754  0.8754  0.8713  0.8646  0.8606  0.8606  0.8606  0.8592  0.8576  0.8567  0.8563  0.8560  0.8538  0.8521
[49 : 64]:	0.8507  0.8507  0.8502  0.8498  0.8498  0.8498  0.8495  0.8479  0.8476  0.8473  0.8464  0.8445  0.8445  0.8438  0.8438  0.8434
2024-04-29 00:57:24 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:57:24 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #129: GFLOPs: 16.9423. Time: 12.7487 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #130: GFLOPs: 17.3752. Time: 12.4310 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #131: GFLOPs: 15.1248. Time: 14.2806 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #132: GFLOPs: 15.6899. Time: 13.7663 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #133: GFLOPs: 17.1892. Time: 12.5656 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #134: GFLOPs: 17.6608. Time: 12.2300 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #135: GFLOPs: 15.9429. Time: 13.5478 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #136: GFLOPs: 16.7665. Time: 12.8823 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #137: GFLOPs: 17.0084. Time: 12.6991 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #138: GFLOPs: 17.2788. Time: 12.5004 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #139: GFLOPs: 17.2160. Time: 12.5460 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #140: GFLOPs: 17.4269. Time: 12.3941 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #141: GFLOPs: 16.9315. Time: 12.7568 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #142: GFLOPs: 9.1176. Time: 23.6895 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #143: GFLOPs: 17.8350. Time: 12.1105 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #144: GFLOPs: 17.1761. Time: 12.5752 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #145: GFLOPs: 17.3061. Time: 12.4807 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #146: GFLOPs: 17.0193. Time: 12.6910 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #147: GFLOPs: 15.7904. Time: 13.6787 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #148: GFLOPs: 16.9429. Time: 12.7482 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #149: GFLOPs: 16.9539. Time: 12.7399 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #150: GFLOPs: 17.3476. Time: 12.4508 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #151: GFLOPs: 17.3625. Time: 12.4402 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #152: GFLOPs: 16.8002. Time: 12.8565 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #153: GFLOPs: 17.1712. Time: 12.5788 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #154: GFLOPs: 17.0633. Time: 12.6583 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #155: GFLOPs: 16.2494. Time: 13.2923 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #156: GFLOPs: 16.5569. Time: 13.0455 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #157: GFLOPs: 11.5226. Time: 18.7450 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #158: GFLOPs: 17.1062. Time: 12.6265 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #159: GFLOPs: 15.8124. Time: 13.6597 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #160: GFLOPs: 15.7141. Time: 13.7451 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #161: GFLOPs: 14.1701. Time: 15.2428 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #162: GFLOPs: 10.4883. Time: 20.5936 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #163: GFLOPs: 5.7378. Time: 37.6437 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #164: GFLOPs: 7.3857. Time: 29.2448 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #165: GFLOPs: 16.0007. Time: 13.4989 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #166: GFLOPs: 17.7264. Time: 12.1848 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #167: GFLOPs: 15.8242. Time: 13.6495 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #168: GFLOPs: 16.0780. Time: 13.4340 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #169: GFLOPs: 16.0129. Time: 13.4886 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #170: GFLOPs: 16.5364. Time: 13.0616 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #171: GFLOPs: 16.7386. Time: 12.9038 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #172: GFLOPs: 14.9738. Time: 14.4246 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #173: GFLOPs: 7.5868. Time: 28.4695 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #174: GFLOPs: 16.3301. Time: 13.2266 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #175: GFLOPs: 15.6879. Time: 13.7681 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #176: GFLOPs: 13.1623. Time: 16.4098 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #177: GFLOPs: 15.6784. Time: 13.7764 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #178: GFLOPs: 16.1590. Time: 13.3667 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #179: GFLOPs: 12.3914. Time: 17.4308 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #180: GFLOPs: 14.3045. Time: 15.0995 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #181: GFLOPs: 15.8555. Time: 13.6225 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #182: GFLOPs: 15.7715. Time: 13.6951 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #183: GFLOPs: 11.7893. Time: 18.3209 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #184: GFLOPs: 14.8400. Time: 14.5547 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #185: GFLOPs: 15.9404. Time: 13.5500 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #186: GFLOPs: 16.0751. Time: 13.4365 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #187: GFLOPs: 15.1144. Time: 14.2905 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #188: GFLOPs: 13.4929. Time: 16.0079 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #189: GFLOPs: 13.5006. Time: 15.9987 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #190: GFLOPs: 7.2559. Time: 29.7676 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #191: GFLOPs: 2.5235. Time: 85.5938 us. Best GFLOPs: 20.8378
2024-04-29 00:58:57 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_contrib_depthwise_conv2d_NCHWc_add] Trial #192: GFLOPs: 2.3793. Time: 90.7810 us. Best GFLOPs: 20.8378
