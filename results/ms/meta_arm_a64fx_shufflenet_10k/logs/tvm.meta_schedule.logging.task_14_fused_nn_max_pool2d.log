2024-04-28 20:38:07 [INFO] [task_scheduler.cc:160] Initializing Task #14: "fused_nn_max_pool2d"
2024-04-28 20:38:07 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(6), T.int64(112), T.int64(112), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(114), T.int64(114), T.int64(4)))
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(6), T.int64(114), T.int64(114), T.int64(4)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-04-28 20:38:07 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:38:07 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(6), T.int64(112), T.int64(112), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(114), T.int64(114), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4), T.int64(3)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4), T.int64(3)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(6), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(114), ax2 * T.int64(2) + rv0_rv1_fused_0 + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(114), ax3 * T.int64(2) + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4 + ax4_1)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for rv0_rv1_fused_1 in range(T.int64(3)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=5)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:07 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(6), T.int64(112), T.int64(112), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pad_temp = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(114), T.int64(114), T.int64(4)))
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4), T.int64(3)))
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(56), T.int64(56)):
                for ax0_1, ax1_1, ax2_1, ax3_1, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0_1)
                        v_ax1 = T.axis.spatial(T.int64(6), ax1 + ax1_1)
                        v_ax2 = T.axis.spatial(T.int64(114), ax2 * T.int64(2) + ax2_1)
                        v_ax3 = T.axis.spatial(T.int64(114), ax3 * T.int64(2) + ax3_1)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
                for ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(4), T.int64(3), T.int64(3)):
                    with T.block("pool_max_rf"):
                        vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                        T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        with T.init():
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(3) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4), T.int64(3)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[3, 3])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:07 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(6), T.int64(112), T.int64(112), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1), v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + v_rv0 and v_ax2 * T.int64(2) + v_rv0 < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + v_rv1 and v_ax3 * T.int64(2) + v_rv1 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l4, preserve_unit_loops=True, index=-1)
2024-04-28 20:54:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:54:11 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:54:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32fb338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b012a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e59ac8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x592a6d8)]: 0 failure(s)
2024-04-28 20:54:15 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 20:54:19 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32fb338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b012a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e59ac8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x592a6d8)]: 0 failure(s)
2024-04-28 20:54:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32fb338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b012a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e59ac8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x592a6d8)]: 0 failure(s)
2024-04-28 20:54:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32fb338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b012a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e59ac8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x592a6d8)]: 0 failure(s)
2024-04-28 20:54:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32fb338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b012a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e59ac8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x592a6d8)]: 0 failure(s)
2024-04-28 20:54:35 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9993  0.9958  0.9946  0.9928  0.9905  0.9874  0.9852  0.9804  0.9784  0.9655  0.9646  0.9607  0.9548  0.9539  0.9488  0.9481
[17 : 32]:	0.9480  0.9479  0.9450  0.9394  0.9325  0.9277  0.9187  0.9118  0.9062  0.9045  0.8952  0.8860  0.8812  0.8798  0.8780  0.8749
[33 : 48]:	0.8710  0.8694  0.8692  0.8687  0.8643  0.8641  0.8612  0.8578  0.8463  0.8455  0.8453  0.8424  0.8366  0.8326  0.8301  0.8293
[49 : 64]:	0.8223  0.8178  0.8176  0.8152  0.8137  0.8132  0.8115  0.8109  0.8091  0.8077  0.8069  0.7958  0.7900  0.7894  0.7864  0.7782
2024-04-28 20:54:35 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:54:35 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #1: GFLOPs: 11.7241. Time: 57.7763 us. Best GFLOPs: 11.7241
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #2: GFLOPs: 9.3139. Time: 72.7276 us. Best GFLOPs: 11.7241
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #3: GFLOPs: 14.1066. Time: 48.0183 us. Best GFLOPs: 14.1066
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #4: GFLOPs: 4.5475. Time: 148.9567 us. Best GFLOPs: 14.1066
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #5: GFLOPs: 3.7837. Time: 179.0234 us. Best GFLOPs: 14.1066
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #6: GFLOPs: 3.2624. Time: 207.6300 us. Best GFLOPs: 14.1066
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #7: GFLOPs: 11.1235. Time: 60.8961 us. Best GFLOPs: 14.1066
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #8: GFLOPs: 4.4360. Time: 152.7003 us. Best GFLOPs: 14.1066
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #9: GFLOPs: 10.6734. Time: 63.4638 us. Best GFLOPs: 14.1066
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #10: GFLOPs: 2.4547. Time: 275.9488 us. Best GFLOPs: 14.1066
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #11: GFLOPs: 13.9425. Time: 48.5834 us. Best GFLOPs: 14.1066
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #12: GFLOPs: 7.9362. Time: 85.3531 us. Best GFLOPs: 14.1066
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #13: GFLOPs: 2.3387. Time: 289.6408 us. Best GFLOPs: 14.1066
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #14: GFLOPs: 9.5479. Time: 70.9453 us. Best GFLOPs: 14.1066
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #15: GFLOPs: 4.8432. Time: 139.8607 us. Best GFLOPs: 14.1066
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #16: GFLOPs: 4.5353. Time: 149.3567 us. Best GFLOPs: 14.1066
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #17: GFLOPs: 13.8239. Time: 49.0004 us. Best GFLOPs: 14.1066
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #18: GFLOPs: 23.6423. Time: 28.6511 us. Best GFLOPs: 23.6423
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #19: GFLOPs: 13.7496. Time: 49.2650 us. Best GFLOPs: 23.6423
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #20: GFLOPs: 11.1797. Time: 60.5898 us. Best GFLOPs: 23.6423
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #21: GFLOPs: 3.7631. Time: 180.0063 us. Best GFLOPs: 23.6423
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #22: GFLOPs: 10.9765. Time: 61.7117 us. Best GFLOPs: 23.6423
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #23: GFLOPs: 7.8327. Time: 86.4804 us. Best GFLOPs: 23.6423
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #24: GFLOPs: 9.9875. Time: 67.8221 us. Best GFLOPs: 23.6423
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #25: GFLOPs: 14.0418. Time: 48.2398 us. Best GFLOPs: 23.6423
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #26: GFLOPs: 12.5218. Time: 54.0956 us. Best GFLOPs: 23.6423
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #27: GFLOPs: 4.0591. Time: 166.8772 us. Best GFLOPs: 23.6423
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #28: GFLOPs: 18.1783. Time: 37.2630 us. Best GFLOPs: 23.6423
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #29: GFLOPs: 9.0809. Time: 74.5937 us. Best GFLOPs: 23.6423
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #30: GFLOPs: 3.4394. Time: 196.9484 us. Best GFLOPs: 23.6423
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #31: GFLOPs: 6.6687. Time: 101.5758 us. Best GFLOPs: 23.6423
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #32: GFLOPs: 33.9165. Time: 19.9719 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #33: GFLOPs: 12.5807. Time: 53.8425 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #34: GFLOPs: 1.2041. Time: 562.5439 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #35: GFLOPs: 23.5789. Time: 28.7281 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #36: GFLOPs: 4.4536. Time: 152.0963 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #37: GFLOPs: 4.9115. Time: 137.9150 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #38: GFLOPs: 15.1601. Time: 44.6816 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #39: GFLOPs: 12.8297. Time: 52.7975 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #40: GFLOPs: 12.4746. Time: 54.3005 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #41: GFLOPs: 14.7212. Time: 46.0136 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #42: GFLOPs: 16.8569. Time: 40.1838 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #43: GFLOPs: 14.5738. Time: 46.4790 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #44: GFLOPs: 16.3473. Time: 41.4366 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #45: GFLOPs: 13.4660. Time: 50.3025 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #46: GFLOPs: 10.8577. Time: 62.3865 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #47: GFLOPs: 15.4686. Time: 43.7904 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #48: GFLOPs: 7.4979. Time: 90.3418 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #49: GFLOPs: 20.1041. Time: 33.6935 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #50: GFLOPs: 4.6001. Time: 147.2525 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #51: GFLOPs: 11.1892. Time: 60.5381 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #52: GFLOPs: 12.3491. Time: 54.8521 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #53: GFLOPs: 5.7037. Time: 118.7614 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #54: GFLOPs: 11.2398. Time: 60.2657 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #55: GFLOPs: 15.1102. Time: 44.8292 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #56: GFLOPs: 3.9765. Time: 170.3458 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #57: GFLOPs: 12.2083. Time: 55.4850 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #58: GFLOPs: 14.4596. Time: 46.8460 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #59: GFLOPs: 6.3243. Time: 107.1062 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #60: GFLOPs: 11.5275. Time: 58.7619 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #61: GFLOPs: 5.2681. Time: 128.5818 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #62: GFLOPs: 14.3059. Time: 47.3494 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #63: GFLOPs: 11.1266. Time: 60.8788 us. Best GFLOPs: 33.9165
2024-04-28 21:11:56 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #64: GFLOPs: 14.1617. Time: 47.8317 us. Best GFLOPs: 33.9165
2024-04-29 00:04:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:04:03 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-29 00:04:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32fb338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b012a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e59ac8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x592a6d8)]: 0 failure(s)
2024-04-29 00:04:06 [INFO] [evolutionary_search.cc:723] Sampled 448 candidate(s)
2024-04-29 00:04:13 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32fb338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b012a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e59ac8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x592a6d8)]: 0 failure(s)
2024-04-29 00:04:21 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32fb338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b012a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e59ac8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x592a6d8)]: 0 failure(s)
2024-04-29 00:04:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32fb338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b012a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e59ac8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x592a6d8)]: 0 failure(s)
2024-04-29 00:04:37 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x32fb338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4b012a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4e59ac8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x592a6d8)]: 0 failure(s)
2024-04-29 00:04:42 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9330  0.9313  0.8697  0.8090  0.6812  0.6701  0.6479  0.6113  0.5900  0.5491  0.5483  0.5438  0.5382  0.5271  0.4793  0.4731
[17 : 32]:	0.4731  0.4674  0.4674  0.4565  0.4565  0.4515  0.4515  0.4493  0.4493  0.4493  0.4465  0.4375  0.4357  0.4357  0.4320  0.4227
[33 : 48]:	0.4215  0.4208  0.4187  0.4140  0.4121  0.4111  0.4043  0.4006  0.3984  0.3919  0.3919  0.3915  0.3887  0.3887  0.3887  0.3856
[49 : 64]:	0.3842  0.3821  0.3820  0.3811  0.3771  0.3755  0.3742  0.3739  0.3738  0.3729  0.3707  0.3704  0.3699  0.3677  0.3674  0.3668
2024-04-29 00:04:42 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:04:42 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #65: GFLOPs: 6.8243. Time: 99.2601 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #66: GFLOPs: 17.8474. Time: 37.9537 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #67: GFLOPs: 15.3924. Time: 44.0071 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #68: GFLOPs: 20.5340. Time: 32.9880 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #69: GFLOPs: 19.3100. Time: 35.0791 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #70: GFLOPs: 19.2641. Time: 35.1627 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #71: GFLOPs: 3.5366. Time: 191.5321 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #72: GFLOPs: 32.0364. Time: 21.1440 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #73: GFLOPs: 19.9110. Time: 34.0201 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #74: GFLOPs: 12.8177. Time: 52.8470 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #75: GFLOPs: 12.8002. Time: 52.9193 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #76: GFLOPs: 17.2563. Time: 39.2538 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #77: GFLOPs: 13.1483. Time: 51.5183 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #78: GFLOPs: 13.8873. Time: 48.7766 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #79: GFLOPs: 11.7005. Time: 57.8929 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #80: GFLOPs: 19.0522. Time: 35.5537 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #81: GFLOPs: 19.1545. Time: 35.3638 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #82: GFLOPs: 14.0974. Time: 48.0497 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #83: GFLOPs: 14.4776. Time: 46.7880 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #84: GFLOPs: 19.9005. Time: 34.0381 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #85: GFLOPs: 20.4190. Time: 33.1738 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #86: GFLOPs: 16.0357. Time: 42.2416 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #87: GFLOPs: 16.0187. Time: 42.2867 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #88: GFLOPs: 10.0723. Time: 67.2511 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #89: GFLOPs: 15.9019. Time: 42.5972 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #90: GFLOPs: 20.0791. Time: 33.7354 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #91: GFLOPs: 14.2875. Time: 47.4104 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #92: GFLOPs: 15.8071. Time: 42.8527 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #93: GFLOPs: 13.4116. Time: 50.5067 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #94: GFLOPs: 13.5813. Time: 49.8758 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #95: GFLOPs: 14.1834. Time: 47.7583 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #96: GFLOPs: 14.0009. Time: 48.3807 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #97: GFLOPs: 6.6112. Time: 102.4586 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #98: GFLOPs: 6.9142. Time: 97.9689 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #99: GFLOPs: 4.8624. Time: 139.3095 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #100: GFLOPs: 12.1598. Time: 55.7062 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #101: GFLOPs: 12.4879. Time: 54.2427 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #102: GFLOPs: 9.7998. Time: 69.1211 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #103: GFLOPs: 13.0539. Time: 51.8907 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #104: GFLOPs: 14.3948. Time: 47.0570 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #105: GFLOPs: 13.3152. Time: 50.8723 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #106: GFLOPs: 8.7703. Time: 77.2355 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #107: GFLOPs: 8.4646. Time: 80.0243 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #108: GFLOPs: 13.2624. Time: 51.0751 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #109: GFLOPs: 13.1409. Time: 51.5471 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #110: GFLOPs: 13.2352. Time: 51.1797 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #111: GFLOPs: 17.7304. Time: 38.2043 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #112: GFLOPs: 10.7105. Time: 63.2439 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #113: GFLOPs: 11.0017. Time: 61.5701 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #114: GFLOPs: 11.5244. Time: 58.7776 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #115: GFLOPs: 12.1542. Time: 55.7317 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #116: GFLOPs: 10.7430. Time: 63.0525 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #117: GFLOPs: 8.3527. Time: 81.0971 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #118: GFLOPs: 8.0397. Time: 84.2537 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #119: GFLOPs: 9.3468. Time: 72.4718 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #120: GFLOPs: 17.0595. Time: 39.7067 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #121: GFLOPs: 2.8822. Time: 235.0180 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #122: GFLOPs: 10.1559. Time: 66.6981 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #123: GFLOPs: 11.1289. Time: 60.8662 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #124: GFLOPs: 13.5177. Time: 50.1103 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #125: GFLOPs: 14.2776. Time: 47.4431 us. Best GFLOPs: 33.9165
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_max_pool2d] Trial #126: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(6), T.int64(112), T.int64(112), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(114), T.int64(114), T.int64(4)))
        pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(6), T.int64(56), T.int64(56), T.int64(4), T.int64(9)))
        for ax0_ax1_fused_fused in T.parallel(T.int64(6), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(113), T.int64(113)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("pad_temp"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(6), ax0_ax1_fused_fused + ax1)
                        v_ax2 = T.axis.spatial(T.int64(114), ax2)
                        v_ax3 = T.axis.spatial(T.int64(114), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4])
                        T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        pad_temp[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1), v_ax4], T.float32(-3.4028234663852886e+38))
            for ax2, ax3, ax4 in T.grid(T.int64(56), T.int64(56), T.int64(4)):
                for rv0_rv1_fused_1_fused_init in T.vectorized(T.int64(9)):
                    with T.block("pool_max_rf_init"):
                        vrv0_rv1_fused_1 = T.axis.spatial(T.int64(9), rv0_rv1_fused_1_fused_init)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSS", [ax0_ax1_fused_fused, ax2, ax3, ax4])
                        T.reads()
                        T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_0 in range(T.int64(1)):
                    for rv0_rv1_fused_1_fused in T.vectorized(T.int64(9)):
                        with T.block("pool_max_rf_update"):
                            vrv0_rv1_fused_1 = T.axis.spatial(T.int64(9), rv0_rv1_fused_1_fused)
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSR", [ax0_ax1_fused_fused, ax2, ax3, ax4, rv0_rv1_fused_0])
                            T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                            T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                            pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
        for ax0_ax1_ax2_ax3_fused in T.parallel(T.int64(18816), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax4 in range(T.int64(4)):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                    v_ax4 = T.axis.spatial(T.int64(4), ax4)
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                for rv0_rv1_fused_1 in range(T.int64(9)):
                    with T.block("pool_max_update"):
                        vrv0_rv1_fused_1 = T.axis.reduce(T.int64(9), rv0_rv1_fused_1)
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T.block_attr({"meta_schedule.random_compute_producer": 1})
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
v11, v12 = sch.sample_perfect_tile(loop=l10, n=2, max_innermost_factor=64, decision=[1, 9])
l13, l14 = sch.split(loop=l10, factors=[v11, v12], preserve_unit_iters=True)
b15 = sch.rfactor(loop=l14, factor_axis=5)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l17, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b18 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b18, ann_key="meta_schedule.unroll_explicit")
b19, b20, b21 = sch.get_child_blocks(b18)
l22, l23, l24, l25, l26, l27, l28 = sch.get_loops(block=b19)
l29 = sch.fuse(l22, l23, preserve_unit_iters=True)
sch.parallel(loop=l29)
l30 = sch.fuse(l28, preserve_unit_iters=True)
sch.vectorize(loop=l30)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b20)
l37 = sch.fuse(l31, preserve_unit_iters=True)
sch.parallel(loop=l37)
l38 = sch.fuse(l36, preserve_unit_iters=True)
sch.vectorize(loop=l38)
sch.annotate(block_or_loop=l37, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l37, ann_key="pragma_unroll_explicit", ann_val=1)
l39, l40, l41, l42, l43, l44 = sch.get_loops(block=b21)
l45 = sch.fuse(l39, l40, l41, l42, preserve_unit_iters=True)
sch.parallel(loop=l45)
sch.annotate(block_or_loop=l45, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l45, ann_key="pragma_unroll_explicit", ann_val=1)
b46 = sch.get_block(name="pool_max_rf", func_name="main")
l47, l48, l49, l50, l51, l52 = sch.get_loops(block=b46)
b53 = sch.decompose_reduction(block=b46, loop=l51)
b54 = sch.get_block(name="pool_max", func_name="main")
l55, l56, l57 = sch.get_loops(block=b54)
b58 = sch.decompose_reduction(block=b54, loop=l57)
2024-04-29 00:06:21 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_max_pool2d] Trial #127: GFLOPs: 11.1459. Time: 60.7737 us. Best GFLOPs: 33.9165
