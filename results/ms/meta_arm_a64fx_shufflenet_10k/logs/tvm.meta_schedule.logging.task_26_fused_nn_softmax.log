2024-04-28 20:38:45 [INFO] [task_scheduler.cc:160] Initializing Task #26: "fused_nn_softmax"
2024-04-28 20:38:45 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
        T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
        T_softmax_expsum = T.alloc_buffer((T.int64(1),))
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_maxelem"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(p0[v_i0, v_k])
                T.writes(T_softmax_maxelem[v_i0])
                with T.init():
                    T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_exp"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                T.writes(T_softmax_exp[v_i0, v_i1])
                T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_expsum"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(T_softmax_exp[v_i0, v_k])
                T.writes(T_softmax_expsum[v_i0])
                with T.init():
                    T_softmax_expsum[v_i0] = T.float32(0)
                T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_norm"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                T.writes(T_softmax_norm[v_i0, v_i1])
                T.block_attr({"axis": 1})
                T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
2024-04-28 20:38:45 [INFO] [task_scheduler.cc:164] Total 9 design space(s) generated
2024-04-28 20:38:45 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(50)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(500)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(500), T.int64(2)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(p0[v_i0, vk_0 * T.int64(2) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_0] = T.max(T_softmax_maxelem_rf[v_i0, vk_0], p0[v_i0, vk_0 * T.int64(2) + vk_1])
            for i0, k_0 in T.grid(T.int64(1), T.int64(500)):
                with T.block("T_softmax_maxelem"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_0])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_0])
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(50), T.int64(20)):
                with T.block("T_softmax_expsum_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(T_softmax_exp[v_i0, vk_0 * T.int64(20) + vk_1])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_0] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_0] = T_softmax_expsum_rf[v_i0, vk_0] + T_softmax_exp[v_i0, vk_0 * T.int64(20) + vk_1]
            for i0, k_0 in T.grid(T.int64(1), T.int64(50)):
                with T.block("T_softmax_expsum"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_expsum_rf[v_i0, vk_0])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_0]
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[50, 20])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[500, 2])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True)
b17 = sch.rfactor(loop=l15, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=-1)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=-1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:45 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(50)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(2)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(500), T.int64(2)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(p0[v_i0, vk_0 * T.int64(2) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_1] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_1] = T.max(T_softmax_maxelem_rf[v_i0, vk_1], p0[v_i0, vk_0 * T.int64(2) + vk_1])
            for i0, k_1 in T.grid(T.int64(1), T.int64(2)):
                with T.block("T_softmax_maxelem"):
                    vk_1, v_i0 = T.axis.remap("RS", [k_1, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_1])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_1])
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(50), T.int64(20)):
                with T.block("T_softmax_expsum_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(T_softmax_exp[v_i0, vk_0 * T.int64(20) + vk_1])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_0] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_0] = T_softmax_expsum_rf[v_i0, vk_0] + T_softmax_exp[v_i0, vk_0 * T.int64(20) + vk_1]
            for i0, k_0 in T.grid(T.int64(1), T.int64(50)):
                with T.block("T_softmax_expsum"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_expsum_rf[v_i0, vk_0])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_0]
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[50, 20])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[500, 2])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True)
b17 = sch.rfactor(loop=l16, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=-1)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=-1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:45 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(50)))
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1000)):
                    with T.block("T_softmax_maxelem"):
                        v_i0, v_k = T.axis.remap("SR", [ax0, ax1])
                        T.reads(p0[v_i0, v_k])
                        T.writes(T_softmax_maxelem[v_i0])
                        with T.init():
                            T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(50), T.int64(20)):
                with T.block("T_softmax_expsum_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(T_softmax_exp[v_i0, vk_0 * T.int64(20) + vk_1])
                    T.writes(T_softmax_expsum_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_expsum_rf[v_i0, vk_0] = T.float32(0)
                    T_softmax_expsum_rf[v_i0, vk_0] = T_softmax_expsum_rf[v_i0, vk_0] + T_softmax_exp[v_i0, vk_0 * T.int64(20) + vk_1]
            for i0, k_0 in T.grid(T.int64(1), T.int64(50)):
                with T.block("T_softmax_expsum"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_expsum_rf[v_i0, vk_0])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_0]
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[50, 20])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
b12, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l13 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l13, preserve_unit_loops=True, index=-1)
l14 = sch.sample_compute_location(block=b12, decision=-1)
sch.compute_at(block=b12, loop=l14, preserve_unit_loops=True, index=-1)
l15 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:45 [INFO] [task_scheduler.cc:170] Design space #3:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(20)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(20)))
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0 in range(T.int64(20)):
                    for ax0_1, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(50)):
                        with T.block("T_softmax_maxelem_rf"):
                            vk_0 = T.axis.spatial(T.int64(20), ax0 + ax0_1)
                            v_i0, vk_1 = T.axis.remap("SR", [ax1, ax2])
                            T.reads(p0[v_i0, vk_0 * T.int64(50) + vk_1])
                            T.writes(T_softmax_maxelem_rf[v_i0, vk_0])
                            with T.init():
                                T_softmax_maxelem_rf[v_i0, vk_0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem_rf[v_i0, vk_0] = T.max(T_softmax_maxelem_rf[v_i0, vk_0], p0[v_i0, vk_0 * T.int64(50) + vk_1])
                    for ax1 in range(T.int64(1)):
                        with T.block("T_softmax_maxelem"):
                            vk_0, v_i0 = T.axis.remap("RS", [ax0, ax1])
                            T.reads(T_softmax_maxelem_rf[v_i0, vk_0])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_0])
                with T.block("T_softmax_exp"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_exp[v_i0, v_i1])
                    T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0 in range(T.int64(20)):
                    for ax0_1, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(50)):
                        with T.block("T_softmax_expsum_rf"):
                            vk_1 = T.axis.spatial(T.int64(20), ax0 + ax0_1)
                            v_i0, vk_0 = T.axis.remap("SR", [ax1, ax2])
                            T.reads(T_softmax_exp[v_i0, vk_0 * T.int64(20) + vk_1])
                            T.writes(T_softmax_expsum_rf[v_i0, vk_1])
                            with T.init():
                                T_softmax_expsum_rf[v_i0, vk_1] = T.float32(0)
                            T_softmax_expsum_rf[v_i0, vk_1] = T_softmax_expsum_rf[v_i0, vk_1] + T_softmax_exp[v_i0, vk_0 * T.int64(20) + vk_1]
                    for ax1 in range(T.int64(1)):
                        with T.block("T_softmax_expsum"):
                            vk_1, v_i0 = T.axis.remap("RS", [ax0, ax1])
                            T.reads(T_softmax_expsum_rf[v_i0, vk_1])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_1]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[50, 20])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[20, 50])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True)
b17 = sch.rfactor(loop=l15, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=2)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-1)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=2)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:45 [INFO] [task_scheduler.cc:170] Design space #4:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(20)))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(50)))
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0, ax1, ax2 in T.grid(T.int64(50), T.int64(1), T.int64(20)):
                    with T.block("T_softmax_maxelem_rf"):
                        vk_1, v_i0, vk_0 = T.axis.remap("SSR", [ax0, ax1, ax2])
                        T.reads(p0[v_i0, vk_0 * T.int64(50) + vk_1])
                        T.writes(T_softmax_maxelem_rf[v_i0, vk_1])
                        with T.init():
                            T_softmax_maxelem_rf[v_i0, vk_1] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem_rf[v_i0, vk_1] = T.max(T_softmax_maxelem_rf[v_i0, vk_1], p0[v_i0, vk_0 * T.int64(50) + vk_1])
                for ax0, ax1 in T.grid(T.int64(50), T.int64(1)):
                    with T.block("T_softmax_maxelem"):
                        vk_1, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_maxelem_rf[v_i0, vk_1])
                        T.writes(T_softmax_maxelem[v_i0])
                        with T.init():
                            T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_1])
                for ax0 in range(T.int64(20)):
                    for ax0_1, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(50)):
                        with T.block("T_softmax_expsum_rf"):
                            vk_1 = T.axis.spatial(T.int64(20), ax0 + ax0_1)
                            v_i0, vk_0 = T.axis.remap("SR", [ax1, ax2])
                            T.reads(p0[v_i0, vk_0 * T.int64(20) + vk_1], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum_rf[v_i0, vk_1])
                            with T.init():
                                T_softmax_expsum_rf[v_i0, vk_1] = T.float32(0)
                            T_softmax_expsum_rf[v_i0, vk_1] = T_softmax_expsum_rf[v_i0, vk_1] + T.exp(p0[v_i0, vk_0 * T.int64(20) + vk_1] - T_softmax_maxelem[v_i0])
                    for ax1 in range(T.int64(1)):
                        with T.block("T_softmax_expsum"):
                            vk_1, v_i0 = T.axis.remap("RS", [ax0, ax1])
                            T.reads(T_softmax_expsum_rf[v_i0, vk_1])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_1]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[50, 20])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
l11, l12 = sch.get_loops(block=b0)
v13, v14 = sch.sample_perfect_tile(loop=l12, n=2, max_innermost_factor=64, decision=[20, 50])
l15, l16 = sch.split(loop=l12, factors=[v13, v14], preserve_unit_iters=True)
b17 = sch.rfactor(loop=l16, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
b19, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l20 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l20, preserve_unit_loops=True, index=-1)
l21 = sch.sample_compute_location(block=b19, decision=2)
sch.compute_at(block=b19, loop=l21, preserve_unit_loops=True, index=-1)
l22 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l22, preserve_unit_loops=True, index=-1)
b23, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l24 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l24, preserve_unit_loops=True, index=-1)
l25 = sch.sample_compute_location(block=b23, decision=1)
sch.compute_at(block=b23, loop=l25, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:45 [INFO] [task_scheduler.cc:170] Design space #5:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_rf = T.alloc_buffer((T.int64(1), T.int64(20)))
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1000)):
                    with T.block("T_softmax_maxelem"):
                        v_i0, v_k = T.axis.remap("SR", [ax0, ax1])
                        T.reads(p0[v_i0, v_k])
                        T.writes(T_softmax_maxelem[v_i0])
                        with T.init():
                            T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
                for ax0, ax1, ax2 in T.grid(T.int64(20), T.int64(1), T.int64(50)):
                    with T.block("T_softmax_expsum_rf"):
                        vk_1, v_i0, vk_0 = T.axis.remap("SSR", [ax0, ax1, ax2])
                        T.reads(p0[v_i0, vk_0 * T.int64(20) + vk_1], T_softmax_maxelem[v_i0])
                        T.writes(T_softmax_expsum_rf[v_i0, vk_1])
                        with T.init():
                            T_softmax_expsum_rf[v_i0, vk_1] = T.float32(0)
                        T_softmax_expsum_rf[v_i0, vk_1] = T_softmax_expsum_rf[v_i0, vk_1] + T.exp(p0[v_i0, vk_0 * T.int64(20) + vk_1] - T_softmax_maxelem[v_i0])
                for ax0, ax1 in T.grid(T.int64(20), T.int64(1)):
                    with T.block("T_softmax_expsum"):
                        vk_1, v_i0 = T.axis.remap("RS", [ax0, ax1])
                        T.reads(T_softmax_expsum_rf[v_i0, vk_1])
                        T.writes(T_softmax_expsum[v_i0])
                        with T.init():
                            T_softmax_expsum[v_i0] = T.float32(0)
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_expsum_rf[v_i0, vk_1]
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b2)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[50, 20])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
b12, = sch.get_producers(block=b2)
sch.unannotate(block_or_loop=b2, ann_key="meta_schedule.random_compute_producer")
l13 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l13, preserve_unit_loops=True, index=-1)
l14 = sch.sample_compute_location(block=b12, decision=1)
sch.compute_at(block=b12, loop=l14, preserve_unit_loops=True, index=-1)
l15 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:45 [INFO] [task_scheduler.cc:170] Design space #6:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(100)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(100), T.int64(10)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_0, v_i0, vk_1 = T.axis.remap("SSR", [k_0, i0, k_1])
                    T.reads(p0[v_i0, vk_0 * T.int64(10) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_0])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_0] = T.max(T_softmax_maxelem_rf[v_i0, vk_0], p0[v_i0, vk_0 * T.int64(10) + vk_1])
            for i0, k_0 in T.grid(T.int64(1), T.int64(100)):
                with T.block("T_softmax_maxelem"):
                    vk_0, v_i0 = T.axis.remap("RS", [k_0, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_0])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_0])
            for i0, k in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_expsum"):
                    v_i0, v_k = T.axis.remap("SR", [i0, k])
                    T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b0)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[100, 10])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l8, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
l12 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l12, preserve_unit_loops=True, index=-1)
l13 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l13, preserve_unit_loops=True, index=-1)
b14, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l15 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b14, decision=-1)
sch.compute_at(block=b14, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:45 [INFO] [task_scheduler.cc:170] Design space #7:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            T_softmax_maxelem_rf = T.alloc_buffer((T.int64(1), T.int64(10)))
            for i0, k_0, k_1 in T.grid(T.int64(1), T.int64(100), T.int64(10)):
                with T.block("T_softmax_maxelem_rf"):
                    vk_1, v_i0, vk_0 = T.axis.remap("SSR", [k_1, i0, k_0])
                    T.reads(p0[v_i0, vk_0 * T.int64(10) + vk_1])
                    T.writes(T_softmax_maxelem_rf[v_i0, vk_1])
                    with T.init():
                        T_softmax_maxelem_rf[v_i0, vk_1] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_rf[v_i0, vk_1] = T.max(T_softmax_maxelem_rf[v_i0, vk_1], p0[v_i0, vk_0 * T.int64(10) + vk_1])
            for i0, k_1 in T.grid(T.int64(1), T.int64(10)):
                with T.block("T_softmax_maxelem"):
                    vk_1, v_i0 = T.axis.remap("RS", [k_1, i0])
                    T.reads(T_softmax_maxelem_rf[v_i0, vk_1])
                    T.writes(T_softmax_maxelem[v_i0])
                    with T.init():
                        T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], T_softmax_maxelem_rf[v_i0, vk_1])
            for i0, k in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_expsum"):
                    v_i0, v_k = T.axis.remap("SR", [i0, k])
                    T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                    T.writes(T_softmax_expsum[v_i0])
                    with T.init():
                        T_softmax_expsum[v_i0] = T.float32(0)
                    T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
l4, l5 = sch.get_loops(block=b0)
v6, v7 = sch.sample_perfect_tile(loop=l5, n=2, max_innermost_factor=64, decision=[100, 10])
l8, l9 = sch.split(loop=l5, factors=[v6, v7], preserve_unit_iters=True)
b10 = sch.rfactor(loop=l9, factor_axis=1)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v11 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v11)
l12 = sch.sample_compute_location(block=b2, decision=-1)
sch.compute_at(block=b2, loop=l12, preserve_unit_loops=True, index=-1)
l13 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l13, preserve_unit_loops=True, index=-1)
b14, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l15 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b14, decision=-1)
sch.compute_at(block=b14, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:45 [INFO] [task_scheduler.cc:170] Design space #8:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1000)):
                    with T.block("T_softmax_maxelem"):
                        v_i0, v_k = T.axis.remap("SR", [ax0, ax1])
                        T.reads(p0[v_i0, v_k])
                        T.writes(T_softmax_maxelem[v_i0])
                        with T.init():
                            T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                        T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1000)):
                    with T.block("T_softmax_expsum"):
                        v_i0, v_k = T.axis.remap("SR", [ax0, ax1])
                        T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                        T.writes(T_softmax_expsum[v_i0])
                        with T.init():
                            T_softmax_expsum[v_i0] = T.float32(0)
                        T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
                with T.block("T_softmax_norm"):
                    v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                    T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                    T.writes(T_softmax_norm[v_i0, v_i1])
                    T.block_attr({"axis": 1})
                    T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.vectorize", ann_val=64)
v4 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v4)
l5 = sch.sample_compute_location(block=b2, decision=1)
sch.compute_at(block=b2, loop=l5, preserve_unit_loops=True, index=-1)
l6 = sch.sample_compute_location(block=b1, decision=-2)
sch.compute_at(block=b1, loop=l6, preserve_unit_loops=True, index=-1)
l7 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l7, preserve_unit_loops=True, index=-1)
2024-04-28 21:10:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:10:27 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:10:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x49ea0e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50b11b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5492ae8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56a9168)]: 0 failure(s)
2024-04-28 21:10:28 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:10:29 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x49ea0e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50b11b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5492ae8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56a9168)]: 0 failure(s)
2024-04-28 21:10:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x49ea0e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50b11b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5492ae8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56a9168)]: 0 failure(s)
2024-04-28 21:10:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x49ea0e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50b11b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5492ae8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56a9168)]: 0 failure(s)
2024-04-28 21:10:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x49ea0e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50b11b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5492ae8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56a9168)]: 0 failure(s)
2024-04-28 21:10:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9990  0.9985  0.9985  0.9984  0.9974  0.9970  0.9962  0.9961  0.9954  0.9953  0.9951  0.9938  0.9932  0.9908  0.9899
[17 : 32]:	0.9899  0.9898  0.9896  0.9892  0.9892  0.9888  0.9884  0.9883  0.9873  0.9866  0.9866  0.9857  0.9843  0.9837  0.9831  0.9828
[33 : 48]:	0.9818  0.9816  0.9801  0.9797  0.9791  0.9789  0.9778  0.9772  0.9771  0.9763  0.9759  0.9755  0.9747  0.9743  0.9739  0.9732
[49 : 64]:	0.9730  0.9718  0.9702  0.9700  0.9678  0.9678  0.9672  0.9667  0.9662  0.9657  0.9654  0.9642  0.9634  0.9611  0.9608  0.9607
2024-04-28 21:10:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:10:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #1: GFLOPs: 0.0124. Time: 321.8560 us. Best GFLOPs: 0.0124
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #2: GFLOPs: 0.0025. Time: 1584.7440 us. Best GFLOPs: 0.0124
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #3: GFLOPs: 0.0027. Time: 1456.6321 us. Best GFLOPs: 0.0124
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #4: GFLOPs: 0.0033. Time: 1198.0509 us. Best GFLOPs: 0.0124
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #5: GFLOPs: 0.0065. Time: 612.0820 us. Best GFLOPs: 0.0124
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #6: GFLOPs: 0.0159. Time: 252.1203 us. Best GFLOPs: 0.0159
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #7: GFLOPs: 0.0762. Time: 52.4775 us. Best GFLOPs: 0.0762
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #8: GFLOPs: 0.0797. Time: 50.2082 us. Best GFLOPs: 0.0797
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #9: GFLOPs: 0.0062. Time: 647.5910 us. Best GFLOPs: 0.0797
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #10: GFLOPs: 0.0754. Time: 53.0513 us. Best GFLOPs: 0.0797
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #11: GFLOPs: 0.0335. Time: 119.3657 us. Best GFLOPs: 0.0797
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #12: GFLOPs: 0.0979. Time: 40.8440 us. Best GFLOPs: 0.0979
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #13: GFLOPs: 0.0616. Time: 64.8974 us. Best GFLOPs: 0.0979
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #14: GFLOPs: 0.0960. Time: 41.6579 us. Best GFLOPs: 0.0979
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #15: GFLOPs: 0.1045. Time: 38.2637 us. Best GFLOPs: 0.1045
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #16: GFLOPs: 0.0931. Time: 42.9555 us. Best GFLOPs: 0.1045
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #17: GFLOPs: 0.0071. Time: 563.0284 us. Best GFLOPs: 0.1045
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #18: GFLOPs: 0.0509. Time: 78.5503 us. Best GFLOPs: 0.1045
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #19: GFLOPs: 0.0774. Time: 51.6889 us. Best GFLOPs: 0.1045
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #20: GFLOPs: 0.0068. Time: 592.3723 us. Best GFLOPs: 0.1045
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #21: GFLOPs: 0.0901. Time: 44.4184 us. Best GFLOPs: 0.1045
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #22: GFLOPs: 0.0172. Time: 232.3562 us. Best GFLOPs: 0.1045
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #23: GFLOPs: 0.0355. Time: 112.5911 us. Best GFLOPs: 0.1045
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #24: GFLOPs: 0.1028. Time: 38.9265 us. Best GFLOPs: 0.1045
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #25: GFLOPs: 0.0440. Time: 90.9313 us. Best GFLOPs: 0.1045
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #26: GFLOPs: 0.0720. Time: 55.5817 us. Best GFLOPs: 0.1045
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #27: GFLOPs: 0.0042. Time: 958.2235 us. Best GFLOPs: 0.1045
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #28: GFLOPs: 0.1099. Time: 36.3948 us. Best GFLOPs: 0.1099
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #29: GFLOPs: 0.0346. Time: 115.5865 us. Best GFLOPs: 0.1099
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #30: GFLOPs: 0.1542. Time: 25.9323 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #31: GFLOPs: 0.1450. Time: 27.5906 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #32: GFLOPs: 0.0070. Time: 574.4300 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #33: GFLOPs: 0.0810. Time: 49.4118 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #34: GFLOPs: 0.1440. Time: 27.7728 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #35: GFLOPs: 0.0061. Time: 659.9384 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #36: GFLOPs: 0.0063. Time: 637.0672 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #37: GFLOPs: 0.1507. Time: 26.5500 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #38: GFLOPs: 0.0069. Time: 582.5699 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #39: GFLOPs: 0.0315. Time: 127.0438 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #40: GFLOPs: 0.1142. Time: 35.0237 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #41: GFLOPs: 0.0000. Time: 93247.3817 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #42: GFLOPs: 0.0348. Time: 114.8036 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #43: GFLOPs: 0.0845. Time: 47.3114 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #44: GFLOPs: 0.0755. Time: 52.9768 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #45: GFLOPs: 0.0782. Time: 51.1474 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #46: GFLOPs: 0.0059. Time: 678.6773 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #47: GFLOPs: 0.0800. Time: 50.0293 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #48: GFLOPs: 0.0971. Time: 41.1856 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #49: GFLOPs: 0.0519. Time: 77.0051 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #50: GFLOPs: 0.0071. Time: 561.3063 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #51: GFLOPs: 0.0926. Time: 43.1984 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #52: GFLOPs: 0.1059. Time: 37.7547 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #53: GFLOPs: 0.1386. Time: 28.8511 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #54: GFLOPs: 0.0316. Time: 126.6734 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #55: GFLOPs: 0.0956. Time: 41.8413 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #56: GFLOPs: 0.1010. Time: 39.6143 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #57: GFLOPs: 0.0975. Time: 41.0437 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #58: GFLOPs: 0.0189. Time: 212.0659 us. Best GFLOPs: 0.1542
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #59: GFLOPs: 0.1635. Time: 24.4643 us. Best GFLOPs: 0.1635
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #60: GFLOPs: 0.0028. Time: 1443.5833 us. Best GFLOPs: 0.1635
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #61: GFLOPs: 0.1067. Time: 37.4737 us. Best GFLOPs: 0.1635
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #62: GFLOPs: 0.0685. Time: 58.4121 us. Best GFLOPs: 0.1635
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #63: GFLOPs: 0.0905. Time: 44.1800 us. Best GFLOPs: 0.1635
2024-04-28 21:12:32 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #64: GFLOPs: 0.0037. Time: 1075.0218 us. Best GFLOPs: 0.1635
2024-04-28 23:31:48 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:31:49 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-28 23:31:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x49ea0e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50b11b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5492ae8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56a9168)]: 0 failure(s)
2024-04-28 23:31:49 [INFO] [evolutionary_search.cc:723] Sampled 448 candidate(s)
2024-04-28 23:31:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x49ea0e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50b11b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5492ae8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56a9168)]: 0 failure(s)
2024-04-28 23:31:55 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x49ea0e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50b11b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5492ae8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56a9168)]: 0 failure(s)
2024-04-28 23:31:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x49ea0e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50b11b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5492ae8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56a9168)]: 0 failure(s)
2024-04-28 23:32:02 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x49ea0e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x50b11b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5492ae8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x56a9168)]: 0 failure(s)
2024-04-28 23:32:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1772  1.1043  1.0536  1.0500  1.0336  1.0315  1.0249  1.0170  1.0146  0.9927  0.9858  0.9808  0.9751  0.9629  0.9599  0.9542
[17 : 32]:	0.9542  0.9453  0.9439  0.9434  0.9405  0.9401  0.9357  0.9311  0.9280  0.9263  0.9262  0.9212  0.9186  0.9171  0.9139  0.9107
[33 : 48]:	0.9068  0.9059  0.9056  0.8952  0.8943  0.8936  0.8925  0.8919  0.8911  0.8883  0.8881  0.8856  0.8852  0.8835  0.8834  0.8816
[49 : 64]:	0.8813  0.8788  0.8766  0.8747  0.8747  0.8746  0.8741  0.8727  0.8717  0.8709  0.8695  0.8691  0.8647  0.8645  0.8614  0.8611
2024-04-28 23:32:05 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:32:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #65: GFLOPs: 0.0598. Time: 66.9114 us. Best GFLOPs: 0.1635
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #66: GFLOPs: 0.0744. Time: 53.7713 us. Best GFLOPs: 0.1635
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #67: GFLOPs: 0.1392. Time: 28.7459 us. Best GFLOPs: 0.1635
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #68: GFLOPs: 0.1432. Time: 27.9245 us. Best GFLOPs: 0.1635
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #69: GFLOPs: 0.1353. Time: 29.5602 us. Best GFLOPs: 0.1635
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #70: GFLOPs: 0.1330. Time: 30.0767 us. Best GFLOPs: 0.1635
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #71: GFLOPs: 0.1329. Time: 30.0912 us. Best GFLOPs: 0.1635
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #72: GFLOPs: 0.1196. Time: 33.4584 us. Best GFLOPs: 0.1635
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #73: GFLOPs: 0.1361. Time: 29.3944 us. Best GFLOPs: 0.1635
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #74: GFLOPs: 0.0876. Time: 45.6530 us. Best GFLOPs: 0.1635
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #75: GFLOPs: 0.1283. Time: 31.1724 us. Best GFLOPs: 0.1635
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #76: GFLOPs: 0.1714. Time: 23.3360 us. Best GFLOPs: 0.1714
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #77: GFLOPs: 0.1691. Time: 23.6550 us. Best GFLOPs: 0.1714
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #78: GFLOPs: 0.1477. Time: 27.0856 us. Best GFLOPs: 0.1714
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #79: GFLOPs: 0.1709. Time: 23.3987 us. Best GFLOPs: 0.1714
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #80: GFLOPs: 0.1232. Time: 32.4719 us. Best GFLOPs: 0.1714
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #81: GFLOPs: 0.1201. Time: 33.3062 us. Best GFLOPs: 0.1714
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #82: GFLOPs: 0.1416. Time: 28.2473 us. Best GFLOPs: 0.1714
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #83: GFLOPs: 0.1461. Time: 27.3730 us. Best GFLOPs: 0.1714
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #84: GFLOPs: 0.1439. Time: 27.7914 us. Best GFLOPs: 0.1714
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #85: GFLOPs: 0.1760. Time: 22.7268 us. Best GFLOPs: 0.1760
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #86: GFLOPs: 0.1784. Time: 22.4270 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #87: GFLOPs: 0.1386. Time: 28.8601 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #88: GFLOPs: 0.1653. Time: 24.1954 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #89: GFLOPs: 0.1421. Time: 28.1528 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #90: GFLOPs: 0.1663. Time: 24.0552 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #91: GFLOPs: 0.1369. Time: 29.2141 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #92: GFLOPs: 0.1722. Time: 23.2256 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #93: GFLOPs: 0.1680. Time: 23.8158 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #94: GFLOPs: 0.1707. Time: 23.4376 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #95: GFLOPs: 0.1451. Time: 27.5625 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #96: GFLOPs: 0.1693. Time: 23.6288 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #97: GFLOPs: 0.1468. Time: 27.2455 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #98: GFLOPs: 0.1629. Time: 24.5574 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #99: GFLOPs: 0.1638. Time: 24.4225 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #100: GFLOPs: 0.0987. Time: 40.5155 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #101: GFLOPs: 0.1390. Time: 28.7871 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #102: GFLOPs: 0.0987. Time: 40.5415 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #103: GFLOPs: 0.1473. Time: 27.1496 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #104: GFLOPs: 0.1457. Time: 27.4524 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #105: GFLOPs: 0.1705. Time: 23.4553 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #106: GFLOPs: 0.1571. Time: 25.4636 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #107: GFLOPs: 0.1466. Time: 27.2888 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #108: GFLOPs: 0.1688. Time: 23.6898 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #109: GFLOPs: 0.0990. Time: 40.4050 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #110: GFLOPs: 0.1732. Time: 23.1011 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #111: GFLOPs: 0.1687. Time: 23.7099 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #112: GFLOPs: 0.1750. Time: 22.8601 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #113: GFLOPs: 0.1474. Time: 27.1298 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #114: GFLOPs: 0.1745. Time: 22.9237 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #115: GFLOPs: 0.1384. Time: 28.9096 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #116: GFLOPs: 0.1320. Time: 30.2953 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #117: GFLOPs: 0.1020. Time: 39.2210 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #118: GFLOPs: 0.1448. Time: 27.6199 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #119: GFLOPs: 0.1700. Time: 23.5324 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #120: GFLOPs: 0.1311. Time: 30.5185 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #121: GFLOPs: 0.1759. Time: 22.7406 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #122: GFLOPs: 0.1669. Time: 23.9704 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #123: GFLOPs: 0.1370. Time: 29.1882 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #124: GFLOPs: 0.1487. Time: 26.9071 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #125: GFLOPs: 0.1643. Time: 24.3391 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #126: GFLOPs: 0.0214. Time: 186.6114 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #127: GFLOPs: 0.1329. Time: 30.0871 us. Best GFLOPs: 0.1784
2024-04-28 23:33:15 [INFO] [task_scheduler.cc:131] [Task #26: fused_nn_softmax] Trial #128: GFLOPs: 0.1417. Time: 28.2259 us. Best GFLOPs: 0.1784
