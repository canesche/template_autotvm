2024-04-28 20:37:52 [INFO] [task_scheduler.cc:160] Initializing Task #10: "fused_nn_contrib_depthwise_conv2d_NCHWc_add_3"
2024-04-28 20:37:52 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(56), T.int64(56), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(58), T.int64(58), T.int64(2)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(29), T.int64(58), T.int64(58), T.int64(2)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b, oco, oh, ow, oci, kh, kw in T.grid(T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_oco, v_oh, v_ow, v_oci, v_kh, v_kw = T.axis.remap("SSSSSRR", [b, oco, oh, ow, oci, kh, kw])
                T.reads(PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                with T.init():
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(2)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
2024-04-28 20:37:53 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:37:53 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(56), T.int64(56), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(58), T.int64(58), T.int64(2)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
            for b_0, oco_0, oh_0 in T.grid(T.int64(1), T.int64(1), T.int64(4)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(29), T.int64(15), T.int64(57), T.int64(2)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), oh_0 * T.int64(14) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), ax3)
                        v_i4 = T.axis.spatial(T.int64(2), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(29), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(29), oco_0 * T.int64(29) + oco_1 * T.int64(29) + oco_2 * T.int64(29) + oco_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                        v_oci = T.axis.spatial(T.int64(2), oci_0 * T.int64(2) + oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(2)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)):
                with T.block("T_add"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 29])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 7, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 2])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v58 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v58)
l59 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l59, preserve_unit_loops=True, index=-1)
2024-04-28 20:37:53 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(56), T.int64(56), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(58), T.int64(58), T.int64(2)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1, oh_1 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(29), T.int64(3), T.int64(57), T.int64(2)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), oh_0 * T.int64(14) + oh_1 * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(58), ax3)
                        v_i4 = T.axis.spatial(T.int64(2), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_1, oci_1 in T.grid(T.int64(2), T.int64(2)):
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(29), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(29), oco_0 * T.int64(29) + oco_1 * T.int64(29) + oco_2 * T.int64(29) + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                            v_oci = T.axis.spatial(T.int64(2), oci_0 * T.int64(2) + oci_1 + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(2)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(29), T.int64(1), T.int64(14), T.int64(1)):
                        with T.block("T_add"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(7) + oh_1 + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ow_1 * T.int64(14) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(2), oci_1 + ax4)
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 29])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 7, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 2])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
2024-04-28 20:37:53 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(56), T.int64(56), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(58), T.int64(58), T.int64(2)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
            for b_0, oco_0, oh_0, ow_0, oci_0 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                for b_1, oco_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(29), T.int64(3), T.int64(29), T.int64(2)):
                        with T.block("PaddedInput"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(58), oh_0 * T.int64(14) + oh_1 * T.int64(2) + ax2)
                            v_i3 = T.axis.spatial(T.int64(58), ow_1 * T.int64(28) + ax3)
                            v_i4 = T.axis.spatial(T.int64(2), ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(29), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(29), oco_0 * T.int64(29) + oco_1 * T.int64(29) + oco_2 * T.int64(29) + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(7) + oh_1 + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                            v_oci = T.axis.spatial(T.int64(2), oci_0 * T.int64(2) + oci_1 + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(2)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(29), T.int64(7), T.int64(28), T.int64(2)):
                    with T.block("T_add"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), oh_0 * T.int64(7) + ax2)
                        v_ax3, v_ax4 = T.axis.remap("SS", [ax3, ax4])
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 29])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 7, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 2])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
2024-04-28 20:48:59 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:48:59 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:49:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45b0028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c7d3d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c06f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x385f058)]: 0 failure(s)
2024-04-28 20:49:04 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 20:49:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45b0028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c7d3d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c06f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x385f058)]: 0 failure(s)
2024-04-28 20:49:16 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45b0028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c7d3d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c06f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x385f058)]: 0 failure(s)
2024-04-28 20:49:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45b0028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c7d3d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c06f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x385f058)]: 0 failure(s)
2024-04-28 20:49:28 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45b0028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c7d3d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c06f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x385f058)]: 0 failure(s)
2024-04-28 20:49:29 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9990  0.9980  0.9978  0.9977  0.9976  0.9973  0.9972  0.9968  0.9968  0.9963  0.9956  0.9954  0.9953  0.9952  0.9945  0.9939
[17 : 32]:	0.9915  0.9912  0.9909  0.9904  0.9904  0.9900  0.9900  0.9892  0.9892  0.9888  0.9884  0.9884  0.9880  0.9879  0.9879  0.9870
[33 : 48]:	0.9865  0.9861  0.9856  0.9854  0.9852  0.9842  0.9842  0.9817  0.9817  0.9806  0.9805  0.9794  0.9789  0.9788  0.9781  0.9780
[49 : 64]:	0.9778  0.9770  0.9768  0.9765  0.9762  0.9748  0.9706  0.9702  0.9694  0.9694  0.9692  0.9692  0.9686  0.9683  0.9680  0.9678
2024-04-28 20:49:29 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:49:29 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #1: GFLOPs: 1.4243. Time: 606.6014 us. Best GFLOPs: 1.4243
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #2: GFLOPs: 11.3509. Time: 76.1144 us. Best GFLOPs: 11.3509
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #3: GFLOPs: 11.6610. Time: 74.0903 us. Best GFLOPs: 11.6610
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #4: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(56), T.int64(56), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(58), T.int64(58), T.int64(2)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused in T.parallel(T.int64(406), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(9), T.int64(57), T.int64(1)):
                with T.block("PaddedInput"):
                    v_i0 = T.axis.spatial(T.int64(1), ax0)
                    v_i1 = T.axis.spatial(T.int64(29), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(14) + ax1)
                    v_i2 = T.axis.spatial(T.int64(58), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(7) * T.int64(8) + ax2)
                    v_i3 = T.axis.spatial(T.int64(58), ax3)
                    v_i4 = T.axis.spatial(T.int64(2), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(14) // T.int64(7) + ax4)
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                    PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oci_1 in T.grid(T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(29), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(14) + oco_2_init + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(7) * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(2), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(14) // T.int64(7) + oci_1 + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(29), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(14) + oco_2 + oco_3)
                        v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(7) * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                        v_oci = T.axis.spatial(T.int64(2), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(14) // T.int64(7) + oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(2)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(711)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_add"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(29), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1568))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1568) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(2))
                    v_ax4 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(2))
                    T.where(ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1 < T.int64(45472))
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[29, 1, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 2])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v58 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v58)
l59 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l59, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b60 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.unroll_explicit")
b61, b62, b63 = sch.get_child_blocks(b60)
l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b61)
l77 = sch.fuse(l64, l65, l66, l67, l68, l69, l70, l71, preserve_unit_iters=True)
sch.parallel(loop=l77)
l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b62)
l95 = sch.fuse(l78, preserve_unit_iters=True)
sch.parallel(loop=l95)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100 = sch.get_loops(block=b63)
l101 = sch.fuse(l96, l97, l98, l99, l100, preserve_unit_iters=True)
l102, l103 = sch.split(loop=l101, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l102)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b104)
b122 = sch.decompose_reduction(block=b104, loop=l108)
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #5: GFLOPs: 0.8493. Time: 1017.3215 us. Best GFLOPs: 11.6610
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #6: GFLOPs: 9.3501. Time: 92.4023 us. Best GFLOPs: 11.6610
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #7: GFLOPs: 5.7227. Time: 150.9719 us. Best GFLOPs: 11.6610
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #8: GFLOPs: 12.3821. Time: 69.7755 us. Best GFLOPs: 12.3821
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #9: GFLOPs: 1.7198. Time: 502.3540 us. Best GFLOPs: 12.3821
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #10: GFLOPs: 4.9933. Time: 173.0266 us. Best GFLOPs: 12.3821
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #11: GFLOPs: 13.1206. Time: 65.8484 us. Best GFLOPs: 13.1206
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #12: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(56), T.int64(56), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(58), T.int64(58), T.int64(2)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
        for b_0_oco_0_fused_fused in T.parallel(T.int64(29), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(57), T.int64(57)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(29), b_0_oco_0_fused_fused + ax1)
                        v_i2 = T.axis.spatial(T.int64(58), ax2)
                        v_i3 = T.axis.spatial(T.int64(58), ax3)
                        v_i4 = T.axis.spatial(T.int64(2), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(29), b_0_oco_0_fused_fused + oco_1 + oco_2_init + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(4) + oh_2_init * T.int64(2) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(14) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(2), oci_0 * T.int64(2) + oci_1 + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(29), b_0_oco_0_fused_fused + oco_1 + oco_2 + oco_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(4) + oh_2 * T.int64(2) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                        v_oci = T.axis.spatial(T.int64(2), oci_0 * T.int64(2) + oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(2)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(711)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_add"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(29), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1568))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1568) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(2))
                    v_ax4 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(2))
                    T.where(ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1 < T.int64(45472))
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[29, 1, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 2])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v58 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v58)
l59 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l59, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b60 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.unroll_explicit")
b61, b62, b63 = sch.get_child_blocks(b60)
l64, l65, l66, l67, l68, l69, l70 = sch.get_loops(block=b61)
l71 = sch.fuse(l64, l65, preserve_unit_iters=True)
sch.parallel(loop=l71)
l72 = sch.fuse(l70, preserve_unit_iters=True)
sch.vectorize(loop=l72)
l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b62)
l96 = sch.fuse(l73, preserve_unit_iters=True)
sch.parallel(loop=l96)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b63)
l102 = sch.fuse(l97, l98, l99, l100, l101, preserve_unit_iters=True)
l103, l104 = sch.split(loop=l102, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b105)
b129 = sch.decompose_reduction(block=b105, loop=l115)
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #13: GFLOPs: 0.8111. Time: 1065.2303 us. Best GFLOPs: 13.1206
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #14: GFLOPs: 1.8161. Time: 475.7359 us. Best GFLOPs: 13.1206
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #15: GFLOPs: 0.4006. Time: 2156.7452 us. Best GFLOPs: 13.1206
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #16: GFLOPs: 1.5646. Time: 552.2023 us. Best GFLOPs: 13.1206
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #17: GFLOPs: 1.2528. Time: 689.6105 us. Best GFLOPs: 13.1206
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #18: GFLOPs: 10.0051. Time: 86.3531 us. Best GFLOPs: 13.1206
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #19: GFLOPs: 15.5167. Time: 55.6800 us. Best GFLOPs: 15.5167
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #20: GFLOPs: 18.7476. Time: 46.0843 us. Best GFLOPs: 18.7476
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #21: GFLOPs: 5.9383. Time: 145.4912 us. Best GFLOPs: 18.7476
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #22: GFLOPs: 5.5006. Time: 157.0673 us. Best GFLOPs: 18.7476
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #23: GFLOPs: 13.4303. Time: 64.3296 us. Best GFLOPs: 18.7476
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #24: GFLOPs: 1.3179. Time: 655.5455 us. Best GFLOPs: 18.7476
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #25: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(56), T.int64(56), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(58), T.int64(58), T.int64(2)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
        for b_0_oco_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(7), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(29), T.int64(57)):
                for ax3_ax4_fused in T.vectorized(T.int64(18)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), ax2)
                        v_i3 = T.axis.spatial(T.int64(58), b_0_oco_0_oh_0_ow_0_fused_fused * T.int64(8) + ax3_ax4_fused // T.int64(2))
                        v_i4 = T.axis.spatial(T.int64(2), ax3_ax4_fused % T.int64(2))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(29), T.int64(4), T.int64(2), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(29), oco_1 * T.int64(29) + oco_2_init * T.int64(29) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(28) + oh_2_init * T.int64(4) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_fused_fused * T.int64(4) + ow_1 * T.int64(4) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(2), oci_0 + oci_1 + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(29), T.int64(4), T.int64(2), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(29), oco_1 * T.int64(29) + oco_2 * T.int64(29) + oco_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(28) + oh_2 * T.int64(4) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_fused_fused * T.int64(4) + ow_1 * T.int64(4) + ow_2 * T.int64(2) + ow_3)
                        v_oci = T.axis.spatial(T.int64(2), oci_0 + oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(2)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(29), T.int64(28), T.int64(4), T.int64(1)):
                    with T.block("T_add"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_fused_fused * T.int64(4) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(2), oci_0 + ax4)
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 29])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 7, 4])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 2])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73 = sch.get_loops(block=b62)
l74 = sch.fuse(l65, l66, l67, l68, preserve_unit_iters=True)
sch.parallel(loop=l74)
l75 = sch.fuse(l72, l73, preserve_unit_iters=True)
sch.vectorize(loop=l75)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b63)
l97 = sch.fuse(l76, preserve_unit_iters=True)
sch.parallel(loop=l97)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109 = sch.get_loops(block=b64)
b110 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b110)
b132 = sch.decompose_reduction(block=b110, loop=l118)
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #26: GFLOPs: 11.5838. Time: 74.5842 us. Best GFLOPs: 18.7476
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #27: GFLOPs: 1.6048. Time: 538.3785 us. Best GFLOPs: 18.7476
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #28: GFLOPs: 9.7073. Time: 89.0022 us. Best GFLOPs: 18.7476
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #29: GFLOPs: 23.7903. Time: 36.3161 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #30: GFLOPs: 11.5237. Time: 74.9729 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #31: GFLOPs: 8.3883. Time: 102.9964 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #32: GFLOPs: 4.6025. Time: 187.7191 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #33: GFLOPs: 0.4717. Time: 1831.5468 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #34: GFLOPs: 3.9579. Time: 218.2902 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #35: GFLOPs: 5.0694. Time: 170.4279 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #36: GFLOPs: 2.9635. Time: 291.5370 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #37: GFLOPs: 5.3322. Time: 162.0288 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #38: GFLOPs: 1.5927. Time: 542.4658 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #39: GFLOPs: 7.8384. Time: 110.2223 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #40: GFLOPs: 22.8372. Time: 37.8316 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #41: GFLOPs: 13.0815. Time: 66.0451 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #42: GFLOPs: 0.7253. Time: 1191.2067 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #43: GFLOPs: 7.1497. Time: 120.8397 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #44: GFLOPs: 6.9743. Time: 123.8796 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #45: GFLOPs: 1.2680. Time: 681.3374 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #46: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(56), T.int64(56), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(58), T.int64(58), T.int64(2)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
        for b_0_oco_0_oh_0_ow_0_fused_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(29), T.int64(57)):
                for ax3_ax4_fused in T.vectorized(T.int64(10)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(58), ax2)
                        v_i3 = T.axis.spatial(T.int64(58), b_0_oco_0_oh_0_ow_0_fused_fused * T.int64(4) + ax3_ax4_fused // T.int64(2))
                        v_i4 = T.axis.spatial(T.int64(2), ax3_ax4_fused % T.int64(2))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for oci_0 in range(T.int64(1)):
                for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(2)):
                        for oci_3_fused_init in T.vectorized(T.int64(2)):
                            with T.block("DepthwiseConv2d_init"):
                                v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                                v_oco = T.axis.spatial(T.int64(29), oco_1 * T.int64(29) + oco_2_init * T.int64(29) + oco_3_init)
                                v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(2) + oh_2_init + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_fused_fused * T.int64(2) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                                v_oci = T.axis.spatial(T.int64(2), oci_0 * T.int64(2) + oci_1 * T.int64(2) + oci_2_init * T.int64(2) + oci_3_fused_init)
                                T.reads()
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(2)):
                        for oci_3_fused in T.vectorized(T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                                v_oco = T.axis.spatial(T.int64(29), oco_1 * T.int64(29) + oco_2 * T.int64(29) + oco_3)
                                v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(2) + oh_2 + oh_3)
                                v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_fused_fused * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                                v_oci = T.axis.spatial(T.int64(2), oci_0 * T.int64(2) + oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3_fused)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(2)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(29), T.int64(28)):
                    for ax3_ax4_fused in T.vectorized(T.int64(4)):
                        with T.block("T_add"):
                            v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                            v_ax3 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_fused_fused * T.int64(2) + ax3_ax4_fused // T.int64(2))
                            v_ax4 = T.axis.spatial(T.int64(2), ax3_ax4_fused % T.int64(2))
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 29])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 2, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 1, 1, 2])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 1])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=3)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73 = sch.get_loops(block=b62)
l74 = sch.fuse(l65, l66, l67, l68, preserve_unit_iters=True)
sch.parallel(loop=l74)
l75 = sch.fuse(l72, l73, preserve_unit_iters=True)
sch.vectorize(loop=l75)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b63)
l97 = sch.fuse(l76, preserve_unit_iters=True)
sch.parallel(loop=l97)
l98 = sch.fuse(l96, preserve_unit_iters=True)
sch.vectorize(loop=l98)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b64)
l106 = sch.fuse(l104, l105, preserve_unit_iters=True)
sch.vectorize(loop=l106)
b107 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b107)
b129 = sch.decompose_reduction(block=b107, loop=l115)
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #47: GFLOPs: 4.8608. Time: 177.7424 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #48: GFLOPs: 15.1065. Time: 57.1918 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #49: GFLOPs: 9.3746. Time: 92.1609 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #50: GFLOPs: 4.0666. Time: 212.4560 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #51: GFLOPs: 13.1062. Time: 65.9205 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #52: GFLOPs: 1.4890. Time: 580.2520 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #53: GFLOPs: 10.5084. Time: 82.2165 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #54: GFLOPs: 15.8439. Time: 54.5301 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #55: GFLOPs: 2.3949. Time: 360.7506 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #56: GFLOPs: 8.6119. Time: 100.3227 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #57: GFLOPs: 4.1340. Time: 208.9888 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:121] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #58: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(56), T.int64(56), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused in T.parallel(T.int64(232), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1)):
                with T.block("DepthwiseConv2d_init"):
                    v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                    v_oco = T.axis.spatial(T.int64(29), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(8) + oco_2_init + oco_3_init)
                    v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(8) // T.int64(4) * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                    v_oci = T.axis.spatial(T.int64(2), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(4) // T.int64(2) + oci_2_init + oci_3_init)
                    T.reads()
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1)):
                with T.block("DepthwiseConv2d_update"):
                    v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                    v_oco = T.axis.spatial(T.int64(29), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(8) + oco_2 + oco_3)
                    v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(8) // T.int64(4) * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                    v_oci = T.axis.spatial(T.int64(2), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(4) // T.int64(2) + oci_2 + oci_3)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                    T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(2) + v_oco, v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(57) and T.int64(1) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(57), p0[v_b, v_oci // T.int64(2) + v_oco, v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_oci % T.int64(2)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(14), T.int64(1)):
                with T.block("T_add"):
                    v_ax0 = T.axis.spatial(T.int64(1), ax0)
                    v_ax1 = T.axis.spatial(T.int64(29), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(8) + ax1)
                    v_ax2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) * T.int64(14) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(8) // T.int64(4) * T.int64(14) + ax3)
                    v_ax4 = T.axis.spatial(T.int64(2), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(4) // T.int64(2) + ax4)
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[29, 1, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 2, 7])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 2, 7])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63 = sch.get_child_blocks(b61)
l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b62)
l88 = sch.fuse(l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l88)
sch.annotate(block_or_loop=l88, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l88, ann_key="pragma_unroll_explicit", ann_val=1)
l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b63)
b95 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b95)
b111 = sch.decompose_reduction(block=b95, loop=l97)
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #59: GFLOPs: 15.4188. Time: 56.0333 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #60: GFLOPs: 9.2812. Time: 93.0885 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #61: GFLOPs: 4.2755. Time: 202.0730 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #62: GFLOPs: 22.5321. Time: 38.3439 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #63: GFLOPs: 5.5154. Time: 156.6468 us. Best GFLOPs: 23.7903
2024-04-28 21:11:47 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #64: GFLOPs: 5.5126. Time: 156.7273 us. Best GFLOPs: 23.7903
2024-04-28 22:40:47 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:40:48 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-28 22:40:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45b0028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c7d3d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c06f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x385f058)]: 0 failure(s)
2024-04-28 22:40:53 [INFO] [evolutionary_search.cc:723] Sampled 453 candidate(s)
2024-04-28 22:41:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45b0028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c7d3d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c06f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x385f058)]: 0 failure(s)
2024-04-28 22:41:14 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45b0028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c7d3d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c06f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x385f058)]: 0 failure(s)
2024-04-28 22:41:24 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45b0028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c7d3d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c06f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x385f058)]: 0 failure(s)
2024-04-28 22:41:35 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x45b0028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3c7d3d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c06f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x385f058)]: 0 failure(s)
2024-04-28 22:41:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9574  0.9384  0.9384  0.9295  0.9206  0.8866  0.8772  0.8710  0.8625  0.8602  0.8602  0.8494  0.8466  0.8421  0.8421  0.8326
[17 : 32]:	0.8285  0.8253  0.8253  0.7652  0.7588  0.7566  0.7551  0.7548  0.7534  0.7510  0.7510  0.7462  0.7449  0.7369  0.7362  0.7353
[33 : 48]:	0.7344  0.7339  0.7329  0.7301  0.7301  0.7271  0.7221  0.7195  0.7180  0.7134  0.7129  0.7119  0.7119  0.7071  0.7034  0.7015
[49 : 64]:	0.6989  0.6982  0.6977  0.6976  0.6951  0.6949  0.6947  0.6946  0.6929  0.6803  0.6784  0.6763  0.6751  0.6730  0.6730  0.6724
2024-04-28 22:41:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:41:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #65: GFLOPs: 4.3469. Time: 198.7566 us. Best GFLOPs: 23.7903
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #66: GFLOPs: 36.7762. Time: 23.4926 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #67: GFLOPs: 33.0342. Time: 26.1537 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #68: GFLOPs: 22.9406. Time: 37.6611 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #69: GFLOPs: 19.5721. Time: 44.1429 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #70: GFLOPs: 24.2659. Time: 35.6043 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #71: GFLOPs: 21.0519. Time: 41.0399 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #72: GFLOPs: 4.4704. Time: 193.2659 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #73: GFLOPs: 15.9057. Time: 54.3180 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #74: GFLOPs: 29.0199. Time: 29.7715 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #75: GFLOPs: 10.1848. Time: 84.8293 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #76: GFLOPs: 12.9578. Time: 66.6754 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #77: GFLOPs: 9.9667. Time: 86.6857 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #78: GFLOPs: 18.3272. Time: 47.1413 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #79: GFLOPs: 12.5644. Time: 68.7631 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #80: GFLOPs: 25.5313. Time: 33.8396 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #81: GFLOPs: 17.5812. Time: 49.1415 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #82: GFLOPs: 16.4190. Time: 52.6200 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #83: GFLOPs: 18.0929. Time: 47.7519 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #84: GFLOPs: 23.5603. Time: 36.6704 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #85: GFLOPs: 4.1252. Time: 209.4360 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #86: GFLOPs: 4.3568. Time: 198.3021 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #87: GFLOPs: 4.1018. Time: 210.6338 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #88: GFLOPs: 7.7507. Time: 111.4695 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #89: GFLOPs: 12.1337. Time: 71.2039 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #90: GFLOPs: 9.9378. Time: 86.9377 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #91: GFLOPs: 10.4477. Time: 82.6947 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #92: GFLOPs: 26.9451. Time: 32.0640 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #93: GFLOPs: 14.1486. Time: 61.0640 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #94: GFLOPs: 19.2883. Time: 44.7922 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #95: GFLOPs: 24.0900. Time: 35.8642 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #96: GFLOPs: 25.1773. Time: 34.3153 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #97: GFLOPs: 4.1551. Time: 207.9272 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #98: GFLOPs: 13.0699. Time: 66.1035 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #99: GFLOPs: 12.2649. Time: 70.4425 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #100: GFLOPs: 15.4094. Time: 56.0677 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #101: GFLOPs: 15.1283. Time: 57.1093 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #102: GFLOPs: 16.2747. Time: 53.0865 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #103: GFLOPs: 21.1510. Time: 40.8476 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #104: GFLOPs: 9.2343. Time: 93.5610 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #105: GFLOPs: 9.1674. Time: 94.2434 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #106: GFLOPs: 3.8255. Time: 225.8427 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #107: GFLOPs: 22.7032. Time: 38.0549 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #108: GFLOPs: 15.3276. Time: 56.3667 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #109: GFLOPs: 15.4672. Time: 55.8579 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #110: GFLOPs: 4.3233. Time: 199.8408 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #111: GFLOPs: 33.4651. Time: 25.8170 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #112: GFLOPs: 17.4358. Time: 49.5515 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #113: GFLOPs: 5.9418. Time: 145.4046 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #114: GFLOPs: 4.0122. Time: 215.3362 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #115: GFLOPs: 10.2219. Time: 84.5211 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #116: GFLOPs: 20.2344. Time: 42.6980 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #117: GFLOPs: 11.7606. Time: 73.4628 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #118: GFLOPs: 17.4509. Time: 49.5084 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #119: GFLOPs: 17.9994. Time: 47.9997 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #120: GFLOPs: 11.2657. Time: 76.6899 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #121: GFLOPs: 11.4307. Time: 75.5833 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #122: GFLOPs: 26.4422. Time: 32.6738 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #123: GFLOPs: 11.1953. Time: 77.1723 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #124: GFLOPs: 14.7830. Time: 58.4433 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #125: GFLOPs: 14.9675. Time: 57.7230 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #126: GFLOPs: 0.5250. Time: 1645.5088 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #127: GFLOPs: 16.1828. Time: 53.3881 us. Best GFLOPs: 36.7762
2024-04-28 22:43:03 [INFO] [task_scheduler.cc:131] [Task #10: fused_nn_contrib_depthwise_conv2d_NCHWc_add_3] Trial #128: GFLOPs: 6.1384. Time: 140.7472 us. Best GFLOPs: 36.7762
