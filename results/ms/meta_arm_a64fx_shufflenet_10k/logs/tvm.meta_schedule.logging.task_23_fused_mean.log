2024-04-28 20:38:40 [INFO] [task_scheduler.cc:160] Initializing Task #23: "fused_mean"
2024-04-28 20:38:40 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(7), T.int64(7), T.int64(4)), "float32"), T_divide: T.Buffer((T.int64(1), T.int64(256), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        p0_red = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(4)))
        for ax0, ax1, ax2, k2, k3 in T.grid(T.int64(1), T.int64(256), T.int64(4), T.int64(7), T.int64(7)):
            with T.block("p0_red"):
                v_ax0, v_ax1, v_ax2, v_k2, v_k3 = T.axis.remap("SSSRR", [ax0, ax1, ax2, k2, k3])
                T.reads(p0[v_ax0, v_ax1, v_k2, v_k3, v_ax2])
                T.writes(p0_red[v_ax0, v_ax1, v_ax2])
                with T.init():
                    p0_red[v_ax0, v_ax1, v_ax2] = T.float32(0)
                p0_red[v_ax0, v_ax1, v_ax2] = p0_red[v_ax0, v_ax1, v_ax2] + p0[v_ax0, v_ax1, v_k2, v_k3, v_ax2]
        for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(256), T.int64(4)):
            with T.block("T_divide"):
                v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                T.reads(p0_red[v_ax0, v_ax1, v_ax2])
                T.writes(T_divide[v_ax0, v_ax1, v_ax2])
                T_divide[v_ax0, v_ax1, v_ax2] = p0_red[v_ax0, v_ax1, v_ax2] * T.float32(0.020408163265306121)
2024-04-28 20:38:40 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:38:40 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(7), T.int64(7), T.int64(4)), "float32"), T_divide: T.Buffer((T.int64(1), T.int64(256), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            p0_red = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(4)))
            p0_red_rf = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(4), T.int64(49)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(256)):
                for ax0_1, ax1_1, ax2, ax3, ax4 in T.grid(T.int64(49), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("p0_red_rf"):
                        vk2_k3_fused_0, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(256), ax1 + ax2)
                        v_ax2, vk2_k3_fused_1 = T.axis.remap("SR", [ax3, ax4])
                        T.reads(p0[v_ax0, v_ax1, (vk2_k3_fused_0 + vk2_k3_fused_1) // T.int64(7), (vk2_k3_fused_0 + vk2_k3_fused_1) % T.int64(7), v_ax2])
                        T.writes(p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_0])
                        with T.init():
                            p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_0] = T.float32(0)
                        p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_0] = p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_0] + p0[v_ax0, v_ax1, (vk2_k3_fused_0 + vk2_k3_fused_1) // T.int64(7), (vk2_k3_fused_0 + vk2_k3_fused_1) % T.int64(7), v_ax2]
                for ax2, k2_k3_fused_0 in T.grid(T.int64(4), T.int64(49)):
                    with T.block("p0_red"):
                        vk2_k3_fused_0, v_ax0, v_ax1, v_ax2 = T.axis.remap("RSSS", [k2_k3_fused_0, ax0, ax1, ax2])
                        T.reads(p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_0])
                        T.writes(p0_red[v_ax0, v_ax1, v_ax2])
                        with T.init():
                            p0_red[v_ax0, v_ax1, v_ax2] = T.float32(0)
                        p0_red[v_ax0, v_ax1, v_ax2] = p0_red[v_ax0, v_ax1, v_ax2] + p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_0]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(256), T.int64(4)):
                with T.block("T_divide"):
                    v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    T.reads(p0_red[v_ax0, v_ax1, v_ax2])
                    T.writes(T_divide[v_ax0, v_ax1, v_ax2])
                    T_divide[v_ax0, v_ax1, v_ax2] = p0_red[v_ax0, v_ax1, v_ax2] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="p0_red", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
l2, l3, l4, l5, l6 = sch.get_loops(block=b0)
l7 = sch.fuse(l5, l6, preserve_unit_iters=True)
v8, v9 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[49, 1])
l10, l11 = sch.split(loop=l7, factors=[v8, v9], preserve_unit_iters=True)
b12 = sch.rfactor(loop=l10, factor_axis=3)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v13 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v13)
b14, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l15 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b14, decision=1)
sch.compute_at(block=b14, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:40 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(7), T.int64(7), T.int64(4)), "float32"), T_divide: T.Buffer((T.int64(1), T.int64(256), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            p0_red = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(4)))
            p0_red_rf = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(4), T.int64(1)))
            for ax0, ax1 in T.grid(T.int64(1), T.int64(256)):
                for ax0_1, ax1_1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(49)):
                    with T.block("p0_red_rf"):
                        vk2_k3_fused_1, v_ax0 = T.axis.remap("SS", [ax0_1, ax1_1])
                        v_ax1 = T.axis.spatial(T.int64(256), ax1 + ax2)
                        v_ax2, vk2_k3_fused_0 = T.axis.remap("SR", [ax3, ax4])
                        T.reads(p0[v_ax0, v_ax1, (vk2_k3_fused_0 + vk2_k3_fused_1) // T.int64(7), (vk2_k3_fused_0 + vk2_k3_fused_1) % T.int64(7), v_ax2])
                        T.writes(p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_1])
                        with T.init():
                            p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_1] = T.float32(0)
                        p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_1] = p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_1] + p0[v_ax0, v_ax1, (vk2_k3_fused_0 + vk2_k3_fused_1) // T.int64(7), (vk2_k3_fused_0 + vk2_k3_fused_1) % T.int64(7), v_ax2]
                for ax2 in range(T.int64(4)):
                    for ax0_1, ax1_1, ax2_1, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("p0_red"):
                            vk2_k3_fused_1, v_ax0 = T.axis.remap("RS", [ax0_1, ax1_1])
                            v_ax1 = T.axis.spatial(T.int64(256), ax1 + ax2_1)
                            v_ax2 = T.axis.spatial(T.int64(4), ax2 + ax3)
                            T.reads(p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_1])
                            T.writes(p0_red[v_ax0, v_ax1, v_ax2])
                            with T.init():
                                p0_red[v_ax0, v_ax1, v_ax2] = T.float32(0)
                            p0_red[v_ax0, v_ax1, v_ax2] = p0_red[v_ax0, v_ax1, v_ax2] + p0_red_rf[v_ax0, v_ax1, v_ax2, vk2_k3_fused_1]
                    with T.block("T_divide"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        T.reads(p0_red[v_ax0, v_ax1, v_ax2])
                        T.writes(T_divide[v_ax0, v_ax1, v_ax2])
                        T_divide[v_ax0, v_ax1, v_ax2] = p0_red[v_ax0, v_ax1, v_ax2] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="p0_red", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
l2, l3, l4, l5, l6 = sch.get_loops(block=b0)
l7 = sch.fuse(l5, l6, preserve_unit_iters=True)
v8, v9 = sch.sample_perfect_tile(loop=l7, n=2, max_innermost_factor=64, decision=[49, 1])
l10, l11 = sch.split(loop=l7, factors=[v8, v9], preserve_unit_iters=True)
b12 = sch.rfactor(loop=l11, factor_axis=3)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v13 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v13)
b14, = sch.get_producers(block=b0)
sch.unannotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer")
l15 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l15, preserve_unit_loops=True, index=-1)
l16 = sch.sample_compute_location(block=b14, decision=1)
sch.compute_at(block=b14, loop=l16, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:40 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(7), T.int64(7), T.int64(4)), "float32"), T_divide: T.Buffer((T.int64(1), T.int64(256), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            p0_red = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(4)))
            for ax0, ax1, ax2, k2, k3 in T.grid(T.int64(1), T.int64(256), T.int64(4), T.int64(7), T.int64(7)):
                with T.block("p0_red"):
                    v_ax0, v_ax1, v_ax2, v_k2, v_k3 = T.axis.remap("SSSRR", [ax0, ax1, ax2, k2, k3])
                    T.reads(p0[v_ax0, v_ax1, v_k2, v_k3, v_ax2])
                    T.writes(p0_red[v_ax0, v_ax1, v_ax2])
                    with T.init():
                        p0_red[v_ax0, v_ax1, v_ax2] = T.float32(0)
                    p0_red[v_ax0, v_ax1, v_ax2] = p0_red[v_ax0, v_ax1, v_ax2] + p0[v_ax0, v_ax1, v_k2, v_k3, v_ax2]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(256), T.int64(4)):
                with T.block("T_divide"):
                    v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                    T.reads(p0_red[v_ax0, v_ax1, v_ax2])
                    T.writes(T_divide[v_ax0, v_ax1, v_ax2])
                    T_divide[v_ax0, v_ax1, v_ax2] = p0_red[v_ax0, v_ax1, v_ax2] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="p0_red", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
l3 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l3, preserve_unit_loops=True, index=-1)
2024-04-28 21:07:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:07:43 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 21:07:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4da10d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3998378)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x547e478)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x53b8cc8)]: 0 failure(s)
2024-04-28 21:07:45 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 21:07:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4da10d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3998378)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x547e478)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x53b8cc8)]: 0 failure(s)
2024-04-28 21:07:48 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4da10d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3998378)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x547e478)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x53b8cc8)]: 0 failure(s)
2024-04-28 21:07:50 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4da10d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3998378)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x547e478)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x53b8cc8)]: 0 failure(s)
2024-04-28 21:07:53 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4da10d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x3998378)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x547e478)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x53b8cc8)]: 0 failure(s)
2024-04-28 21:07:54 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9935  0.9922  0.9866  0.9865  0.9812  0.9787  0.9778  0.9760  0.9740  0.9678  0.9580  0.9485  0.9472  0.9459  0.9370  0.9327
[17 : 32]:	0.9315  0.9242  0.9209  0.9199  0.9160  0.8988  0.8896  0.8875  0.8865  0.8817  0.8806  0.8777  0.8771  0.8754  0.8700  0.8695
[33 : 48]:	0.8642  0.8628  0.8553  0.8521  0.8520  0.8511  0.8463  0.8350  0.8348  0.8308  0.8274  0.8270  0.8228  0.8223  0.8206  0.8146
[49 : 64]:	0.8123  0.8120  0.8095  0.8016  0.7927  0.7885  0.7867  0.7855  0.7836  0.7825  0.7633  0.7619  0.7541  0.7519  0.7458  0.7429
2024-04-28 21:07:54 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:07:54 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #1: GFLOPs: 1.5539. Time: 32.9495 us. Best GFLOPs: 1.5539
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #2: GFLOPs: 3.2503. Time: 15.7524 us. Best GFLOPs: 3.2503
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #3: GFLOPs: 4.8816. Time: 10.4884 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #4: GFLOPs: 2.1494. Time: 23.8211 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #5: GFLOPs: 2.2550. Time: 22.7050 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #6: GFLOPs: 4.1771. Time: 12.2574 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #7: GFLOPs: 3.6050. Time: 14.2025 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #8: GFLOPs: 4.0878. Time: 12.5251 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #9: GFLOPs: 4.3591. Time: 11.7454 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #10: GFLOPs: 4.4531. Time: 11.4977 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #11: GFLOPs: 2.1222. Time: 24.1260 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #12: GFLOPs: 4.8013. Time: 10.6638 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #13: GFLOPs: 4.6756. Time: 10.9504 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #14: GFLOPs: 3.9597. Time: 12.9302 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #15: GFLOPs: 1.7110. Time: 29.9239 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #16: GFLOPs: 2.4531. Time: 20.8715 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #17: GFLOPs: 2.1182. Time: 24.1712 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #18: GFLOPs: 3.8339. Time: 13.3547 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #19: GFLOPs: 1.8992. Time: 26.9584 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #20: GFLOPs: 1.6275. Time: 31.4586 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #21: GFLOPs: 4.4346. Time: 11.5457 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #22: GFLOPs: 4.1906. Time: 12.2178 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #23: GFLOPs: 1.6756. Time: 30.5563 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #24: GFLOPs: 2.3150. Time: 22.1163 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #25: GFLOPs: 2.2273. Time: 22.9874 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #26: GFLOPs: 2.2928. Time: 22.3305 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #27: GFLOPs: 1.7806. Time: 28.7550 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #28: GFLOPs: 4.3148. Time: 11.8662 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #29: GFLOPs: 4.2580. Time: 12.0244 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #30: GFLOPs: 4.5956. Time: 11.1411 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #31: GFLOPs: 4.0786. Time: 12.5533 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #32: GFLOPs: 1.9936. Time: 25.6817 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #33: GFLOPs: 1.8041. Time: 28.3805 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #34: GFLOPs: 4.8164. Time: 10.6303 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #35: GFLOPs: 1.5610. Time: 32.7993 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #36: GFLOPs: 1.5829. Time: 32.3467 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #37: GFLOPs: 4.0808. Time: 12.5465 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #38: GFLOPs: 4.7675. Time: 10.7395 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #39: GFLOPs: 4.5798. Time: 11.1795 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #40: GFLOPs: 4.1273. Time: 12.4054 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #41: GFLOPs: 4.0288. Time: 12.7086 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #42: GFLOPs: 2.2440. Time: 22.8169 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #43: GFLOPs: 4.4238. Time: 11.5738 us. Best GFLOPs: 4.8816
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #44: GFLOPs: 5.1754. Time: 9.8930 us. Best GFLOPs: 5.1754
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #45: GFLOPs: 2.0712. Time: 24.7200 us. Best GFLOPs: 5.1754
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #46: GFLOPs: 4.7427. Time: 10.7954 us. Best GFLOPs: 5.1754
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #47: GFLOPs: 2.3264. Time: 22.0085 us. Best GFLOPs: 5.1754
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #48: GFLOPs: 2.3794. Time: 21.5179 us. Best GFLOPs: 5.1754
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #49: GFLOPs: 2.4437. Time: 20.9521 us. Best GFLOPs: 5.1754
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #50: GFLOPs: 4.1512. Time: 12.3338 us. Best GFLOPs: 5.1754
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #51: GFLOPs: 4.3283. Time: 11.8290 us. Best GFLOPs: 5.1754
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #52: GFLOPs: 4.3623. Time: 11.7370 us. Best GFLOPs: 5.1754
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #53: GFLOPs: 2.7471. Time: 18.6379 us. Best GFLOPs: 5.1754
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #54: GFLOPs: 1.8061. Time: 28.3477 us. Best GFLOPs: 5.1754
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #55: GFLOPs: 3.9981. Time: 12.8062 us. Best GFLOPs: 5.1754
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #56: GFLOPs: 2.0844. Time: 24.5629 us. Best GFLOPs: 5.1754
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #57: GFLOPs: 2.3290. Time: 21.9841 us. Best GFLOPs: 5.1754
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #58: GFLOPs: 4.1370. Time: 12.3761 us. Best GFLOPs: 5.1754
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #59: GFLOPs: 2.3500. Time: 21.7874 us. Best GFLOPs: 5.1754
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #60: GFLOPs: 2.3127. Time: 22.1383 us. Best GFLOPs: 5.1754
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #61: GFLOPs: 2.1952. Time: 23.3233 us. Best GFLOPs: 5.1754
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #62: GFLOPs: 2.2661. Time: 22.5939 us. Best GFLOPs: 5.1754
2024-04-28 21:12:23 [INFO] [task_scheduler.cc:131] [Task #23: fused_mean] Trial #63: GFLOPs: 3.9244. Time: 13.0466 us. Best GFLOPs: 5.1754
