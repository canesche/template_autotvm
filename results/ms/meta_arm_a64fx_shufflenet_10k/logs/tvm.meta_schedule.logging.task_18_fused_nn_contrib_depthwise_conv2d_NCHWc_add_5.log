2024-04-28 20:38:20 [INFO] [task_scheduler.cc:160] Initializing Task #18: "fused_nn_contrib_depthwise_conv2d_NCHWc_add_5"
2024-04-28 20:38:20 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(4)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b, oco, oh, ow, oci, kh, kw in T.grid(T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_oco, v_oh, v_ow, v_oci, v_kh, v_kw = T.axis.remap("SSSSSRR", [b, oco, oh, ow, oci, kh, kw])
                T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                with T.init():
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
2024-04-28 20:38:20 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:38:20 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1, oh_1 in T.grid(T.int64(1), T.int64(29), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(5), T.int64(5), T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(29), oco_0 + ax1)
                        v_i2 = T.axis.spatial(T.int64(30), oh_1 * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(30), ow_0 * T.int64(4) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(29), oco_0 + oco_1 + oco_2 + oco_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)):
                with T.block("T_add"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[29, 1, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 1])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v58 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v58)
l59 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l59, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:20 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)))
            for b_0, oco_0 in T.grid(T.int64(1), T.int64(29)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(29), T.int64(29), T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(29), oco_0 + ax1)
                        v_i2 = T.axis.spatial(T.int64(30), ax2)
                        v_i3 = T.axis.spatial(T.int64(30), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1)):
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(29), oco_0 + oco_1 + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4)):
                        with T.block("T_add"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(29), oco_0 + ax1)
                            v_ax2 = T.axis.spatial(T.int64(14), oh_1 * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), ax4)
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[29, 1, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 1])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
2024-04-28 20:38:20 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(4)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)))
            for b_0, oco_0, oh_0, ow_0, oci_0 in T.grid(T.int64(1), T.int64(29), T.int64(1), T.int64(7), T.int64(1)):
                for b_1, oco_1, oh_1 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(5), T.int64(5), T.int64(4)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(29), oco_0 + ax1)
                            v_i2 = T.axis.spatial(T.int64(30), oh_1 * T.int64(4) + ax2)
                            v_i3 = T.axis.spatial(T.int64(30), ow_0 * T.int64(4) + ax3)
                            v_i4 = T.axis.spatial(T.int64(4), ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(29), oco_0 + oco_1 + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_0 * T.int64(14) + oh_1 * T.int64(2) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_0 * T.int64(4) + oci_1 * T.int64(4) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(4)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(29), oco_0 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(14), ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ow_0 * T.int64(2) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), ax4)
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[29, 1, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 1])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
2024-04-28 20:59:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:59:33 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:59:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b946a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5951e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4f1a108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d8b068)]: 0 failure(s)
2024-04-28 20:59:38 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 20:59:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b946a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5951e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4f1a108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d8b068)]: 0 failure(s)
2024-04-28 20:59:50 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b946a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5951e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4f1a108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d8b068)]: 0 failure(s)
2024-04-28 20:59:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b946a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5951e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4f1a108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d8b068)]: 0 failure(s)
2024-04-28 21:00:02 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b946a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5951e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4f1a108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d8b068)]: 0 failure(s)
2024-04-28 21:00:03 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9990  0.9976  0.9975  0.9955  0.9954  0.9954  0.9950  0.9945  0.9938  0.9920  0.9911  0.9903  0.9902  0.9897  0.9897
[17 : 32]:	0.9893  0.9892  0.9889  0.9889  0.9888  0.9884  0.9865  0.9863  0.9862  0.9862  0.9860  0.9855  0.9852  0.9846  0.9842  0.9832
[33 : 48]:	0.9830  0.9828  0.9827  0.9827  0.9814  0.9806  0.9803  0.9803  0.9793  0.9786  0.9782  0.9781  0.9769  0.9765  0.9759  0.9758
[49 : 64]:	0.9758  0.9757  0.9746  0.9736  0.9735  0.9735  0.9727  0.9722  0.9721  0.9717  0.9713  0.9707  0.9706  0.9706  0.9701  0.9693
2024-04-28 21:00:03 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:00:03 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #1: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused in T.parallel(T.int64(7), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(29), T.int64(5), T.int64(29)):
                for ax4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(30), ax3)
                        v_i4 = T.axis.spatial(T.int64(4), ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oci_1 in T.grid(T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(29), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(29), oco_2_init * T.int64(29) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(4), T.int64(3), T.int64(3), T.int64(1), T.int64(29), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(29), oco_2 * T.int64(29) + oco_3)
                        v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 * T.int64(7) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(4) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(29), T.int64(2)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_add"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused * T.int64(2) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), ax3_ax4_fused // T.int64(4))
                            v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 29])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 2, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 4, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b62)
l78 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b63)
l97 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l97)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b64)
l106 = sch.fuse(l104, l105, preserve_unit_iters=True)
sch.vectorize(loop=l106)
b107 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b107)
b125 = sch.decompose_reduction(block=b107, loop=l111)
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #2: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(2)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(29), oco_1 * T.int64(29) + oco_2_init * T.int64(29) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(7) * T.int64(7) + oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(7) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(2)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(29), oco_1 * T.int64(29) + oco_2 * T.int64(29) + oco_3)
                            v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(7) * T.int64(7) + oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(7) * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh * T.int64(2) + v_kh and v_oh * T.int64(2) + v_kh < T.int64(29) and T.int64(1) <= v_ow * T.int64(2) + v_kw and v_ow * T.int64(2) + v_kw < T.int64(29), p0[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh - T.int64(1), v_ow * T.int64(2) + v_kw - T.int64(1), v_oci % T.int64(4)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(29), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(8)):
                    with T.block("T_add"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(7) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(7) * T.int64(2) + ax3_ax4_fused // T.int64(4))
                        v_ax4 = T.axis.spatial(T.int64(4), ax3_ax4_fused % T.int64(4))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 29])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 1, 7, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 2])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63 = sch.get_child_blocks(b61)
l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b62)
l88 = sch.fuse(l64, l65, l66, l67, l68, preserve_unit_iters=True)
sch.parallel(loop=l88)
l89 = sch.fuse(l87, preserve_unit_iters=True)
sch.vectorize(loop=l89)
sch.annotate(block_or_loop=l88, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l88, ann_key="pragma_unroll_explicit", ann_val=1)
l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b63)
l96 = sch.fuse(l94, l95, preserve_unit_iters=True)
sch.vectorize(loop=l96)
b97 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b97)
b118 = sch.decompose_reduction(block=b97, loop=l104)
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #3: GFLOPs: 8.1537. Time: 52.9798 us. Best GFLOPs: 8.1537
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #4: GFLOPs: 0.1813. Time: 2382.2716 us. Best GFLOPs: 8.1537
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #5: GFLOPs: 4.4159. Time: 97.8256 us. Best GFLOPs: 8.1537
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #6: GFLOPs: 0.7044. Time: 613.2252 us. Best GFLOPs: 8.1537
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #7: GFLOPs: 2.1358. Time: 202.2628 us. Best GFLOPs: 8.1537
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #8: GFLOPs: 13.8277. Time: 31.2405 us. Best GFLOPs: 13.8277
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #9: GFLOPs: 5.4524. Time: 79.2287 us. Best GFLOPs: 13.8277
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #10: GFLOPs: 9.5654. Time: 45.1613 us. Best GFLOPs: 13.8277
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #11: GFLOPs: 14.2539. Time: 30.3065 us. Best GFLOPs: 14.2539
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #12: GFLOPs: 4.1718. Time: 103.5478 us. Best GFLOPs: 14.2539
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #13: GFLOPs: 2.6413. Time: 163.5474 us. Best GFLOPs: 14.2539
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #14: GFLOPs: 8.6857. Time: 49.7349 us. Best GFLOPs: 14.2539
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #15: GFLOPs: 10.3018. Time: 41.9327 us. Best GFLOPs: 14.2539
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #16: GFLOPs: 0.3219. Time: 1341.7807 us. Best GFLOPs: 14.2539
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #17: GFLOPs: 12.9189. Time: 33.4380 us. Best GFLOPs: 14.2539
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #18: GFLOPs: 3.2793. Time: 131.7305 us. Best GFLOPs: 14.2539
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #19: GFLOPs: 3.4506. Time: 125.1912 us. Best GFLOPs: 14.2539
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #20: GFLOPs: 6.2632. Time: 68.9715 us. Best GFLOPs: 14.2539
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #21: GFLOPs: 7.0703. Time: 61.0981 us. Best GFLOPs: 14.2539
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #22: GFLOPs: 1.4643. Time: 295.0128 us. Best GFLOPs: 14.2539
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #23: GFLOPs: 6.7649. Time: 63.8570 us. Best GFLOPs: 14.2539
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #24: GFLOPs: 5.3930. Time: 80.1013 us. Best GFLOPs: 14.2539
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #25: GFLOPs: 5.7124. Time: 75.6228 us. Best GFLOPs: 14.2539
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #26: GFLOPs: 12.3207. Time: 35.0617 us. Best GFLOPs: 14.2539
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #27: GFLOPs: 8.0643. Time: 53.5677 us. Best GFLOPs: 14.2539
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #28: GFLOPs: 4.3382. Time: 99.5773 us. Best GFLOPs: 14.2539
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #29: GFLOPs: 12.1159. Time: 35.6543 us. Best GFLOPs: 14.2539
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #30: GFLOPs: 2.7812. Time: 155.3237 us. Best GFLOPs: 14.2539
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #31: GFLOPs: 15.7945. Time: 27.3503 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #32: GFLOPs: 4.9628. Time: 87.0439 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #33: GFLOPs: 4.9888. Time: 86.5916 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #34: GFLOPs: 10.1206. Time: 42.6835 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #35: GFLOPs: 3.8774. Time: 111.4107 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #36: GFLOPs: 7.5249. Time: 57.4071 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #37: GFLOPs: 8.2575. Time: 52.3139 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #38: GFLOPs: 0.3539. Time: 1220.6554 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #39: GFLOPs: 6.0154. Time: 71.8136 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #40: GFLOPs: 15.5969. Time: 27.6968 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #41: GFLOPs: 5.4232. Time: 79.6543 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #42: GFLOPs: 0.9105. Time: 474.4419 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #43: GFLOPs: 10.4675. Time: 41.2691 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #44: GFLOPs: 7.1986. Time: 60.0095 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #45: GFLOPs: 2.5063. Time: 172.3587 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #46: GFLOPs: 3.6059. Time: 119.7991 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #47: GFLOPs: 3.4058. Time: 126.8387 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #48: GFLOPs: 1.8528. Time: 233.1551 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #49: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(870)):
            for i3 in range(T.int64(30)):
                for i4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(29), i0_i1_i2_fused // T.int64(30))
                        v_i2 = T.axis.spatial(T.int64(30), i0_i1_i2_fused % T.int64(30))
                        v_i3, v_i4 = T.axis.remap("SS", [i3, i4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(29), T.int64(7), T.int64(2), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(29), oco_1 * T.int64(29) + oco_2_init * T.int64(29) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2_init * T.int64(7) + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused * T.int64(2) + oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(29), T.int64(7), T.int64(2), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(29), oco_1 * T.int64(29) + oco_2 * T.int64(29) + oco_3)
                        v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(14) + oh_2 * T.int64(7) + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused * T.int64(2) + oci_1 * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(29), T.int64(14), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_add"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused * T.int64(2) + ax4_fused)
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 29])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 2, 7])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 7, 1, 2])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 1])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69 = sch.get_loops(block=b62)
l70 = sch.fuse(l65, l66, l67, preserve_unit_iters=True)
sch.parallel(loop=l70)
l71 = sch.fuse(l69, preserve_unit_iters=True)
sch.vectorize(loop=l71)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b63)
l96 = sch.fuse(l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l96)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b64)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b104)
b125 = sch.decompose_reduction(block=b104, loop=l111)
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #50: GFLOPs: 8.9446. Time: 48.2956 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #51: GFLOPs: 2.2525. Time: 191.7812 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #52: GFLOPs: 1.1104. Time: 389.0521 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #53: GFLOPs: 1.0650. Time: 405.6105 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #54: GFLOPs: 10.7672. Time: 40.1204 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #55: GFLOPs: 2.7026. Time: 159.8421 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #56: GFLOPs: 3.5378. Time: 122.1057 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #57: GFLOPs: 8.0489. Time: 53.6698 us. Best GFLOPs: 15.7945
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #58: GFLOPs: 17.1237. Time: 25.2272 us. Best GFLOPs: 17.1237
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #59: GFLOPs: 1.0367. Time: 416.6977 us. Best GFLOPs: 17.1237
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #60: GFLOPs: 12.0351. Time: 35.8937 us. Best GFLOPs: 17.1237
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #61: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(870)):
            for i3 in range(T.int64(30)):
                for i4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(29), i0_i1_i2_fused // T.int64(30))
                        v_i2 = T.axis.spatial(T.int64(30), i0_i1_i2_fused % T.int64(30))
                        v_i3, v_i4 = T.axis.remap("SS", [i3, i4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(2)):
                    for oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(29), oco_1 * T.int64(29) + oco_2_init * T.int64(29) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused * T.int64(2) + oci_1 * T.int64(2) + oci_2_init * T.int64(2) + oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(2)):
                    for oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(29), oco_1 * T.int64(29) + oco_2 * T.int64(29) + oco_3)
                            v_oh = T.axis.spatial(T.int64(14), oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(14), ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                            v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused * T.int64(2) + oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(29), T.int64(14), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_add"):
                        v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                        v_ax4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_fused * T.int64(2) + ax4_fused)
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 29])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 2])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 1])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69 = sch.get_loops(block=b62)
l70 = sch.fuse(l65, l66, l67, preserve_unit_iters=True)
sch.parallel(loop=l70)
l71 = sch.fuse(l69, preserve_unit_iters=True)
sch.vectorize(loop=l71)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b63)
l96 = sch.fuse(l72, l73, l74, l75, l76, preserve_unit_iters=True)
sch.parallel(loop=l96)
l97 = sch.fuse(l95, preserve_unit_iters=True)
sch.vectorize(loop=l97)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b64)
l104 = sch.fuse(l103, preserve_unit_iters=True)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b105)
b126 = sch.decompose_reduction(block=b105, loop=l112)
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #62: GFLOPs: 1.4455. Time: 298.8411 us. Best GFLOPs: 17.1237
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #63: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(870)):
            for i3 in range(T.int64(30)):
                for i4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(29), i0_i1_i2_fused // T.int64(30))
                        v_i2 = T.axis.spatial(T.int64(30), i0_i1_i2_fused % T.int64(30))
                        v_i3, v_i4 = T.axis.remap("SS", [i3, i4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(2), T.int64(1), T.int64(29), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("DepthwiseConv2d_init"):
                    v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                    v_oco = T.axis.spatial(T.int64(29), oco_2_init * T.int64(29) + oco_3_init)
                    v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(2) * T.int64(7) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(14), ow_2_init * T.int64(2) + ow_3_init)
                    v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) * T.int64(2) + oci_2_init + oci_3_init)
                    T.reads()
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(2), T.int64(1)):
                with T.block("DepthwiseConv2d_update"):
                    v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                    v_oco = T.axis.spatial(T.int64(29), oco_2 * T.int64(29) + oco_3)
                    v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(2) * T.int64(7) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(14), ow_2 * T.int64(2) + ow_3)
                    v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) * T.int64(2) + oci_2 + oci_3)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(29), T.int64(7), T.int64(14)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_add"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(2) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(14), ax3)
                        v_ax4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) * T.int64(2) + ax4_fused)
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 29])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 2, 7, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 2])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 2, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69 = sch.get_loops(block=b62)
l70 = sch.fuse(l65, l66, l67, preserve_unit_iters=True)
sch.parallel(loop=l70)
l71 = sch.fuse(l69, preserve_unit_iters=True)
sch.vectorize(loop=l71)
l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b63)
l96 = sch.fuse(l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, preserve_unit_iters=True)
sch.parallel(loop=l96)
sch.annotate(block_or_loop=l96, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l96, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b64)
l103 = sch.fuse(l102, preserve_unit_iters=True)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b104)
b120 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-28 21:12:08 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #64: GFLOPs: 1.8653. Time: 231.5945 us. Best GFLOPs: 17.1237
2024-04-28 22:12:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:12:54 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-04-28 22:12:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b946a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5951e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4f1a108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d8b068)]: 0 failure(s)
2024-04-28 22:12:59 [INFO] [evolutionary_search.cc:723] Sampled 453 candidate(s)
2024-04-28 22:13:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b946a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5951e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4f1a108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d8b068)]: 0 failure(s)
2024-04-28 22:13:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b946a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5951e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4f1a108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d8b068)]: 0 failure(s)
2024-04-28 22:13:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b946a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5951e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4f1a108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d8b068)]: 0 failure(s)
2024-04-28 22:13:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b946a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5951e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4f1a108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d8b068)]: 0 failure(s)
2024-04-28 22:13:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9964  0.9001  0.8803  0.8743  0.8601  0.8568  0.8539  0.8497  0.8426  0.8348  0.8348  0.8327  0.8307  0.8300  0.8263  0.8212
[17 : 32]:	0.8149  0.8149  0.8149  0.8149  0.8115  0.8115  0.8067  0.8021  0.8014  0.8014  0.8014  0.7973  0.7973  0.7967  0.7854  0.7851
[33 : 48]:	0.7851  0.7851  0.7826  0.7811  0.7777  0.7761  0.7743  0.7743  0.7729  0.7710  0.7669  0.7642  0.7642  0.7636  0.7631  0.7603
[49 : 64]:	0.7600  0.7515  0.7513  0.7509  0.7501  0.7489  0.7489  0.7479  0.7468  0.7468  0.7462  0.7458  0.7439  0.7416  0.7416  0.7398
2024-04-28 22:13:46 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:13:46 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #65: GFLOPs: 9.5208. Time: 45.3726 us. Best GFLOPs: 17.1237
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #66: GFLOPs: 7.6708. Time: 56.3157 us. Best GFLOPs: 17.1237
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #67: GFLOPs: 10.9850. Time: 39.3249 us. Best GFLOPs: 17.1237
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #68: GFLOPs: 6.7748. Time: 63.7631 us. Best GFLOPs: 17.1237
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #69: GFLOPs: 11.9404. Time: 36.1785 us. Best GFLOPs: 17.1237
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #70: GFLOPs: 7.3195. Time: 59.0186 us. Best GFLOPs: 17.1237
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #71: GFLOPs: 8.4855. Time: 50.9083 us. Best GFLOPs: 17.1237
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #72: GFLOPs: 6.7417. Time: 64.0764 us. Best GFLOPs: 17.1237
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #73: GFLOPs: 11.6759. Time: 36.9980 us. Best GFLOPs: 17.1237
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #74: GFLOPs: 9.2706. Time: 46.5971 us. Best GFLOPs: 17.1237
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #75: GFLOPs: 12.6521. Time: 34.1433 us. Best GFLOPs: 17.1237
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #76: GFLOPs: 14.3893. Time: 30.0213 us. Best GFLOPs: 17.1237
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #77: GFLOPs: 12.9424. Time: 33.3774 us. Best GFLOPs: 17.1237
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #78: GFLOPs: 18.3783. Time: 23.5052 us. Best GFLOPs: 18.3783
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #79: GFLOPs: 8.7355. Time: 49.4518 us. Best GFLOPs: 18.3783
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #80: GFLOPs: 8.9282. Time: 48.3843 us. Best GFLOPs: 18.3783
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #81: GFLOPs: 19.1092. Time: 22.6061 us. Best GFLOPs: 19.1092
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #82: GFLOPs: 19.0636. Time: 22.6601 us. Best GFLOPs: 19.1092
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #83: GFLOPs: 19.0387. Time: 22.6898 us. Best GFLOPs: 19.1092
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #84: GFLOPs: 19.7324. Time: 21.8922 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #85: GFLOPs: 12.2706. Time: 35.2047 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #86: GFLOPs: 12.2341. Time: 35.3099 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #87: GFLOPs: 12.8133. Time: 33.7137 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #88: GFLOPs: 12.0503. Time: 35.8485 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #89: GFLOPs: 8.7962. Time: 49.1102 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #90: GFLOPs: 14.8540. Time: 29.0820 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #91: GFLOPs: 6.1045. Time: 70.7646 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #92: GFLOPs: 11.7087. Time: 36.8941 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #93: GFLOPs: 11.7365. Time: 36.8069 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #94: GFLOPs: 12.0446. Time: 35.8654 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #95: GFLOPs: 12.9364. Time: 33.3928 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #96: GFLOPs: 13.2662. Time: 32.5627 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #97: GFLOPs: 14.2377. Time: 30.3408 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #98: GFLOPs: 14.3975. Time: 30.0041 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #99: GFLOPs: 12.3831. Time: 34.8851 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #100: GFLOPs: 8.6340. Time: 50.0328 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #101: GFLOPs: 12.0263. Time: 35.9199 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #102: GFLOPs: 11.2033. Time: 38.5588 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #103: GFLOPs: 8.8435. Time: 48.8477 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #104: GFLOPs: 8.9959. Time: 48.0201 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #105: GFLOPs: 11.9519. Time: 36.1436 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #106: GFLOPs: 14.4119. Time: 29.9740 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #107: GFLOPs: 14.2855. Time: 30.2394 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #108: GFLOPs: 11.4066. Time: 37.8713 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #109: GFLOPs: 9.2076. Time: 46.9163 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #110: GFLOPs: 13.0817. Time: 33.0219 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #111: GFLOPs: 14.5821. Time: 29.6243 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #112: GFLOPs: 13.3765. Time: 32.2943 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #113: GFLOPs: 9.5000. Time: 45.4722 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #114: GFLOPs: 8.9116. Time: 48.4742 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #115: GFLOPs: 8.5599. Time: 50.4658 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #116: GFLOPs: 11.4709. Time: 37.6590 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #117: GFLOPs: 10.3766. Time: 41.6306 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #118: GFLOPs: 8.8785. Time: 48.6549 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #119: GFLOPs: 12.1939. Time: 35.4263 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #120: GFLOPs: 3.5351. Time: 122.1986 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #121: GFLOPs: 13.1158. Time: 32.9361 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #122: GFLOPs: 12.8834. Time: 33.5304 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #123: GFLOPs: 7.0508. Time: 61.2672 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #124: GFLOPs: 11.8003. Time: 36.6079 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #125: GFLOPs: 13.5576. Time: 31.8628 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #126: GFLOPs: 5.0953. Time: 84.7815 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #127: GFLOPs: 3.0578. Time: 141.2708 us. Best GFLOPs: 19.7324
2024-04-28 22:15:01 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #128: GFLOPs: 10.1905. Time: 42.3907 us. Best GFLOPs: 19.7324
2024-04-28 23:48:05 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:48:06 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:48:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b946a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5951e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4f1a108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d8b068)]: 0 failure(s)
2024-04-28 23:48:10 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 23:48:21 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b946a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5951e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4f1a108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d8b068)]: 0 failure(s)
2024-04-28 23:48:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b946a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5951e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4f1a108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d8b068)]: 0 failure(s)
2024-04-28 23:48:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b946a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5951e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4f1a108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d8b068)]: 0 failure(s)
2024-04-28 23:48:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b946a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5951e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4f1a108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d8b068)]: 0 failure(s)
2024-04-28 23:48:57 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9533  0.9291  0.9291  0.8228  0.8217  0.7781  0.7541  0.7499  0.7478  0.7476  0.7476  0.7476  0.7473  0.7436  0.7394  0.7351
[17 : 32]:	0.7351  0.7351  0.7347  0.7329  0.7288  0.7265  0.7265  0.7260  0.7249  0.7192  0.7184  0.7184  0.7155  0.7136  0.7129  0.6972
[33 : 48]:	0.6952  0.6945  0.6910  0.6910  0.6907  0.6891  0.6874  0.6846  0.6828  0.6826  0.6816  0.6816  0.6777  0.6747  0.6746  0.6735
[49 : 64]:	0.6711  0.6654  0.6652  0.6642  0.6641  0.6641  0.6641  0.6616  0.6615  0.6615  0.6608  0.6598  0.6545  0.6543  0.6541  0.6541
2024-04-28 23:48:58 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:48:58 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #129: GFLOPs: 19.4360. Time: 22.2260 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #130: GFLOPs: 15.3644. Time: 28.1159 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #131: GFLOPs: 9.6496. Time: 44.7672 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #132: GFLOPs: 13.7790. Time: 31.3509 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #133: GFLOPs: 16.4367. Time: 26.2816 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #134: GFLOPs: 5.2235. Time: 82.7007 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #135: GFLOPs: 5.2419. Time: 82.4102 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #136: GFLOPs: 5.2331. Time: 82.5490 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #137: GFLOPs: 10.2867. Time: 41.9944 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #138: GFLOPs: 16.6584. Time: 25.9319 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #139: GFLOPs: 17.0523. Time: 25.3328 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #140: GFLOPs: 17.4425. Time: 24.7662 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #141: GFLOPs: 17.1587. Time: 25.1759 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #142: GFLOPs: 9.3923. Time: 45.9932 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #143: GFLOPs: 5.2391. Time: 82.4541 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #144: GFLOPs: 10.4401. Time: 41.3775 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #145: GFLOPs: 13.3125. Time: 32.4495 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #146: GFLOPs: 13.6361. Time: 31.6796 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #147: GFLOPs: 12.9859. Time: 33.2656 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #148: GFLOPs: 3.6484. Time: 118.4047 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #149: GFLOPs: 14.2049. Time: 30.4108 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #150: GFLOPs: 13.9408. Time: 30.9871 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #151: GFLOPs: 13.9455. Time: 30.9767 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #152: GFLOPs: 15.0160. Time: 28.7683 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #153: GFLOPs: 16.7462. Time: 25.7959 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #154: GFLOPs: 13.5737. Time: 31.8251 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #155: GFLOPs: 12.6850. Time: 34.0547 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #156: GFLOPs: 12.7853. Time: 33.7875 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #157: GFLOPs: 14.8414. Time: 29.1067 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #158: GFLOPs: 9.2913. Time: 46.4936 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #159: GFLOPs: 17.8226. Time: 24.2380 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #160: GFLOPs: 4.9208. Time: 87.7877 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #161: GFLOPs: 6.9343. Time: 62.2971 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #162: GFLOPs: 4.3520. Time: 99.2606 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #163: GFLOPs: 10.3728. Time: 41.6460 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #164: GFLOPs: 10.2462. Time: 42.1603 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #165: GFLOPs: 10.3400. Time: 41.7779 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #166: GFLOPs: 3.0741. Time: 140.5233 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #167: GFLOPs: 13.7435. Time: 31.4319 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #168: GFLOPs: 13.9237. Time: 31.0250 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #169: GFLOPs: 10.9901. Time: 39.3065 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #170: GFLOPs: 12.6574. Time: 34.1291 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #171: GFLOPs: 9.0878. Time: 47.5343 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #172: GFLOPs: 7.5201. Time: 57.4437 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #173: GFLOPs: 9.9669. Time: 43.3418 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #174: GFLOPs: 17.6236. Time: 24.5117 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #175: GFLOPs: 11.7973. Time: 36.6172 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #176: GFLOPs: 14.5324. Time: 29.7256 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #177: GFLOPs: 8.4013. Time: 51.4187 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #178: GFLOPs: 2.0300. Time: 212.8022 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #179: GFLOPs: 10.5692. Time: 40.8721 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #180: GFLOPs: 5.6954. Time: 75.8482 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #181: GFLOPs: 19.3524. Time: 22.3220 us. Best GFLOPs: 19.7324
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #182: GFLOPs: 20.5304. Time: 21.0412 us. Best GFLOPs: 20.5304
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #183: GFLOPs: 19.6262. Time: 22.0106 us. Best GFLOPs: 20.5304
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #184: GFLOPs: 7.1514. Time: 60.4054 us. Best GFLOPs: 20.5304
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #185: GFLOPs: 12.7016. Time: 34.0102 us. Best GFLOPs: 20.5304
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #186: GFLOPs: 12.3881. Time: 34.8709 us. Best GFLOPs: 20.5304
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #187: GFLOPs: 4.1859. Time: 103.2001 us. Best GFLOPs: 20.5304
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #188: GFLOPs: 7.4359. Time: 58.0941 us. Best GFLOPs: 20.5304
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #189: GFLOPs: 2.0417. Time: 211.5792 us. Best GFLOPs: 20.5304
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #190: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)))
        for i0_i1_i2_fused in T.parallel(T.int64(870)):
            for i3 in range(T.int64(30)):
                for i4_fused in T.vectorized(T.int64(4)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(29), i0_i1_i2_fused // T.int64(30))
                        v_i2 = T.axis.spatial(T.int64(30), i0_i1_i2_fused % T.int64(30))
                        v_i3, v_i4 = T.axis.remap("SS", [i3, i4_fused])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(29), T.int64(1), T.int64(7)):
                for oci_3_fused_init in T.vectorized(T.int64(2)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(29), oco_2_init * T.int64(29) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(2) * T.int64(2) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), oci_2_init * T.int64(2) + oci_3_fused_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(29), T.int64(1), T.int64(7)):
                for oci_3_fused in T.vectorized(T.int64(2)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(29), oco_2 * T.int64(29) + oco_3)
                        v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(2) * T.int64(2) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(2) * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), oci_2 * T.int64(2) + oci_3_fused)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(356)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_add"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(29), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(784))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(784) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(4))
                    v_ax4 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(4))
                    T.where(ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1 < T.int64(22736))
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 29])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 2, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 7])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 2])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v58 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v58)
l59 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l59, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b60 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.unroll_explicit")
b61, b62, b63 = sch.get_child_blocks(b60)
l64, l65, l66, l67, l68 = sch.get_loops(block=b61)
l69 = sch.fuse(l64, l65, l66, preserve_unit_iters=True)
sch.parallel(loop=l69)
l70 = sch.fuse(l68, preserve_unit_iters=True)
sch.vectorize(loop=l70)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b62)
l95 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l95)
l96 = sch.fuse(l94, preserve_unit_iters=True)
sch.vectorize(loop=l96)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b63)
l102 = sch.fuse(l97, l98, l99, l100, l101, preserve_unit_iters=True)
l103, l104 = sch.split(loop=l102, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l103)
sch.vectorize(loop=l104)
b105 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b105)
b121 = sch.decompose_reduction(block=b105, loop=l107)
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #191: GFLOPs: 8.3275. Time: 51.8747 us. Best GFLOPs: 20.5304
2024-04-28 23:50:36 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #192: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(4)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(4)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(4)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(4)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(14), T.int64(14), T.int64(4)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused in T.parallel(T.int64(196), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(29), T.int64(3), T.int64(5)):
                for ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(14) * T.int64(2) + ax2)
                        v_i3 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(28) * T.int64(4) + ax3)
                        v_i4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(2) + ax4_fused)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_1, oci_1 in T.grid(T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(29), oco_2_init + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(14) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(28) * T.int64(2) + ow_1 * T.int64(2) + ow_2_init * T.int64(2) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(2) + oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(29), oco_2 + oco_3)
                        v_oh = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(14) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(28) * T.int64(2) + ow_1 * T.int64(2) + ow_2 * T.int64(2) + ow_3)
                        v_oci = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(2) + oci_1 * T.int64(2) + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(4) + v_oco, v_oh * T.int64(2) + v_kh, v_ow * T.int64(2) + v_kw, v_oci % T.int64(4)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(29), T.int64(1), T.int64(2)):
                    for ax4_fused in T.vectorized(T.int64(2)):
                        with T.block("T_add"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(14) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(14), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused // T.int64(28) * T.int64(2) + ax3)
                            v_ax4 = T.axis.spatial(T.int64(4), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_fused_fused % T.int64(28) // T.int64(14) * T.int64(2) + ax4_fused)
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 29, 1])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 14, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 2])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 2, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b62)
l78 = sch.fuse(l65, l66, l67, l68, l69, l70, l71, l72, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b63)
l97 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l97)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b64)
l106 = sch.fuse(l105, preserve_unit_iters=True)
sch.vectorize(loop=l106)
b107 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b107)
b125 = sch.decompose_reduction(block=b107, loop=l111)
2024-04-29 01:16:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:16:54 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:16:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b946a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5951e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4f1a108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d8b068)]: 0 failure(s)
2024-04-29 01:16:58 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 01:17:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b946a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5951e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4f1a108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d8b068)]: 0 failure(s)
2024-04-29 01:17:19 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b946a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5951e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4f1a108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d8b068)]: 0 failure(s)
2024-04-29 01:17:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b946a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5951e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4f1a108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d8b068)]: 0 failure(s)
2024-04-29 01:17:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4b946a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x5951e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x4f1a108)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4d8b068)]: 0 failure(s)
2024-04-29 01:17:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9841  0.9122  0.8597  0.8582  0.8555  0.8462  0.8366  0.8331  0.8331  0.8128  0.8122  0.8030  0.8030  0.7995  0.7966  0.7922
[17 : 32]:	0.7858  0.7826  0.7791  0.7758  0.7740  0.7614  0.7556  0.7525  0.7525  0.7525  0.7442  0.7404  0.7358  0.7339  0.7221  0.7205
[33 : 48]:	0.7127  0.7126  0.7067  0.7055  0.6999  0.6968  0.6968  0.6968  0.6968  0.6856  0.6807  0.6766  0.6766  0.6756  0.6744  0.6713
[49 : 64]:	0.6713  0.6713  0.6706  0.6702  0.6702  0.6702  0.6676  0.6647  0.6647  0.6647  0.6647  0.6618  0.6618  0.6608  0.6590  0.6559
2024-04-29 01:17:47 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:17:47 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #193: GFLOPs: 4.1648. Time: 103.7223 us. Best GFLOPs: 20.5304
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #194: GFLOPs: 22.6700. Time: 19.0553 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #195: GFLOPs: 19.3240. Time: 22.3548 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #196: GFLOPs: 18.8195. Time: 22.9541 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #197: GFLOPs: 16.4174. Time: 26.3126 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #198: GFLOPs: 18.8300. Time: 22.9413 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #199: GFLOPs: 21.9310. Time: 19.6974 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #200: GFLOPs: 19.2776. Time: 22.4086 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #201: GFLOPs: 18.9120. Time: 22.8418 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #202: GFLOPs: 19.4124. Time: 22.2530 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #203: GFLOPs: 22.5639. Time: 19.1449 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #204: GFLOPs: 18.6978. Time: 23.1035 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #205: GFLOPs: 18.4874. Time: 23.3664 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #206: GFLOPs: 18.0934. Time: 23.8753 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #207: GFLOPs: 12.3259. Time: 35.0469 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #208: GFLOPs: 18.5971. Time: 23.2286 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #209: GFLOPs: 20.3987. Time: 21.1770 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #210: GFLOPs: 18.9374. Time: 22.8112 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #211: GFLOPs: 8.2455. Time: 52.3906 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #212: GFLOPs: 19.3001. Time: 22.3825 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #213: GFLOPs: 19.6700. Time: 21.9616 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #214: GFLOPs: 17.5678. Time: 24.5895 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #215: GFLOPs: 21.3700. Time: 20.2145 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #216: GFLOPs: 19.3942. Time: 22.2739 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #217: GFLOPs: 20.4505. Time: 21.1234 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #218: GFLOPs: 19.8305. Time: 21.7838 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #219: GFLOPs: 20.4359. Time: 21.1385 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #220: GFLOPs: 16.0613. Time: 26.8959 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #221: GFLOPs: 19.4178. Time: 22.2468 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #222: GFLOPs: 19.8263. Time: 21.7885 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #223: GFLOPs: 18.9179. Time: 22.8347 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #224: GFLOPs: 19.2489. Time: 22.4420 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #225: GFLOPs: 11.4751. Time: 37.6455 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #226: GFLOPs: 8.8580. Time: 48.7679 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #227: GFLOPs: 10.7459. Time: 40.1997 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #228: GFLOPs: 9.8904. Time: 43.6770 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #229: GFLOPs: 21.7942. Time: 19.8211 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #230: GFLOPs: 9.1531. Time: 47.1952 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #231: GFLOPs: 9.3325. Time: 46.2882 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #232: GFLOPs: 9.5378. Time: 45.2919 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #233: GFLOPs: 9.4490. Time: 45.7175 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #234: GFLOPs: 8.6959. Time: 49.6769 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #235: GFLOPs: 15.7978. Time: 27.3445 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #236: GFLOPs: 13.9755. Time: 30.9101 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #237: GFLOPs: 14.4028. Time: 29.9931 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #238: GFLOPs: 9.5668. Time: 45.1544 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #239: GFLOPs: 16.0348. Time: 26.9404 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #240: GFLOPs: 10.8999. Time: 39.6321 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #241: GFLOPs: 9.9128. Time: 43.5784 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #242: GFLOPs: 9.6088. Time: 44.9572 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #243: GFLOPs: 17.1331. Time: 25.2135 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #244: GFLOPs: 12.2520. Time: 35.2582 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #245: GFLOPs: 11.9312. Time: 36.2061 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #246: GFLOPs: 11.9414. Time: 36.1754 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #247: GFLOPs: 9.9410. Time: 43.4550 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #248: GFLOPs: 11.1821. Time: 38.6317 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #249: GFLOPs: 14.5108. Time: 29.7698 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #250: GFLOPs: 14.2803. Time: 30.2503 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #251: GFLOPs: 13.7686. Time: 31.3745 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #252: GFLOPs: 14.6327. Time: 29.5218 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #253: GFLOPs: 14.4163. Time: 29.9651 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #254: GFLOPs: 2.4825. Time: 174.0146 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #255: GFLOPs: 6.4966. Time: 66.4942 us. Best GFLOPs: 22.6700
2024-04-29 01:19:11 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_contrib_depthwise_conv2d_NCHWc_add_5] Trial #256: GFLOPs: 5.9261. Time: 72.8950 us. Best GFLOPs: 22.6700
