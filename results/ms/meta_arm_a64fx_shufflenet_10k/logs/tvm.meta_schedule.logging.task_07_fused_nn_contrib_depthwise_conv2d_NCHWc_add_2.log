2024-04-28 20:37:43 [INFO] [task_scheduler.cc:160] Initializing Task #7: "fused_nn_contrib_depthwise_conv2d_NCHWc_add_2"
2024-04-28 20:37:43 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(2)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
        for i0, i1, i2, i3, i4 in T.grid(T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(2)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3, v_i4 = T.axis.remap("SSSSS", [i0, i1, i2, i3, i4])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b, oco, oh, ow, oci, kh, kw in T.grid(T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_oco, v_oh, v_ow, v_oci, v_kh, v_kw = T.axis.remap("SSSSSRR", [b, oco, oh, ow, oci, kh, kw])
                T.reads(PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                with T.init():
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(2)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
2024-04-28 20:37:43 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-28 20:37:43 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(2)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1 in T.grid(T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(3)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(2), T.int64(2)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(29), oco_0 + ax1)
                        v_i2 = T.axis.spatial(T.int64(30), kh_1 + ax2)
                        v_i3 = T.axis.spatial(T.int64(30), ow_1 * T.int64(14) + ow_2 * T.int64(2) + kw_1 + ax3)
                        v_i4 = T.axis.spatial(T.int64(2), ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(2), T.int64(2)):
                    with T.block("DepthwiseConv2d"):
                        v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(29), oco_0 + oco_1 + oco_2 + oco_3)
                        v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(28) + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                        v_oci = T.axis.spatial(T.int64(2), oci_0 * T.int64(2) + oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        with T.init():
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(2)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)):
                with T.block("T_add"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("SSSSS", [ax0, ax1, ax2, ax3, ax4])
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[29, 1, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 28])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 2])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v58 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v58)
l59 = sch.sample_compute_location(block=b0, decision=18)
sch.compute_at(block=b0, loop=l59, preserve_unit_loops=True, index=-1)
2024-04-28 20:37:43 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(2)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
            for b_0, oco_0, oh_0, ow_0, oci_0, b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(3)):
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(4), T.int64(2)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(29), oco_0 + ax1)
                            v_i2 = T.axis.spatial(T.int64(30), kh_1 + ax2)
                            v_i3 = T.axis.spatial(T.int64(30), ow_1 * T.int64(14) + ow_2 * T.int64(2) + ax3)
                            v_i4 = T.axis.spatial(T.int64(2), ax4)
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(28), T.int64(2), T.int64(2)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(29), oco_0 + oco_1 + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(28) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                            v_oci = T.axis.spatial(T.int64(2), oci_0 * T.int64(2) + oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(2)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(14), T.int64(2)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(29), oco_0 + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ow_1 * T.int64(14) + ax3)
                        v_ax4 = T.axis.spatial(T.int64(2), ax4)
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[29, 1, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 28])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 2])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=17)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
2024-04-28 20:37:43 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 768, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(2)))
            DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
            for b_0, oco_0 in T.grid(T.int64(1), T.int64(29)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(30), T.int64(30), T.int64(2)):
                    with T.block("PaddedInput"):
                        v_i0 = T.axis.spatial(T.int64(1), ax0)
                        v_i1 = T.axis.spatial(T.int64(29), oco_0 + ax1)
                        v_i2, v_i3, v_i4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oh_0, ow_0, oci_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                    for b_1, oco_1, oh_1, ow_1, oci_1, kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(28), T.int64(2), T.int64(2)):
                        with T.block("DepthwiseConv2d"):
                            v_b = T.axis.spatial(T.int64(1), b_0 + b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(29), oco_0 + oco_1 + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_0 * T.int64(28) + oh_1 * T.int64(28) + oh_2 * T.int64(28) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(14) + ow_2 * T.int64(2) + ow_3)
                            v_oci = T.axis.spatial(T.int64(2), oci_0 * T.int64(2) + oci_1 * T.int64(2) + oci_2 * T.int64(2) + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            with T.init():
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(2)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                    for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(28), T.int64(2)):
                        with T.block("T_add"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(29), oco_0 + ax1)
                            v_ax2, v_ax3, v_ax4 = T.axis.remap("SSS", [ax2, ax3, ax4])
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[29, 1, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 1, 1, 28])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 2, 7, 2])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=1)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
2024-04-28 20:45:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 20:45:40 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-28 20:45:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-28 20:45:45 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-28 20:45:51 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-28 20:45:56 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-28 20:46:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-28 20:46:08 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-28 20:46:09 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9988  0.9974  0.9974  0.9967  0.9962  0.9959  0.9957  0.9955  0.9950  0.9948  0.9948  0.9947  0.9942  0.9937  0.9932
[17 : 32]:	0.9917  0.9901  0.9890  0.9876  0.9876  0.9861  0.9859  0.9853  0.9852  0.9848  0.9847  0.9839  0.9838  0.9834  0.9831  0.9829
[33 : 48]:	0.9825  0.9824  0.9821  0.9795  0.9784  0.9783  0.9781  0.9774  0.9770  0.9763  0.9760  0.9760  0.9759  0.9755  0.9749  0.9748
[49 : 64]:	0.9747  0.9747  0.9746  0.9738  0.9730  0.9728  0.9716  0.9714  0.9713  0.9712  0.9710  0.9710  0.9707  0.9704  0.9698  0.9696
2024-04-28 20:46:09 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 20:46:09 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #1: GFLOPs: 3.1224. Time: 276.7026 us. Best GFLOPs: 3.1224
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #2: GFLOPs: 8.1241. Time: 106.3458 us. Best GFLOPs: 8.1241
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #3: GFLOPs: 1.9769. Time: 437.0419 us. Best GFLOPs: 8.1241
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #4: GFLOPs: 3.1244. Time: 276.5271 us. Best GFLOPs: 8.1241
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #5: GFLOPs: 2.0875. Time: 413.8724 us. Best GFLOPs: 8.1241
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #6: GFLOPs: 8.3249. Time: 103.7817 us. Best GFLOPs: 8.3249
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #7: GFLOPs: 1.9124. Time: 451.7691 us. Best GFLOPs: 8.3249
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #8: GFLOPs: 10.7167. Time: 80.6188 us. Best GFLOPs: 10.7167
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #9: GFLOPs: 3.8288. Time: 225.6504 us. Best GFLOPs: 10.7167
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #10: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(2)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
        for i0_i1_i2_fused in T.parallel(T.int64(870)):
            for i3_i4_fused in T.vectorized(T.int64(60)):
                with T.block("PaddedInput"):
                    v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_i1 = T.axis.spatial(T.int64(29), i0_i1_i2_fused // T.int64(30))
                    v_i2 = T.axis.spatial(T.int64(30), i0_i1_i2_fused % T.int64(30))
                    v_i3 = T.axis.spatial(T.int64(30), i3_i4_fused // T.int64(2))
                    v_i4 = T.axis.spatial(T.int64(2), i3_i4_fused % T.int64(2))
                    T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                    T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                    PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused in T.parallel(T.int64(98), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(29), T.int64(2), T.int64(4), T.int64(1)):
                with T.block("DepthwiseConv2d_init"):
                    v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                    v_oco = T.axis.spatial(T.int64(29), oco_2_init * T.int64(29) + oco_3_init)
                    v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(49) * T.int64(14) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(7) * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(49) // T.int64(7) * T.int64(4) + ow_2_init * T.int64(4) + ow_3_init)
                    v_oci = T.axis.spatial(T.int64(2), oci_2_init + oci_3_init)
                    T.reads()
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(3), T.int64(1), T.int64(29), T.int64(2), T.int64(4), T.int64(1)):
                with T.block("DepthwiseConv2d_update"):
                    v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                    v_oco = T.axis.spatial(T.int64(29), oco_2 * T.int64(29) + oco_3)
                    v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(49) * T.int64(14) + b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(7) * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(49) // T.int64(7) * T.int64(4) + ow_2 * T.int64(4) + ow_3)
                    v_oci = T.axis.spatial(T.int64(2), oci_2 + oci_3)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                    T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(2)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
        for ax0_ax1_ax2_ax3_ax4_fused_0 in T.parallel(T.int64(711)):
            for ax0_ax1_ax2_ax3_ax4_fused_1 in T.vectorized(T.int64(64)):
                with T.block("T_add"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(29), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) // T.int64(1568))
                    v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(1568) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(56) // T.int64(2))
                    v_ax4 = T.axis.spatial(T.int64(2), (ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1) % T.int64(2))
                    T.where(ax0_ax1_ax2_ax3_ax4_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_ax4_fused_1 < T.int64(45472))
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 29])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 7, 1, 2])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v58 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v58)
l59 = sch.sample_compute_location(block=b0, decision=-1)
sch.compute_at(block=b0, loop=l59, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b60 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b60, ann_key="meta_schedule.unroll_explicit")
b61, b62, b63 = sch.get_child_blocks(b60)
l64, l65, l66, l67, l68 = sch.get_loops(block=b61)
l69 = sch.fuse(l64, l65, l66, preserve_unit_iters=True)
sch.parallel(loop=l69)
l70 = sch.fuse(l67, l68, preserve_unit_iters=True)
sch.vectorize(loop=l70)
l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b62)
l95 = sch.fuse(l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, preserve_unit_iters=True)
sch.parallel(loop=l95)
sch.annotate(block_or_loop=l95, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l95, ann_key="pragma_unroll_explicit", ann_val=1)
l96, l97, l98, l99, l100 = sch.get_loops(block=b63)
l101 = sch.fuse(l96, l97, l98, l99, l100, preserve_unit_iters=True)
l102, l103 = sch.split(loop=l101, factors=[None, 64], preserve_unit_iters=True)
sch.parallel(loop=l102)
sch.vectorize(loop=l103)
b104 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b104)
b120 = sch.decompose_reduction(block=b104, loop=l106)
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #11: GFLOPs: 5.0377. Time: 171.4993 us. Best GFLOPs: 10.7167
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #12: GFLOPs: 6.7145. Time: 128.6723 us. Best GFLOPs: 10.7167
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #13: GFLOPs: 5.7103. Time: 151.2994 us. Best GFLOPs: 10.7167
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #14: GFLOPs: 7.7934. Time: 110.8588 us. Best GFLOPs: 10.7167
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #15: GFLOPs: 1.6033. Time: 538.8563 us. Best GFLOPs: 10.7167
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #16: GFLOPs: 1.7062. Time: 506.3592 us. Best GFLOPs: 10.7167
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #17: GFLOPs: 3.3780. Time: 255.7626 us. Best GFLOPs: 10.7167
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #18: GFLOPs: 4.1439. Time: 208.4935 us. Best GFLOPs: 10.7167
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #19: GFLOPs: 3.6950. Time: 233.8187 us. Best GFLOPs: 10.7167
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #20: GFLOPs: 2.7918. Time: 309.4621 us. Best GFLOPs: 10.7167
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #21: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(2)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(8), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(2)):
                for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(29), T.int64(3), T.int64(9), T.int64(1)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(2) * T.int64(7) + oh_1 + ax2)
                        v_i3 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(7) + ax3)
                        v_i4 = T.axis.spatial(T.int64(2), oci_1 + ax4)
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(29), oco_1 * T.int64(29) + oco_2_init * T.int64(29) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(2) * T.int64(7) + oh_1 + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(7) + ow_2_init * T.int64(7) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(2), oci_1 + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(7), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(29), oco_1 * T.int64(29) + oco_2 * T.int64(29) + oco_3)
                        v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(2) * T.int64(7) + oh_1 + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(14) + ow_1 * T.int64(7) + ow_2 * T.int64(7) + ow_3)
                        v_oci = T.axis.spatial(T.int64(2), oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(2)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(29), T.int64(7)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_add"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(2) * T.int64(7) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(2) * T.int64(14) + ax3_ax4_fused // T.int64(2))
                        v_ax4 = T.axis.spatial(T.int64(2), ax3_ax4_fused % T.int64(2))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 29])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[4, 7, 1, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 2, 1, 7])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 1])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=9)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b62)
l80 = sch.fuse(l65, l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b63)
l101 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.annotate(block_or_loop=l101, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l101, ann_key="pragma_unroll_explicit", ann_val=1)
l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b64)
l108 = sch.fuse(l106, l107, preserve_unit_iters=True)
sch.vectorize(loop=l108)
b109 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b109)
b130 = sch.decompose_reduction(block=b109, loop=l116)
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #22: GFLOPs: 4.9429. Time: 174.7913 us. Best GFLOPs: 10.7167
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #23: GFLOPs: 4.8024. Time: 179.9035 us. Best GFLOPs: 10.7167
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #24: GFLOPs: 20.4549. Time: 42.2376 us. Best GFLOPs: 20.4549
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #25: GFLOPs: 11.7060. Time: 73.8055 us. Best GFLOPs: 20.4549
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #26: GFLOPs: 2.5544. Time: 338.2316 us. Best GFLOPs: 20.4549
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #27: GFLOPs: 1.4326. Time: 603.0863 us. Best GFLOPs: 20.4549
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #28: GFLOPs: 0.2181. Time: 3961.2497 us. Best GFLOPs: 20.4549
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #29: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(2)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
        for b_0_oco_0_oh_0_fused_fused in T.parallel(T.int64(7), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(29), T.int64(6)):
                for ax3_ax4_fused in T.vectorized(T.int64(60)):
                    with T.block("PaddedInput"):
                        v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                        v_i2 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_fused_fused * T.int64(4) + ax2)
                        v_i3 = T.axis.spatial(T.int64(30), ax3_ax4_fused // T.int64(2))
                        v_i4 = T.axis.spatial(T.int64(2), ax3_ax4_fused % T.int64(2))
                        T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                        T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                        PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
            for ow_0, oci_0 in T.grid(T.int64(1), T.int64(1)):
                for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(29), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(29), oco_1 * T.int64(29) + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused * T.int64(4) + oh_1 * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(14) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(2), oci_0 * T.int64(2) + oci_1 + oci_2_init + oci_3_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(4), T.int64(14), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(29), oco_1 * T.int64(29) + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused * T.int64(4) + oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(14) + ow_3)
                            v_oci = T.axis.spatial(T.int64(2), oci_0 * T.int64(2) + oci_1 + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(2)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(29), T.int64(4)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_add"):
                            v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                            v_ax2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused * T.int64(4) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ax3_ax4_fused // T.int64(2))
                            v_ax4 = T.axis.spatial(T.int64(2), ax3_ax4_fused % T.int64(2))
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 29, 1])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 1, 1, 4])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 2, 14])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 2, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=2)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72 = sch.get_loops(block=b62)
l73 = sch.fuse(l65, l66, l67, preserve_unit_iters=True)
sch.parallel(loop=l73)
l74 = sch.fuse(l71, l72, preserve_unit_iters=True)
sch.vectorize(loop=l74)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b63)
l97 = sch.fuse(l75, preserve_unit_iters=True)
sch.parallel(loop=l97)
sch.annotate(block_or_loop=l97, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l97, ann_key="pragma_unroll_explicit", ann_val=1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b64)
l106 = sch.fuse(l104, l105, preserve_unit_iters=True)
sch.vectorize(loop=l106)
b107 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l108, l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b107)
b130 = sch.decompose_reduction(block=b107, loop=l116)
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #30: GFLOPs: 5.9791. Time: 144.4977 us. Best GFLOPs: 20.4549
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #31: GFLOPs: 3.8885. Time: 222.1864 us. Best GFLOPs: 20.4549
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #32: GFLOPs: 6.3695. Time: 135.6420 us. Best GFLOPs: 20.4549
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #33: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(29), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for ow_3_oci_3_fused_init in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(29), b_0_oco_0_oh_0_ow_0_oci_0_fused + oco_1 + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2_init)
                            v_oci = T.axis.spatial(T.int64(2), oci_1 * T.int64(2) + oci_2_init * T.int64(2) + ow_3_oci_3_fused_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for ow_3_oci_3_fused in T.vectorized(T.int64(2)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(29), b_0_oco_0_oh_0_ow_0_oci_0_fused + oco_1 + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(7) + oh_2 + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2)
                            v_oci = T.axis.spatial(T.int64(2), oci_1 * T.int64(2) + oci_2 * T.int64(2) + ow_3_oci_3_fused)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(29) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(29), p0[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(2)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(28)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(29), b_0_oco_0_oh_0_ow_0_oci_0_fused + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ax3_ax4_fused // T.int64(2))
                        v_ax4 = T.axis.spatial(T.int64(2), ax3_ax4_fused % T.int64(2))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[29, 1, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 4, 7, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 28, 1])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 1, 2])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 1])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63 = sch.get_child_blocks(b61)
l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b62)
l88 = sch.fuse(l64, l65, l66, l67, l68, preserve_unit_iters=True)
sch.parallel(loop=l88)
l89 = sch.fuse(l86, l87, preserve_unit_iters=True)
sch.vectorize(loop=l89)
sch.annotate(block_or_loop=l88, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l88, ann_key="pragma_unroll_explicit", ann_val=1)
l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b63)
l96 = sch.fuse(l94, l95, preserve_unit_iters=True)
sch.vectorize(loop=l96)
b97 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b97)
b117 = sch.decompose_reduction(block=b97, loop=l104)
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #34: GFLOPs: 5.8645. Time: 147.3211 us. Best GFLOPs: 20.4549
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #35: GFLOPs: 5.5528. Time: 155.5917 us. Best GFLOPs: 20.4549
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #36: GFLOPs: 3.0914. Time: 279.4763 us. Best GFLOPs: 20.4549
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #37: GFLOPs: 10.7481. Time: 80.3832 us. Best GFLOPs: 20.4549
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #38: GFLOPs: 2.7398. Time: 315.3424 us. Best GFLOPs: 20.4549
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #39: GFLOPs: 22.1110. Time: 39.0741 us. Best GFLOPs: 22.1110
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #40: GFLOPs: 8.1394. Time: 106.1461 us. Best GFLOPs: 22.1110
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #41: GFLOPs: 4.5292. Time: 190.7546 us. Best GFLOPs: 22.1110
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #42: GFLOPs: 3.0870. Time: 279.8765 us. Best GFLOPs: 22.1110
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #43: GFLOPs: 1.4332. Time: 602.8181 us. Best GFLOPs: 22.1110
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #44: GFLOPs: 2.5827. Time: 334.5185 us. Best GFLOPs: 22.1110
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #45: GFLOPs: 3.5646. Time: 242.3771 us. Best GFLOPs: 22.1110
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #46: GFLOPs: 6.5654. Time: 131.5939 us. Best GFLOPs: 22.1110
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #47: GFLOPs: 3.2202. Time: 268.2992 us. Best GFLOPs: 22.1110
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #48: GFLOPs: 5.7564. Time: 150.0894 us. Best GFLOPs: 22.1110
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #49: GFLOPs: 3.9560. Time: 218.3936 us. Best GFLOPs: 22.1110
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #50: GFLOPs: 3.8446. Time: 224.7220 us. Best GFLOPs: 22.1110
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #51: GFLOPs: 6.5417. Time: 132.0702 us. Best GFLOPs: 22.1110
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #52: GFLOPs: 5.7533. Time: 150.1700 us. Best GFLOPs: 22.1110
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #53: GFLOPs: 7.1434. Time: 120.9459 us. Best GFLOPs: 22.1110
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #54: GFLOPs: 25.6003. Time: 33.7483 us. Best GFLOPs: 25.6003
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #55: GFLOPs: 3.4500. Time: 250.4245 us. Best GFLOPs: 25.6003
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #56: GFLOPs: 5.6740. Time: 152.2676 us. Best GFLOPs: 25.6003
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #57: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused in T.parallel(T.int64(4), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1, oci_1 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(29), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("DepthwiseConv2d_init"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                        v_oco = T.axis.spatial(T.int64(29), oco_1 * T.int64(29) + oco_2_init * T.int64(29) + oco_3_init)
                        v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(2) * T.int64(14) + oh_1 * T.int64(7) + oh_2_init + oh_3_init)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2_init * T.int64(4) + ow_3_init)
                        v_oci = T.axis.spatial(T.int64(2), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(2) + oci_1 + oci_2_init + oci_3_init)
                        T.reads()
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(7), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(29), T.int64(1), T.int64(4), T.int64(1)):
                    with T.block("DepthwiseConv2d_update"):
                        v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                        v_oco = T.axis.spatial(T.int64(29), oco_1 * T.int64(29) + oco_2 * T.int64(29) + oco_3)
                        v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(2) * T.int64(14) + oh_1 * T.int64(7) + oh_2 + oh_3)
                        v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2 * T.int64(4) + ow_3)
                        v_oci = T.axis.spatial(T.int64(2), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(2) + oci_1 + oci_2 + oci_3)
                        v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                        v_kw = T.axis.reduce(T.int64(3), kw_0 * T.int64(3) + kw_1)
                        T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                        T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                        T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                        DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(29) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(29), p0[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(2)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2, ax3, ax4 in T.grid(T.int64(1), T.int64(29), T.int64(14), T.int64(28), T.int64(1)):
                with T.block("T_add"):
                    v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                    v_ax2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused // T.int64(2) * T.int64(14) + ax2)
                    v_ax3 = T.axis.spatial(T.int64(28), ax3)
                    v_ax4 = T.axis.spatial(T.int64(2), b_0_oco_0_oh_0_ow_0_oci_0_fused % T.int64(2) + ax4)
                    T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                    T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 29])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[2, 2, 7, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 7, 4])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[2, 1, 1, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 1])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 3])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63 = sch.get_child_blocks(b61)
l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b62)
l88 = sch.fuse(l64, l65, l66, l67, l68, preserve_unit_iters=True)
sch.parallel(loop=l88)
sch.annotate(block_or_loop=l88, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l88, ann_key="pragma_unroll_explicit", ann_val=1)
l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b63)
b95 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l96, l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b95)
b116 = sch.decompose_reduction(block=b95, loop=l102)
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #58: GFLOPs: 6.8571. Time: 125.9964 us. Best GFLOPs: 25.6003
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #59: GFLOPs: 4.6189. Time: 187.0518 us. Best GFLOPs: 25.6003
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #60: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused in T.parallel(T.int64(392), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(29), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("DepthwiseConv2d_init"):
                    v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                    v_oco = T.axis.spatial(T.int64(29), oco_2_init + oco_3_init)
                    v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(28) * T.int64(2) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(28) + ow_2_init + ow_3_init)
                    v_oci = T.axis.spatial(T.int64(2), oci_2_init + oci_3_init)
                    T.reads()
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(29), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                with T.block("DepthwiseConv2d_update"):
                    v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                    v_oco = T.axis.spatial(T.int64(29), oco_2 + oco_3)
                    v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(28) * T.int64(2) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(28) + ow_2 + ow_3)
                    v_oci = T.axis.spatial(T.int64(2), oci_2 + oci_3)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(29) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(29), p0[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(2)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(29), T.int64(2)):
                for ax3_ax4_fused in T.vectorized(T.int64(2)):
                    with T.block("T_add"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(28) * T.int64(2) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(28))
                        v_ax4 = T.axis.spatial(T.int64(2), ax3_ax4_fused)
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 29, 1])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[14, 1, 2, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[14, 2, 1, 1])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[3, 1])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63 = sch.get_child_blocks(b61)
l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b62)
l88 = sch.fuse(l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l88)
sch.annotate(block_or_loop=l88, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l88, ann_key="pragma_unroll_explicit", ann_val=1)
l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b63)
l95 = sch.fuse(l93, l94, preserve_unit_iters=True)
sch.vectorize(loop=l95)
b96 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b96)
b112 = sch.decompose_reduction(block=b96, loop=l98)
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #61: GFLOPs: 7.4569. Time: 115.8619 us. Best GFLOPs: 25.6003
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #62: GFLOPs: 2.3410. Time: 369.0602 us. Best GFLOPs: 25.6003
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #63: GFLOPs: 2.6524. Time: 325.7272 us. Best GFLOPs: 25.6003
2024-04-28 21:11:41 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #64: GFLOPs: 9.3426. Time: 92.4763 us. Best GFLOPs: 25.6003
2024-04-28 21:42:57 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 21:42:58 [INFO] [evolutionary_search.cc:715] Picked top 58 candidate(s) from database
2024-04-28 21:43:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-28 21:43:02 [INFO] [evolutionary_search.cc:723] Sampled 454 candidate(s)
2024-04-28 21:43:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-28 21:43:25 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-28 21:43:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-28 21:43:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-28 21:43:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0122  0.9970  0.9970  0.9970  0.9968  0.9968  0.9968  0.9968  0.9968  0.9407  0.9368  0.9255  0.9100  0.9077  0.9077  0.8941
[17 : 32]:	0.8923  0.8923  0.8923  0.8899  0.8863  0.8856  0.8791  0.8791  0.8712  0.8643  0.8555  0.8446  0.8439  0.8425  0.8416  0.8397
[33 : 48]:	0.8382  0.8366  0.8342  0.8341  0.8341  0.8264  0.8204  0.8124  0.8110  0.8110  0.8110  0.8097  0.8067  0.8058  0.8044  0.8028
[49 : 64]:	0.8018  0.8018  0.8018  0.8011  0.8007  0.8007  0.8006  0.7997  0.7978  0.7978  0.7967  0.7912  0.7876  0.7851  0.7821  0.7821
2024-04-28 21:43:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 21:43:56 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #65: GFLOPs: 20.9195. Time: 41.2997 us. Best GFLOPs: 25.6003
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #66: GFLOPs: 22.2822. Time: 38.7739 us. Best GFLOPs: 25.6003
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #67: GFLOPs: 33.5024. Time: 25.7883 us. Best GFLOPs: 33.5024
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #68: GFLOPs: 30.6080. Time: 28.2269 us. Best GFLOPs: 33.5024
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #69: GFLOPs: 6.1964. Time: 139.4296 us. Best GFLOPs: 33.5024
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #70: GFLOPs: 33.5498. Time: 25.7518 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #71: GFLOPs: 3.9160. Time: 220.6232 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #72: GFLOPs: 17.3341. Time: 49.8422 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #73: GFLOPs: 3.9051. Time: 221.2406 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #74: GFLOPs: 3.7845. Time: 228.2907 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #75: GFLOPs: 18.3819. Time: 47.0011 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #76: GFLOPs: 14.6012. Time: 59.1712 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #77: GFLOPs: 3.7951. Time: 227.6531 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #78: GFLOPs: 16.1434. Time: 53.5182 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #79: GFLOPs: 14.3648. Time: 60.1448 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #80: GFLOPs: 19.4653. Time: 44.3850 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #81: GFLOPs: 16.2523. Time: 53.1596 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #82: GFLOPs: 21.3942. Time: 40.3833 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #83: GFLOPs: 14.4544. Time: 59.7721 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #84: GFLOPs: 3.7998. Time: 227.3716 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #85: GFLOPs: 4.9157. Time: 175.7581 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #86: GFLOPs: 4.8966. Time: 176.4408 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #87: GFLOPs: 3.9340. Time: 219.6145 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #88: GFLOPs: 17.0790. Time: 50.5865 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #89: GFLOPs: 5.0307. Time: 171.7391 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #90: GFLOPs: 5.4535. Time: 158.4245 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #91: GFLOPs: 21.6355. Time: 39.9328 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #92: GFLOPs: 12.2450. Time: 70.5567 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #93: GFLOPs: 19.7998. Time: 43.6352 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #94: GFLOPs: 4.3949. Time: 196.5847 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #95: GFLOPs: 11.6062. Time: 74.4404 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #96: GFLOPs: 10.7050. Time: 80.7071 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #97: GFLOPs: 15.6034. Time: 55.3706 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #98: GFLOPs: 19.9638. Time: 43.2767 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #99: GFLOPs: 3.8992. Time: 221.5747 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #100: GFLOPs: 3.4819. Time: 248.1285 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #101: GFLOPs: 3.8907. Time: 222.0600 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #102: GFLOPs: 14.1417. Time: 61.0935 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #103: GFLOPs: 20.8808. Time: 41.3763 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #104: GFLOPs: 17.5683. Time: 49.1777 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #105: GFLOPs: 4.3780. Time: 197.3426 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #106: GFLOPs: 4.8163. Time: 179.3846 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #107: GFLOPs: 4.3766. Time: 197.4077 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #108: GFLOPs: 4.8082. Time: 179.6877 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #109: GFLOPs: 22.5033. Time: 38.3929 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #110: GFLOPs: 18.9941. Time: 45.4862 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #111: GFLOPs: 21.2433. Time: 40.6702 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #112: GFLOPs: 16.6366. Time: 51.9316 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #113: GFLOPs: 4.6613. Time: 185.3485 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #114: GFLOPs: 19.3530. Time: 44.6426 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #115: GFLOPs: 4.6649. Time: 185.2048 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #116: GFLOPs: 4.3374. Time: 199.1914 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #117: GFLOPs: 5.5529. Time: 155.5896 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #118: GFLOPs: 4.9673. Time: 173.9301 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #119: GFLOPs: 3.6734. Time: 235.1985 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #120: GFLOPs: 16.1852. Time: 53.3802 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #121: GFLOPs: 5.0466. Time: 171.1966 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #122: GFLOPs: 5.0529. Time: 170.9856 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #123: GFLOPs: 3.7764. Time: 228.7793 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #124: GFLOPs: 7.4614. Time: 115.7917 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #125: GFLOPs: 4.3953. Time: 196.5659 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #126: GFLOPs: 1.2457. Time: 693.5460 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #127: GFLOPs: 4.1472. Time: 208.3234 us. Best GFLOPs: 33.5498
2024-04-28 21:45:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #128: GFLOPs: 0.3077. Time: 2807.5870 us. Best GFLOPs: 33.5498
2024-04-28 22:32:24 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 22:32:25 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 22:32:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-28 22:32:29 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 22:32:41 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-28 22:32:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-28 22:33:04 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-28 22:33:16 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-28 22:33:23 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.8844  0.8844  0.7263  0.6992  0.6992  0.6970  0.6952  0.6912  0.6864  0.6864  0.6709  0.6650  0.6592  0.6515  0.6470  0.6469
[17 : 32]:	0.6469  0.6458  0.6405  0.6399  0.6369  0.6347  0.6328  0.6303  0.6299  0.6294  0.6280  0.6271  0.6250  0.6237  0.6233  0.6217
[33 : 48]:	0.6192  0.6161  0.6155  0.6139  0.6132  0.6131  0.6131  0.6125  0.6121  0.6117  0.6096  0.6085  0.6043  0.6041  0.6040  0.6037
[49 : 64]:	0.6034  0.5996  0.5995  0.5994  0.5994  0.5994  0.5994  0.5994  0.5964  0.5962  0.5928  0.5925  0.5914  0.5913  0.5904  0.5903
2024-04-28 22:33:23 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 22:33:23 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #129: GFLOPs: 15.6751. Time: 55.1173 us. Best GFLOPs: 33.5498
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #130: GFLOPs: 11.3833. Time: 75.8981 us. Best GFLOPs: 33.5498
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #131: GFLOPs: 20.7189. Time: 41.6995 us. Best GFLOPs: 33.5498
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #132: GFLOPs: 36.7937. Time: 23.4814 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #133: GFLOPs: 30.1500. Time: 28.6556 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #134: GFLOPs: 31.5860. Time: 27.3529 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #135: GFLOPs: 32.4697. Time: 26.6084 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #136: GFLOPs: 8.8937. Time: 97.1437 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #137: GFLOPs: 11.0453. Time: 78.2204 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #138: GFLOPs: 11.4610. Time: 75.3832 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #139: GFLOPs: 18.6558. Time: 46.3111 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #140: GFLOPs: 25.3935. Time: 34.0232 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #141: GFLOPs: 23.4456. Time: 36.8499 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #142: GFLOPs: 27.9189. Time: 30.9457 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #143: GFLOPs: 21.8060. Time: 39.6207 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #144: GFLOPs: 30.9540. Time: 27.9114 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #145: GFLOPs: 18.8363. Time: 45.8672 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #146: GFLOPs: 28.3684. Time: 30.4553 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #147: GFLOPs: 22.2864. Time: 38.7666 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #148: GFLOPs: 26.7469. Time: 32.3016 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #149: GFLOPs: 24.0224. Time: 35.9651 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #150: GFLOPs: 8.1685. Time: 105.7681 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #151: GFLOPs: 28.1201. Time: 30.7243 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #152: GFLOPs: 11.3145. Time: 76.3593 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #153: GFLOPs: 14.8423. Time: 58.2098 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #154: GFLOPs: 20.6530. Time: 41.8325 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #155: GFLOPs: 6.0479. Time: 142.8544 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #156: GFLOPs: 26.6779. Time: 32.3851 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #157: GFLOPs: 16.9804. Time: 50.8803 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #158: GFLOPs: 9.2679. Time: 93.2214 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #159: GFLOPs: 28.0299. Time: 30.8231 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #160: GFLOPs: 22.7900. Time: 37.9100 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #161: GFLOPs: 26.7604. Time: 32.2854 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #162: GFLOPs: 19.7362. Time: 43.7759 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #163: GFLOPs: 22.1880. Time: 38.9385 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #164: GFLOPs: 28.2790. Time: 30.5516 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #165: GFLOPs: 29.5942. Time: 29.1938 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #166: GFLOPs: 19.1642. Time: 45.0825 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #167: GFLOPs: 19.0886. Time: 45.2609 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #168: GFLOPs: 22.4255. Time: 38.5261 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #169: GFLOPs: 25.5994. Time: 33.7495 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #170: GFLOPs: 24.8770. Time: 34.7296 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #171: GFLOPs: 10.1835. Time: 84.8399 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #172: GFLOPs: 32.5092. Time: 26.5761 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #173: GFLOPs: 11.4948. Time: 75.1619 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #174: GFLOPs: 28.7096. Time: 30.0933 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #175: GFLOPs: 20.8729. Time: 41.3919 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #176: GFLOPs: 27.3934. Time: 31.5393 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #177: GFLOPs: 35.7025. Time: 24.1991 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #178: GFLOPs: 25.5916. Time: 33.7599 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #179: GFLOPs: 18.4169. Time: 46.9116 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #180: GFLOPs: 17.6568. Time: 48.9312 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #181: GFLOPs: 17.6903. Time: 48.8384 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #182: GFLOPs: 17.8924. Time: 48.2869 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #183: GFLOPs: 18.1047. Time: 47.7206 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #184: GFLOPs: 17.8275. Time: 48.4628 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #185: GFLOPs: 21.4824. Time: 40.2175 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #186: GFLOPs: 17.7294. Time: 48.7308 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #187: GFLOPs: 34.3137. Time: 25.1785 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #188: GFLOPs: 17.5259. Time: 49.2965 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #189: GFLOPs: 27.5505. Time: 31.3594 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #190: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(2)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(2), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1, ow_1 in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(29), T.int64(6)):
                    for ax3_ax4_fused in T.vectorized(T.int64(8)):
                        with T.block("PaddedInput"):
                            v_i0, v_i1 = T.axis.remap("SS", [ax0, ax1])
                            v_i2 = T.axis.spatial(T.int64(30), oh_1 * T.int64(4) + ax2)
                            v_i3 = T.axis.spatial(T.int64(30), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused * T.int64(14) + ow_1 * T.int64(2) + ax3_ax4_fused // T.int64(2))
                            v_i4 = T.axis.spatial(T.int64(2), ax3_ax4_fused % T.int64(2))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for oci_1 in range(T.int64(1)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(29), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(29), oco_1 * T.int64(29) + oco_2_init * T.int64(29) + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(4) + oh_2_init * T.int64(4) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused * T.int64(14) + ow_1 * T.int64(2) + ow_2_init + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(2), oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(29), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(29), oco_1 * T.int64(29) + oco_2 * T.int64(29) + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), oh_1 * T.int64(4) + oh_2 * T.int64(4) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused * T.int64(14) + ow_1 * T.int64(2) + ow_2 + ow_3)
                            v_oci = T.axis.spatial(T.int64(2), oci_1 * T.int64(2) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(2)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(29), T.int64(28)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_add"):
                        v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                        v_ax3 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused * T.int64(14) + ax3_ax4_fused // T.int64(2))
                        v_ax4 = T.axis.spatial(T.int64(2), ax3_ax4_fused % T.int64(2))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 1, 29])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 1, 4])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 7, 2, 1])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=8)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b62)
l79 = sch.fuse(l65, l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l79)
l80 = sch.fuse(l77, l78, preserve_unit_iters=True)
sch.vectorize(loop=l80)
l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100 = sch.get_loops(block=b63)
l101 = sch.fuse(l81, preserve_unit_iters=True)
sch.parallel(loop=l101)
sch.annotate(block_or_loop=l101, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l101, ann_key="pragma_unroll_explicit", ann_val=1)
l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b64)
l108 = sch.fuse(l106, l107, preserve_unit_iters=True)
sch.vectorize(loop=l108)
b109 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b109)
b130 = sch.decompose_reduction(block=b109, loop=l116)
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #191: GFLOPs: 9.7348. Time: 88.7503 us. Best GFLOPs: 36.7937
2024-04-28 22:34:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #192: GFLOPs: 26.5851. Time: 32.4982 us. Best GFLOPs: 36.7937
2024-04-28 23:36:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-28 23:36:59 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-28 23:37:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-28 23:37:03 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-28 23:37:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-28 23:37:27 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-28 23:37:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-28 23:37:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-28 23:37:57 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9267  0.9134  0.9022  0.8907  0.8731  0.8636  0.8532  0.8515  0.8427  0.8427  0.8427  0.8426  0.8318  0.8063  0.8062  0.8042
[17 : 32]:	0.7935  0.7892  0.7892  0.7886  0.7791  0.7780  0.7780  0.7780  0.7780  0.7780  0.7777  0.7727  0.7727  0.7726  0.7700  0.7700
[33 : 48]:	0.7698  0.7658  0.7625  0.7623  0.7605  0.7588  0.7573  0.7573  0.7543  0.7486  0.7479  0.7432  0.7432  0.7420  0.7391  0.7369
[49 : 64]:	0.7354  0.7349  0.7337  0.7300  0.7271  0.7226  0.7129  0.7095  0.7073  0.7049  0.7047  0.7047  0.7047  0.7047  0.7018  0.7003
2024-04-28 23:37:58 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-28 23:37:58 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #193: GFLOPs: 23.9100. Time: 36.1342 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #194: GFLOPs: 25.2436. Time: 34.2252 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #195: GFLOPs: 22.8742. Time: 37.7703 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #196: GFLOPs: 34.2908. Time: 25.1954 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #197: GFLOPs: 13.6725. Time: 63.1903 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #198: GFLOPs: 28.9976. Time: 29.7945 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #199: GFLOPs: 28.3807. Time: 30.4421 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #200: GFLOPs: 30.4456. Time: 28.3774 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #201: GFLOPs: 22.1986. Time: 38.9199 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #202: GFLOPs: 21.0851. Time: 40.9753 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #203: GFLOPs: 13.6704. Time: 63.1997 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #204: GFLOPs: 21.8534. Time: 39.5347 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #205: GFLOPs: 19.1433. Time: 45.1315 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #206: GFLOPs: 28.2926. Time: 30.5369 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #207: GFLOPs: 35.0078. Time: 24.6793 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #208: GFLOPs: 21.8928. Time: 39.4635 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #209: GFLOPs: 26.4817. Time: 32.6251 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #210: GFLOPs: 24.2996. Time: 35.5549 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #211: GFLOPs: 21.8571. Time: 39.5280 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #212: GFLOPs: 27.9573. Time: 30.9031 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #213: GFLOPs: 19.2861. Time: 44.7974 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #214: GFLOPs: 28.5799. Time: 30.2299 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #215: GFLOPs: 24.1855. Time: 35.7226 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #216: GFLOPs: 28.3626. Time: 30.4616 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #217: GFLOPs: 25.3825. Time: 34.0380 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #218: GFLOPs: 26.8251. Time: 32.2074 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #219: GFLOPs: 30.8238. Time: 28.0293 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #220: GFLOPs: 33.8171. Time: 25.5483 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #221: GFLOPs: 33.0847. Time: 26.1138 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #222: GFLOPs: 34.6565. Time: 24.9295 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #223: GFLOPs: 27.8548. Time: 31.0169 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #224: GFLOPs: 28.4976. Time: 30.3172 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #225: GFLOPs: 30.4017. Time: 28.4184 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #226: GFLOPs: 30.1268. Time: 28.6777 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #227: GFLOPs: 25.7253. Time: 33.5843 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #228: GFLOPs: 29.8164. Time: 28.9763 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #229: GFLOPs: 30.9941. Time: 27.8752 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #230: GFLOPs: 28.4206. Time: 30.3994 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #231: GFLOPs: 20.8994. Time: 41.3394 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #232: GFLOPs: 17.1295. Time: 50.4375 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #233: GFLOPs: 24.4166. Time: 35.3845 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #234: GFLOPs: 22.5683. Time: 38.2823 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #235: GFLOPs: 31.7672. Time: 27.1968 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #236: GFLOPs: 26.0970. Time: 33.1060 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #237: GFLOPs: 28.3874. Time: 30.4349 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #238: GFLOPs: 26.7398. Time: 32.3102 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #239: GFLOPs: 25.5478. Time: 33.8177 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #240: GFLOPs: 21.2913. Time: 40.5785 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #241: GFLOPs: 26.0808. Time: 33.1266 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #242: GFLOPs: 26.7540. Time: 32.2930 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #243: GFLOPs: 32.1406. Time: 26.8809 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #244: GFLOPs: 27.2618. Time: 31.6915 us. Best GFLOPs: 36.7937
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #245: GFLOPs: 43.0140. Time: 20.0857 us. Best GFLOPs: 43.0140
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #246: GFLOPs: 32.5962. Time: 26.5052 us. Best GFLOPs: 43.0140
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #247: GFLOPs: 34.3628. Time: 25.1426 us. Best GFLOPs: 43.0140
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #248: GFLOPs: 30.7175. Time: 28.1262 us. Best GFLOPs: 43.0140
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #249: GFLOPs: 27.7350. Time: 31.1508 us. Best GFLOPs: 43.0140
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #250: GFLOPs: 22.7999. Time: 37.8935 us. Best GFLOPs: 43.0140
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #251: GFLOPs: 32.9928. Time: 26.1865 us. Best GFLOPs: 43.0140
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #252: GFLOPs: 32.9889. Time: 26.1896 us. Best GFLOPs: 43.0140
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #253: GFLOPs: 31.6315. Time: 27.3135 us. Best GFLOPs: 43.0140
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #254: GFLOPs: 26.6639. Time: 32.4022 us. Best GFLOPs: 43.0140
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #255: GFLOPs: 4.0730. Time: 212.1214 us. Best GFLOPs: 43.0140
2024-04-28 23:39:35 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #256: GFLOPs: 1.0151. Time: 851.1404 us. Best GFLOPs: 43.0140
2024-04-29 00:16:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 00:16:57 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 00:17:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-29 00:17:01 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 00:17:13 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-29 00:17:25 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-29 00:17:36 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-29 00:17:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-29 00:17:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.7982  0.7925  0.7923  0.7911  0.7911  0.7883  0.7866  0.7780  0.7734  0.7645  0.7576  0.7576  0.7576  0.7576  0.7562  0.7543
[17 : 32]:	0.7536  0.7536  0.7514  0.7469  0.7469  0.7426  0.7399  0.7363  0.7327  0.7273  0.7273  0.7180  0.7143  0.7115  0.7101  0.7094
[33 : 48]:	0.7037  0.7037  0.6990  0.6990  0.6989  0.6983  0.6983  0.6983  0.6976  0.6927  0.6927  0.6925  0.6908  0.6900  0.6900  0.6888
[49 : 64]:	0.6888  0.6878  0.6864  0.6864  0.6846  0.6841  0.6829  0.6813  0.6808  0.6807  0.6807  0.6807  0.6728  0.6717  0.6714  0.6695
2024-04-29 00:17:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 00:17:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #257: GFLOPs: 18.8679. Time: 45.7903 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #258: GFLOPs: 22.6752. Time: 38.1019 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #259: GFLOPs: 14.7100. Time: 58.7336 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #260: GFLOPs: 34.6363. Time: 24.9440 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #261: GFLOPs: 32.7313. Time: 26.3957 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #262: GFLOPs: 21.9930. Time: 39.2838 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #263: GFLOPs: 20.8295. Time: 41.4781 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #264: GFLOPs: 30.4137. Time: 28.4072 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #265: GFLOPs: 28.2552. Time: 30.5773 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #266: GFLOPs: 32.2646. Time: 26.7776 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #267: GFLOPs: 27.9380. Time: 30.9245 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #268: GFLOPs: 30.7194. Time: 28.1245 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #269: GFLOPs: 31.4560. Time: 27.4659 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #270: GFLOPs: 33.0961. Time: 26.1048 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #271: GFLOPs: 27.1857. Time: 31.7803 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #272: GFLOPs: 27.3881. Time: 31.5454 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #273: GFLOPs: 33.5298. Time: 25.7672 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #274: GFLOPs: 28.2378. Time: 30.5961 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #275: GFLOPs: 20.1099. Time: 42.9624 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #276: GFLOPs: 13.5284. Time: 63.8631 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #277: GFLOPs: 13.4308. Time: 64.3272 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #278: GFLOPs: 25.4297. Time: 33.9748 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #279: GFLOPs: 30.5299. Time: 28.2990 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #280: GFLOPs: 32.2289. Time: 26.8073 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #281: GFLOPs: 31.0323. Time: 27.8409 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #282: GFLOPs: 31.0738. Time: 27.8037 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #283: GFLOPs: 34.3322. Time: 25.1649 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #284: GFLOPs: 29.0208. Time: 29.7707 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #285: GFLOPs: 20.9873. Time: 41.1662 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #286: GFLOPs: 28.4992. Time: 30.3156 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #287: GFLOPs: 29.9014. Time: 28.8939 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #288: GFLOPs: 20.9403. Time: 41.2586 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #289: GFLOPs: 22.7929. Time: 37.9051 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #290: GFLOPs: 22.9278. Time: 37.6821 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #291: GFLOPs: 12.9865. Time: 66.5283 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #292: GFLOPs: 13.0517. Time: 66.1960 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #293: GFLOPs: 20.6422. Time: 41.8545 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #294: GFLOPs: 31.8741. Time: 27.1056 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #295: GFLOPs: 31.9336. Time: 27.0551 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #296: GFLOPs: 31.2801. Time: 27.6204 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #297: GFLOPs: 30.4482. Time: 28.3751 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #298: GFLOPs: 23.5753. Time: 36.6472 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #299: GFLOPs: 20.1084. Time: 42.9655 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #300: GFLOPs: 22.2240. Time: 38.8754 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #301: GFLOPs: 31.3107. Time: 27.5934 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #302: GFLOPs: 13.6998. Time: 63.0643 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #303: GFLOPs: 29.0928. Time: 29.6970 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #304: GFLOPs: 17.0933. Time: 50.5442 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #305: GFLOPs: 21.1498. Time: 40.8500 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #306: GFLOPs: 24.0910. Time: 35.8626 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #307: GFLOPs: 13.5242. Time: 63.8829 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #308: GFLOPs: 31.9145. Time: 27.0713 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #309: GFLOPs: 22.6296. Time: 38.1787 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #310: GFLOPs: 35.3940. Time: 24.4100 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #311: GFLOPs: 27.0527. Time: 31.9365 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #312: GFLOPs: 30.2127. Time: 28.5962 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #313: GFLOPs: 20.7095. Time: 41.7184 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #314: GFLOPs: 29.9884. Time: 28.8101 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #315: GFLOPs: 28.7587. Time: 30.0419 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #316: GFLOPs: 29.3178. Time: 29.4690 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #317: GFLOPs: 29.4488. Time: 29.3380 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #318: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
        for b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused in T.parallel(T.int64(14), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(29), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                with T.block("DepthwiseConv2d_init"):
                    v_b = T.axis.spatial(T.int64(1), b_2_init + b_3_init)
                    v_oco = T.axis.spatial(T.int64(29), oco_2_init + oco_3_init)
                    v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(7) * T.int64(4) + oh_2_init + oh_3_init)
                    v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(7) * T.int64(14) + ow_2_init * T.int64(14) + ow_3_init)
                    v_oci = T.axis.spatial(T.int64(2), oci_2_init + oci_3_init)
                    T.reads()
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
            for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(29), T.int64(4), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                with T.block("DepthwiseConv2d_update"):
                    v_b = T.axis.spatial(T.int64(1), b_2 + b_3)
                    v_oco = T.axis.spatial(T.int64(29), oco_2 + oco_3)
                    v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(7) * T.int64(4) + oh_2 + oh_3)
                    v_ow = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(7) * T.int64(14) + ow_2 * T.int64(14) + ow_3)
                    v_oci = T.axis.spatial(T.int64(2), oci_2 + oci_3)
                    v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                    v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                    T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], p0[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                    T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                    T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                    DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + T.if_then_else(T.int64(1) <= v_oh + v_kh and v_oh + v_kh < T.int64(29) and T.int64(1) <= v_ow + v_kw and v_ow + v_kw < T.int64(29), p0[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh - T.int64(1), v_ow + v_kw - T.int64(1), v_oci % T.int64(2)], T.float32(0)) * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(29), T.int64(4)):
                for ax3_ax4_fused in T.vectorized(T.int64(28)):
                    with T.block("T_add"):
                        v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                        v_ax2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused % T.int64(7) * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_b_1_oco_1_oh_1_ow_1_oci_1_fused // T.int64(7) * T.int64(14) + ax3_ax4_fused // T.int64(2))
                        v_ax4 = T.axis.spatial(T.int64(2), ax3_ax4_fused % T.int64(2))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[1, 1, 29, 1])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[1, 7, 4, 1])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[2, 1, 1, 14])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l47, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=-2)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63 = sch.get_child_blocks(b61)
l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77, l78, l79, l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b62)
l88 = sch.fuse(l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, preserve_unit_iters=True)
sch.parallel(loop=l88)
sch.annotate(block_or_loop=l88, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l88, ann_key="pragma_unroll_explicit", ann_val=1)
l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b63)
l95 = sch.fuse(l93, l94, preserve_unit_iters=True)
sch.vectorize(loop=l95)
b96 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l97, l98, l99, l100, l101, l102, l103, l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b96)
b112 = sch.decompose_reduction(block=b96, loop=l98)
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #319: GFLOPs: 6.0653. Time: 142.4445 us. Best GFLOPs: 43.0140
2024-04-29 00:19:38 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #320: GFLOPs: 26.8132. Time: 32.2217 us. Best GFLOPs: 43.0140
2024-04-29 01:27:13 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 01:27:15 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 01:27:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-29 01:27:19 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2024-04-29 01:27:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-29 01:27:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-29 01:27:54 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-29 01:28:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4ca8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x4c6a4f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x5c2a568)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x4eba9e8)]: 0 failure(s)
2024-04-29 01:28:12 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9388  0.9388  0.9107  0.9107  0.8546  0.7962  0.7847  0.7704  0.7677  0.7663  0.7663  0.7663  0.7562  0.7549  0.7536  0.7536
[17 : 32]:	0.7467  0.7456  0.7445  0.7440  0.7433  0.7433  0.7431  0.7414  0.7375  0.7365  0.7349  0.7331  0.7317  0.7274  0.7274  0.7274
[33 : 48]:	0.7274  0.7246  0.7241  0.7226  0.7223  0.7209  0.7183  0.7150  0.7150  0.7148  0.7132  0.7091  0.7091  0.7091  0.7080  0.7072
[49 : 64]:	0.7072  0.7072  0.7072  0.7056  0.7056  0.7056  0.7042  0.7042  0.7024  0.7017  0.7015  0.7011  0.7009  0.7009  0.7004  0.7004
2024-04-29 01:28:12 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 01:28:12 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #321: GFLOPs: 30.8107. Time: 28.0412 us. Best GFLOPs: 43.0140
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #322: GFLOPs: 31.0890. Time: 27.7902 us. Best GFLOPs: 43.0140
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #323: GFLOPs: 37.8723. Time: 22.8126 us. Best GFLOPs: 43.0140
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #324: GFLOPs: 27.2455. Time: 31.7104 us. Best GFLOPs: 43.0140
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #325: GFLOPs: 23.2943. Time: 37.0893 us. Best GFLOPs: 43.0140
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #326: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(2)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
        for b_0_oco_0_oh_0_fused_fused in T.parallel(T.int64(203), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ow_0, oci_0 in T.grid(T.int64(1), T.int64(1)):
                for b_1, oco_1, oh_1 in T.grid(T.int64(1), T.int64(1), T.int64(2)):
                    for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(4)):
                        for ax3_ax4_fused in T.vectorized(T.int64(60)):
                            with T.block("PaddedInput"):
                                v_i0 = T.axis.spatial(T.int64(1), ax0)
                                v_i1 = T.axis.spatial(T.int64(29), b_0_oco_0_oh_0_fused_fused // T.int64(7) + ax1)
                                v_i2 = T.axis.spatial(T.int64(30), oh_1 * T.int64(2) + b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + ax2)
                                v_i3 = T.axis.spatial(T.int64(30), ax3_ax4_fused // T.int64(2))
                                v_i4 = T.axis.spatial(T.int64(2), ax3_ax4_fused % T.int64(2))
                                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                                PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                    for ow_1, oci_1 in T.grid(T.int64(1), T.int64(1)):
                        for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                            with T.block("DepthwiseConv2d_init"):
                                v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                                v_oco = T.axis.spatial(T.int64(29), b_0_oco_0_oh_0_fused_fused // T.int64(7) + oco_1 + oco_2_init + oco_3_init)
                                v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                                v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2_init * T.int64(7) + ow_3_init)
                                v_oci = T.axis.spatial(T.int64(2), oci_0 * T.int64(2) + oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                                T.reads()
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                        for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                                v_oco = T.axis.spatial(T.int64(29), b_0_oco_0_oh_0_fused_fused // T.int64(7) + oco_1 + oco_2 + oco_3)
                                v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                                v_ow = T.axis.spatial(T.int64(28), ow_0 * T.int64(28) + ow_1 * T.int64(28) + ow_2 * T.int64(7) + ow_3)
                                v_oci = T.axis.spatial(T.int64(2), oci_0 * T.int64(2) + oci_1 * T.int64(2) + oci_2 + oci_3)
                                v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                                v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                                T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                                T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                                T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                                DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(2)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(4)):
                    for ax3_ax4_fused in T.vectorized(T.int64(56)):
                        with T.block("T_add"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(29), b_0_oco_0_oh_0_fused_fused // T.int64(7) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_fused_fused % T.int64(7) * T.int64(4) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(28), ax3_ax4_fused // T.int64(2))
                            v_ax4 = T.axis.spatial(T.int64(2), ax3_ax4_fused % T.int64(2))
                            T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                            T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                            T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[29, 1, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 1, 2])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 4, 7])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=29)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b62)
l78 = sch.fuse(l65, l66, l67, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l76, l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b63)
l102 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l102)
sch.annotate(block_or_loop=l102, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l102, ann_key="pragma_unroll_explicit", ann_val=1)
l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b64)
l111 = sch.fuse(l109, l110, preserve_unit_iters=True)
sch.vectorize(loop=l111)
b112 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b112)
b135 = sch.decompose_reduction(block=b112, loop=l121)
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #327: GFLOPs: 28.7580. Time: 30.0427 us. Best GFLOPs: 43.0140
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #328: GFLOPs: 42.8612. Time: 20.1573 us. Best GFLOPs: 43.0140
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #329: GFLOPs: 31.1935. Time: 27.6971 us. Best GFLOPs: 43.0140
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #330: GFLOPs: 28.0377. Time: 30.8145 us. Best GFLOPs: 43.0140
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #331: GFLOPs: 21.6606. Time: 39.8866 us. Best GFLOPs: 43.0140
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #332: GFLOPs: 29.0833. Time: 29.7067 us. Best GFLOPs: 43.0140
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #333: GFLOPs: 33.0915. Time: 26.1085 us. Best GFLOPs: 43.0140
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #334: GFLOPs: 31.7483. Time: 27.2131 us. Best GFLOPs: 43.0140
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #335: GFLOPs: 26.4548. Time: 32.6583 us. Best GFLOPs: 43.0140
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #336: GFLOPs: 32.9897. Time: 26.1890 us. Best GFLOPs: 43.0140
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #337: GFLOPs: 25.4823. Time: 33.9046 us. Best GFLOPs: 43.0140
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #338: GFLOPs: 31.8105. Time: 27.1599 us. Best GFLOPs: 43.0140
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #339: GFLOPs: 55.6001. Time: 15.5390 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #340: GFLOPs: 26.8022. Time: 32.2350 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #341: GFLOPs: 32.7889. Time: 26.3494 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #342: GFLOPs: 13.4616. Time: 64.1801 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #343: GFLOPs: 28.3021. Time: 30.5267 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #344: GFLOPs: 33.4254. Time: 25.8476 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #345: GFLOPs: 33.6657. Time: 25.6631 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #346: GFLOPs: 26.8090. Time: 32.2267 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #347: GFLOPs: 21.6876. Time: 39.8370 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #348: GFLOPs: 27.3358. Time: 31.6058 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #349: GFLOPs: 31.8673. Time: 27.1114 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #350: GFLOPs: 32.7882. Time: 26.3500 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #351: GFLOPs: 33.6872. Time: 25.6467 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #352: GFLOPs: 31.3057. Time: 27.5978 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #353: GFLOPs: 22.4385. Time: 38.5038 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #354: GFLOPs: 23.6345. Time: 36.5553 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #355: GFLOPs: 29.0894. Time: 29.7004 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #356: GFLOPs: 41.1660. Time: 20.9874 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #357: GFLOPs: 26.2245. Time: 32.9451 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #358: GFLOPs: 31.9305. Time: 27.0578 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #359: GFLOPs: 29.4357. Time: 29.3510 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #360: GFLOPs: 23.0509. Time: 37.4810 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #361: GFLOPs: 30.0020. Time: 28.7970 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #362: GFLOPs: 37.2019. Time: 23.2238 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #363: GFLOPs: 28.6091. Time: 30.1991 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #364: GFLOPs: 31.1530. Time: 27.7331 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #365: GFLOPs: 22.9880. Time: 37.5835 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #366: GFLOPs: 31.1637. Time: 27.7235 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #367: GFLOPs: 24.2525. Time: 35.6238 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #368: GFLOPs: 32.8177. Time: 26.3262 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #369: GFLOPs: 30.5315. Time: 28.2976 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #370: GFLOPs: 17.8562. Time: 48.3848 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #371: GFLOPs: 31.0067. Time: 27.8639 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #372: GFLOPs: 25.7011. Time: 33.6160 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #373: GFLOPs: 28.8049. Time: 29.9938 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #374: GFLOPs: 28.8437. Time: 29.9534 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #375: GFLOPs: 32.7504. Time: 26.3804 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #376: GFLOPs: 28.0264. Time: 30.8270 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #377: GFLOPs: 31.7341. Time: 27.2252 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #378: GFLOPs: 33.6277. Time: 25.6922 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #379: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32"), p1: T.Buffer((T.int64(29), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(2)), "float32"), p2: T.Buffer((T.int64(1), T.int64(29), T.int64(1), T.int64(1), T.int64(2)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(30), T.int64(30), T.int64(2)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(29), T.int64(28), T.int64(28), T.int64(2)))
        for b_0_oco_0_oh_0_ow_0_oci_0_fused_fused in T.parallel(T.int64(203), annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1, oco_1, oh_1 in T.grid(T.int64(1), T.int64(1), T.int64(2)):
                for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(4)):
                    for ax3_ax4_fused in T.vectorized(T.int64(60)):
                        with T.block("PaddedInput"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_i1 = T.axis.spatial(T.int64(29), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(7) + ax1)
                            v_i2 = T.axis.spatial(T.int64(30), oh_1 * T.int64(2) + b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(4) + ax2)
                            v_i3 = T.axis.spatial(T.int64(30), ax3_ax4_fused // T.int64(2))
                            v_i4 = T.axis.spatial(T.int64(2), ax3_ax4_fused % T.int64(2))
                            T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4])
                            T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4])
                            PaddedInput[v_i0, v_i1, v_i2, v_i3, v_i4] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1), v_i4], T.float32(0))
                for ow_1, oci_1 in T.grid(T.int64(1), T.int64(1)):
                    for b_2_init, oco_2_init, oh_2_init, ow_2_init, oci_2_init, b_3_init, oco_3_init, oh_3_init, ow_3_init, oci_3_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2_init + b_3_init)
                            v_oco = T.axis.spatial(T.int64(29), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(7) + oco_1 + oco_2_init + oco_3_init)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + oh_2_init * T.int64(2) + oh_3_init)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2_init * T.int64(2) + ow_3_init)
                            v_oci = T.axis.spatial(T.int64(2), oci_1 * T.int64(2) + oci_2_init + oci_3_init)
                            T.reads()
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = T.float32(0)
                    for kh_0, kw_0, b_2, oco_2, oh_2, ow_2, oci_2, kh_1, kw_1, b_3, oco_3, oh_3, ow_3, oci_3 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_update"):
                            v_b = T.axis.spatial(T.int64(1), b_1 + b_2 + b_3)
                            v_oco = T.axis.spatial(T.int64(29), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(7) + oco_1 + oco_2 + oco_3)
                            v_oh = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(4) + oh_1 * T.int64(2) + oh_2 * T.int64(2) + oh_3)
                            v_ow = T.axis.spatial(T.int64(28), ow_1 * T.int64(28) + ow_2 * T.int64(2) + ow_3)
                            v_oci = T.axis.spatial(T.int64(2), oci_1 * T.int64(2) + oci_2 + oci_3)
                            v_kh = T.axis.reduce(T.int64(3), kh_0 * T.int64(3) + kh_1)
                            v_kw = T.axis.reduce(T.int64(3), kw_0 + kw_1)
                            T.reads(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci], PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(2)], p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci])
                            T.writes(DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci])
                            T.block_attr({"meta_schedule.tiling_structure": "SSRSRS"})
                            DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] = DepthwiseConv2d[v_b, v_oco, v_oh, v_ow, v_oci] + PaddedInput[v_b, v_oci // T.int64(2) + v_oco, v_oh + v_kh, v_ow + v_kw, v_oci % T.int64(2)] * p1[v_oco, T.int64(0), v_kh, v_kw, T.int64(0), v_oci]
            for ax0, ax1, ax2 in T.grid(T.int64(1), T.int64(1), T.int64(4)):
                for ax3_ax4_fused in T.vectorized(T.int64(56)):
                    with T.block("T_add"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(29), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused // T.int64(7) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(28), b_0_oco_0_oh_0_ow_0_oci_0_fused_fused % T.int64(7) * T.int64(4) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(28), ax3_ax4_fused // T.int64(2))
                        v_ax4 = T.axis.spatial(T.int64(2), ax3_ax4_fused % T.int64(2))
                        T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4])
                        T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                        T_add[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0), v_ax4]
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13 = sch.sample_perfect_tile(loop=l3, n=4, max_innermost_factor=64, decision=[1, 1, 1, 1])
l14, l15, l16, l17 = sch.split(loop=l3, factors=[v10, v11, v12, v13], preserve_unit_iters=True)
v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l4, n=4, max_innermost_factor=64, decision=[29, 1, 1, 1])
l22, l23, l24, l25 = sch.split(loop=l4, factors=[v18, v19, v20, v21], preserve_unit_iters=True)
v26, v27, v28, v29 = sch.sample_perfect_tile(loop=l5, n=4, max_innermost_factor=64, decision=[7, 2, 1, 2])
l30, l31, l32, l33 = sch.split(loop=l5, factors=[v26, v27, v28, v29], preserve_unit_iters=True)
v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l6, n=4, max_innermost_factor=64, decision=[1, 1, 14, 2])
l38, l39, l40, l41 = sch.split(loop=l6, factors=[v34, v35, v36, v37], preserve_unit_iters=True)
v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=4, max_innermost_factor=64, decision=[1, 1, 2, 1])
l46, l47, l48, l49 = sch.split(loop=l7, factors=[v42, v43, v44, v45], preserve_unit_iters=True)
v50, v51 = sch.sample_perfect_tile(loop=l8, n=2, max_innermost_factor=64, decision=[1, 3])
l52, l53 = sch.split(loop=l8, factors=[v50, v51], preserve_unit_iters=True)
v54, v55 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[3, 1])
l56, l57 = sch.split(loop=l9, factors=[v54, v55], preserve_unit_iters=True)
sch.reorder(l14, l22, l30, l38, l46, l15, l23, l31, l39, l47, l52, l56, l16, l24, l32, l40, l48, l53, l57, l17, l25, l33, l41, l49)
b58, = sch.get_consumers(block=b1)
sch.reverse_compute_at(block=b58, loop=l46, preserve_unit_loops=True, index=-1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.parallel", ann_val=768)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.vectorize", ann_val=64)
v59 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v59)
l60 = sch.sample_compute_location(block=b0, decision=7)
sch.compute_at(block=b0, loop=l60, preserve_unit_loops=True, index=-1)
sch.enter_postproc()
b61 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.parallel")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.vectorize")
sch.unannotate(block_or_loop=b61, ann_key="meta_schedule.unroll_explicit")
b62, b63, b64 = sch.get_child_blocks(b61)
l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b62)
l78 = sch.fuse(l65, l66, l67, l68, l69, preserve_unit_iters=True)
sch.parallel(loop=l78)
l79 = sch.fuse(l76, l77, preserve_unit_iters=True)
sch.vectorize(loop=l79)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95, l96, l97, l98, l99 = sch.get_loops(block=b63)
l100 = sch.fuse(l80, preserve_unit_iters=True)
sch.parallel(loop=l100)
sch.annotate(block_or_loop=l100, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l100, ann_key="pragma_unroll_explicit", ann_val=1)
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b64)
l107 = sch.fuse(l105, l106, preserve_unit_iters=True)
sch.vectorize(loop=l107)
b108 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l109, l110, l111, l112, l113, l114, l115, l116, l117, l118, l119, l120, l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b108)
b129 = sch.decompose_reduction(block=b108, loop=l115)
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #380: GFLOPs: 29.0547. Time: 29.7359 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #381: GFLOPs: 31.7657. Time: 27.1981 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #382: GFLOPs: 12.2679. Time: 70.4253 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #383: GFLOPs: 20.7044. Time: 41.7288 us. Best GFLOPs: 55.6001
2024-04-29 01:29:58 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_contrib_depthwise_conv2d_NCHWc_add_2] Trial #384: GFLOPs: 5.2149. Time: 165.6744 us. Best GFLOPs: 55.6001
