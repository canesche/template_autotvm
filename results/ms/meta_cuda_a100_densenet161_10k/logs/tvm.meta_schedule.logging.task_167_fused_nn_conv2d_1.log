2024-04-29 03:05:31 [INFO] [task_scheduler.cc:160] Initializing Task #167: "fused_nn_conv2d_1"
2024-04-29 03:05:31 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(384), T.int64(768), T.int64(1), T.int64(1)), "float32"), conv2d_nchw: T.Buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(768), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(384), T.int64(28), T.int64(28), T.int64(768), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
2024-04-29 03:05:31 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 03:05:31 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(384), T.int64(768), T.int64(1), T.int64(1)), "float32"), conv2d_nchw: T.Buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(384), T.int64(768), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(42), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(224), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(16), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2688)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(768), rc_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(56))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(56) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(384), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(128) + ax0_ax1_ax2_ax3_fused // T.int64(48))
                                    v1 = T.axis.spatial(T.int64(768), rc_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(48))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(384), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(128) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(768), rc_0 * T.int64(48) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(384), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(128) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                                T.writes(conv2d_nchw[v0, v1, v2, v3])
                                conv2d_nchw[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3]
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l3, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[3, 16, 2, 2, 2])
l25, l26, l27, l28, l29 = sch.split(loop=l4, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[14, 1, 1, 2, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l5, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 14, 2, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l6, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l7, n=3, max_innermost_factor=64, decision=[16, 12, 4])
l53, l54, l55 = sch.split(loop=l7, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l59, l60, l61 = sch.split(loop=l8, factors=[v56, v57, v58], preserve_unit_iters=True)
v62, v63, v64 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l65, l66, l67 = sch.split(loop=l9, factors=[v62, v63, v64], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l65, l54, l60, l66, l18, l28, l38, l48, l55, l61, l67, l19, l29, l39, l49)
l68 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l68, thread_axis="blockIdx.x")
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="vthread.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b71 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b71, loop=l70, preserve_unit_loops=True, index=-1)
b72 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b72, loop=l65, preserve_unit_loops=True, index=-1)
l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b72)
l83 = sch.fuse(l79, l80, l81, l82, preserve_unit_iters=True)
v84 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b72, ann_key="meta_schedule.cooperative_fetch", ann_val=v84)
b85 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b85, loop=l65, preserve_unit_loops=True, index=-1)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b85)
l96 = sch.fuse(l92, l93, l94, l95, preserve_unit_iters=True)
v97 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b85, ann_key="meta_schedule.cooperative_fetch", ann_val=v97)
sch.compute_inline(block=b0)
v98 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v98)
2024-04-29 03:05:31 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(384), T.int64(768), T.int64(1), T.int64(1)), "float32"), conv2d_nchw: T.Buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(384), T.int64(768), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(42), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(224), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2688)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(768), rc_0_ry_0_rx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(56))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(56) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(384), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(128) + ax0_ax1_ax2_ax3_fused // T.int64(48))
                                    v1 = T.axis.spatial(T.int64(768), rc_0_ry_0_rx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(48))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(384), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(128) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(768), rc_0_ry_0_rx_0_fused * T.int64(48) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(384), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(128) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                                T.writes(conv2d_nchw[v0, v1, v2, v3])
                                conv2d_nchw[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3]
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l3, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[3, 16, 2, 2, 2])
l25, l26, l27, l28, l29 = sch.split(loop=l4, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[14, 1, 1, 2, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l5, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 14, 2, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l6, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l7, n=3, max_innermost_factor=64, decision=[16, 12, 4])
l53, l54, l55 = sch.split(loop=l7, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l59, l60, l61 = sch.split(loop=l8, factors=[v56, v57, v58], preserve_unit_iters=True)
v62, v63, v64 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l65, l66, l67 = sch.split(loop=l9, factors=[v62, v63, v64], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l65, l54, l60, l66, l18, l28, l38, l48, l55, l61, l67, l19, l29, l39, l49)
l68 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l68, thread_axis="blockIdx.x")
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="vthread.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b71 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b71, loop=l70, preserve_unit_loops=True, index=-1)
b72 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b72, loop=l65, preserve_unit_loops=True, index=-1)
l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b72)
l83 = sch.fuse(l79, l80, l81, l82, preserve_unit_iters=True)
v84 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b72, ann_key="meta_schedule.cooperative_fetch", ann_val=v84)
b85 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b85, loop=l65, preserve_unit_loops=True, index=-1)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b85)
l96 = sch.fuse(l92, l93, l94, l95, preserve_unit_iters=True)
v97 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b85, ann_key="meta_schedule.cooperative_fetch", ann_val=v97)
l98 = sch.fuse(l53, l59, l65, preserve_unit_iters=True)
sch.annotate(block_or_loop=l98, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l98, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l98, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
2024-04-29 03:05:31 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(384), T.int64(768), T.int64(1), T.int64(1)), "float32"), conv2d_nchw: T.Buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(384), T.int64(768), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(42), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(224), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2688)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(768), rc_0_ry_0_rx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(56))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(56) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(384), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(128) + ax0_ax1_ax2_ax3_fused // T.int64(48))
                                    v1 = T.axis.spatial(T.int64(768), rc_0_ry_0_rx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(48))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(384), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(128) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(768), rc_0_ry_0_rx_0_fused * T.int64(48) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(384), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(128) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                                T.writes(conv2d_nchw[v0, v1, v2, v3])
                                conv2d_nchw[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3]
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l3, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[3, 16, 2, 2, 2])
l25, l26, l27, l28, l29 = sch.split(loop=l4, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[14, 1, 1, 2, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l5, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 14, 2, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l6, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l7, n=3, max_innermost_factor=64, decision=[16, 12, 4])
l53, l54, l55 = sch.split(loop=l7, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l59, l60, l61 = sch.split(loop=l8, factors=[v56, v57, v58], preserve_unit_iters=True)
v62, v63, v64 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l65, l66, l67 = sch.split(loop=l9, factors=[v62, v63, v64], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l65, l54, l60, l66, l18, l28, l38, l48, l55, l61, l67, l19, l29, l39, l49)
l68 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l68, thread_axis="blockIdx.x")
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="vthread.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b71 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b71, loop=l70, preserve_unit_loops=True, index=-1)
b72 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b72, loop=l65, preserve_unit_loops=True, index=-1)
l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b72)
l83 = sch.fuse(l79, l80, l81, l82, preserve_unit_iters=True)
v84 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b72, ann_key="meta_schedule.cooperative_fetch", ann_val=v84)
b85 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b85, loop=l65, preserve_unit_loops=True, index=-1)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b85)
l96 = sch.fuse(l92, l93, l94, l95, preserve_unit_iters=True)
v97 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b85, ann_key="meta_schedule.cooperative_fetch", ann_val=v97)
l98 = sch.fuse(l53, l59, l65, preserve_unit_iters=True)
sch.annotate(block_or_loop=l98, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l98, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l98, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
2024-04-29 06:38:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:38:11 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 06:38:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ac478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf4901f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf490448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x11d830b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x119434b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x130e0cd8)]: 488 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf4907b8)]: 0 failure(s)
2024-04-29 06:38:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ac478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf4901f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf490448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x11d830b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x119434b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x130e0cd8)]: 983 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf4907b8)]: 0 failure(s)
2024-04-29 06:38:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ac478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf4901f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf490448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x11d830b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x119434b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x130e0cd8)]: 1475 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf4907b8)]: 0 failure(s)
2024-04-29 06:38:16 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2024-04-29 06:38:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ac478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf4901f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf490448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x11d830b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x119434b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x130e0cd8)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf4907b8)]: 0 failure(s)
2024-04-29 06:38:21 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ac478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf4901f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf490448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x11d830b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x119434b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x130e0cd8)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf4907b8)]: 0 failure(s)
2024-04-29 06:38:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ac478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf4901f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf490448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x11d830b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x119434b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x130e0cd8)]: 80 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf4907b8)]: 0 failure(s)
2024-04-29 06:38:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ac478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf4901f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf490448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x11d830b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x119434b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x130e0cd8)]: 100 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf4907b8)]: 0 failure(s)
2024-04-29 06:38:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9995  0.9991  0.9991  0.9984  0.9981  0.9978  0.9966  0.9966  0.9963  0.9959  0.9958  0.9948  0.9941  0.9921  0.9918
[17 : 32]:	0.9917  0.9896  0.9895  0.9889  0.9883  0.9864  0.9857  0.9856  0.9854  0.9853  0.9846  0.9843  0.9839  0.9829  0.9826  0.9825
[33 : 48]:	0.9815  0.9811  0.9810  0.9806  0.9803  0.9793  0.9792  0.9790  0.9761  0.9761  0.9752  0.9746  0.9735  0.9726  0.9723  0.9703
[49 : 64]:	0.9701  0.9695  0.9695  0.9691  0.9690  0.9665  0.9658  0.9653  0.9652  0.9648  0.9645  0.9641  0.9638  0.9630  0.9611  0.9596
2024-04-29 06:38:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:38:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #1: GFLOPs: 2597.0546. Time: 178.0563 us. Best GFLOPs: 2597.0546
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #2: GFLOPs: 135.8910. Time: 3402.8885 us. Best GFLOPs: 2597.0546
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #3: GFLOPs: 270.6981. Time: 1708.2576 us. Best GFLOPs: 2597.0546
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #4: GFLOPs: 144.8328. Time: 3192.8000 us. Best GFLOPs: 2597.0546
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #5: GFLOPs: 982.4889. Time: 470.6638 us. Best GFLOPs: 2597.0546
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #6: GFLOPs: 452.1746. Time: 1022.6625 us. Best GFLOPs: 2597.0546
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #7: GFLOPs: 2499.6970. Time: 184.9912 us. Best GFLOPs: 2597.0546
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #8: GFLOPs: 1575.5671. Time: 293.4956 us. Best GFLOPs: 2597.0546
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #9: GFLOPs: 198.5066. Time: 2329.5047 us. Best GFLOPs: 2597.0546
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #10: GFLOPs: 1545.0256. Time: 299.2973 us. Best GFLOPs: 2597.0546
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #11: GFLOPs: 3932.4197. Time: 117.5922 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #12: GFLOPs: 1540.4297. Time: 300.1903 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #13: GFLOPs: 1367.3419. Time: 338.1905 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #14: GFLOPs: 13.2459. Time: 34910.5503 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #15: GFLOPs: 997.6612. Time: 463.5061 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #16: GFLOPs: 3858.1562. Time: 119.8557 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #17: GFLOPs: 1602.3087. Time: 288.5973 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #18: GFLOPs: 279.6101. Time: 1653.8103 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #19: GFLOPs: 613.9855. Time: 753.1481 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #20: GFLOPs: 1302.1653. Time: 355.1178 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #21: GFLOPs: 925.0660. Time: 499.8800 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #22: GFLOPs: 1561.3903. Time: 296.1604 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #23: GFLOPs: 270.5249. Time: 1709.3511 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #24: GFLOPs: 253.5771. Time: 1823.5951 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #25: GFLOPs: 362.6038. Time: 1275.2818 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #26: GFLOPs: 926.8235. Time: 498.9321 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #27: GFLOPs: 3188.6636. Time: 145.0206 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #28: GFLOPs: 486.6900. Time: 950.1367 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #29: GFLOPs: 230.9964. Time: 2001.8585 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #30: GFLOPs: 282.7559. Time: 1635.4105 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #31: GFLOPs: 1899.2188. Time: 243.4801 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #32: GFLOPs: 455.4623. Time: 1015.2805 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #33: GFLOPs: 411.9587. Time: 1122.4960 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #34: GFLOPs: 18.4072. Time: 25121.7918 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #35: GFLOPs: 267.8352. Time: 1726.5170 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #36: GFLOPs: 564.7201. Time: 818.8518 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #37: GFLOPs: 739.4607. Time: 625.3504 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #38: GFLOPs: 297.7457. Time: 1553.0771 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #39: GFLOPs: 204.7278. Time: 2258.7165 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #40: GFLOPs: 3931.9144. Time: 117.6073 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #41: GFLOPs: 2418.4303. Time: 191.2075 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #42: GFLOPs: 2458.1069. Time: 188.1212 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #43: GFLOPs: 167.1195. Time: 2767.0139 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #44: GFLOPs: 1233.9066. Time: 374.7626 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #45: GFLOPs: 163.8929. Time: 2821.4898 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #46: GFLOPs: 253.4736. Time: 1824.3398 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #47: GFLOPs: 1905.9165. Time: 242.6245 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #48: GFLOPs: 104.6028. Time: 4420.7415 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #49: GFLOPs: 150.0521. Time: 3081.7434 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #50: GFLOPs: 1029.1614. Time: 449.3192 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #51: GFLOPs: 1715.2469. Time: 269.5950 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #52: GFLOPs: 691.3764. Time: 668.8427 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #53: GFLOPs: 85.7349. Time: 5393.6237 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #54: GFLOPs: 163.3872. Time: 2830.2222 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #55: GFLOPs: 24.2372. Time: 19078.9972 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #56: GFLOPs: 161.4299. Time: 2864.5377 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #57: GFLOPs: 165.0828. Time: 2801.1519 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #58: GFLOPs: 662.1551. Time: 698.3591 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #59: GFLOPs: 485.7813. Time: 951.9140 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #60: GFLOPs: 5.9913. Time: 77182.2917 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #61: GFLOPs: 2264.1131. Time: 204.2398 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #62: GFLOPs: 1108.9641. Time: 416.9855 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #63: GFLOPs: 64.5753. Time: 7160.9780 us. Best GFLOPs: 3932.4197
2024-04-29 07:02:57 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #64: GFLOPs: 82.2965. Time: 5618.9723 us. Best GFLOPs: 3932.4197
2024-04-29 07:45:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:45:50 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-29 07:45:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ac478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf4901f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf490448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x11d830b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x119434b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x130e0cd8)]: 426 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf4907b8)]: 0 failure(s)
2024-04-29 07:45:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ac478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf4901f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf490448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x11d830b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x119434b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x130e0cd8)]: 850 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf4907b8)]: 0 failure(s)
2024-04-29 07:45:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ac478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf4901f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf490448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x11d830b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x119434b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x130e0cd8)]: 1276 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf4907b8)]: 0 failure(s)
2024-04-29 07:45:56 [INFO] [evolutionary_search.cc:723] Sampled 68 candidate(s)
2024-04-29 07:45:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ac478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf4901f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf490448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x11d830b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x119434b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x130e0cd8)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf4907b8)]: 0 failure(s)
2024-04-29 07:46:02 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ac478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf4901f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf490448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x11d830b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x119434b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x130e0cd8)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf4907b8)]: 0 failure(s)
2024-04-29 07:46:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ac478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf4901f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf490448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x11d830b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x119434b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x130e0cd8)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf4907b8)]: 0 failure(s)
2024-04-29 07:46:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x150ac478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xf4901f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf490448)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x11d830b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x119434b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x130e0cd8)]: 74 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xf4907b8)]: 0 failure(s)
2024-04-29 07:46:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.8650  1.6950  1.6760  1.6659  1.6616  1.6588  1.6487  1.6439  1.6407  1.6381  1.6349  1.6132  1.6129  1.5934  1.5793  1.5650
[17 : 32]:	1.5646  1.5605  1.5593  1.5526  1.5501  1.5396  1.5263  1.5144  1.5048  1.4868  1.4228  1.4217  1.4115  1.4083  1.4055  1.3953
[33 : 48]:	1.3938  1.3894  1.3820  1.3217  1.3071  1.2980  1.2664  1.2518  1.2482  1.2458  1.2362  1.2206  1.2142  1.1963  1.1934  1.1830
[49 : 64]:	1.1803  1.1773  1.1710  1.1597  1.1570  1.1525  1.1494  1.1417  1.1371  1.1344  1.1336  1.1314  1.1305  1.1222  1.1209  1.1100
2024-04-29 07:46:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:46:10 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:121] [Task #167: fused_nn_conv2d_1] Trial #65: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(384), T.int64(768), T.int64(1), T.int64(1)), "float32"), conv2d_nchw: T.Buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(384), T.int64(768), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1792), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(384), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(2) * T.int64(2) + yy_3_init * T.int64(2) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(64), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(768), rc_0 * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(384), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(768), rc_0 * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1 < T.int64(72))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(384), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(2) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(768), rc_0 * T.int64(12) + rc_1 * T.int64(3) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(384), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw[v0, v1, v2, v3])
                            conv2d_nchw[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3]
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l3, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[64, 1, 3, 1, 2])
l25, l26, l27, l28, l29 = sch.split(loop=l4, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 2])
l35, l36, l37, l38, l39 = sch.split(loop=l5, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l6, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l7, n=3, max_innermost_factor=64, decision=[64, 4, 3])
l53, l54, l55 = sch.split(loop=l7, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l59, l60, l61 = sch.split(loop=l8, factors=[v56, v57, v58], preserve_unit_iters=True)
v62, v63, v64 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l65, l66, l67 = sch.split(loop=l9, factors=[v62, v63, v64], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l65, l54, l60, l66, l18, l28, l38, l48, l55, l61, l67, l19, l29, l39, l49)
l68 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l68, thread_axis="blockIdx.x")
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="vthread.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b71 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b71, loop=l70, preserve_unit_loops=True, index=-1)
b72 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b72, loop=l65, preserve_unit_loops=True, index=-1)
l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b72)
l83 = sch.fuse(l79, l80, l81, l82, preserve_unit_iters=True)
v84 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b72, ann_key="meta_schedule.cooperative_fetch", ann_val=v84)
b85 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b85, loop=l65, preserve_unit_loops=True, index=-1)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b85)
l96 = sch.fuse(l92, l93, l94, l95, preserve_unit_iters=True)
v97 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b85, ann_key="meta_schedule.cooperative_fetch", ann_val=v97)
sch.compute_inline(block=b0)
v98 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v98)
sch.enter_postproc()
sch.unannotate(block_or_loop=b72, ann_key="meta_schedule.cooperative_fetch")
l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b72)
l106, l107 = sch.split(loop=l105, factors=[None, 42], preserve_unit_iters=True)
sch.bind(loop=l107, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b85, ann_key="meta_schedule.cooperative_fetch")
l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b85)
l115, l116 = sch.split(loop=l114, factors=[None, 42], preserve_unit_iters=True)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b118)
l130, l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b119)
l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l138, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l138, ann_key="pragma_unroll_explicit", ann_val=1)
l158, l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b121)
b165 = sch.get_block(name="conv2d_nchw", func_name="main")
l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b165)
b186 = sch.decompose_reduction(block=b165, loop=l169)
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:121] [Task #167: fused_nn_conv2d_1] Trial #66: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(384), T.int64(768), T.int64(1), T.int64(1)), "float32"), conv2d_nchw: T.Buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(384), T.int64(768), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(448), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(384), nn_0_ff_0_yy_0_xx_0_fused // T.int64(112) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(4) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(112) // T.int64(28) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(48), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(768), rc_0_ry_0_rx_0_fused * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(112) // T.int64(28) * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(112))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(10)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(384), nn_0_ff_0_yy_0_xx_0_fused // T.int64(112) * T.int64(96) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(16))
                                        v1 = T.axis.spatial(T.int64(768), rc_0_ry_0_rx_0_fused * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1536))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(384), nn_0_ff_0_yy_0_xx_0_fused // T.int64(112) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(112) // T.int64(28) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(768), rc_0_ry_0_rx_0_fused * T.int64(16) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(384), nn_0_ff_0_yy_0_xx_0_fused // T.int64(112) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(112) // T.int64(28) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw[v0, v1, v2, v3])
                            conv2d_nchw[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3]
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l3, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[4, 3, 8, 2, 2])
l25, l26, l27, l28, l29 = sch.split(loop=l4, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[4, 1, 7, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l5, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[28, 1, 1, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l6, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l7, n=3, max_innermost_factor=64, decision=[48, 8, 2])
l53, l54, l55 = sch.split(loop=l7, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l59, l60, l61 = sch.split(loop=l8, factors=[v56, v57, v58], preserve_unit_iters=True)
v62, v63, v64 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l65, l66, l67 = sch.split(loop=l9, factors=[v62, v63, v64], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l65, l54, l60, l66, l18, l28, l38, l48, l55, l61, l67, l19, l29, l39, l49)
l68 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l68, thread_axis="blockIdx.x")
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="vthread.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b71 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b71, loop=l70, preserve_unit_loops=True, index=-1)
b72 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b72, loop=l65, preserve_unit_loops=True, index=-1)
l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b72)
l83 = sch.fuse(l79, l80, l81, l82, preserve_unit_iters=True)
v84 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b72, ann_key="meta_schedule.cooperative_fetch", ann_val=v84)
b85 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b85, loop=l65, preserve_unit_loops=True, index=-1)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b85)
l96 = sch.fuse(l92, l93, l94, l95, preserve_unit_iters=True)
v97 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b85, ann_key="meta_schedule.cooperative_fetch", ann_val=v97)
l98 = sch.fuse(l53, l59, l65, preserve_unit_iters=True)
sch.annotate(block_or_loop=l98, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l98, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l98, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
sch.enter_postproc()
sch.unannotate(block_or_loop=b72, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b72)
l105, l106, l107 = sch.split(loop=l104, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.bind(loop=l106, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b85, ann_key="meta_schedule.cooperative_fetch")
l108, l109, l110, l111, l112 = sch.get_loops(block=b85)
l113, l114, l115 = sch.split(loop=l112, factors=[None, 56, 3], preserve_unit_iters=True)
sch.vectorize(loop=l115)
sch.bind(loop=l114, thread_axis="threadIdx.x")
b116 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b116, ann_key="meta_schedule.unroll_explicit")
b117, b118, b119, b120 = sch.get_child_blocks(b116)
l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b117)
l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b118)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b119)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b120)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #67: GFLOPs: 1493.9383. Time: 309.5322 us. Best GFLOPs: 3932.4197
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #68: GFLOPs: 1649.6377. Time: 280.3173 us. Best GFLOPs: 3932.4197
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #69: GFLOPs: 1740.3962. Time: 265.6993 us. Best GFLOPs: 3932.4197
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #70: GFLOPs: 1717.5628. Time: 269.2315 us. Best GFLOPs: 3932.4197
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #71: GFLOPs: 1717.6282. Time: 269.2213 us. Best GFLOPs: 3932.4197
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #72: GFLOPs: 1723.6031. Time: 268.2880 us. Best GFLOPs: 3932.4197
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #73: GFLOPs: 2435.7407. Time: 189.8486 us. Best GFLOPs: 3932.4197
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #74: GFLOPs: 2398.5685. Time: 192.7908 us. Best GFLOPs: 3932.4197
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #75: GFLOPs: 2434.3065. Time: 189.9605 us. Best GFLOPs: 3932.4197
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #76: GFLOPs: 3657.8056. Time: 126.4206 us. Best GFLOPs: 3932.4197
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #77: GFLOPs: 3649.4062. Time: 126.7116 us. Best GFLOPs: 3932.4197
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #78: GFLOPs: 3675.0954. Time: 125.8259 us. Best GFLOPs: 3932.4197
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #79: GFLOPs: 2166.9220. Time: 213.4004 us. Best GFLOPs: 3932.4197
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #80: GFLOPs: 1783.8498. Time: 259.2270 us. Best GFLOPs: 3932.4197
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #81: GFLOPs: 1757.8638. Time: 263.0591 us. Best GFLOPs: 3932.4197
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #82: GFLOPs: 2508.2248. Time: 184.3623 us. Best GFLOPs: 3932.4197
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #83: GFLOPs: 1494.2911. Time: 309.4591 us. Best GFLOPs: 3932.4197
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #84: GFLOPs: 2545.9280. Time: 181.6320 us. Best GFLOPs: 3932.4197
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #85: GFLOPs: 1793.5854. Time: 257.8199 us. Best GFLOPs: 3932.4197
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #86: GFLOPs: 1757.8975. Time: 263.0540 us. Best GFLOPs: 3932.4197
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #87: GFLOPs: 6451.6637. Time: 71.6748 us. Best GFLOPs: 6451.6637
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #88: GFLOPs: 6506.4015. Time: 71.0719 us. Best GFLOPs: 6506.4015
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #89: GFLOPs: 6622.3650. Time: 69.8273 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #90: GFLOPs: 4013.6165. Time: 115.2133 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #91: GFLOPs: 4681.6104. Time: 98.7741 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #92: GFLOPs: 4482.3005. Time: 103.1662 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #93: GFLOPs: 4677.8433. Time: 98.8537 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #94: GFLOPs: 3734.5988. Time: 123.8211 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #95: GFLOPs: 4650.3580. Time: 99.4379 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #96: GFLOPs: 4703.9059. Time: 98.3060 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #97: GFLOPs: 4535.1852. Time: 101.9632 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #98: GFLOPs: 3618.1277. Time: 127.8070 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #99: GFLOPs: 4671.5744. Time: 98.9863 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #100: GFLOPs: 3928.5622. Time: 117.7077 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #101: GFLOPs: 2394.5386. Time: 193.1153 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #102: GFLOPs: 3902.9068. Time: 118.4814 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #103: GFLOPs: 4646.7715. Time: 99.5147 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #104: GFLOPs: 3664.7626. Time: 126.1806 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #105: GFLOPs: 3820.1040. Time: 121.0496 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #106: GFLOPs: 1590.9658. Time: 290.6549 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #107: GFLOPs: 3363.5885. Time: 137.4788 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #108: GFLOPs: 4011.8240. Time: 115.2648 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #109: GFLOPs: 3840.9121. Time: 120.3938 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #110: GFLOPs: 3664.5139. Time: 126.1892 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #111: GFLOPs: 3965.7323. Time: 116.6044 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #112: GFLOPs: 3938.3008. Time: 117.4166 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #113: GFLOPs: 3938.0127. Time: 117.4252 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #114: GFLOPs: 3931.1187. Time: 117.6312 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #115: GFLOPs: 3094.4799. Time: 149.4345 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #116: GFLOPs: 4228.0489. Time: 109.3701 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #117: GFLOPs: 3287.5173. Time: 140.6599 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #118: GFLOPs: 3586.1826. Time: 128.9455 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #119: GFLOPs: 6413.4197. Time: 72.1023 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #120: GFLOPs: 3839.8767. Time: 120.4263 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #121: GFLOPs: 3801.4353. Time: 121.6441 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #122: GFLOPs: 4449.4235. Time: 103.9285 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #123: GFLOPs: 4516.6905. Time: 102.3807 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #124: GFLOPs: 4013.1900. Time: 115.2255 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #125: GFLOPs: 3095.0351. Time: 149.4077 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #126: GFLOPs: 70.0090. Time: 6605.1841 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #127: GFLOPs: 79.7859. Time: 5795.7831 us. Best GFLOPs: 6622.3650
2024-04-29 07:48:06 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_conv2d_1] Trial #128: GFLOPs: 353.4096. Time: 1308.4592 us. Best GFLOPs: 6622.3650
