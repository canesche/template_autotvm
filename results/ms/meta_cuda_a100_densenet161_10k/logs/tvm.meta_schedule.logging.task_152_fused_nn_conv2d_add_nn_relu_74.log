2024-04-29 03:05:25 [INFO] [task_scheduler.cc:160] Initializing Task #152: "fused_nn_conv2d_add_nn_relu_74"
2024-04-29 03:05:25 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(192), T.int64(240), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(56), T.int64(56)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(240), T.int64(56), T.int64(56)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(56), T.int64(56), T.int64(240), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 03:05:25 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 03:05:25 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(192), T.int64(240), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(240), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(107520)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(240), ax0_ax1_ax2_ax3_fused // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(448) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(46080)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused // T.int64(240))
                                    v1 = T.axis.spatial(T.int64(240), ax0_ax1_ax2_ax3_fused % T.int64(240))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(240), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused * T.int64(96) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(24) + ff_3 * T.int64(6) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(2) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(240), rc_0 * T.int64(240) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(24), T.int64(2), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused * T.int64(96) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(24) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(2) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 4, 4, 6])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 2, 2, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 240, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 03:05:25 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(192), T.int64(240), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(240), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(107520)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(240), ax0_ax1_ax2_ax3_fused // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(448) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(46080)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused // T.int64(240))
                                    v1 = T.axis.spatial(T.int64(240), ax0_ax1_ax2_ax3_fused % T.int64(240))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(240), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused * T.int64(96) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(24) + ff_3 * T.int64(6) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(2) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(240), rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(24), T.int64(2), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused * T.int64(96) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(24) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(2) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 4, 4, 6])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 2, 2, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 240, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 03:05:25 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(192), T.int64(240), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(240), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(107520)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(240), ax0_ax1_ax2_ax3_fused // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(448) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(46080)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused // T.int64(240))
                                    v1 = T.axis.spatial(T.int64(240), ax0_ax1_ax2_ax3_fused % T.int64(240))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(240), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused * T.int64(96) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(24) + ff_3 * T.int64(6) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(2) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(240), rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(24), T.int64(2), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused * T.int64(96) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(56) * T.int64(24) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(56) // T.int64(2) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 4, 4, 6])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 2, 2, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 240, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 06:17:35 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:17:35 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 06:17:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3163b58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x174d0df8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14e1fa28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb3d988)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x101ffdd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14e4c3b8)]: 488 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x11ec9a18)]: 0 failure(s)
2024-04-29 06:17:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3163b58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x174d0df8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14e1fa28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb3d988)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x101ffdd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14e4c3b8)]: 985 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x11ec9a18)]: 0 failure(s)
2024-04-29 06:17:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3163b58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x174d0df8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14e1fa28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb3d988)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x101ffdd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14e4c3b8)]: 1483 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x11ec9a18)]: 0 failure(s)
2024-04-29 06:17:42 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-29 06:17:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3163b58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x174d0df8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14e1fa28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb3d988)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x101ffdd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14e4c3b8)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x11ec9a18)]: 0 failure(s)
2024-04-29 06:17:47 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3163b58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x174d0df8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14e1fa28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb3d988)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x101ffdd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14e4c3b8)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x11ec9a18)]: 0 failure(s)
2024-04-29 06:17:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3163b58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x174d0df8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14e1fa28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb3d988)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x101ffdd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14e4c3b8)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x11ec9a18)]: 0 failure(s)
2024-04-29 06:17:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3163b58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x174d0df8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x14e1fa28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xdb3d988)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x101ffdd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14e4c3b8)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x11ec9a18)]: 0 failure(s)
2024-04-29 06:17:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9991  0.9988  0.9988  0.9981  0.9967  0.9956  0.9944  0.9943  0.9934  0.9932  0.9929  0.9928  0.9920  0.9920  0.9916
[17 : 32]:	0.9905  0.9902  0.9898  0.9895  0.9891  0.9888  0.9888  0.9876  0.9873  0.9871  0.9867  0.9867  0.9858  0.9851  0.9849  0.9845
[33 : 48]:	0.9840  0.9837  0.9832  0.9829  0.9827  0.9824  0.9822  0.9819  0.9808  0.9808  0.9797  0.9794  0.9793  0.9783  0.9780  0.9770
[49 : 64]:	0.9768  0.9760  0.9753  0.9752  0.9745  0.9727  0.9724  0.9715  0.9708  0.9701  0.9699  0.9698  0.9678  0.9677  0.9676  0.9670
2024-04-29 06:17:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:17:52 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #1: GFLOPs: 4202.4341. Time: 69.0595 us. Best GFLOPs: 4202.4341
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #2: GFLOPs: 252.6495. Time: 1148.6979 us. Best GFLOPs: 4202.4341
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #3: GFLOPs: 1641.6572. Time: 176.7835 us. Best GFLOPs: 4202.4341
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #4: GFLOPs: 3224.6270. Time: 90.0005 us. Best GFLOPs: 4202.4341
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #5: GFLOPs: 1159.9194. Time: 250.2053 us. Best GFLOPs: 4202.4341
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #6: GFLOPs: 1343.2551. Time: 216.0557 us. Best GFLOPs: 4202.4341
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #7: GFLOPs: 3610.0106. Time: 80.3926 us. Best GFLOPs: 4202.4341
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #8: GFLOPs: 1872.8288. Time: 154.9624 us. Best GFLOPs: 4202.4341
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #9: GFLOPs: 4664.9692. Time: 62.2122 us. Best GFLOPs: 4664.9692
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #10: GFLOPs: 2878.2380. Time: 100.8318 us. Best GFLOPs: 4664.9692
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #11: GFLOPs: 274.6783. Time: 1056.5740 us. Best GFLOPs: 4664.9692
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #12: GFLOPs: 4361.4850. Time: 66.5411 us. Best GFLOPs: 4664.9692
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #13: GFLOPs: 1965.3165. Time: 147.6698 us. Best GFLOPs: 4664.9692
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #14: GFLOPs: 3600.0779. Time: 80.6144 us. Best GFLOPs: 4664.9692
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #15: GFLOPs: 2999.4997. Time: 96.7555 us. Best GFLOPs: 4664.9692
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #16: GFLOPs: 635.9452. Time: 456.3569 us. Best GFLOPs: 4664.9692
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #17: GFLOPs: 1978.1965. Time: 146.7084 us. Best GFLOPs: 4664.9692
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #18: GFLOPs: 2907.2791. Time: 99.8246 us. Best GFLOPs: 4664.9692
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #19: GFLOPs: 4701.8829. Time: 61.7238 us. Best GFLOPs: 4701.8829
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #20: GFLOPs: 3823.4874. Time: 75.9040 us. Best GFLOPs: 4701.8829
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #21: GFLOPs: 251.8899. Time: 1152.1621 us. Best GFLOPs: 4701.8829
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #22: GFLOPs: 5869.0789. Time: 49.4486 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #23: GFLOPs: 441.8718. Time: 656.7923 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #24: GFLOPs: 3609.4286. Time: 80.4055 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #25: GFLOPs: 2196.9951. Time: 132.0977 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #26: GFLOPs: 185.7001. Time: 1562.8320 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #27: GFLOPs: 3220.0741. Time: 90.1277 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #28: GFLOPs: 1373.5221. Time: 211.2947 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #29: GFLOPs: 170.8093. Time: 1699.0764 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #30: GFLOPs: 5289.3390. Time: 54.8685 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #31: GFLOPs: 3884.5636. Time: 74.7106 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #32: GFLOPs: 2742.1540. Time: 105.8358 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #33: GFLOPs: 139.4746. Time: 2080.7947 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #34: GFLOPs: 1075.0174. Time: 269.9658 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #35: GFLOPs: 1219.3272. Time: 238.0149 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #36: GFLOPs: 1531.2313. Time: 189.5324 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #37: GFLOPs: 234.9304. Time: 1235.3359 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #38: GFLOPs: 3687.5241. Time: 78.7027 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #39: GFLOPs: 3501.6650. Time: 82.8800 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #40: GFLOPs: 105.7874. Time: 2743.4068 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #41: GFLOPs: 471.4872. Time: 615.5373 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #42: GFLOPs: 3.8568. Time: 75248.6417 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #43: GFLOPs: 62.4264. Time: 4648.9601 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #44: GFLOPs: 4052.7647. Time: 71.6099 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #45: GFLOPs: 3.9555. Time: 73370.2850 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #46: GFLOPs: 29.6997. Time: 9771.7527 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #47: GFLOPs: 5437.7691. Time: 53.3708 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #48: GFLOPs: 4934.8554. Time: 58.8098 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #49: GFLOPs: 2740.2857. Time: 105.9079 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #50: GFLOPs: 3161.3322. Time: 91.8024 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #51: GFLOPs: 4438.0110. Time: 65.3937 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #52: GFLOPs: 4782.4314. Time: 60.6842 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #53: GFLOPs: 915.7456. Time: 316.9199 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #54: GFLOPs: 68.2396. Time: 4252.9281 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #55: GFLOPs: 481.6349. Time: 602.5685 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #56: GFLOPs: 1140.5288. Time: 254.4591 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #57: GFLOPs: 1141.1392. Time: 254.3230 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #58: GFLOPs: 3410.4951. Time: 85.0956 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #59: GFLOPs: 2469.1455. Time: 117.5378 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #60: GFLOPs: 32.9633. Time: 8804.2666 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #61: GFLOPs: 219.5500. Time: 1321.8762 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #62: GFLOPs: 3736.3372. Time: 77.6745 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #63: GFLOPs: 1512.7101. Time: 191.8530 us. Best GFLOPs: 5869.0789
2024-04-29 07:01:35 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_74] Trial #64: GFLOPs: 52.7435. Time: 5502.4369 us. Best GFLOPs: 5869.0789
