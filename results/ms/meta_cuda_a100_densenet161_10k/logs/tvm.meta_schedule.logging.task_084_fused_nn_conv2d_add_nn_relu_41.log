2024-04-29 03:04:47 [INFO] [task_scheduler.cc:160] Initializing Task #84: "fused_nn_conv2d_add_nn_relu_41"
2024-04-29 03:04:47 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1248), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1248), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1248), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1248), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14), T.int64(1248), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 03:04:47 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 03:04:47 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1248), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1248), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1248), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(1248), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(24), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(52), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2352)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1248), rc_0 * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(576)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(24))
                                    v1 = T.axis.spatial(T.int64(1248), rc_0 * T.int64(24) + ax0_ax1_ax2_ax3_fused % T.int64(24))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(12) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1248), rc_0 * T.int64(24) + rc_1 * T.int64(6) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(12) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 12, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[52, 4, 6])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 03:04:47 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1248), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1248), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1248), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(1248), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(24), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(52), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2352)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1248), rc_0_ry_0_rx_0_fused * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(576)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(24))
                                    v1 = T.axis.spatial(T.int64(1248), rc_0_ry_0_rx_0_fused * T.int64(24) + ax0_ax1_ax2_ax3_fused % T.int64(24))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(12) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1248), rc_0_ry_0_rx_0_fused * T.int64(24) + rc_1 * T.int64(6) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(12) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 12, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[52, 4, 6])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 03:04:47 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1248), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1248), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1248), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(1248), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(24), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(52), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2352)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1248), rc_0_ry_0_rx_0_fused * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(576)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(24))
                                    v1 = T.axis.spatial(T.int64(1248), rc_0_ry_0_rx_0_fused * T.int64(24) + ax0_ax1_ax2_ax3_fused % T.int64(24))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(12) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1248), rc_0_ry_0_rx_0_fused * T.int64(24) + rc_1 * T.int64(6) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(12) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 12, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[52, 4, 6])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 04:55:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:55:11 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 04:55:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11928348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1026cac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x17619508)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcaf3258)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4116b08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x123122e8)]: 490 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x16d0fb78)]: 0 failure(s)
2024-04-29 04:55:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11928348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1026cac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x17619508)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcaf3258)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4116b08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x123122e8)]: 970 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x16d0fb78)]: 0 failure(s)
2024-04-29 04:55:15 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-29 04:55:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11928348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1026cac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x17619508)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcaf3258)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4116b08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x123122e8)]: 118 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x16d0fb78)]: 0 failure(s)
2024-04-29 04:55:21 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11928348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1026cac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x17619508)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcaf3258)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4116b08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x123122e8)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x16d0fb78)]: 0 failure(s)
2024-04-29 04:55:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11928348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1026cac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x17619508)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcaf3258)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4116b08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x123122e8)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x16d0fb78)]: 0 failure(s)
2024-04-29 04:55:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x11928348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1026cac8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x17619508)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xcaf3258)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4116b08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x123122e8)]: 69 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x16d0fb78)]: 0 failure(s)
2024-04-29 04:55:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9991  0.9989  0.9968  0.9964  0.9957  0.9947  0.9942  0.9936  0.9928  0.9925  0.9925  0.9910  0.9905  0.9895  0.9894  0.9893
[17 : 32]:	0.9880  0.9879  0.9879  0.9878  0.9874  0.9861  0.9859  0.9859  0.9853  0.9853  0.9852  0.9847  0.9844  0.9844  0.9843  0.9839
[33 : 48]:	0.9838  0.9832  0.9830  0.9824  0.9819  0.9803  0.9799  0.9788  0.9785  0.9772  0.9763  0.9753  0.9751  0.9750  0.9742  0.9740
[49 : 64]:	0.9737  0.9724  0.9713  0.9713  0.9711  0.9710  0.9706  0.9705  0.9701  0.9688  0.9677  0.9666  0.9653  0.9649  0.9642  0.9609
2024-04-29 04:55:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:55:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #1: GFLOPs: 150.6695. Time: 623.9136 us. Best GFLOPs: 150.6695
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #2: GFLOPs: 1935.5832. Time: 48.5666 us. Best GFLOPs: 1935.5832
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #3: GFLOPs: 994.2293. Time: 94.5504 us. Best GFLOPs: 1935.5832
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #4: GFLOPs: 2041.0856. Time: 46.0562 us. Best GFLOPs: 2041.0856
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #5: GFLOPs: 128.3007. Time: 732.6907 us. Best GFLOPs: 2041.0856
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #6: GFLOPs: 20.1643. Time: 4661.9460 us. Best GFLOPs: 2041.0856
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #7: GFLOPs: 1083.4621. Time: 86.7633 us. Best GFLOPs: 2041.0856
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #8: GFLOPs: 942.0212. Time: 99.7905 us. Best GFLOPs: 2041.0856
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #9: GFLOPs: 71.9902. Time: 1305.7995 us. Best GFLOPs: 2041.0856
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #10: GFLOPs: 424.9608. Time: 221.2080 us. Best GFLOPs: 2041.0856
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #11: GFLOPs: 843.7966. Time: 111.4069 us. Best GFLOPs: 2041.0856
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #12: GFLOPs: 4.9898. Time: 18839.5525 us. Best GFLOPs: 2041.0856
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #13: GFLOPs: 2396.3375. Time: 39.2285 us. Best GFLOPs: 2396.3375
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #14: GFLOPs: 1613.5397. Time: 58.2599 us. Best GFLOPs: 2396.3375
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #15: GFLOPs: 488.0341. Time: 192.6192 us. Best GFLOPs: 2396.3375
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #16: GFLOPs: 81.9614. Time: 1146.9385 us. Best GFLOPs: 2396.3375
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #17: GFLOPs: 659.7801. Time: 142.4789 us. Best GFLOPs: 2396.3375
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #18: GFLOPs: 88.8697. Time: 1057.7813 us. Best GFLOPs: 2396.3375
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #19: GFLOPs: 961.6793. Time: 97.7506 us. Best GFLOPs: 2396.3375
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #20: GFLOPs: 443.5053. Time: 211.9585 us. Best GFLOPs: 2396.3375
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #21: GFLOPs: 212.2524. Time: 442.8913 us. Best GFLOPs: 2396.3375
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #22: GFLOPs: 7.9908. Time: 11764.1669 us. Best GFLOPs: 2396.3375
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #23: GFLOPs: 108.6796. Time: 864.9710 us. Best GFLOPs: 2396.3375
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #24: GFLOPs: 552.5643. Time: 170.1245 us. Best GFLOPs: 2396.3375
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #25: GFLOPs: 43.3487. Time: 2168.5705 us. Best GFLOPs: 2396.3375
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #26: GFLOPs: 1171.4081. Time: 80.2493 us. Best GFLOPs: 2396.3375
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #27: GFLOPs: 874.5150. Time: 107.4936 us. Best GFLOPs: 2396.3375
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #28: GFLOPs: 636.0993. Time: 147.7831 us. Best GFLOPs: 2396.3375
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #29: GFLOPs: 2665.1563. Time: 35.2718 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #30: GFLOPs: 97.6372. Time: 962.7963 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #31: GFLOPs: 180.8586. Time: 519.7692 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #32: GFLOPs: 81.4565. Time: 1154.0480 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #33: GFLOPs: 1220.6689. Time: 77.0108 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #34: GFLOPs: 1268.6464. Time: 74.0985 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #35: GFLOPs: 565.2780. Time: 166.2982 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #36: GFLOPs: 42.8478. Time: 2193.9200 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #37: GFLOPs: 153.2030. Time: 613.5959 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #38: GFLOPs: 1681.9438. Time: 55.8905 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #39: GFLOPs: 170.6511. Time: 550.8594 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #40: GFLOPs: 251.0695. Time: 374.4173 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #41: GFLOPs: 140.1754. Time: 670.6223 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #42: GFLOPs: 5.7819. Time: 16258.4871 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #43: GFLOPs: 315.0224. Time: 298.4066 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #44: GFLOPs: 24.4265. Time: 3848.4676 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #45: GFLOPs: 8.3509. Time: 11256.8317 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #46: GFLOPs: 29.3759. Time: 3200.0639 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #47: GFLOPs: 579.9344. Time: 162.0955 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #48: GFLOPs: 22.4383. Time: 4189.4827 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #49: GFLOPs: 296.5821. Time: 316.9603 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #50: GFLOPs: 275.0558. Time: 341.7660 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #51: GFLOPs: 685.4606. Time: 137.1410 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #52: GFLOPs: 782.4635. Time: 120.1395 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #53: GFLOPs: 170.0759. Time: 552.7224 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #54: GFLOPs: 487.0435. Time: 193.0110 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #55: GFLOPs: 290.5425. Time: 323.5490 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #56: GFLOPs: 28.1057. Time: 3344.6912 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #57: GFLOPs: 121.1064. Time: 776.2158 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #58: GFLOPs: 70.6702. Time: 1330.1894 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #59: GFLOPs: 54.5089. Time: 1724.5749 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #60: GFLOPs: 1387.2896. Time: 67.7614 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #61: GFLOPs: 232.8606. Time: 403.6953 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #62: GFLOPs: 267.7576. Time: 351.0815 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #63: GFLOPs: 1870.8704. Time: 50.2465 us. Best GFLOPs: 2665.1563
2024-04-29 06:56:02 [INFO] [task_scheduler.cc:131] [Task #84: fused_nn_conv2d_add_nn_relu_41] Trial #64: GFLOPs: 64.7209. Time: 1452.4623 us. Best GFLOPs: 2665.1563
