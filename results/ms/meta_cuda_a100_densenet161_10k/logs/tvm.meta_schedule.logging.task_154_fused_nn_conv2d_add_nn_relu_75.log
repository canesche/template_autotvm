2024-04-29 03:05:26 [INFO] [task_scheduler.cc:160] Initializing Task #154: "fused_nn_conv2d_add_nn_relu_75"
2024-04-29 03:05:26 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(192), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(192), T.int64(56), T.int64(56)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(56), T.int64(56), T.int64(192), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 03:05:26 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 03:05:26 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(192), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(192), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(12), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(602112)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3072)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(192))
                                    v1 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused % T.int64(192))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(28), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + yy_3 * T.int64(28) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(192), rc_0 * T.int64(192) + rc_1 * T.int64(3) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[12, 2, 2, 1, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 28])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 4, 7, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 64, 3])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 03:05:26 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(192), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(192), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(12), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(602112)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3072)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(192))
                                    v1 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused % T.int64(192))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(28), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + yy_3 * T.int64(28) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(192), rc_1 * T.int64(3) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[12, 2, 2, 1, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 28])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 4, 7, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 64, 3])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 03:05:26 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(192), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(192), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(12), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(602112)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3072)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(192))
                                    v1 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused % T.int64(192))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(28), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + yy_3 * T.int64(28) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(192), rc_1 * T.int64(3) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(28), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[12, 2, 2, 1, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 28])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 4, 7, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 64, 3])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 06:20:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:20:33 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 06:20:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x146a36a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14c13ff8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x126fc548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1046c328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1247e538)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14e1f5f8)]: 486 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x126fcb78)]: 0 failure(s)
2024-04-29 06:20:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x146a36a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14c13ff8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x126fc548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1046c328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1247e538)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14e1f5f8)]: 978 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x126fcb78)]: 0 failure(s)
2024-04-29 06:20:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x146a36a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14c13ff8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x126fc548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1046c328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1247e538)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14e1f5f8)]: 1466 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x126fcb78)]: 0 failure(s)
2024-04-29 06:20:39 [INFO] [evolutionary_search.cc:723] Sampled 70 candidate(s)
2024-04-29 06:20:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x146a36a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14c13ff8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x126fc548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1046c328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1247e538)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14e1f5f8)]: 135 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x126fcb78)]: 0 failure(s)
2024-04-29 06:20:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x146a36a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14c13ff8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x126fc548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1046c328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1247e538)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14e1f5f8)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x126fcb78)]: 0 failure(s)
2024-04-29 06:20:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x146a36a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14c13ff8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x126fc548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1046c328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1247e538)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14e1f5f8)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x126fcb78)]: 0 failure(s)
2024-04-29 06:20:50 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x146a36a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x14c13ff8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x126fc548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1046c328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x1247e538)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x14e1f5f8)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x126fcb78)]: 0 failure(s)
2024-04-29 06:20:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9993  0.9993  0.9984  0.9975  0.9954  0.9933  0.9929  0.9926  0.9925  0.9917  0.9911  0.9908  0.9893  0.9885  0.9879  0.9877
[17 : 32]:	0.9873  0.9872  0.9871  0.9871  0.9863  0.9853  0.9848  0.9846  0.9844  0.9842  0.9839  0.9837  0.9833  0.9830  0.9827  0.9826
[33 : 48]:	0.9823  0.9821  0.9816  0.9797  0.9773  0.9757  0.9752  0.9733  0.9728  0.9720  0.9717  0.9706  0.9702  0.9691  0.9673  0.9656
[49 : 64]:	0.9646  0.9640  0.9636  0.9631  0.9629  0.9628  0.9620  0.9619  0.9616  0.9613  0.9610  0.9609  0.9604  0.9601  0.9597  0.9590
2024-04-29 06:20:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:20:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #1: GFLOPs: 931.8131. Time: 249.4226 us. Best GFLOPs: 931.8131
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #2: GFLOPs: 5775.5037. Time: 40.2416 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #3: GFLOPs: 1168.9624. Time: 198.8218 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #4: GFLOPs: 22.2187. Time: 10460.3645 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #5: GFLOPs: 80.6665. Time: 2881.1848 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #6: GFLOPs: 386.9724. Time: 600.5989 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #7: GFLOPs: 4523.8614. Time: 51.3754 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #8: GFLOPs: 122.7292. Time: 1893.7238 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #9: GFLOPs: 4335.4869. Time: 53.6076 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #10: GFLOPs: 1447.8368. Time: 160.5259 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #11: GFLOPs: 80.7116. Time: 2879.5757 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #12: GFLOPs: 22.2756. Time: 10433.6387 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #13: GFLOPs: 63.9488. Time: 3634.3953 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #14: GFLOPs: 923.4566. Time: 251.6797 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #15: GFLOPs: 76.0509. Time: 3056.0504 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #16: GFLOPs: 117.5307. Time: 1977.4846 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #17: GFLOPs: 3198.7531. Time: 72.6581 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #18: GFLOPs: 129.3015. Time: 1797.4674 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #19: GFLOPs: 138.1747. Time: 1682.0395 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #20: GFLOPs: 2953.5697. Time: 78.6896 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #21: GFLOPs: 1241.5557. Time: 187.1968 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #22: GFLOPs: 1747.8524. Time: 132.9719 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #23: GFLOPs: 87.5675. Time: 2654.1272 us. Best GFLOPs: 5775.5037
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #24: GFLOPs: 5901.9492. Time: 39.3794 us. Best GFLOPs: 5901.9492
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #25: GFLOPs: 262.1413. Time: 886.6028 us. Best GFLOPs: 5901.9492
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #26: GFLOPs: 46.1960. Time: 5031.0657 us. Best GFLOPs: 5901.9492
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #27: GFLOPs: 2402.0324. Time: 96.7577 us. Best GFLOPs: 5901.9492
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #28: GFLOPs: 383.9918. Time: 605.2610 us. Best GFLOPs: 5901.9492
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #29: GFLOPs: 726.3739. Time: 319.9664 us. Best GFLOPs: 5901.9492
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #30: GFLOPs: 518.6457. Time: 448.1195 us. Best GFLOPs: 5901.9492
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #31: GFLOPs: 3715.9311. Time: 62.5456 us. Best GFLOPs: 5901.9492
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #32: GFLOPs: 56.8466. Time: 4088.4634 us. Best GFLOPs: 5901.9492
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #33: GFLOPs: 1034.5205. Time: 224.6599 us. Best GFLOPs: 5901.9492
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #34: GFLOPs: 5844.2953. Time: 39.7679 us. Best GFLOPs: 5901.9492
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #35: GFLOPs: 1237.0960. Time: 187.8716 us. Best GFLOPs: 5901.9492
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #36: GFLOPs: 1331.0072. Time: 174.6161 us. Best GFLOPs: 5901.9492
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #37: GFLOPs: 2206.0675. Time: 105.3527 us. Best GFLOPs: 5901.9492
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #38: GFLOPs: 5171.6482. Time: 44.9403 us. Best GFLOPs: 5901.9492
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:121] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #39: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(192), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(192), T.int64(192), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(6), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(56), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(8) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(56), xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(192), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(13)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(192), rc_0)
                                        v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(56))
                                        v3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1568))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                                    v1 = T.axis.spatial(T.int64(192), rc_0)
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(56), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(56), xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(192), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(56)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(56), ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[3, 1, 8, 4, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 7, 4, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 56, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[192, 1, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119 = sch.split(loop=l117, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b121)
l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b122)
l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l142, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l142, ann_key="pragma_unroll_explicit", ann_val=1)
l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b124)
b169 = sch.get_block(name="conv2d_nchw", func_name="main")
l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189 = sch.get_loops(block=b169)
b190 = sch.decompose_reduction(block=b169, loop=l173)
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #40: GFLOPs: 6524.4182. Time: 35.6224 us. Best GFLOPs: 6524.4182
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #41: GFLOPs: 24.9622. Time: 9310.6737 us. Best GFLOPs: 6524.4182
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #42: GFLOPs: 121.8441. Time: 1907.4802 us. Best GFLOPs: 6524.4182
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #43: GFLOPs: 2488.8686. Time: 93.3819 us. Best GFLOPs: 6524.4182
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #44: GFLOPs: 45.3071. Time: 5129.7791 us. Best GFLOPs: 6524.4182
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #45: GFLOPs: 197.6193. Time: 1176.0759 us. Best GFLOPs: 6524.4182
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #46: GFLOPs: 117.7939. Time: 1973.0673 us. Best GFLOPs: 6524.4182
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #47: GFLOPs: 94.7838. Time: 2452.0554 us. Best GFLOPs: 6524.4182
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #48: GFLOPs: 45.5658. Time: 5100.6462 us. Best GFLOPs: 6524.4182
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #49: GFLOPs: 2617.1679. Time: 88.8041 us. Best GFLOPs: 6524.4182
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #50: GFLOPs: 2648.8903. Time: 87.7406 us. Best GFLOPs: 6524.4182
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #51: GFLOPs: 411.6589. Time: 564.5820 us. Best GFLOPs: 6524.4182
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #52: GFLOPs: 56.4591. Time: 4116.5210 us. Best GFLOPs: 6524.4182
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #53: GFLOPs: 1803.3814. Time: 128.8775 us. Best GFLOPs: 6524.4182
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #54: GFLOPs: 244.7468. Time: 949.6151 us. Best GFLOPs: 6524.4182
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #55: GFLOPs: 7510.5915. Time: 30.9450 us. Best GFLOPs: 7510.5915
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #56: GFLOPs: 55.1144. Time: 4216.9599 us. Best GFLOPs: 7510.5915
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #57: GFLOPs: 241.6432. Time: 961.8117 us. Best GFLOPs: 7510.5915
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #58: GFLOPs: 2768.5563. Time: 83.9482 us. Best GFLOPs: 7510.5915
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #59: GFLOPs: 16.1093. Time: 14427.4280 us. Best GFLOPs: 7510.5915
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #60: GFLOPs: 5373.9946. Time: 43.2481 us. Best GFLOPs: 7510.5915
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #61: GFLOPs: 706.0558. Time: 329.1740 us. Best GFLOPs: 7510.5915
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #62: GFLOPs: 868.9600. Time: 267.4637 us. Best GFLOPs: 7510.5915
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #63: GFLOPs: 5167.1884. Time: 44.9791 us. Best GFLOPs: 7510.5915
2024-04-29 07:01:46 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_conv2d_add_nn_relu_75] Trial #64: GFLOPs: 19.3806. Time: 11992.1781 us. Best GFLOPs: 7510.5915
