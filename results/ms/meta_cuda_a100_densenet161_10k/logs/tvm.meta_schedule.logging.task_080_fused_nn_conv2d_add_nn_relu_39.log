2024-04-29 03:04:44 [INFO] [task_scheduler.cc:160] Initializing Task #80: "fused_nn_conv2d_add_nn_relu_39"
2024-04-29 03:04:44 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1344), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1344), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1344), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1344), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14), T.int64(1344), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 03:04:44 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 03:04:44 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1344), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1344), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1344), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(1344), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(96), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1372)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1344), rc_0 * T.int64(14) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2688)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused // T.int64(14))
                                    v1 = T.axis.spatial(T.int64(1344), rc_0 * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_2_ff_2_yy_2_xx_2_fused * T.int64(96) + ff_3 * T.int64(3) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1344), rc_0 * T.int64(14) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(96), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_2_ff_2_yy_2_xx_2_fused * T.int64(96) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 2, 32, 3])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 14, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[96, 14, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 03:04:44 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1344), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1344), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1344), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(1344), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(96), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1372)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1344), rc_0_ry_0_rx_0_fused * T.int64(14) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2688)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused // T.int64(14))
                                    v1 = T.axis.spatial(T.int64(1344), rc_0_ry_0_rx_0_fused * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_2_ff_2_yy_2_xx_2_fused * T.int64(96) + ff_3 * T.int64(3) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1344), rc_0_ry_0_rx_0_fused * T.int64(14) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(96), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_2_ff_2_yy_2_xx_2_fused * T.int64(96) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 2, 32, 3])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 14, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[96, 14, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 03:04:44 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1344), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1344), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1344), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(1344), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(96), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1372)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1344), rc_0_ry_0_rx_0_fused * T.int64(14) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2688)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused // T.int64(14))
                                    v1 = T.axis.spatial(T.int64(1344), rc_0_ry_0_rx_0_fused * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_2_ff_2_yy_2_xx_2_fused * T.int64(96) + ff_3 * T.int64(3) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1344), rc_0_ry_0_rx_0_fused * T.int64(14) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(96), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_2_ff_2_yy_2_xx_2_fused * T.int64(96) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 2, 32, 3])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 14, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[96, 14, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 04:49:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:49:36 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 04:49:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe503368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1793a308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4091438)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x69c8848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x169d2de8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x16619b18)]: 482 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15e95e48)]: 0 failure(s)
2024-04-29 04:49:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe503368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1793a308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4091438)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x69c8848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x169d2de8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x16619b18)]: 968 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15e95e48)]: 0 failure(s)
2024-04-29 04:49:40 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-04-29 04:49:43 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe503368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1793a308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4091438)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x69c8848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x169d2de8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x16619b18)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15e95e48)]: 0 failure(s)
2024-04-29 04:49:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe503368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1793a308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4091438)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x69c8848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x169d2de8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x16619b18)]: 122 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15e95e48)]: 0 failure(s)
2024-04-29 04:49:48 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe503368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1793a308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4091438)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x69c8848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x169d2de8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x16619b18)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15e95e48)]: 0 failure(s)
2024-04-29 04:49:50 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe503368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1793a308)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4091438)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x69c8848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x169d2de8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x16619b18)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15e95e48)]: 0 failure(s)
2024-04-29 04:49:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9997  0.9996  0.9996  0.9995  0.9985  0.9982  0.9972  0.9966  0.9959  0.9947  0.9945  0.9929  0.9928  0.9925  0.9924
[17 : 32]:	0.9922  0.9918  0.9913  0.9913  0.9906  0.9905  0.9900  0.9899  0.9894  0.9891  0.9889  0.9886  0.9873  0.9868  0.9868  0.9847
[33 : 48]:	0.9840  0.9834  0.9833  0.9812  0.9792  0.9762  0.9749  0.9737  0.9721  0.9713  0.9711  0.9705  0.9695  0.9690  0.9690  0.9683
[49 : 64]:	0.9681  0.9670  0.9656  0.9655  0.9651  0.9649  0.9646  0.9646  0.9643  0.9643  0.9633  0.9616  0.9610  0.9607  0.9599  0.9591
2024-04-29 04:49:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:49:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #1: GFLOPs: 1057.6801. Time: 95.7095 us. Best GFLOPs: 1057.6801
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #2: GFLOPs: 11.8698. Time: 8528.3838 us. Best GFLOPs: 1057.6801
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #3: GFLOPs: 13.5473. Time: 7472.3472 us. Best GFLOPs: 1057.6801
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #4: GFLOPs: 565.4618. Time: 179.0220 us. Best GFLOPs: 1057.6801
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #5: GFLOPs: 287.3801. Time: 352.2515 us. Best GFLOPs: 1057.6801
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #6: GFLOPs: 1504.7839. Time: 67.2722 us. Best GFLOPs: 1504.7839
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #7: GFLOPs: 3063.3098. Time: 33.0460 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #8: GFLOPs: 325.4474. Time: 311.0490 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #9: GFLOPs: 1325.2772. Time: 76.3841 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #10: GFLOPs: 33.4320. Time: 3027.9379 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #11: GFLOPs: 4.9460. Time: 20467.0974 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #12: GFLOPs: 853.6551. Time: 118.5843 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #13: GFLOPs: 656.0789. Time: 154.2956 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #14: GFLOPs: 222.4355. Time: 455.0986 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #15: GFLOPs: 393.5798. Time: 257.2034 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #16: GFLOPs: 222.7810. Time: 454.3928 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #17: GFLOPs: 179.9617. Time: 562.5090 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #18: GFLOPs: 703.5687. Time: 143.8809 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #19: GFLOPs: 2928.2242. Time: 34.5705 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #20: GFLOPs: 447.9918. Time: 225.9641 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #21: GFLOPs: 207.1747. Time: 488.6218 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #22: GFLOPs: 242.6661. Time: 417.1580 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #23: GFLOPs: 343.6750. Time: 294.5518 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #24: GFLOPs: 1392.8916. Time: 72.6762 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #25: GFLOPs: 52.0292. Time: 1945.6394 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #26: GFLOPs: 310.1150. Time: 326.4275 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #27: GFLOPs: 132.9551. Time: 761.3852 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #28: GFLOPs: 625.8531. Time: 161.7473 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #29: GFLOPs: 496.8349. Time: 203.7499 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #30: GFLOPs: 126.2105. Time: 802.0736 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #31: GFLOPs: 515.2926. Time: 196.4516 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #32: GFLOPs: 58.0426. Time: 1744.0662 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #33: GFLOPs: 606.2157. Time: 166.9869 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #34: GFLOPs: 517.5554. Time: 195.5928 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #35: GFLOPs: 1125.2063. Time: 89.9658 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #36: GFLOPs: 23.8438. Time: 4245.5466 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #37: GFLOPs: 205.2435. Time: 493.2193 us. Best GFLOPs: 3063.3098
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #38: GFLOPs: 3173.6030. Time: 31.8975 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #39: GFLOPs: 554.8135. Time: 182.4579 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #40: GFLOPs: 802.6568. Time: 126.1188 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #41: GFLOPs: 595.8202. Time: 169.9004 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #42: GFLOPs: 866.4122. Time: 116.8383 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #43: GFLOPs: 468.3871. Time: 216.1248 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #44: GFLOPs: 192.1782. Time: 526.7510 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #45: GFLOPs: 4.9366. Time: 20506.0088 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #46: GFLOPs: 137.7770. Time: 734.7386 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #47: GFLOPs: 555.6310. Time: 182.1894 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #48: GFLOPs: 506.5454. Time: 199.8440 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #49: GFLOPs: 567.2261. Time: 178.4651 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #50: GFLOPs: 146.5754. Time: 690.6350 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #51: GFLOPs: 411.5727. Time: 245.9592 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #52: GFLOPs: 872.3825. Time: 116.0386 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #53: GFLOPs: 185.5337. Time: 545.6156 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #54: GFLOPs: 604.4959. Time: 167.4620 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #55: GFLOPs: 535.8010. Time: 188.9322 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #56: GFLOPs: 132.1287. Time: 766.1474 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #57: GFLOPs: 659.8748. Time: 153.4080 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #58: GFLOPs: 257.4349. Time: 393.2260 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #59: GFLOPs: 162.7692. Time: 621.9242 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #60: GFLOPs: 613.4270. Time: 165.0238 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #61: GFLOPs: 1077.5900. Time: 93.9412 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #62: GFLOPs: 649.6020. Time: 155.8340 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #63: GFLOPs: 956.0111. Time: 105.8880 us. Best GFLOPs: 3173.6030
2024-04-29 06:55:39 [INFO] [task_scheduler.cc:131] [Task #80: fused_nn_conv2d_add_nn_relu_39] Trial #64: GFLOPs: 44.0890. Time: 2296.0408 us. Best GFLOPs: 3173.6030
