2024-04-29 03:05:31 [INFO] [task_scheduler.cc:160] Initializing Task #166: "fused_concatenate_multiply_add_nn_relu_78"
2024-04-29 03:05:31 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p3: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p4: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p5: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p6: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p7: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p8: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p9: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p10: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p11: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p12: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p13: T.Buffer((T.int64(1), T.int64(768), T.int64(1), T.int64(1)), "float32"), p14: T.Buffer((T.int64(1), T.int64(768), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(768), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_concat = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(28), T.int64(28)))
        T_multiply = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(28), T.int64(28)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(768), T.int64(28), T.int64(28)):
            with T.block("T_concat"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p12[v_ax0, v_ax1 - T.int64(720), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(672), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(624), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(576), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(528), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(480), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(432), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(384), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(336), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(288), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(240), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(192), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(720) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(720), v_ax2, v_ax3], T.if_then_else(T.int64(672) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(672), v_ax2, v_ax3], T.if_then_else(T.int64(624) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(624), v_ax2, v_ax3], T.if_then_else(T.int64(576) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(576), v_ax2, v_ax3], T.if_then_else(T.int64(528) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(528), v_ax2, v_ax3], T.if_then_else(T.int64(480) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(480), v_ax2, v_ax3], T.if_then_else(T.int64(432) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(432), v_ax2, v_ax3], T.if_then_else(T.int64(384) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(384), v_ax2, v_ax3], T.if_then_else(T.int64(336) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(336), v_ax2, v_ax3], T.if_then_else(T.int64(288) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(288), v_ax2, v_ax3], T.if_then_else(T.int64(240) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(240), v_ax2, v_ax3], T.if_then_else(T.int64(192) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(192), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3]))))))))))))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(768), T.int64(28), T.int64(28)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_concat[v_ax0, v_ax1, v_ax2, v_ax3], p13[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = T_concat[v_ax0, v_ax1, v_ax2, v_ax3] * p13[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(768), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p14[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p14[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(768), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 03:05:31 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-04-29 03:05:31 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p3: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p4: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p5: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p6: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p7: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p8: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p9: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p10: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p11: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p12: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32"), p13: T.Buffer((T.int64(1), T.int64(768), T.int64(1), T.int64(1)), "float32"), p14: T.Buffer((T.int64(1), T.int64(768), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(768), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                    with T.block("T_concat"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(768), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(784))
                        v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(784) // T.int64(28))
                        v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(602112))
                        T.reads(p12[v_ax0, v_ax1 - T.int64(720), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(672), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(624), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(576), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(528), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(480), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(432), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(384), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(336), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(288), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(240), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(192), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], p13[v_ax0, v_ax1, T.int64(0), T.int64(0)], p14[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T.if_then_else(T.int64(720) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(720), v_ax2, v_ax3], T.if_then_else(T.int64(672) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(672), v_ax2, v_ax3], T.if_then_else(T.int64(624) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(624), v_ax2, v_ax3], T.if_then_else(T.int64(576) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(576), v_ax2, v_ax3], T.if_then_else(T.int64(528) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(528), v_ax2, v_ax3], T.if_then_else(T.int64(480) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(480), v_ax2, v_ax3], T.if_then_else(T.int64(432) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(432), v_ax2, v_ax3], T.if_then_else(T.int64(384) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(384), v_ax2, v_ax3], T.if_then_else(T.int64(336) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(336), v_ax2, v_ax3], T.if_then_else(T.int64(288) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(288), v_ax2, v_ax3], T.if_then_else(T.int64(240) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(240), v_ax2, v_ax3], T.if_then_else(T.int64(192) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(192), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))))))))) * p13[v_ax0, v_ax1, T.int64(0), T.int64(0)] + p14[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="T_concat", func_name="main")
b1 = sch.get_block(name="T_multiply", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
l9, l10, l11 = sch.split(loop=l8, factors=[None, 256, 1024], preserve_unit_iters=True)
sch.reorder(l10, l11, l9)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
2024-04-29 06:37:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:37:56 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 06:38:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa7143d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11b15238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x104a87b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x161aaba8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xc7f9588)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11988818)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x11b155e8)]: 0 failure(s)
2024-04-29 06:38:04 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 06:38:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa7143d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11b15238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x104a87b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x161aaba8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xc7f9588)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11988818)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x11b155e8)]: 0 failure(s)
2024-04-29 06:38:04 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa7143d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11b15238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x104a87b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x161aaba8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xc7f9588)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11988818)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x11b155e8)]: 0 failure(s)
2024-04-29 06:38:04 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa7143d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11b15238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x104a87b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x161aaba8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xc7f9588)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11988818)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x11b155e8)]: 0 failure(s)
2024-04-29 06:38:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa7143d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x11b15238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x104a87b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x161aaba8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xc7f9588)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x11988818)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x11b155e8)]: 0 failure(s)
2024-04-29 06:38:05 [INFO] [evolutionary_search.cc:649] Scores of the best 1 candidates:
[1 : 1]:	0.1183
2024-04-29 06:38:05 [INFO] [evolutionary_search.cc:727] Got 1 candidate(s) with evolutionary search
2024-04-29 06:38:05 [INFO] [evolutionary_search.cc:730] Sending 1 candidates(s) for measurement
2024-04-29 07:02:51 [INFO] [task_scheduler.cc:131] [Task #166: fused_concatenate_multiply_add_nn_relu_78] Trial #1: GFLOPs: 371.7689. Time: 4.8588 us. Best GFLOPs: 371.7689
