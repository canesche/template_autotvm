2024-04-29 03:04:10 [INFO] [task_scheduler.cc:160] Initializing Task #18: "fused_concatenate_multiply_add_nn_relu_9"
2024-04-29 03:04:10 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1056), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p5: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p6: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p7: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p8: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p9: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p10: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p11: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p12: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p13: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p14: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p15: T.Buffer((T.int64(1), T.int64(1728), T.int64(1), T.int64(1)), "float32"), p16: T.Buffer((T.int64(1), T.int64(1728), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(1728), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_concat = T.alloc_buffer((T.int64(1), T.int64(1728), T.int64(7), T.int64(7)))
        T_multiply = T.alloc_buffer((T.int64(1), T.int64(1728), T.int64(7), T.int64(7)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(1728), T.int64(7), T.int64(7)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1728), T.int64(7), T.int64(7)):
            with T.block("T_concat"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p14[v_ax0, v_ax1 - T.int64(1680), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(1584), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(1488), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(1392), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(1296), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(1200), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(1104), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1680) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(1680), v_ax2, v_ax3], T.if_then_else(T.int64(1632) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], T.if_then_else(T.int64(1584) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(1584), v_ax2, v_ax3], T.if_then_else(T.int64(1536) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], T.if_then_else(T.int64(1488) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(1488), v_ax2, v_ax3], T.if_then_else(T.int64(1440) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], T.if_then_else(T.int64(1392) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(1392), v_ax2, v_ax3], T.if_then_else(T.int64(1344) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], T.if_then_else(T.int64(1296) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(1296), v_ax2, v_ax3], T.if_then_else(T.int64(1248) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], T.if_then_else(T.int64(1200) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(1200), v_ax2, v_ax3], T.if_then_else(T.int64(1152) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], T.if_then_else(T.int64(1104) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(1104), v_ax2, v_ax3], T.if_then_else(T.int64(1056) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3]))))))))))))))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1728), T.int64(7), T.int64(7)):
            with T.block("T_multiply"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_concat[v_ax0, v_ax1, v_ax2, v_ax3], p15[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3])
                T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] = T_concat[v_ax0, v_ax1, v_ax2, v_ax3] * p15[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1728), T.int64(7), T.int64(7)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_multiply[v_ax0, v_ax1, v_ax2, v_ax3], p16[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = T_multiply[v_ax0, v_ax1, v_ax2, v_ax3] + p16[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1728), T.int64(7), T.int64(7)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 03:04:10 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-04-29 03:04:10 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1056), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p3: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p4: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p5: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p6: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p7: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p8: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p9: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p10: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p11: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p12: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p13: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p14: T.Buffer((T.int64(1), T.int64(48), T.int64(7), T.int64(7)), "float32"), p15: T.Buffer((T.int64(1), T.int64(1728), T.int64(1), T.int64(1)), "float32"), p16: T.Buffer((T.int64(1), T.int64(1728), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(1728), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(1323), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1728), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                    v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                    v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                    T.reads(p14[v_ax0, v_ax1 - T.int64(1680), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(1584), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(1488), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(1392), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(1296), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(1200), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(1104), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], p15[v_ax0, v_ax1, T.int64(0), T.int64(0)], p16[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                    T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T.if_then_else(T.int64(1680) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(1680), v_ax2, v_ax3], T.if_then_else(T.int64(1632) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(1632), v_ax2, v_ax3], T.if_then_else(T.int64(1584) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(1584), v_ax2, v_ax3], T.if_then_else(T.int64(1536) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(1536), v_ax2, v_ax3], T.if_then_else(T.int64(1488) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(1488), v_ax2, v_ax3], T.if_then_else(T.int64(1440) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(1440), v_ax2, v_ax3], T.if_then_else(T.int64(1392) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(1392), v_ax2, v_ax3], T.if_then_else(T.int64(1344) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(1344), v_ax2, v_ax3], T.if_then_else(T.int64(1296) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(1296), v_ax2, v_ax3], T.if_then_else(T.int64(1248) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(1248), v_ax2, v_ax3], T.if_then_else(T.int64(1200) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(1200), v_ax2, v_ax3], T.if_then_else(T.int64(1152) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(1152), v_ax2, v_ax3], T.if_then_else(T.int64(1104) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(1104), v_ax2, v_ax3], T.if_then_else(T.int64(1056) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(1056), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])))))))))))))) * p15[v_ax0, v_ax1, T.int64(0), T.int64(0)] + p16[v_ax0, v_ax1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="T_concat", func_name="main")
b1 = sch.get_block(name="T_multiply", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.reverse_compute_inline(block=b1)
l4, l5, l6, l7 = sch.get_loops(block=b0)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
2024-04-29 03:28:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 03:28:54 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 03:28:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe660348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x16619708)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x16835908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x41d6078)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33cfcd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xccc7738)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1685ea08)]: 0 failure(s)
2024-04-29 03:28:58 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 03:28:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe660348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x16619708)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x16835908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x41d6078)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33cfcd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xccc7738)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1685ea08)]: 0 failure(s)
2024-04-29 03:29:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe660348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x16619708)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x16835908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x41d6078)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33cfcd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xccc7738)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1685ea08)]: 0 failure(s)
2024-04-29 03:29:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe660348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x16619708)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x16835908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x41d6078)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33cfcd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xccc7738)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1685ea08)]: 0 failure(s)
2024-04-29 03:29:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xe660348)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x16619708)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x16835908)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x41d6078)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x33cfcd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0xccc7738)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x1685ea08)]: 0 failure(s)
2024-04-29 03:29:01 [INFO] [evolutionary_search.cc:649] Scores of the best 6 candidates:
[1 : 6]:	0.9910  0.8235  0.8036  0.7535  0.1745  0.0698
2024-04-29 03:29:01 [INFO] [evolutionary_search.cc:727] Got 6 candidate(s) with evolutionary search
2024-04-29 03:29:01 [INFO] [evolutionary_search.cc:730] Sending 6 candidates(s) for measurement
2024-04-29 06:52:21 [INFO] [task_scheduler.cc:131] [Task #18: fused_concatenate_multiply_add_nn_relu_9] Trial #1: GFLOPs: 77.5698. Time: 3.2747 us. Best GFLOPs: 77.5698
2024-04-29 06:52:21 [INFO] [task_scheduler.cc:131] [Task #18: fused_concatenate_multiply_add_nn_relu_9] Trial #2: GFLOPs: 75.4012. Time: 3.3689 us. Best GFLOPs: 77.5698
2024-04-29 06:52:21 [INFO] [task_scheduler.cc:131] [Task #18: fused_concatenate_multiply_add_nn_relu_9] Trial #3: GFLOPs: 70.5574. Time: 3.6001 us. Best GFLOPs: 77.5698
2024-04-29 06:52:21 [INFO] [task_scheduler.cc:131] [Task #18: fused_concatenate_multiply_add_nn_relu_9] Trial #4: GFLOPs: 74.8924. Time: 3.3917 us. Best GFLOPs: 77.5698
2024-04-29 06:52:21 [INFO] [task_scheduler.cc:131] [Task #18: fused_concatenate_multiply_add_nn_relu_9] Trial #5: GFLOPs: 61.4244. Time: 4.1354 us. Best GFLOPs: 77.5698
2024-04-29 06:52:21 [INFO] [task_scheduler.cc:131] [Task #18: fused_concatenate_multiply_add_nn_relu_9] Trial #6: GFLOPs: 52.6630. Time: 4.8234 us. Best GFLOPs: 77.5698
