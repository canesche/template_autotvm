2024-04-29 03:05:22 [INFO] [task_scheduler.cc:160] Initializing Task #146: "fused_nn_contrib_conv2d_winograd_without_weight_transform_2"
2024-04-29 03:05:22 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(48)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(30), T.int64(30)))
        input_tile = T.alloc_buffer((T.int64(192), T.int64(196), T.int64(4), T.int64(4)))
        B = T.alloc_buffer((T.int64(4), T.int64(4)))
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(48), T.int64(196)))
        A = T.alloc_buffer((T.int64(4), T.int64(2)))
        inverse = T.alloc_buffer((T.int64(48), T.int64(196), T.int64(2), T.int64(2)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(192), T.int64(30), T.int64(30)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(192), T.int64(196), T.int64(4), T.int64(4)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps, v_p % T.int64(14) * T.int64(2) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps, v_p % T.int64(14) * T.int64(2) + v_nu]
        for i, j in T.grid(T.int64(4), T.int64(4)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(192), T.int64(196), T.int64(4), T.int64(4)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(4), T.int64(4), T.int64(48), T.int64(196), T.int64(192)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(4), T.int64(2)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(48), T.int64(196), T.int64(2), T.int64(2), T.int64(4), T.int64(4)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(48), T.int64(28), T.int64(28)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
2024-04-29 03:05:22 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 03:05:22 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(48)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(192), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(48), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(48), T.int64(196), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(48), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(48)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(294), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(28672)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(7168))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(7168) // T.int64(1792))
                                    v2 = T.axis.spatial(T.int64(192), ci_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(1792) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(49152)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(12288))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(12288) // T.int64(3072))
                                    v2 = T.axis.spatial(T.int64(192), ci_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(3072) // T.int64(48))
                                    v3 = T.axis.spatial(T.int64(48), ax0_ax1_ax2_ax3_fused % T.int64(48))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(4), T.int64(8), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(21) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(48), eps_2_nu_2_co_2_p_2_fused % T.int64(21) // T.int64(7) * T.int64(16) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(28) + eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(7) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(192), ci_0 * T.int64(64) + ci_1 * T.int64(32) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(16), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(21) + ax0)
                                v1 = T.axis.spatial(T.int64(4), ax1)
                                v2 = T.axis.spatial(T.int64(48), eps_2_nu_2_co_2_p_2_fused % T.int64(21) // T.int64(7) * T.int64(16) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(28) + eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(7) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(19), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(9408))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                            T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(9408))
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 1, 4, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 3, 8, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[7, 4, 7, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[3, 2, 32])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
2024-04-29 03:05:22 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(48)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            input_tile_local = T.alloc_buffer((T.int64(192), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(48), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(48), T.int64(196), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(48), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(48)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(294), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(28672)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(7168))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(7168) // T.int64(1792))
                                    v2 = T.axis.spatial(T.int64(192), ci_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(1792) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(49152)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(12288))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(12288) // T.int64(3072))
                                    v2 = T.axis.spatial(T.int64(192), ci_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(3072) // T.int64(48))
                                    v3 = T.axis.spatial(T.int64(48), ax0_ax1_ax2_ax3_fused % T.int64(48))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(4), T.int64(8), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(21) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(48), eps_2_nu_2_co_2_p_2_fused % T.int64(21) // T.int64(7) * T.int64(16) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(28) + eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(7) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(192), ci_0_fused * T.int64(64) + ci_1 * T.int64(32) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(16), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(21) + ax0)
                                v1 = T.axis.spatial(T.int64(4), ax1)
                                v2 = T.axis.spatial(T.int64(48), eps_2_nu_2_co_2_p_2_fused % T.int64(21) // T.int64(7) * T.int64(16) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(28) + eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(7) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(19), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(9408))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                            T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(9408))
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 1, 4, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 3, 8, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[7, 4, 7, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[3, 2, 32])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
2024-04-29 03:05:22 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(48)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            input_tile_local = T.alloc_buffer((T.int64(192), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(48), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(48), T.int64(196), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(48), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(48)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(294), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(28672)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(7168))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(7168) // T.int64(1792))
                                    v2 = T.axis.spatial(T.int64(192), ci_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(1792) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(49152)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(12288))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(12288) // T.int64(3072))
                                    v2 = T.axis.spatial(T.int64(192), ci_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(3072) // T.int64(48))
                                    v3 = T.axis.spatial(T.int64(48), ax0_ax1_ax2_ax3_fused % T.int64(48))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(4), T.int64(8), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(21) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(48), eps_2_nu_2_co_2_p_2_fused % T.int64(21) // T.int64(7) * T.int64(16) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(28) + eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(7) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(192), ci_0_fused * T.int64(64) + ci_1 * T.int64(32) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(16), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(21) + ax0)
                                v1 = T.axis.spatial(T.int64(4), ax1)
                                v2 = T.axis.spatial(T.int64(48), eps_2_nu_2_co_2_p_2_fused % T.int64(21) // T.int64(7) * T.int64(16) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(28) + eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(7) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(294), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 1, 4, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 3, 8, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[7, 4, 7, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[3, 2, 32])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
2024-04-29 06:09:42 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:09:42 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 06:09:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 507 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 06:09:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 1012 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 06:09:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 1503 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 06:10:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 2003 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 06:10:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 2495 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 06:10:06 [INFO] [evolutionary_search.cc:723] Sampled 65 candidate(s)
2024-04-29 06:10:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 06:10:28 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 06:10:38 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 06:10:49 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 100 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 06:10:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9993  0.9977  0.9971  0.9971  0.9969  0.9969  0.9965  0.9963  0.9959  0.9951  0.9950  0.9948  0.9947  0.9930  0.9929  0.9922
[17 : 32]:	0.9918  0.9913  0.9900  0.9899  0.9891  0.9891  0.9885  0.9884  0.9872  0.9871  0.9869  0.9863  0.9861  0.9850  0.9842  0.9833
[33 : 48]:	0.9830  0.9824  0.9824  0.9819  0.9817  0.9816  0.9813  0.9807  0.9807  0.9795  0.9785  0.9774  0.9770  0.9768  0.9752  0.9751
[49 : 64]:	0.9747  0.9739  0.9732  0.9728  0.9719  0.9715  0.9713  0.9712  0.9696  0.9690  0.9686  0.9686  0.9679  0.9676  0.9667  0.9667
2024-04-29 06:10:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:10:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #1: GFLOPs: 410.6559. Time: 215.5344 us. Best GFLOPs: 410.6559
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #2: GFLOPs: 1631.2800. Time: 54.2583 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #3: GFLOPs: 1075.4402. Time: 82.3016 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #4: GFLOPs: 660.2272. Time: 134.0606 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #5: GFLOPs: 494.8806. Time: 178.8521 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #6: GFLOPs: 76.0841. Time: 1163.3235 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #7: GFLOPs: 892.5965. Time: 99.1607 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #8: GFLOPs: 423.3061. Time: 209.0933 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #9: GFLOPs: 1215.6362. Time: 72.8100 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #10: GFLOPs: 431.5214. Time: 205.1126 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #11: GFLOPs: 856.9369. Time: 103.2870 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #12: GFLOPs: 254.2738. Time: 348.0911 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #13: GFLOPs: 471.2687. Time: 187.8132 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #14: GFLOPs: 56.1968. Time: 1575.0080 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #15: GFLOPs: 505.3149. Time: 175.1590 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #16: GFLOPs: 368.3462. Time: 240.2915 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #17: GFLOPs: 279.8761. Time: 316.2487 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #18: GFLOPs: 521.6418. Time: 169.6767 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #19: GFLOPs: 635.8242. Time: 139.2059 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #20: GFLOPs: 1104.6903. Time: 80.1224 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #21: GFLOPs: 821.0952. Time: 107.7956 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #22: GFLOPs: 751.4319. Time: 117.7891 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #23: GFLOPs: 815.8020. Time: 108.4950 us. Best GFLOPs: 1631.2800
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #24: GFLOPs: 2407.4470. Time: 36.7653 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #25: GFLOPs: 237.8569. Time: 372.1164 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #26: GFLOPs: 471.5569. Time: 187.6984 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #27: GFLOPs: 1451.6769. Time: 60.9712 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #28: GFLOPs: 595.1555. Time: 148.7182 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #29: GFLOPs: 1865.2213. Time: 47.4531 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #30: GFLOPs: 919.7842. Time: 96.2296 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #31: GFLOPs: 578.8187. Time: 152.9157 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #32: GFLOPs: 1676.7211. Time: 52.7878 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #33: GFLOPs: 174.6925. Time: 506.6643 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #34: GFLOPs: 65.2487. Time: 1356.5094 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #35: GFLOPs: 595.0660. Time: 148.7406 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #36: GFLOPs: 24.5146. Time: 3610.5142 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #37: GFLOPs: 111.1252. Time: 796.4932 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #38: GFLOPs: 18.0546. Time: 4902.3757 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #39: GFLOPs: 1492.4927. Time: 59.3038 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #40: GFLOPs: 77.2879. Time: 1145.2044 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #41: GFLOPs: 1827.2733. Time: 48.4385 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #42: GFLOPs: 863.1621. Time: 102.5421 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #43: GFLOPs: 304.5047. Time: 290.6702 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #44: GFLOPs: 44.3726. Time: 1994.7118 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #45: GFLOPs: 737.5518. Time: 120.0058 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #46: GFLOPs: 669.5023. Time: 132.2034 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #47: GFLOPs: 42.8494. Time: 2065.6170 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #48: GFLOPs: 40.9715. Time: 2160.2915 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #49: GFLOPs: 295.4765. Time: 299.5516 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #50: GFLOPs: 535.5893. Time: 165.2581 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #51: GFLOPs: 1185.9845. Time: 74.6304 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #52: GFLOPs: 584.7940. Time: 151.3532 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #53: GFLOPs: 1009.3933. Time: 87.6868 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #54: GFLOPs: 47.4204. Time: 1866.5055 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #55: GFLOPs: 129.5135. Time: 683.4072 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #56: GFLOPs: 1345.8675. Time: 65.7646 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #57: GFLOPs: 1152.8458. Time: 76.7756 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #58: GFLOPs: 2240.7177. Time: 39.5009 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #59: GFLOPs: 137.7712. Time: 642.4453 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #60: GFLOPs: 91.0290. Time: 972.3327 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #61: GFLOPs: 145.7689. Time: 607.1972 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #62: GFLOPs: 987.5275. Time: 89.6284 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #63: GFLOPs: 1463.8355. Time: 60.4648 us. Best GFLOPs: 2407.4470
2024-04-29 07:01:02 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #64: GFLOPs: 107.7249. Time: 821.6341 us. Best GFLOPs: 2407.4470
2024-04-29 07:07:47 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:07:49 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-29 07:07:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 433 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:07:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 870 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:08:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 1300 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:08:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 1740 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:08:07 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-29 07:08:19 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 137 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:08:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:08:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 132 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:09:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 158 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:09:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.8745  2.2935  2.2662  2.2232  2.1749  2.1706  2.1475  2.1470  2.1469  2.1432  2.0870  2.0860  2.0854  2.0809  2.0793  2.0519
[17 : 32]:	2.0505  1.9179  1.8464  1.7617  1.7369  1.7331  1.7331  1.7140  1.7063  1.7036  1.7026  1.7025  1.6977  1.6962  1.6939  1.6932
[33 : 48]:	1.6895  1.6894  1.6857  1.6797  1.6759  1.6588  1.6576  1.6534  1.6513  1.6504  1.6495  1.6474  1.6453  1.6416  1.6367  1.6337
[49 : 64]:	1.6122  1.6072  1.6040  1.6015  1.5954  1.5780  1.5765  1.5706  1.5555  1.5518  1.5384  1.5384  1.5362  1.5325  1.5239  1.5170
2024-04-29 07:09:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:09:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #65: GFLOPs: 1441.4499. Time: 61.4038 us. Best GFLOPs: 2407.4470
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #66: GFLOPs: 3106.5197. Time: 28.4918 us. Best GFLOPs: 3106.5197
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #67: GFLOPs: 3393.3895. Time: 26.0832 us. Best GFLOPs: 3393.3895
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #68: GFLOPs: 3449.7653. Time: 25.6570 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #69: GFLOPs: 2501.9291. Time: 35.3769 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #70: GFLOPs: 2515.9713. Time: 35.1794 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #71: GFLOPs: 2257.2188. Time: 39.2122 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #72: GFLOPs: 2235.2966. Time: 39.5967 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #73: GFLOPs: 2520.1532. Time: 35.1211 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #74: GFLOPs: 2264.9503. Time: 39.0783 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #75: GFLOPs: 2163.6149. Time: 40.9086 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #76: GFLOPs: 2264.2137. Time: 39.0910 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #77: GFLOPs: 2243.7962. Time: 39.4467 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #78: GFLOPs: 2330.7858. Time: 37.9745 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #79: GFLOPs: 2488.1398. Time: 35.5729 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #80: GFLOPs: 2154.6338. Time: 41.0791 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #81: GFLOPs: 2370.8232. Time: 37.3332 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #82: GFLOPs: 3315.7746. Time: 26.6938 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #83: GFLOPs: 2123.0064. Time: 41.6911 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #84: GFLOPs: 3125.6713. Time: 28.3173 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #85: GFLOPs: 3145.1333. Time: 28.1420 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #86: GFLOPs: 3237.0001. Time: 27.3434 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #87: GFLOPs: 3154.1455. Time: 28.0616 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #88: GFLOPs: 2368.3783. Time: 37.3718 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #89: GFLOPs: 3097.7998. Time: 28.5720 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #90: GFLOPs: 3434.9190. Time: 25.7678 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #91: GFLOPs: 3139.5390. Time: 28.1922 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #92: GFLOPs: 3229.5590. Time: 27.4064 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #93: GFLOPs: 2023.2257. Time: 43.7472 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #94: GFLOPs: 1520.9194. Time: 58.1954 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #95: GFLOPs: 3139.2203. Time: 28.1950 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #96: GFLOPs: 1704.8344. Time: 51.9173 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #97: GFLOPs: 699.4359. Time: 126.5455 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #98: GFLOPs: 3409.8901. Time: 25.9570 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #99: GFLOPs: 3428.6212. Time: 25.8152 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #100: GFLOPs: 3168.0085. Time: 27.9388 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #101: GFLOPs: 3139.9347. Time: 28.1886 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #102: GFLOPs: 2061.9871. Time: 42.9248 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #103: GFLOPs: 2145.0743. Time: 41.2622 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #104: GFLOPs: 1736.4505. Time: 50.9721 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #105: GFLOPs: 3168.6499. Time: 27.9332 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #106: GFLOPs: 2516.4322. Time: 35.1730 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #107: GFLOPs: 2205.4650. Time: 40.1323 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #108: GFLOPs: 2395.0369. Time: 36.9558 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #109: GFLOPs: 3256.3691. Time: 27.1807 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #110: GFLOPs: 3214.7811. Time: 27.5323 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #111: GFLOPs: 3150.0167. Time: 28.0984 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #112: GFLOPs: 3059.6484. Time: 28.9283 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #113: GFLOPs: 1840.5489. Time: 48.0892 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #114: GFLOPs: 1716.8584. Time: 51.5537 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #115: GFLOPs: 1961.3401. Time: 45.1275 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #116: GFLOPs: 959.8145. Time: 92.2162 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #117: GFLOPs: 3123.6722. Time: 28.3354 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #118: GFLOPs: 3351.6592. Time: 26.4080 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #119: GFLOPs: 3152.1679. Time: 28.0792 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #120: GFLOPs: 3153.7585. Time: 28.0651 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #121: GFLOPs: 3328.5548. Time: 26.5913 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #122: GFLOPs: 2422.9407. Time: 36.5302 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #123: GFLOPs: 2600.9355. Time: 34.0302 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #124: GFLOPs: 2598.6399. Time: 34.0603 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #125: GFLOPs: 3153.8559. Time: 28.0642 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #126: GFLOPs: 184.5233. Time: 479.6708 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #127: GFLOPs: 169.8953. Time: 520.9708 us. Best GFLOPs: 3449.7653
2024-04-29 07:10:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #128: GFLOPs: 1338.7514. Time: 66.1142 us. Best GFLOPs: 3449.7653
2024-04-29 07:37:39 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:37:41 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 07:37:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 399 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:37:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 803 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:37:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 1201 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:37:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 1605 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:38:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 2010 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:38:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 2404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:38:04 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-04-29 07:38:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 192 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:38:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 190 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:38:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 140 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:39:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 128 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:39:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.4242  2.1425  1.8939  1.8523  1.8207  1.8185  1.8185  1.8016  1.8007  1.7999  1.7711  1.7120  1.7113  1.7071  1.6898  1.6716
[17 : 32]:	1.6685  1.6676  1.6610  1.6550  1.6543  1.6492  1.6439  1.6327  1.6315  1.6243  1.6057  1.6016  1.6002  1.5964  1.5926  1.5924
[33 : 48]:	1.5868  1.5846  1.5822  1.5629  1.5589  1.5455  1.5440  1.5394  1.5374  1.5360  1.5346  1.5346  1.5270  1.5248  1.5232  1.5222
[49 : 64]:	1.5144  1.5089  1.5059  1.5025  1.4995  1.4995  1.4922  1.4742  1.4704  1.4672  1.4670  1.4670  1.4670  1.4639  1.4612  1.4603
2024-04-29 07:39:05 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 07:39:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #129: GFLOPs: 1556.3776. Time: 56.8695 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #130: GFLOPs: 2779.6509. Time: 31.8423 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #131: GFLOPs: 1591.0909. Time: 55.6288 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #132: GFLOPs: 1148.5895. Time: 77.0601 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #133: GFLOPs: 1377.8698. Time: 64.2372 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #134: GFLOPs: 1148.3481. Time: 77.0763 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #135: GFLOPs: 1662.0207. Time: 53.2547 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #136: GFLOPs: 3057.5498. Time: 28.9482 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #137: GFLOPs: 1319.8567. Time: 67.0607 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #138: GFLOPs: 2187.8431. Time: 40.4556 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #139: GFLOPs: 993.5879. Time: 89.0817 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #140: GFLOPs: 3064.2360. Time: 28.8850 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #141: GFLOPs: 3039.5010. Time: 29.1201 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #142: GFLOPs: 896.1521. Time: 98.7672 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #143: GFLOPs: 3349.2920. Time: 26.4266 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #144: GFLOPs: 2198.5588. Time: 40.2584 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #145: GFLOPs: 2045.1375. Time: 43.2785 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #146: GFLOPs: 3215.1181. Time: 27.5295 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #147: GFLOPs: 1143.9619. Time: 77.3719 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #148: GFLOPs: 1611.4781. Time: 54.9250 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #149: GFLOPs: 1144.5469. Time: 77.3323 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #150: GFLOPs: 3259.8820. Time: 27.1514 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #151: GFLOPs: 2135.1035. Time: 41.4549 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #152: GFLOPs: 1663.0565. Time: 53.2216 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #153: GFLOPs: 1178.4171. Time: 75.1096 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #154: GFLOPs: 2478.5634. Time: 35.7104 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #155: GFLOPs: 2519.3435. Time: 35.1324 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #156: GFLOPs: 3218.7496. Time: 27.4984 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #157: GFLOPs: 2246.4010. Time: 39.4010 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #158: GFLOPs: 2776.7684. Time: 31.8753 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #159: GFLOPs: 2503.1796. Time: 35.3592 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #160: GFLOPs: 2377.4146. Time: 37.2297 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #161: GFLOPs: 1762.0262. Time: 50.2322 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #162: GFLOPs: 3126.5033. Time: 28.3097 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #163: GFLOPs: 1759.7969. Time: 50.2958 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #164: GFLOPs: 2526.1786. Time: 35.0373 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #165: GFLOPs: 1182.4490. Time: 74.8535 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #166: GFLOPs: 1795.9090. Time: 49.2845 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #167: GFLOPs: 731.4166. Time: 121.0124 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #168: GFLOPs: 2400.8482. Time: 36.8663 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #169: GFLOPs: 2494.0318. Time: 35.4889 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #170: GFLOPs: 1727.3940. Time: 51.2393 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #171: GFLOPs: 1080.3235. Time: 81.9296 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #172: GFLOPs: 3152.1879. Time: 28.0791 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #173: GFLOPs: 2145.8975. Time: 41.2464 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #174: GFLOPs: 2140.0862. Time: 41.3584 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #175: GFLOPs: 1240.6371. Time: 71.3427 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #176: GFLOPs: 1143.5673. Time: 77.3986 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #177: GFLOPs: 3210.5424. Time: 27.5687 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #178: GFLOPs: 2420.7296. Time: 36.5635 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #179: GFLOPs: 1906.8060. Time: 46.4182 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #180: GFLOPs: 1899.2136. Time: 46.6037 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #181: GFLOPs: 1068.5235. Time: 82.8344 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #182: GFLOPs: 1084.4244. Time: 81.6198 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #183: GFLOPs: 1120.2490. Time: 79.0096 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #184: GFLOPs: 1956.5663. Time: 45.2377 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #185: GFLOPs: 1807.7184. Time: 48.9625 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #186: GFLOPs: 1978.2153. Time: 44.7426 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #187: GFLOPs: 3172.0584. Time: 27.9032 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #188: GFLOPs: 3171.7694. Time: 27.9057 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #189: GFLOPs: 1788.3968. Time: 49.4915 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #190: GFLOPs: 999.4228. Time: 88.5616 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #191: GFLOPs: 229.2997. Time: 386.0035 us. Best GFLOPs: 3449.7653
2024-04-29 07:40:43 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #192: GFLOPs: 2462.7306. Time: 35.9400 us. Best GFLOPs: 3449.7653
2024-04-29 07:59:01 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 07:59:05 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 07:59:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 399 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:59:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 802 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:59:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 1201 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:59:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 1600 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:59:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 2007 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:59:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 2406 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:59:28 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-29 07:59:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 200 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 07:59:57 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 200 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 08:00:12 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 134 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 08:00:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 154 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 08:00:30 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.8311  1.8033  1.8018  1.8015  1.7905  1.7904  1.7900  1.7882  1.7834  1.7773  1.7630  1.7590  1.7572  1.7408  1.7116  1.7021
[17 : 32]:	1.6657  1.6576  1.6435  1.6409  1.6380  1.6172  1.6157  1.6110  1.6056  1.5953  1.5762  1.5582  1.5445  1.5182  1.5159  1.5117
[33 : 48]:	1.5092  1.4992  1.4970  1.4941  1.4800  1.4753  1.4690  1.4679  1.4663  1.4428  1.4400  1.4383  1.4204  1.4188  1.4178  1.4161
[49 : 64]:	1.4041  1.3899  1.3849  1.3769  1.3761  1.3752  1.3743  1.3741  1.3721  1.3698  1.3697  1.3636  1.3598  1.3563  1.3543  1.3537
2024-04-29 08:00:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:00:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:121] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #193: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(48)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(192), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(48), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(48), T.int64(196), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(48), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(48)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(1176), thread="blockIdx.x"):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(98), thread="blockIdx.x"):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(24) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(49) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(24) // T.int64(12) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(48), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(12) * T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(49) * T.int64(4) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(8)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1) // T.int64(192))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(49) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1) % T.int64(192) // T.int64(96))
                                    v2 = T.axis.spatial(T.int64(192), ci_0 * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1) % T.int64(96) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(49) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1) % T.int64(4))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(24)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2304))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(49) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2304) // T.int64(1152))
                                        v2 = T.axis.spatial(T.int64(192), ci_0 * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1152) // T.int64(48))
                                        v3 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(48))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(24) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(49) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(24) // T.int64(12) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(48), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(12) * T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(49) * T.int64(4) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(192), ci_0 * T.int64(24) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(24) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(49) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(24) // T.int64(12) + ax1)
                            v2 = T.axis.spatial(T.int64(48), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(12) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(49) * T.int64(4) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(19), thread="blockIdx.x"):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(9408))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(9408))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                        T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(9408))
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 12, 2, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[49, 2, 1, 1, 2])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[8, 24, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l128, l129, l130, l131, l132 = sch.get_loops(block=b95)
l133, l134 = sch.split(loop=l132, factors=[None, 96], preserve_unit_iters=True)
sch.bind(loop=l134, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l135, l136, l137, l138, l139 = sch.get_loops(block=b106)
l140, l141, l142 = sch.split(loop=l139, factors=[None, 96, 4], preserve_unit_iters=True)
sch.vectorize(loop=l142)
sch.bind(loop=l141, thread_axis="threadIdx.x")
b143 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b143, ann_key="meta_schedule.unroll_explicit")
b144, b145, b146, b147, b148, b149, b150, b151, b152 = sch.get_child_blocks(b143)
l153, l154, l155, l156, l157, l158 = sch.get_loops(block=b144)
l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b145)
l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b146)
l171, l172, l173, l174, l175, l176 = sch.get_loops(block=b147)
l177, l178, l179, l180, l181, l182, l183 = sch.get_loops(block=b148)
l184, l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197 = sch.get_loops(block=b149)
l198, l199, l200, l201, l202, l203, l204 = sch.get_loops(block=b150)
l205, l206, l207, l208, l209, l210, l211, l212 = sch.get_loops(block=b151)
l213, l214, l215, l216 = sch.get_loops(block=b152)
b217 = sch.get_block(name="data_pack", func_name="main")
l218, l219, l220, l221, l222, l223 = sch.get_loops(block=b217)
b224 = sch.decompose_reduction(block=b217, loop=l222)
b225 = sch.get_block(name="bgemm", func_name="main")
l226, l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239 = sch.get_loops(block=b225)
b240 = sch.decompose_reduction(block=b225, loop=l229)
b241 = sch.get_block(name="inverse", func_name="main")
l242, l243, l244, l245, l246, l247, l248, l249 = sch.get_loops(block=b241)
b250 = sch.decompose_reduction(block=b241, loop=l248)
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:121] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #194: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(48)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(192), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(48), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(48), T.int64(196), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(48), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(48)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(294), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(96), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(48) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(28) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(48) // T.int64(12) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(48), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(4) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(7) + p_3_init * T.int64(7) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(14)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(48) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1176))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(48) // T.int64(12))
                                        v2 = T.axis.spatial(T.int64(192), ci_0_fused * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1176) // T.int64(49))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(49))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(48) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(48) // T.int64(12))
                                        v2 = T.axis.spatial(T.int64(192), ci_0_fused * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(48), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(4) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(768))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(48) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(28) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(48) // T.int64(12) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(48), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(4) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(7) + p_3 * T.int64(7) + p_4)
                                v_ci = T.axis.reduce(T.int64(192), ci_0_fused * T.int64(24) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(48) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(28) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(48) // T.int64(12) + ax1)
                            v2 = T.axis.spatial(T.int64(48), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(4) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(147), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 1, 4, 1, 4])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 7, 1, 7])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[8, 24, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l129, l130, l131, l132, l133 = sch.get_loops(block=b95)
l134, l135, l136 = sch.split(loop=l133, factors=[None, 56, 3], preserve_unit_iters=True)
sch.vectorize(loop=l136)
sch.bind(loop=l135, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b106)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b150)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b152)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b154)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:121] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #195: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(48)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(192), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(48), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(48), T.int64(196), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(48), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(48)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(588), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + eps_3_init * T.int64(2) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(14) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(21) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(48), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(21) // T.int64(7) * T.int64(8) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(4) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(8)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(64)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1344))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1344) // T.int64(672))
                                    v2 = T.axis.spatial(T.int64(192), ci_0 * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) % T.int64(672) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(126) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1152))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(126) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1152) // T.int64(576))
                                        v2 = T.axis.spatial(T.int64(192), ci_0 * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(126) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(576) // T.int64(24))
                                        v3 = T.axis.spatial(T.int64(48), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(126) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(24))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2304))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(14) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(21) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(48), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(21) // T.int64(7) * T.int64(8) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(4) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(192), ci_0 * T.int64(24) + ci_1 * T.int64(4) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(8), T.int64(4)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(28) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(28) // T.int64(14) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(21) + ax1)
                            v2 = T.axis.spatial(T.int64(48), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(21) // T.int64(7) * T.int64(8) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(4) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(147), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 3, 8, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[7, 1, 7, 2, 2])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[8, 6, 4])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l128, l129, l130, l131, l132 = sch.get_loops(block=b95)
l133, l134 = sch.split(loop=l132, factors=[None, 42], preserve_unit_iters=True)
sch.bind(loop=l134, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l135, l136, l137, l138, l139 = sch.get_loops(block=b106)
l140, l141, l142 = sch.split(loop=l139, factors=[None, 42, 3], preserve_unit_iters=True)
sch.vectorize(loop=l142)
sch.bind(loop=l141, thread_axis="threadIdx.x")
b143 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b143, ann_key="meta_schedule.unroll_explicit")
b144, b145, b146, b147, b148, b149, b150, b151, b152 = sch.get_child_blocks(b143)
l153, l154, l155, l156, l157, l158 = sch.get_loops(block=b144)
l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b145)
sch.annotate(block_or_loop=l159, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l159, ann_key="pragma_unroll_explicit", ann_val=1)
l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b146)
l171, l172, l173, l174, l175, l176 = sch.get_loops(block=b147)
l177, l178, l179, l180, l181, l182, l183 = sch.get_loops(block=b148)
l184, l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l184, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l184, ann_key="pragma_unroll_explicit", ann_val=1)
l198, l199, l200, l201, l202, l203, l204 = sch.get_loops(block=b150)
l205, l206, l207, l208, l209, l210, l211, l212 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l205, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l205, ann_key="pragma_unroll_explicit", ann_val=1)
l213, l214, l215, l216 = sch.get_loops(block=b152)
b217 = sch.get_block(name="data_pack", func_name="main")
l218, l219, l220, l221, l222, l223 = sch.get_loops(block=b217)
b224 = sch.decompose_reduction(block=b217, loop=l222)
b225 = sch.get_block(name="bgemm", func_name="main")
l226, l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239 = sch.get_loops(block=b225)
b240 = sch.decompose_reduction(block=b225, loop=l229)
b241 = sch.get_block(name="inverse", func_name="main")
l242, l243, l244, l245, l246, l247, l248, l249 = sch.get_loops(block=b241)
b250 = sch.decompose_reduction(block=b241, loop=l248)
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:121] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #196: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(48)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(192), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(48), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(48), T.int64(196), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(48), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(48)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(294), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(96), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(48) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(28) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(48) // T.int64(12) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(48), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(4) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(7) + p_3_init * T.int64(7) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(14)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(48) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1176))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(48) // T.int64(12))
                                        v2 = T.axis.spatial(T.int64(192), ci_0_fused * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1176) // T.int64(49))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(49))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(48) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(48) // T.int64(12))
                                        v2 = T.axis.spatial(T.int64(192), ci_0_fused * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(48), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(4) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(768))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(48) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(28) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(48) // T.int64(12) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(48), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(4) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(7) + p_3 * T.int64(7) + p_4)
                                v_ci = T.axis.reduce(T.int64(192), ci_0_fused * T.int64(24) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(48) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(28) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(48) // T.int64(12) + ax1)
                            v2 = T.axis.spatial(T.int64(48), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(4) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(147), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 1, 4, 1, 4])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 7, 1, 7])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[8, 24, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l129, l130, l131, l132, l133 = sch.get_loops(block=b95)
l134, l135, l136 = sch.split(loop=l133, factors=[None, 56, 3], preserve_unit_iters=True)
sch.vectorize(loop=l136)
sch.bind(loop=l135, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b106)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b150)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b152)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b154)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:121] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #197: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(48)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(192), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(48), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(48), T.int64(196), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(48), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(48)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(294), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(96), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(48) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(28) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(48) // T.int64(12) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(48), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(4) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(7) + p_3_init * T.int64(7) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(14)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(48) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1176))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(48) // T.int64(12))
                                        v2 = T.axis.spatial(T.int64(192), ci_0_fused * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1176) // T.int64(49))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(49))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(48) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(48) // T.int64(12))
                                        v2 = T.axis.spatial(T.int64(192), ci_0_fused * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(48), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(4) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(768))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(48) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(28) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(48) // T.int64(12) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(48), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(4) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(7) + p_3 * T.int64(7) + p_4)
                                v_ci = T.axis.reduce(T.int64(192), ci_0_fused * T.int64(24) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(48) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(28) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(48) // T.int64(12) + ax1)
                            v2 = T.axis.spatial(T.int64(48), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(4) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(147), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 1, 4, 1, 4])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 7, 1, 7])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[8, 24, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l129, l130, l131, l132, l133 = sch.get_loops(block=b95)
l134, l135, l136 = sch.split(loop=l133, factors=[None, 56, 3], preserve_unit_iters=True)
sch.vectorize(loop=l136)
sch.bind(loop=l135, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b106)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 56, 3], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b150)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b152)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b154)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:121] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #198: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(48)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(48), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(192), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(48), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(48), T.int64(196), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(48), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(48)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(294), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(192), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(96), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(48) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(28) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(48) // T.int64(12) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(48), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(4) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(7) + p_3_init * T.int64(7) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(21)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(48) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1176))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(48) // T.int64(12))
                                        v2 = T.axis.spatial(T.int64(192), ci_0_fused * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1176) // T.int64(49))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(49))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(14)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(48) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(384))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(48) // T.int64(12))
                                    v2 = T.axis.spatial(T.int64(192), ci_0_fused * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(384) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(48), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(4) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(16))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(768))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(48) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(28) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(48) // T.int64(12) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(48), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(4) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(7) + p_3 * T.int64(7) + p_4)
                                v_ci = T.axis.reduce(T.int64(192), ci_0_fused * T.int64(24) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(48) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(28) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(48) // T.int64(12) + ax1)
                            v2 = T.axis.spatial(T.int64(48), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(4) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(147), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(48), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 1, 4, 1, 4])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 7, 1, 7])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[8, 24, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l129, l130, l131, l132, l133 = sch.get_loops(block=b95)
l134, l135, l136 = sch.split(loop=l133, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l136)
sch.bind(loop=l135, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b106)
l142, l143 = sch.split(loop=l141, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
sch.annotate(block_or_loop=l160, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l160, ann_key="pragma_unroll_explicit", ann_val=1)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b148)
l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b149)
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198 = sch.get_loops(block=b150)
sch.annotate(block_or_loop=l185, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l185, ann_key="pragma_unroll_explicit", ann_val=1)
l199, l200, l201, l202, l203, l204, l205 = sch.get_loops(block=b151)
l206, l207, l208, l209, l210, l211, l212, l213 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l206, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l206, ann_key="pragma_unroll_explicit", ann_val=1)
l214, l215, l216, l217 = sch.get_loops(block=b153)
b218 = sch.get_block(name="data_pack", func_name="main")
l219, l220, l221, l222, l223, l224 = sch.get_loops(block=b218)
b225 = sch.decompose_reduction(block=b218, loop=l223)
b226 = sch.get_block(name="bgemm", func_name="main")
l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240 = sch.get_loops(block=b226)
b241 = sch.decompose_reduction(block=b226, loop=l230)
b242 = sch.get_block(name="inverse", func_name="main")
l243, l244, l245, l246, l247, l248, l249, l250 = sch.get_loops(block=b242)
b251 = sch.decompose_reduction(block=b242, loop=l249)
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #199: GFLOPs: 3106.7176. Time: 28.4900 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #200: GFLOPs: 3187.2088. Time: 27.7705 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #201: GFLOPs: 2070.8394. Time: 42.7413 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #202: GFLOPs: 3076.6045. Time: 28.7689 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #203: GFLOPs: 3221.1332. Time: 27.4781 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #204: GFLOPs: 3040.9186. Time: 29.1065 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #205: GFLOPs: 2622.3225. Time: 33.7527 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #206: GFLOPs: 3078.2491. Time: 28.7535 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #207: GFLOPs: 1877.4317. Time: 47.1444 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #208: GFLOPs: 691.1317. Time: 128.0660 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #209: GFLOPs: 1284.7500. Time: 68.8931 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #210: GFLOPs: 1672.2511. Time: 52.9289 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #211: GFLOPs: 1741.6323. Time: 50.8204 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #212: GFLOPs: 3103.8534. Time: 28.5163 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #213: GFLOPs: 1069.8536. Time: 82.7314 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #214: GFLOPs: 1406.7437. Time: 62.9187 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #215: GFLOPs: 1370.3938. Time: 64.5876 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #216: GFLOPs: 1373.0214. Time: 64.4640 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #217: GFLOPs: 1483.0638. Time: 59.6808 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #218: GFLOPs: 1160.5122. Time: 76.2685 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #219: GFLOPs: 2924.5125. Time: 30.2650 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #220: GFLOPs: 998.8378. Time: 88.6134 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #221: GFLOPs: 344.9752. Time: 256.5705 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #222: GFLOPs: 1045.6221. Time: 84.6486 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #223: GFLOPs: 1387.6773. Time: 63.7832 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #224: GFLOPs: 437.3397. Time: 202.3838 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #225: GFLOPs: 1505.5855. Time: 58.7881 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #226: GFLOPs: 1017.5772. Time: 86.9816 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #227: GFLOPs: 1798.6567. Time: 49.2092 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #228: GFLOPs: 1055.7524. Time: 83.8364 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #229: GFLOPs: 1018.8378. Time: 86.8739 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #230: GFLOPs: 1049.1261. Time: 84.3659 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #231: GFLOPs: 1038.1084. Time: 85.2613 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #232: GFLOPs: 1523.1484. Time: 58.1102 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #233: GFLOPs: 352.7729. Time: 250.8993 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #234: GFLOPs: 1062.2679. Time: 83.3222 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #235: GFLOPs: 1013.6509. Time: 87.3185 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #236: GFLOPs: 1086.1568. Time: 81.4896 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #237: GFLOPs: 2322.8486. Time: 38.1043 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #238: GFLOPs: 2301.3509. Time: 38.4602 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #239: GFLOPs: 2351.4154. Time: 37.6414 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #240: GFLOPs: 2351.0775. Time: 37.6468 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #241: GFLOPs: 1036.9144. Time: 85.3595 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #242: GFLOPs: 3419.6820. Time: 25.8827 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #243: GFLOPs: 2950.3600. Time: 29.9999 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #244: GFLOPs: 3101.0074. Time: 28.5425 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #245: GFLOPs: 3308.6917. Time: 26.7509 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #246: GFLOPs: 3284.6387. Time: 26.9468 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #247: GFLOPs: 228.3923. Time: 387.5370 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #248: GFLOPs: 3206.0978. Time: 27.6069 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #249: GFLOPs: 1813.2363. Time: 48.8135 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #250: GFLOPs: 2094.2894. Time: 42.2628 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #251: GFLOPs: 1504.5319. Time: 58.8292 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #252: GFLOPs: 3092.3107. Time: 28.6228 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #253: GFLOPs: 3214.1706. Time: 27.5376 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #254: GFLOPs: 391.7090. Time: 225.9598 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #255: GFLOPs: 1079.9511. Time: 81.9578 us. Best GFLOPs: 3449.7653
2024-04-29 08:03:04 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #256: GFLOPs: 509.9601. Time: 173.5635 us. Best GFLOPs: 3449.7653
2024-04-29 08:14:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:14:50 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 08:14:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 400 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 08:14:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 797 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 08:15:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 1196 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 08:15:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 1592 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 08:15:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 1987 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 08:15:10 [INFO] [evolutionary_search.cc:723] Sampled 63 candidate(s)
2024-04-29 08:15:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 219 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 08:15:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 170 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 08:15:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 211 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 08:16:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 182 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 08:16:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	3.2375  2.0330  2.0246  1.9871  1.8139  1.8129  1.8124  1.8005  1.8005  1.7400  1.6605  1.6303  1.6239  1.6235  1.6168  1.6062
[17 : 32]:	1.5985  1.5878  1.5861  1.5809  1.5754  1.5699  1.5688  1.5630  1.5621  1.5392  1.5392  1.5097  1.5022  1.4860  1.4823  1.4699
[33 : 48]:	1.4697  1.4468  1.4296  1.4287  1.4222  1.4145  1.4037  1.4015  1.3784  1.3760  1.3733  1.3634  1.3621  1.3606  1.3591  1.3563
[49 : 64]:	1.3555  1.3537  1.3493  1.3467  1.3460  1.3417  1.3363  1.3349  1.3299  1.3288  1.3253  1.3212  1.3146  1.3087  1.3086  1.3081
2024-04-29 08:16:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:16:13 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #257: GFLOPs: 2055.9048. Time: 43.0518 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #258: GFLOPs: 2098.7443. Time: 42.1731 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #259: GFLOPs: 2138.8848. Time: 41.3816 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #260: GFLOPs: 1137.9418. Time: 77.7812 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #261: GFLOPs: 998.7263. Time: 88.6233 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #262: GFLOPs: 995.6798. Time: 88.8945 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #263: GFLOPs: 1888.2342. Time: 46.8747 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #264: GFLOPs: 2010.6841. Time: 44.0201 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #265: GFLOPs: 1857.8473. Time: 47.6414 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #266: GFLOPs: 1197.5396. Time: 73.9103 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #267: GFLOPs: 1487.3725. Time: 59.5079 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #268: GFLOPs: 1839.5499. Time: 48.1153 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #269: GFLOPs: 1663.4364. Time: 53.2094 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #270: GFLOPs: 1634.1043. Time: 54.1645 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #271: GFLOPs: 1798.8145. Time: 49.2049 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #272: GFLOPs: 1641.9376. Time: 53.9061 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #273: GFLOPs: 877.0446. Time: 100.9190 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #274: GFLOPs: 1308.8706. Time: 67.6235 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #275: GFLOPs: 1368.8725. Time: 64.6594 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #276: GFLOPs: 689.0029. Time: 128.4617 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #277: GFLOPs: 1194.5264. Time: 74.0967 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #278: GFLOPs: 1247.2524. Time: 70.9644 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #279: GFLOPs: 1194.5029. Time: 74.0982 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #280: GFLOPs: 2011.3115. Time: 44.0063 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #281: GFLOPs: 1192.9438. Time: 74.1950 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #282: GFLOPs: 709.6140. Time: 124.7304 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #283: GFLOPs: 687.5825. Time: 128.7270 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #284: GFLOPs: 299.2097. Time: 295.8142 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #285: GFLOPs: 1176.5366. Time: 75.2297 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #286: GFLOPs: 1177.2007. Time: 75.1872 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #287: GFLOPs: 1993.6805. Time: 44.3955 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #288: GFLOPs: 1876.1485. Time: 47.1767 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #289: GFLOPs: 2316.1950. Time: 38.2137 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #290: GFLOPs: 1901.0660. Time: 46.5583 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #291: GFLOPs: 2645.1593. Time: 33.4613 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #292: GFLOPs: 1661.4832. Time: 53.2720 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #293: GFLOPs: 1700.4401. Time: 52.0515 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #294: GFLOPs: 1789.2367. Time: 49.4683 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #295: GFLOPs: 1635.3097. Time: 54.1246 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #296: GFLOPs: 1066.1462. Time: 83.0191 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #297: GFLOPs: 2830.9322. Time: 31.2655 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #298: GFLOPs: 1839.1377. Time: 48.1261 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #299: GFLOPs: 1313.5409. Time: 67.3831 us. Best GFLOPs: 3449.7653
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #300: GFLOPs: 3571.7407. Time: 24.7808 us. Best GFLOPs: 3571.7407
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #301: GFLOPs: 1095.0585. Time: 80.8272 us. Best GFLOPs: 3571.7407
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #302: GFLOPs: 2303.3453. Time: 38.4269 us. Best GFLOPs: 3571.7407
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #303: GFLOPs: 3220.1739. Time: 27.4862 us. Best GFLOPs: 3571.7407
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #304: GFLOPs: 1317.6202. Time: 67.1745 us. Best GFLOPs: 3571.7407
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #305: GFLOPs: 1251.6496. Time: 70.7151 us. Best GFLOPs: 3571.7407
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #306: GFLOPs: 1955.0067. Time: 45.2737 us. Best GFLOPs: 3571.7407
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #307: GFLOPs: 1975.2778. Time: 44.8091 us. Best GFLOPs: 3571.7407
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #308: GFLOPs: 1270.2405. Time: 69.6801 us. Best GFLOPs: 3571.7407
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #309: GFLOPs: 589.2603. Time: 150.2061 us. Best GFLOPs: 3571.7407
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #310: GFLOPs: 2351.7411. Time: 37.6361 us. Best GFLOPs: 3571.7407
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #311: GFLOPs: 966.2367. Time: 91.6033 us. Best GFLOPs: 3571.7407
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #312: GFLOPs: 1352.3803. Time: 65.4479 us. Best GFLOPs: 3571.7407
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #313: GFLOPs: 1900.2782. Time: 46.5776 us. Best GFLOPs: 3571.7407
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #314: GFLOPs: 2206.3715. Time: 40.1158 us. Best GFLOPs: 3571.7407
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #315: GFLOPs: 2262.7195. Time: 39.1169 us. Best GFLOPs: 3571.7407
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #316: GFLOPs: 1664.4590. Time: 53.1767 us. Best GFLOPs: 3571.7407
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #317: GFLOPs: 1821.9835. Time: 48.5792 us. Best GFLOPs: 3571.7407
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #318: GFLOPs: 190.0042. Time: 465.8342 us. Best GFLOPs: 3571.7407
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #319: GFLOPs: 1208.0285. Time: 73.2685 us. Best GFLOPs: 3571.7407
2024-04-29 08:18:18 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #320: GFLOPs: 1073.7856. Time: 82.4284 us. Best GFLOPs: 3571.7407
2024-04-29 09:11:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 09:11:23 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-29 09:11:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 396 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 09:11:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 800 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 09:11:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 1195 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 09:11:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 1592 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 09:11:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 1992 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 09:11:42 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-04-29 09:11:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 236 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 09:12:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 199 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 09:12:25 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 177 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 09:12:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x13579c68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15419448)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x10f30d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x93f04b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x13e58218)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x113215a8)]: 175 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x15419378)]: 0 failure(s)
2024-04-29 09:12:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.1371  2.1297  2.1266  2.1212  2.0993  2.0878  2.0804  2.0664  2.0581  2.0573  2.0492  2.0129  2.0111  1.9870  1.9717  1.9642
[17 : 32]:	1.9501  1.9003  1.8935  1.8774  1.8544  1.8494  1.8425  1.8294  1.8223  1.8172  1.8170  1.8159  1.7851  1.7815  1.7752  1.7751
[33 : 48]:	1.7719  1.7612  1.7565  1.7542  1.7506  1.7488  1.7466  1.7275  1.7131  1.7123  1.7013  1.6847  1.6831  1.6815  1.6798  1.6775
[49 : 64]:	1.6758  1.6719  1.6682  1.6641  1.6514  1.6511  1.5943  1.5928  1.5889  1.5813  1.5652  1.5424  1.5350  1.5319  1.5194  1.5159
2024-04-29 09:12:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 09:12:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #321: GFLOPs: 716.1063. Time: 123.5996 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #322: GFLOPs: 699.9753. Time: 126.4480 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #323: GFLOPs: 2133.6861. Time: 41.4824 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #324: GFLOPs: 1815.0576. Time: 48.7645 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #325: GFLOPs: 2058.5355. Time: 42.9968 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #326: GFLOPs: 3184.9026. Time: 27.7906 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #327: GFLOPs: 695.1289. Time: 127.3296 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #328: GFLOPs: 927.5402. Time: 95.4249 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #329: GFLOPs: 2064.9406. Time: 42.8634 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #330: GFLOPs: 2012.1148. Time: 43.9888 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #331: GFLOPs: 3216.6642. Time: 27.5162 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #332: GFLOPs: 700.7854. Time: 126.3018 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #333: GFLOPs: 2024.4472. Time: 43.7208 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #334: GFLOPs: 2310.0922. Time: 38.3147 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #335: GFLOPs: 819.2768. Time: 108.0349 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #336: GFLOPs: 3269.6049. Time: 27.0707 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #337: GFLOPs: 863.6578. Time: 102.4833 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #338: GFLOPs: 906.5506. Time: 97.6343 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #339: GFLOPs: 3210.8217. Time: 27.5663 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #340: GFLOPs: 2409.6813. Time: 36.7312 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #341: GFLOPs: 2409.2674. Time: 36.7375 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #342: GFLOPs: 2409.6041. Time: 36.7324 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #343: GFLOPs: 2031.3602. Time: 43.5720 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #344: GFLOPs: 2031.2571. Time: 43.5742 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #345: GFLOPs: 2335.0181. Time: 37.9057 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #346: GFLOPs: 2337.5519. Time: 37.8646 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #347: GFLOPs: 1367.2353. Time: 64.7368 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #348: GFLOPs: 2089.2505. Time: 42.3647 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #349: GFLOPs: 1940.6144. Time: 45.6095 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #350: GFLOPs: 2160.7635. Time: 40.9626 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #351: GFLOPs: 3499.9605. Time: 25.2890 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #352: GFLOPs: 2419.2325. Time: 36.5862 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #353: GFLOPs: 1404.0501. Time: 63.0394 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #354: GFLOPs: 2226.3590. Time: 39.7557 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #355: GFLOPs: 906.5008. Time: 97.6397 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #356: GFLOPs: 1365.9761. Time: 64.7965 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #357: GFLOPs: 1961.6810. Time: 45.1197 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #358: GFLOPs: 1954.8129. Time: 45.2782 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #359: GFLOPs: 888.4990. Time: 99.6180 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #360: GFLOPs: 1468.7064. Time: 60.2642 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #361: GFLOPs: 1430.6992. Time: 61.8652 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #362: GFLOPs: 1638.7408. Time: 54.0113 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #363: GFLOPs: 1394.2128. Time: 63.4842 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #364: GFLOPs: 873.7774. Time: 101.2964 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #365: GFLOPs: 1962.4223. Time: 45.1027 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #366: GFLOPs: 1464.8102. Time: 60.4245 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #367: GFLOPs: 1491.7230. Time: 59.3344 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #368: GFLOPs: 1510.8547. Time: 58.5830 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #369: GFLOPs: 1787.2140. Time: 49.5243 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #370: GFLOPs: 1836.8110. Time: 48.1870 us. Best GFLOPs: 3571.7407
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #371: GFLOPs: 3771.1037. Time: 23.4707 us. Best GFLOPs: 3771.1037
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #372: GFLOPs: 1781.4848. Time: 49.6835 us. Best GFLOPs: 3771.1037
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #373: GFLOPs: 1775.7841. Time: 49.8430 us. Best GFLOPs: 3771.1037
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #374: GFLOPs: 1929.3670. Time: 45.8754 us. Best GFLOPs: 3771.1037
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #375: GFLOPs: 904.7914. Time: 97.8242 us. Best GFLOPs: 3771.1037
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #376: GFLOPs: 752.9181. Time: 117.5566 us. Best GFLOPs: 3771.1037
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #377: GFLOPs: 3108.8815. Time: 28.4702 us. Best GFLOPs: 3771.1037
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #378: GFLOPs: 876.4302. Time: 100.9897 us. Best GFLOPs: 3771.1037
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #379: GFLOPs: 1421.9816. Time: 62.2445 us. Best GFLOPs: 3771.1037
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #380: GFLOPs: 2854.8504. Time: 31.0035 us. Best GFLOPs: 3771.1037
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #381: GFLOPs: 2473.6811. Time: 35.7809 us. Best GFLOPs: 3771.1037
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #382: GFLOPs: 1028.9729. Time: 86.0183 us. Best GFLOPs: 3771.1037
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #383: GFLOPs: 101.9680. Time: 868.0216 us. Best GFLOPs: 3771.1037
2024-04-29 09:15:27 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #384: GFLOPs: 287.3559. Time: 308.0168 us. Best GFLOPs: 3771.1037
