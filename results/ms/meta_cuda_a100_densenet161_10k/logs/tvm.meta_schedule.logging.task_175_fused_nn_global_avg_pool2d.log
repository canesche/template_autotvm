2024-04-29 03:05:34 [INFO] [task_scheduler.cc:160] Initializing Task #175: "fused_nn_global_avg_pool2d"
2024-04-29 03:05:34 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2208), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2208), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2208), T.int64(1), T.int64(1)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(2208), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2208), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
2024-04-29 03:05:34 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-04-29 03:05:34 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2208), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2208), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2208), T.int64(1), T.int64(1)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(5), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(2208), ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2208))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(69), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2208), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-04-29 03:05:34 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2208), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2208), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(2208), T.int64(1), T.int64(1)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(2208), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2208), ax0_ax1_ax2_ax3_0_fused + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1) // T.int64(7))
                            v_rv1 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1) % T.int64(7))
                            T.where(ax4_ax5_fused_0 * T.int64(16) + ax4_ax5_fused_1 < T.int64(49))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2208), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.where(T.Mul(T.int64(0), T.int64(16)) + ax3_1 < T.int64(1))
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=2)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2024-04-29 06:46:21 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 06:46:21 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 06:46:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x176c6568)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15255d78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf8a6d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3e30f28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf64ef18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x15256048)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe8f9048)]: 0 failure(s)
2024-04-29 06:46:22 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-29 06:46:22 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x176c6568)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15255d78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf8a6d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3e30f28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf64ef18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x15256048)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe8f9048)]: 0 failure(s)
2024-04-29 06:46:23 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x176c6568)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15255d78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf8a6d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3e30f28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf64ef18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x15256048)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe8f9048)]: 0 failure(s)
2024-04-29 06:46:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x176c6568)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15255d78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf8a6d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3e30f28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf64ef18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x15256048)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe8f9048)]: 0 failure(s)
2024-04-29 06:46:24 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x176c6568)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x15255d78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xf8a6d78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3e30f28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xf64ef18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x15256048)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0xe8f9048)]: 0 failure(s)
2024-04-29 06:46:24 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9979  0.9969  0.9921  0.9915  0.9914  0.9909  0.9893  0.9828  0.9777  0.9734  0.9717  0.9713  0.9634  0.9614  0.9543
[17 : 32]:	0.9492  0.9448  0.9423  0.9363  0.9354  0.9341  0.9317  0.9236  0.9212  0.9203  0.9120  0.9073  0.9015  0.8997  0.8881  0.8767
[33 : 48]:	0.8705  0.8611  0.8551  0.8545  0.8541  0.8508  0.8500  0.8488  0.8420  0.8369  0.8339  0.8320  0.8283  0.8257  0.8256  0.8177
[49 : 64]:	0.8151  0.8088  0.8084  0.8031  0.8030  0.7920  0.7852  0.7791  0.7781  0.7757  0.7694  0.7650  0.7592  0.7580  0.7422  0.7413
2024-04-29 06:46:24 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 06:46:24 [INFO] [evolutionary_search.cc:730] Sending 62 candidates(s) for measurement
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 17.2366. Time: 6.4050 us. Best GFLOPs: 17.2366
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 13.4568. Time: 8.2041 us. Best GFLOPs: 17.2366
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 23.9209. Time: 4.6152 us. Best GFLOPs: 23.9209
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 13.4592. Time: 8.2026 us. Best GFLOPs: 23.9209
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 6.3314. Time: 17.4368 us. Best GFLOPs: 23.9209
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 13.0873. Time: 8.4357 us. Best GFLOPs: 23.9209
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 6.0908. Time: 18.1257 us. Best GFLOPs: 23.9209
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 19.3878. Time: 5.6943 us. Best GFLOPs: 23.9209
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 9.5575. Time: 11.5511 us. Best GFLOPs: 23.9209
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 24.8815. Time: 4.4370 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 13.4559. Time: 8.2046 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 19.3840. Time: 5.6954 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 15.6738. Time: 7.0436 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 9.8583. Time: 11.1987 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 18.0933. Time: 6.1017 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 19.3839. Time: 5.6955 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 9.8728. Time: 11.1822 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 6.3320. Time: 17.4351 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 13.0064. Time: 8.4881 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 13.0792. Time: 8.4409 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 19.5046. Time: 5.6602 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 16.0977. Time: 6.8581 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 17.8237. Time: 6.1940 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 19.5086. Time: 5.6590 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 9.5532. Time: 11.5563 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 6.2760. Time: 17.5909 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 18.0552. Time: 6.1146 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 9.8415. Time: 11.2178 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 13.4584. Time: 8.2031 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 16.2063. Time: 6.8122 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 17.9238. Time: 6.1594 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 9.8379. Time: 11.2220 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 13.3433. Time: 8.2738 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 16.1817. Time: 6.8225 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 13.4702. Time: 8.1958 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 13.3403. Time: 8.2757 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 13.4603. Time: 8.2019 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 17.9565. Time: 6.1482 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 14.4623. Time: 7.6337 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 17.9467. Time: 6.1515 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 13.3871. Time: 8.2467 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 16.2755. Time: 6.7832 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 20.8652. Time: 5.2911 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 24.8010. Time: 4.4514 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 17.9909. Time: 6.1364 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 16.1170. Time: 6.8499 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 24.7666. Time: 4.4576 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 16.0069. Time: 6.8970 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 13.4713. Time: 8.1952 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 9.5290. Time: 11.5856 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 16.0243. Time: 6.8895 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 6.0773. Time: 18.1660 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 6.0780. Time: 18.1638 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 6.3314. Time: 17.4369 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 16.2069. Time: 6.8119 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 24.7664. Time: 4.4577 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 17.6754. Time: 6.2460 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 15.6700. Time: 7.0453 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 17.8817. Time: 6.1739 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 17.4905. Time: 6.3120 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 13.0973. Time: 8.4292 us. Best GFLOPs: 24.8815
2024-04-29 07:03:44 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 17.6215. Time: 6.2651 us. Best GFLOPs: 24.8815
