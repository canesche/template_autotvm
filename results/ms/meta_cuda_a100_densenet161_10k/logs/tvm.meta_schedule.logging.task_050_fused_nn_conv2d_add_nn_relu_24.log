2024-04-29 03:04:22 [INFO] [task_scheduler.cc:160] Initializing Task #50: "fused_nn_conv2d_add_nn_relu_24"
2024-04-29 03:04:22 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2064), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(2064), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(2064), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(2064), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14), T.int64(2064), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-29 03:04:22 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-29 03:04:22 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2064), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(2064), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(2064), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(2064), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(98), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(12), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(16856)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(2064), rc_0 * T.int64(172) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2064)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(172))
                                    v1 = T.axis.spatial(T.int64(2064), rc_0 * T.int64(172) + ax0_ax1_ax2_ax3_fused % T.int64(172))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(43), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(49) * T.int64(6) + ff_3 * T.int64(3) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(49) // T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(2064), rc_0 * T.int64(172) + rc_1 * T.int64(43) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(49) * T.int64(6) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(49) // T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[16, 2, 1, 2, 3])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[12, 4, 43])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-04-29 03:04:22 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2064), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(2064), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(2064), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(2064), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(98), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(12), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(16856)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(2064), rc_0_ry_0_rx_0_fused * T.int64(172) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2064)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(172))
                                    v1 = T.axis.spatial(T.int64(2064), rc_0_ry_0_rx_0_fused * T.int64(172) + ax0_ax1_ax2_ax3_fused % T.int64(172))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(43), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(49) * T.int64(6) + ff_3 * T.int64(3) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(49) // T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(2064), rc_0_ry_0_rx_0_fused * T.int64(172) + rc_1 * T.int64(43) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(49) * T.int64(6) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(49) // T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[16, 2, 1, 2, 3])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[12, 4, 43])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 03:04:22 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2064), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(2064), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(2064), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(2064), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(98), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(12), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(16856)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(2064), rc_0_ry_0_rx_0_fused * T.int64(172) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2064)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(172))
                                    v1 = T.axis.spatial(T.int64(2064), rc_0_ry_0_rx_0_fused * T.int64(172) + ax0_ax1_ax2_ax3_fused % T.int64(172))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(43), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(49) * T.int64(6) + ff_3 * T.int64(3) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(49) // T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(2064), rc_0_ry_0_rx_0_fused * T.int64(172) + rc_1 * T.int64(43) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(49) * T.int64(6) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(49) // T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[16, 2, 1, 2, 3])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[12, 4, 43])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-04-29 04:13:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 04:13:36 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-29 04:13:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6f06138)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1685d718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x164608a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x123213a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x140a10f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1049d328)]: 486 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14bced08)]: 0 failure(s)
2024-04-29 04:13:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6f06138)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1685d718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x164608a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x123213a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x140a10f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1049d328)]: 972 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14bced08)]: 0 failure(s)
2024-04-29 04:13:40 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-29 04:13:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6f06138)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1685d718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x164608a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x123213a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x140a10f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1049d328)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14bced08)]: 0 failure(s)
2024-04-29 04:13:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6f06138)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1685d718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x164608a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x123213a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x140a10f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1049d328)]: 80 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14bced08)]: 0 failure(s)
2024-04-29 04:13:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6f06138)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1685d718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x164608a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x123213a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x140a10f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1049d328)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14bced08)]: 0 failure(s)
2024-04-29 04:13:49 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6f06138)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1685d718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x164608a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x123213a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x140a10f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1049d328)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14bced08)]: 0 failure(s)
2024-04-29 04:13:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9996  0.9985  0.9985  0.9981  0.9976  0.9973  0.9966  0.9959  0.9949  0.9943  0.9940  0.9935  0.9930  0.9924  0.9905
[17 : 32]:	0.9897  0.9891  0.9884  0.9876  0.9872  0.9860  0.9853  0.9853  0.9851  0.9850  0.9834  0.9832  0.9822  0.9819  0.9817  0.9814
[33 : 48]:	0.9804  0.9799  0.9792  0.9791  0.9780  0.9778  0.9775  0.9770  0.9764  0.9762  0.9762  0.9755  0.9747  0.9744  0.9726  0.9725
[49 : 64]:	0.9707  0.9706  0.9699  0.9697  0.9695  0.9692  0.9682  0.9681  0.9675  0.9674  0.9670  0.9658  0.9657  0.9656  0.9649  0.9643
2024-04-29 04:13:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 04:13:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #1: GFLOPs: 214.7985. Time: 723.5625 us. Best GFLOPs: 214.7985
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #2: GFLOPs: 368.0603. Time: 422.2682 us. Best GFLOPs: 368.0603
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #3: GFLOPs: 176.7830. Time: 879.1579 us. Best GFLOPs: 368.0603
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #4: GFLOPs: 212.9541. Time: 729.8293 us. Best GFLOPs: 368.0603
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #5: GFLOPs: 240.5004. Time: 646.2365 us. Best GFLOPs: 368.0603
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #6: GFLOPs: 659.1509. Time: 235.7884 us. Best GFLOPs: 659.1509
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #7: GFLOPs: 167.5933. Time: 927.3648 us. Best GFLOPs: 659.1509
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #8: GFLOPs: 1087.6219. Time: 142.8991 us. Best GFLOPs: 1087.6219
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #9: GFLOPs: 1451.9581. Time: 107.0418 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #10: GFLOPs: 1329.5483. Time: 116.8970 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #11: GFLOPs: 238.3965. Time: 651.9397 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #12: GFLOPs: 122.8975. Time: 1264.6320 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #13: GFLOPs: 104.5120. Time: 1487.1040 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #14: GFLOPs: 117.9228. Time: 1317.9823 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #15: GFLOPs: 17.8212. Time: 8721.0667 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #16: GFLOPs: 465.7121. Time: 333.7259 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #17: GFLOPs: 243.3337. Time: 638.7119 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #18: GFLOPs: 827.4573. Time: 187.8286 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #19: GFLOPs: 570.3660. Time: 272.4920 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #20: GFLOPs: 740.1209. Time: 209.9929 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #21: GFLOPs: 38.1216. Time: 4076.9537 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #22: GFLOPs: 527.0524. Time: 294.8856 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #23: GFLOPs: 197.8066. Time: 785.7177 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #24: GFLOPs: 132.5379. Time: 1172.6467 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #25: GFLOPs: 444.3203. Time: 349.7930 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #26: GFLOPs: 206.9426. Time: 751.0301 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #27: GFLOPs: 85.5178. Time: 1817.4022 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #28: GFLOPs: 212.6561. Time: 730.8519 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #29: GFLOPs: 101.8455. Time: 1526.0392 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #30: GFLOPs: 473.7639. Time: 328.0541 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #31: GFLOPs: 235.6962. Time: 659.4088 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #32: GFLOPs: 225.7732. Time: 688.3906 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #33: GFLOPs: 79.5063. Time: 1954.8159 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #34: GFLOPs: 1246.0916. Time: 124.7261 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #35: GFLOPs: 21.8368. Time: 7117.3461 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #36: GFLOPs: 171.4321. Time: 906.5987 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #37: GFLOPs: 101.9667. Time: 1524.2240 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #38: GFLOPs: 100.2534. Time: 1550.2730 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #39: GFLOPs: 72.2757. Time: 2150.3783 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #40: GFLOPs: 998.7665. Time: 155.6121 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #41: GFLOPs: 119.6285. Time: 1299.1901 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #42: GFLOPs: 637.0596. Time: 243.9649 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #43: GFLOPs: 65.2479. Time: 2381.9947 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #44: GFLOPs: 53.1748. Time: 2922.8178 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #45: GFLOPs: 906.0036. Time: 171.5447 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #46: GFLOPs: 16.5918. Time: 9367.2727 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #47: GFLOPs: 1012.5675. Time: 153.4912 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #48: GFLOPs: 215.5820. Time: 720.9328 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #49: GFLOPs: 33.4794. Time: 4642.2573 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #50: GFLOPs: 354.7106. Time: 438.1604 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #51: GFLOPs: 15.9182. Time: 9763.6538 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #52: GFLOPs: 424.3204. Time: 366.2802 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #53: GFLOPs: 956.7860. Time: 162.4398 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #54: GFLOPs: 85.5671. Time: 1816.3549 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #55: GFLOPs: 507.2835. Time: 306.3773 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #56: GFLOPs: 35.6173. Time: 4363.6202 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #57: GFLOPs: 711.3022. Time: 218.5009 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #58: GFLOPs: 183.8473. Time: 845.3765 us. Best GFLOPs: 1451.9581
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #59: GFLOPs: 1635.5376. Time: 95.0270 us. Best GFLOPs: 1635.5376
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #60: GFLOPs: 621.2512. Time: 250.1728 us. Best GFLOPs: 1635.5376
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #61: GFLOPs: 33.0794. Time: 4698.3913 us. Best GFLOPs: 1635.5376
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #62: GFLOPs: 204.5373. Time: 759.8623 us. Best GFLOPs: 1635.5376
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #63: GFLOPs: 105.7918. Time: 1469.1141 us. Best GFLOPs: 1635.5376
2024-04-29 06:53:45 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #64: GFLOPs: 122.7848. Time: 1265.7930 us. Best GFLOPs: 1635.5376
2024-04-29 08:09:35 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-29 08:09:36 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-04-29 08:09:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6f06138)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1685d718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x164608a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x123213a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x140a10f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1049d328)]: 418 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14bced08)]: 0 failure(s)
2024-04-29 08:09:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6f06138)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1685d718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x164608a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x123213a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x140a10f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1049d328)]: 841 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14bced08)]: 0 failure(s)
2024-04-29 08:09:39 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-04-29 08:09:43 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6f06138)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1685d718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x164608a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x123213a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x140a10f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1049d328)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14bced08)]: 0 failure(s)
2024-04-29 08:09:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6f06138)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1685d718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x164608a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x123213a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x140a10f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1049d328)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14bced08)]: 0 failure(s)
2024-04-29 08:09:50 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6f06138)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1685d718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x164608a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x123213a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x140a10f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1049d328)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14bced08)]: 0 failure(s)
2024-04-29 08:09:53 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6f06138)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x1685d718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x164608a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x123213a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x140a10f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x1049d328)]: 129 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x14bced08)]: 0 failure(s)
2024-04-29 08:09:54 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.5594  1.5285  1.4884  1.4776  1.4529  1.4170  1.4135  1.4116  1.4102  1.4041  1.4041  1.4002  1.3998  1.3992  1.3988  1.3988
[17 : 32]:	1.3988  1.3986  1.3976  1.3967  1.3960  1.3952  1.3951  1.3909  1.3908  1.3897  1.3897  1.3883  1.3881  1.3857  1.3844  1.3843
[33 : 48]:	1.3829  1.3829  1.3766  1.3718  1.3691  1.3688  1.3679  1.3614  1.3614  1.3609  1.3581  1.3564  1.3486  1.3465  1.3414  1.3412
[49 : 64]:	1.3412  1.3394  1.3370  1.3323  1.3210  1.3177  1.3115  1.3093  1.3090  1.2939  1.2902  1.2837  1.2833  1.2824  1.2800  1.2748
2024-04-29 08:09:54 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-29 08:09:54 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:121] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #65: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2064), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(2064), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(2064), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(192), T.int64(2064), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(224), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(86), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(2064), rc_0_ry_0_rx_0_fused * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                        v3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(336))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) // T.int64(24))
                                    v1 = T.axis.spatial(T.int64(2064), rc_0_ry_0_rx_0_fused * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) % T.int64(24))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1 < T.int64(288))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(2064), rc_0_ry_0_rx_0_fused * T.int64(24) + rc_1 * T.int64(12) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[16, 2, 6, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[86, 2, 12])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 84, 3], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116 = sch.split(loop=l114, factors=[None, 84], preserve_unit_iters=True)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b118)
l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #66: GFLOPs: 2018.7406. Time: 76.9887 us. Best GFLOPs: 2018.7406
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #67: GFLOPs: 1854.6645. Time: 83.7996 us. Best GFLOPs: 2018.7406
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #68: GFLOPs: 1758.9296. Time: 88.3606 us. Best GFLOPs: 2018.7406
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #69: GFLOPs: 2028.4792. Time: 76.6191 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #70: GFLOPs: 1433.4722. Time: 108.4222 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #71: GFLOPs: 1944.2622. Time: 79.9379 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #72: GFLOPs: 1435.7810. Time: 108.2478 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #73: GFLOPs: 1386.2856. Time: 112.1127 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #74: GFLOPs: 1409.0193. Time: 110.3038 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #75: GFLOPs: 1367.6291. Time: 113.6420 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #76: GFLOPs: 1407.5269. Time: 110.4207 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #77: GFLOPs: 1923.3440. Time: 80.8073 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #78: GFLOPs: 1963.7115. Time: 79.1461 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #79: GFLOPs: 1367.8776. Time: 113.6214 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #80: GFLOPs: 1411.7557. Time: 110.0900 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #81: GFLOPs: 1367.6820. Time: 113.6376 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #82: GFLOPs: 1331.8200. Time: 116.6976 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #83: GFLOPs: 2001.1223. Time: 77.6665 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #84: GFLOPs: 1435.7800. Time: 108.2479 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #85: GFLOPs: 1899.7163. Time: 81.8123 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #86: GFLOPs: 1386.4210. Time: 112.1017 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #87: GFLOPs: 1844.6786. Time: 84.2532 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #88: GFLOPs: 1963.7247. Time: 79.1456 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #89: GFLOPs: 1863.4664. Time: 83.4038 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #90: GFLOPs: 1963.9398. Time: 79.1369 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #91: GFLOPs: 1446.9168. Time: 107.4147 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #92: GFLOPs: 1417.4204. Time: 109.6500 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #93: GFLOPs: 1845.8163. Time: 84.2013 us. Best GFLOPs: 2028.4792
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #94: GFLOPs: 2088.4574. Time: 74.4186 us. Best GFLOPs: 2088.4574
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #95: GFLOPs: 1449.5522. Time: 107.2194 us. Best GFLOPs: 2088.4574
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #96: GFLOPs: 2006.9571. Time: 77.4407 us. Best GFLOPs: 2088.4574
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #97: GFLOPs: 1419.9970. Time: 109.4510 us. Best GFLOPs: 2088.4574
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #98: GFLOPs: 1419.9833. Time: 109.4521 us. Best GFLOPs: 2088.4574
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #99: GFLOPs: 2894.0386. Time: 53.7036 us. Best GFLOPs: 2894.0386
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #100: GFLOPs: 1831.4687. Time: 84.8609 us. Best GFLOPs: 2894.0386
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #101: GFLOPs: 1898.5756. Time: 81.8615 us. Best GFLOPs: 2894.0386
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #102: GFLOPs: 1744.3958. Time: 89.0968 us. Best GFLOPs: 2894.0386
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #103: GFLOPs: 1667.4859. Time: 93.2063 us. Best GFLOPs: 2894.0386
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #104: GFLOPs: 1831.1011. Time: 84.8780 us. Best GFLOPs: 2894.0386
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #105: GFLOPs: 2894.0411. Time: 53.7035 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #106: GFLOPs: 1786.5508. Time: 86.9945 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #107: GFLOPs: 1513.8370. Time: 102.6664 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #108: GFLOPs: 1417.1550. Time: 109.6705 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #109: GFLOPs: 1689.0756. Time: 92.0149 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #110: GFLOPs: 1513.5607. Time: 102.6851 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #111: GFLOPs: 2333.4019. Time: 66.6067 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #112: GFLOPs: 1551.9599. Time: 100.1444 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #113: GFLOPs: 1551.6855. Time: 100.1621 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #114: GFLOPs: 1887.4949. Time: 82.3420 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #115: GFLOPs: 2389.7882. Time: 65.0351 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #116: GFLOPs: 1845.7127. Time: 84.2060 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #117: GFLOPs: 2139.6985. Time: 72.6365 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #118: GFLOPs: 2139.7204. Time: 72.6357 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #119: GFLOPs: 2368.9622. Time: 65.6069 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #120: GFLOPs: 1845.3765. Time: 84.2214 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #121: GFLOPs: 2242.4792. Time: 69.3073 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #122: GFLOPs: 1442.6848. Time: 107.7298 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #123: GFLOPs: 2242.2574. Time: 69.3141 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #124: GFLOPs: 1450.3894. Time: 107.1575 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #125: GFLOPs: 1103.7546. Time: 140.8104 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #126: GFLOPs: 254.2934. Time: 611.1844 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #127: GFLOPs: 264.8385. Time: 586.8488 us. Best GFLOPs: 2894.0411
2024-04-29 08:12:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #128: GFLOPs: 612.1545. Time: 253.8904 us. Best GFLOPs: 2894.0411
