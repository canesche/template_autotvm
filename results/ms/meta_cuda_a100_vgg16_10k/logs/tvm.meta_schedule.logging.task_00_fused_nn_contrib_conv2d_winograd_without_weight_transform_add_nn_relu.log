2024-04-30 01:34:52 [INFO] [task_scheduler.cc:160] Initializing Task #0: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu"
2024-04-30 01:34:52 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(3), T.int64(226), T.int64(226)))
        input_tile = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)))
        B = T.alloc_buffer((T.int64(6), T.int64(6)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        A = T.alloc_buffer((T.int64(6), T.int64(4)))
        inverse = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(3), T.int64(226), T.int64(226)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(225) and T.int64(1) <= v_i3 and v_i3 < T.int64(225), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(3), T.int64(3136), T.int64(6), T.int64(6)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps, v_p % T.int64(56) * T.int64(4) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps, v_p % T.int64(56) * T.int64(4) + v_nu]
        for i, j in T.grid(T.int64(6), T.int64(6)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(6), T.int64(6), T.int64(3), T.int64(3136), T.int64(6), T.int64(6)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(6), T.int64(6), T.int64(64), T.int64(3136), T.int64(3)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(6), T.int64(4)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(64), T.int64(3136), T.int64(4), T.int64(4), T.int64(6), T.int64(6)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(64), T.int64(224), T.int64(224)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(224), T.int64(224)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(224), T.int64(224)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 01:34:52 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 01:34:52 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            input_tile_local = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(147), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(3), ci_p_fused_0 // T.int64(49) + ax0)
                            v_p = T.axis.spatial(T.int64(3136), ci_p_fused_0 % T.int64(49) * T.int64(64) + ci_p_fused_1 + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(3136))
                                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(3136))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(3), ci_p_fused_0 // T.int64(49) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), ci_p_fused_0 % T.int64(49) * T.int64(64) + ci_p_fused_1 + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(169344)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(28224))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(28224) // T.int64(4704))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(4704) // T.int64(1568))
                                    v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(1568) + ax0_ax1_ax2_ax3_fused % T.int64(1568))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6912)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(1152))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(1152) // T.int64(192))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(192) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(2), T.int64(3), T.int64(1), T.int64(6), T.int64(1), T.int64(4)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(196) * T.int64(3) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), nu_3 * T.int64(6) + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(4) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(1568) + eps_2_nu_2_co_2_p_2_fused % T.int64(196) * T.int64(8) + p_3 * T.int64(4) + p_4)
                                    v_ci = T.axis.reduce(T.int64(3), ci_0 * T.int64(3) + ci_1 * T.int64(3) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(6), T.int64(4), T.int64(8)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(196) * T.int64(3) + ax0)
                                v1 = T.axis.spatial(T.int64(6), ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(1568) + eps_2_nu_2_co_2_p_2_fused % T.int64(196) * T.int64(8) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                            v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                            v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 2, 3, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 6])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 16, 1, 4, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 196, 2, 4])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-04-30 01:34:52 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            input_tile_local = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(147), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(3), ci_p_fused_0 // T.int64(49) + ax0)
                            v_p = T.axis.spatial(T.int64(3136), ci_p_fused_0 % T.int64(49) * T.int64(64) + ci_p_fused_1 + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(3136))
                                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(3136))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(3), ci_p_fused_0 // T.int64(49) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), ci_p_fused_0 % T.int64(49) * T.int64(64) + ci_p_fused_1 + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(169344)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(28224))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(28224) // T.int64(4704))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(4704) // T.int64(1568))
                                    v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(1568) + ax0_ax1_ax2_ax3_fused % T.int64(1568))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6912)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(1152))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(1152) // T.int64(192))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(192) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(2), T.int64(3), T.int64(1), T.int64(6), T.int64(1), T.int64(4)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(196) * T.int64(3) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), nu_3 * T.int64(6) + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(4) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(1568) + eps_2_nu_2_co_2_p_2_fused % T.int64(196) * T.int64(8) + p_3 * T.int64(4) + p_4)
                                    v_ci = T.axis.reduce(T.int64(3), ci_1 * T.int64(3) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(6), T.int64(4), T.int64(8)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(196) * T.int64(3) + ax0)
                                v1 = T.axis.spatial(T.int64(6), ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(1568) + eps_2_nu_2_co_2_p_2_fused % T.int64(196) * T.int64(8) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                            v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                            v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 2, 3, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 6])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 16, 1, 4, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 196, 2, 4])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-30 01:34:52 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
            inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(147), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(3), ci_p_fused_0 // T.int64(49) + ax0)
                            v_p = T.axis.spatial(T.int64(3136), ci_p_fused_0 % T.int64(49) * T.int64(64) + ci_p_fused_1 + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(3136))
                                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(3136))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(3), ci_p_fused_0 // T.int64(49) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), ci_p_fused_0 % T.int64(49) * T.int64(64) + ci_p_fused_1 + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(169344)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(28224))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(28224) // T.int64(4704))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(4704) // T.int64(1568))
                                    v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(1568) + ax0_ax1_ax2_ax3_fused % T.int64(1568))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6912)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(1152))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(1152) // T.int64(192))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(192) // T.int64(64))
                                    v3 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(2), T.int64(3), T.int64(1), T.int64(6), T.int64(1), T.int64(4)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(196) * T.int64(3) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), nu_3 * T.int64(6) + nu_4)
                                    v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(4) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(1568) + eps_2_nu_2_co_2_p_2_fused % T.int64(196) * T.int64(8) + p_3 * T.int64(4) + p_4)
                                    v_ci = T.axis.reduce(T.int64(3), ci_1 * T.int64(3) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(6), T.int64(4), T.int64(8)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(196) * T.int64(3) + ax0)
                                v1 = T.axis.spatial(T.int64(6), ax1)
                                v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused * T.int64(1568) + eps_2_nu_2_co_2_p_2_fused % T.int64(196) * T.int64(8) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                            v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                            v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 2, 3, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 6])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 16, 1, 4, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 196, 2, 4])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-30 01:35:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 01:35:02 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 01:35:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 486 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 01:35:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 983 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 01:35:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 1475 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 01:35:25 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2024-04-30 01:35:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 01:36:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 01:36:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 01:36:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 01:36:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9994  0.9986  0.9971  0.9965  0.9964  0.9962  0.9958  0.9958  0.9937  0.9935  0.9933  0.9933  0.9924  0.9919  0.9915
[17 : 32]:	0.9907  0.9903  0.9893  0.9883  0.9873  0.9871  0.9870  0.9868  0.9866  0.9863  0.9851  0.9844  0.9841  0.9838  0.9835  0.9826
[33 : 48]:	0.9823  0.9823  0.9811  0.9810  0.9809  0.9806  0.9803  0.9797  0.9796  0.9792  0.9790  0.9781  0.9779  0.9776  0.9768  0.9766
[49 : 64]:	0.9762  0.9730  0.9723  0.9721  0.9714  0.9705  0.9692  0.9691  0.9684  0.9682  0.9671  0.9669  0.9652  0.9650  0.9645  0.9644
2024-04-30 01:36:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 01:36:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #1: GFLOPs: 1269.9976. Time: 341.0789 us. Best GFLOPs: 1269.9976
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #2: GFLOPs: 4161.7768. Time: 104.0828 us. Best GFLOPs: 4161.7768
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #3: GFLOPs: 2664.5731. Time: 162.5662 us. Best GFLOPs: 4161.7768
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #4: GFLOPs: 3996.5552. Time: 108.3857 us. Best GFLOPs: 4161.7768
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #5: GFLOPs: 644.6122. Time: 671.9845 us. Best GFLOPs: 4161.7768
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #6: GFLOPs: 4196.3009. Time: 103.2265 us. Best GFLOPs: 4196.3009
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #7: GFLOPs: 1582.3881. Time: 273.7441 us. Best GFLOPs: 4196.3009
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #8: GFLOPs: 1183.5684. Time: 365.9860 us. Best GFLOPs: 4196.3009
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #9: GFLOPs: 894.2482. Time: 484.3951 us. Best GFLOPs: 4196.3009
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #10: GFLOPs: 3331.5229. Time: 130.0214 us. Best GFLOPs: 4196.3009
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #11: GFLOPs: 2021.2417. Time: 214.3086 us. Best GFLOPs: 4196.3009
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #12: GFLOPs: 1384.6446. Time: 312.8380 us. Best GFLOPs: 4196.3009
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #13: GFLOPs: 2901.9682. Time: 149.2675 us. Best GFLOPs: 4196.3009
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:121] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #14: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(19), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(3136) + ax0)
                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(3136) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(9408))
                        T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(3136))
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(3136))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(9408))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(3136))
                                    v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(3136))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(9408))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(3136) + ax2)
                        v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(3136) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(9408))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(252), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(2), T.int64(56)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) * T.int64(2) + eps_3_init * T.int64(2) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(28) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(28) * T.int64(112) + p_3_init * T.int64(56) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(14)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(224))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(28) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(224) // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(3), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(28) * T.int64(112) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(112))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(128))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(28) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(3), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(56)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(28) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(28) * T.int64(112) + p_3 * T.int64(56) + p_4)
                                v_ci = T.axis.reduce(T.int64(3), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(2), T.int64(112)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(84) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(84) // T.int64(28) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_2_nu_2_co_2_p_2_fused * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(28) * T.int64(112) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(3136), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                        v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                        v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[3, 1, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 32, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[28, 1, 1, 2, 56])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #15: GFLOPs: 5572.7358. Time: 77.7301 us. Best GFLOPs: 5572.7358
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #16: GFLOPs: 1917.7644. Time: 225.8721 us. Best GFLOPs: 5572.7358
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #17: GFLOPs: 1489.7040. Time: 290.7755 us. Best GFLOPs: 5572.7358
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #18: GFLOPs: 2838.1653. Time: 152.6230 us. Best GFLOPs: 5572.7358
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #19: GFLOPs: 1714.5500. Time: 252.6432 us. Best GFLOPs: 5572.7358
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #20: GFLOPs: 968.1623. Time: 447.4141 us. Best GFLOPs: 5572.7358
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #21: GFLOPs: 4243.2491. Time: 102.0844 us. Best GFLOPs: 5572.7358
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #22: GFLOPs: 4929.5890. Time: 87.8713 us. Best GFLOPs: 5572.7358
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #23: GFLOPs: 1676.9645. Time: 258.3056 us. Best GFLOPs: 5572.7358
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #24: GFLOPs: 3352.0190. Time: 129.2264 us. Best GFLOPs: 5572.7358
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #25: GFLOPs: 1268.7057. Time: 341.4262 us. Best GFLOPs: 5572.7358
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #26: GFLOPs: 6693.6949. Time: 64.7130 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #27: GFLOPs: 911.9479. Time: 474.9936 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #28: GFLOPs: 1269.5433. Time: 341.2010 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #29: GFLOPs: 3963.9122. Time: 109.2783 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #30: GFLOPs: 1398.8743. Time: 309.6557 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #31: GFLOPs: 3193.7538. Time: 135.6302 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #32: GFLOPs: 2605.0938. Time: 166.2779 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #33: GFLOPs: 2111.4447. Time: 205.1531 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #34: GFLOPs: 1624.9822. Time: 266.5687 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #35: GFLOPs: 688.2055. Time: 629.4187 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #36: GFLOPs: 1076.5773. Time: 402.3579 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #37: GFLOPs: 1471.6875. Time: 294.3352 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #38: GFLOPs: 1699.3494. Time: 254.9031 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #39: GFLOPs: 4266.9523. Time: 101.5173 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #40: GFLOPs: 4193.1071. Time: 103.3051 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #41: GFLOPs: 1736.4260. Time: 249.4603 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #42: GFLOPs: 1576.5463. Time: 274.7584 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #43: GFLOPs: 4814.0538. Time: 89.9802 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:121] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #44: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(224), T.int64(224)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(3), T.int64(3136), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)))
        inverse_local = T.alloc_buffer((T.int64(64), T.int64(3136), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(64), T.int64(3136)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(3136)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(3), T.int64(64)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(74), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax0)
                        v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                        T.reads(p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps and v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps < T.int64(225) and T.int64(1) <= v_p % T.int64(56) * T.int64(4) + v_nu and v_p % T.int64(56) * T.int64(4) + v_nu < T.int64(225), p0[v_p // T.int64(3136), v_ci, v_p % T.int64(3136) // T.int64(56) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(56) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                            v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136))
                                    v_p = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(3), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(3136) + ax2)
                        v3 = T.axis.spatial(T.int64(3136), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(3136) + ax3)
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(9408))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42) * T.int64(3) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(14) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(4) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(224) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(14) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(3)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(21)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(448))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(448) // T.int64(224))
                                        v2 = T.axis.spatial(T.int64(3), ci_0)
                                        v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(224) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(224))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42) * T.int64(3) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(128))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(3), ci_0)
                                        v3 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42) * T.int64(3) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(14) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(4) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(224) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(14) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(3), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(1), T.int64(4), T.int64(14)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(42) * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(42) // T.int64(14) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(64), eps_1_nu_1_co_1_p_1_fused * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(3136), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(224) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(14) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(6272), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(3136) + ax0)
                                        v_p = T.axis.spatial(T.int64(3136), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(3136) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(64), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(3136))
                        v_h = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(3136) // T.int64(56) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(224), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(56) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(3136) + v_h // T.int64(4) * T.int64(56) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 4], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 3, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 16, 1, 2, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[14, 1, 16, 7, 2])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #45: GFLOPs: 3989.8398. Time: 108.5681 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #46: GFLOPs: 6588.2293. Time: 65.7490 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #47: GFLOPs: 1583.7453. Time: 273.5095 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #48: GFLOPs: 1521.5568. Time: 284.6883 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #49: GFLOPs: 6353.4776. Time: 68.1783 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #50: GFLOPs: 2796.8378. Time: 154.8783 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #51: GFLOPs: 850.3370. Time: 509.4091 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #52: GFLOPs: 4200.5007. Time: 103.1233 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #53: GFLOPs: 2823.7247. Time: 153.4036 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #54: GFLOPs: 4545.7951. Time: 95.2901 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #55: GFLOPs: 1795.5544. Time: 241.2455 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #56: GFLOPs: 2701.7706. Time: 160.3280 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #57: GFLOPs: 325.4991. Time: 1330.7853 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #58: GFLOPs: 571.3463. Time: 758.1556 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #59: GFLOPs: 3223.7804. Time: 134.3669 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #60: GFLOPs: 3730.1888. Time: 116.1253 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #61: GFLOPs: 1496.5160. Time: 289.4519 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #62: GFLOPs: 1963.2250. Time: 220.6418 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #63: GFLOPs: 1622.9483. Time: 266.9028 us. Best GFLOPs: 6693.6949
2024-04-30 02:17:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #64: GFLOPs: 5569.0351. Time: 77.7818 us. Best GFLOPs: 6693.6949
2024-04-30 03:37:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 03:37:10 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-04-30 03:37:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 435 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 03:37:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 866 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 03:37:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 1295 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 03:37:32 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-04-30 03:37:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 121 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 03:38:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 03:38:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 72 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 03:38:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 66 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 03:39:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.8548  1.8503  1.8469  1.8467  1.8394  1.8096  1.8077  1.7794  1.7693  1.7189  1.6312  1.6059  1.5884  1.5798  1.5642  1.5515
[17 : 32]:	1.5083  1.5029  1.4980  1.4959  1.4869  1.4671  1.3803  1.3753  1.3688  1.3637  1.3416  1.3145  1.3129  1.3025  1.2960  1.2959
[33 : 48]:	1.2928  1.2919  1.2846  1.2846  1.2823  1.2766  1.2689  1.2626  1.2619  1.2584  1.2524  1.2484  1.2332  1.2305  1.2248  1.2190
[49 : 64]:	1.1916  1.1907  1.1907  1.1779  1.1651  1.1635  1.1506  1.1420  1.1131  1.1051  1.1030  1.1030  1.1020  1.1018  1.0995  1.0989
2024-04-30 03:39:05 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 03:39:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #65: GFLOPs: 6502.5042. Time: 66.6158 us. Best GFLOPs: 6693.6949
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #66: GFLOPs: 6530.0426. Time: 66.3349 us. Best GFLOPs: 6693.6949
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #67: GFLOPs: 6773.9266. Time: 63.9466 us. Best GFLOPs: 6773.9266
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #68: GFLOPs: 6682.6783. Time: 64.8197 us. Best GFLOPs: 6773.9266
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #69: GFLOPs: 6799.8068. Time: 63.7032 us. Best GFLOPs: 6799.8068
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #70: GFLOPs: 6972.6690. Time: 62.1239 us. Best GFLOPs: 6972.6690
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #71: GFLOPs: 6790.3163. Time: 63.7922 us. Best GFLOPs: 6972.6690
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #72: GFLOPs: 7158.1740. Time: 60.5140 us. Best GFLOPs: 7158.1740
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #73: GFLOPs: 6489.2327. Time: 66.7520 us. Best GFLOPs: 7158.1740
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #74: GFLOPs: 6782.3367. Time: 63.8673 us. Best GFLOPs: 7158.1740
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #75: GFLOPs: 2977.2720. Time: 145.4921 us. Best GFLOPs: 7158.1740
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #76: GFLOPs: 5221.0033. Time: 82.9667 us. Best GFLOPs: 7158.1740
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #77: GFLOPs: 1397.5766. Time: 309.9432 us. Best GFLOPs: 7158.1740
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #78: GFLOPs: 7327.2918. Time: 59.1173 us. Best GFLOPs: 7327.2918
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #79: GFLOPs: 6727.0903. Time: 64.3918 us. Best GFLOPs: 7327.2918
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #80: GFLOPs: 7026.1576. Time: 61.6510 us. Best GFLOPs: 7327.2918
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #81: GFLOPs: 6824.2506. Time: 63.4750 us. Best GFLOPs: 7327.2918
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #82: GFLOPs: 6791.3036. Time: 63.7830 us. Best GFLOPs: 7327.2918
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #83: GFLOPs: 6695.6762. Time: 64.6939 us. Best GFLOPs: 7327.2918
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #84: GFLOPs: 6817.8563. Time: 63.5345 us. Best GFLOPs: 7327.2918
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #85: GFLOPs: 7563.1723. Time: 57.2735 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #86: GFLOPs: 6597.7664. Time: 65.6539 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #87: GFLOPs: 6870.1400. Time: 63.0510 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #88: GFLOPs: 6806.4552. Time: 63.6410 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #89: GFLOPs: 1821.7565. Time: 237.7757 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #90: GFLOPs: 992.0033. Time: 436.6613 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #91: GFLOPs: 1640.4020. Time: 264.0630 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #92: GFLOPs: 1548.8136. Time: 279.6782 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #93: GFLOPs: 1553.0325. Time: 278.9184 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #94: GFLOPs: 6705.9250. Time: 64.5950 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #95: GFLOPs: 2387.9515. Time: 181.3979 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #96: GFLOPs: 2379.9848. Time: 182.0051 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #97: GFLOPs: 2239.1174. Time: 193.4554 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #98: GFLOPs: 2239.9686. Time: 193.3819 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #99: GFLOPs: 2247.5075. Time: 192.7332 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #100: GFLOPs: 2235.4405. Time: 193.7736 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #101: GFLOPs: 1700.8398. Time: 254.6797 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #102: GFLOPs: 1529.5839. Time: 283.1943 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #103: GFLOPs: 1472.2120. Time: 294.2303 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #104: GFLOPs: 1095.6652. Time: 395.3483 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #105: GFLOPs: 1517.1981. Time: 285.5062 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #106: GFLOPs: 2393.4884. Time: 180.9783 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #107: GFLOPs: 1472.8911. Time: 294.0947 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #108: GFLOPs: 1553.5833. Time: 278.8196 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #109: GFLOPs: 1694.4541. Time: 255.6395 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #110: GFLOPs: 1417.5974. Time: 305.5659 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #111: GFLOPs: 2384.0157. Time: 181.6974 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #112: GFLOPs: 1102.2789. Time: 392.9762 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #113: GFLOPs: 1548.3334. Time: 279.7650 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #114: GFLOPs: 2434.4876. Time: 177.9304 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #115: GFLOPs: 1113.5298. Time: 389.0057 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #116: GFLOPs: 1099.5314. Time: 393.9582 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #117: GFLOPs: 1990.5668. Time: 217.6111 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #118: GFLOPs: 6814.7305. Time: 63.5637 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #119: GFLOPs: 2412.7984. Time: 179.5299 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #120: GFLOPs: 1708.5807. Time: 253.5259 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #121: GFLOPs: 1553.8570. Time: 278.7704 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #122: GFLOPs: 1601.8594. Time: 270.4166 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #123: GFLOPs: 6597.8607. Time: 65.6530 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #124: GFLOPs: 6602.9699. Time: 65.6022 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #125: GFLOPs: 5992.3920. Time: 72.2866 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #126: GFLOPs: 1344.6254. Time: 322.1488 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #127: GFLOPs: 5477.9869. Time: 79.0746 us. Best GFLOPs: 7563.1723
2024-04-30 03:40:18 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #128: GFLOPs: 1708.7022. Time: 253.5078 us. Best GFLOPs: 7563.1723
2024-04-30 05:01:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 05:01:58 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 05:02:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 392 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 05:02:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 784 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 05:02:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 1178 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 05:02:18 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-30 05:02:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 05:02:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 75 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 05:03:19 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 67 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 05:03:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 63 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 05:03:45 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0089  1.0040  0.9988  0.9940  0.9913  0.9902  0.9812  0.9769  0.9644  0.9610  0.9604  0.9574  0.9536  0.9524  0.9511  0.9508
[17 : 32]:	0.9489  0.9456  0.9442  0.9433  0.9418  0.9416  0.9403  0.9376  0.9372  0.9357  0.9353  0.9344  0.9343  0.9337  0.9303  0.9301
[33 : 48]:	0.9299  0.9282  0.9274  0.9274  0.9270  0.9267  0.9267  0.9263  0.9259  0.9229  0.9226  0.9222  0.9207  0.9205  0.9202  0.9200
[49 : 64]:	0.9198  0.9193  0.9187  0.9185  0.9177  0.9160  0.9150  0.9128  0.9120  0.9119  0.9119  0.9113  0.9113  0.9107  0.9088  0.9086
2024-04-30 05:03:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 05:03:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #129: GFLOPs: 6560.5481. Time: 66.0264 us. Best GFLOPs: 7563.1723
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #130: GFLOPs: 6595.4263. Time: 65.6772 us. Best GFLOPs: 7563.1723
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #131: GFLOPs: 6634.5094. Time: 65.2903 us. Best GFLOPs: 7563.1723
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #132: GFLOPs: 6786.8790. Time: 63.8245 us. Best GFLOPs: 7563.1723
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #133: GFLOPs: 6583.9385. Time: 65.7918 us. Best GFLOPs: 7563.1723
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #134: GFLOPs: 5302.4812. Time: 81.6918 us. Best GFLOPs: 7563.1723
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #135: GFLOPs: 6740.9914. Time: 64.2590 us. Best GFLOPs: 7563.1723
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #136: GFLOPs: 7905.6565. Time: 54.7923 us. Best GFLOPs: 7905.6565
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #137: GFLOPs: 7189.4135. Time: 60.2510 us. Best GFLOPs: 7905.6565
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #138: GFLOPs: 7642.5145. Time: 56.6789 us. Best GFLOPs: 7905.6565
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #139: GFLOPs: 7654.0974. Time: 56.5931 us. Best GFLOPs: 7905.6565
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #140: GFLOPs: 7291.7549. Time: 59.4054 us. Best GFLOPs: 7905.6565
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #141: GFLOPs: 6575.9622. Time: 65.8716 us. Best GFLOPs: 7905.6565
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #142: GFLOPs: 6914.8221. Time: 62.6436 us. Best GFLOPs: 7905.6565
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #143: GFLOPs: 7206.6240. Time: 60.1071 us. Best GFLOPs: 7905.6565
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #144: GFLOPs: 7325.8554. Time: 59.1289 us. Best GFLOPs: 7905.6565
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #145: GFLOPs: 6761.7265. Time: 64.0620 us. Best GFLOPs: 7905.6565
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #146: GFLOPs: 7932.8884. Time: 54.6042 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #147: GFLOPs: 6576.1899. Time: 65.8694 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #148: GFLOPs: 6525.7558. Time: 66.3784 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #149: GFLOPs: 7549.4705. Time: 57.3775 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #150: GFLOPs: 6681.4217. Time: 64.8319 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #151: GFLOPs: 6691.4841. Time: 64.7344 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #152: GFLOPs: 5606.0582. Time: 77.2681 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #153: GFLOPs: 6953.3091. Time: 62.2969 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #154: GFLOPs: 7534.8932. Time: 57.4885 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #155: GFLOPs: 6976.2674. Time: 62.0919 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #156: GFLOPs: 6217.2490. Time: 69.6722 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #157: GFLOPs: 6980.7114. Time: 62.0523 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #158: GFLOPs: 5560.0842. Time: 77.9070 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #159: GFLOPs: 5628.0783. Time: 76.9658 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #160: GFLOPs: 7234.2161. Time: 59.8779 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #161: GFLOPs: 7529.9023. Time: 57.5266 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #162: GFLOPs: 7713.9147. Time: 56.1543 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #163: GFLOPs: 6549.0746. Time: 66.1421 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #164: GFLOPs: 6594.7685. Time: 65.6838 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #165: GFLOPs: 6687.3686. Time: 64.7743 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #166: GFLOPs: 6583.7745. Time: 65.7935 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #167: GFLOPs: 6675.1125. Time: 64.8932 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #168: GFLOPs: 7349.5935. Time: 58.9379 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #169: GFLOPs: 7715.9886. Time: 56.1392 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #170: GFLOPs: 6492.3420. Time: 66.7201 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #171: GFLOPs: 7064.7785. Time: 61.3139 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #172: GFLOPs: 6816.6688. Time: 63.5456 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #173: GFLOPs: 7055.6717. Time: 61.3931 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #174: GFLOPs: 7047.9817. Time: 61.4601 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #175: GFLOPs: 7118.2676. Time: 60.8532 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #176: GFLOPs: 6707.2480. Time: 64.5823 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #177: GFLOPs: 7635.2898. Time: 56.7325 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #178: GFLOPs: 6681.4164. Time: 64.8320 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #179: GFLOPs: 7024.9908. Time: 61.6612 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #180: GFLOPs: 6678.8676. Time: 64.8567 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #181: GFLOPs: 6732.0809. Time: 64.3441 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #182: GFLOPs: 6707.4131. Time: 64.5807 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #183: GFLOPs: 6692.3878. Time: 64.7257 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #184: GFLOPs: 7069.1051. Time: 61.2764 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #185: GFLOPs: 6750.5234. Time: 64.1683 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #186: GFLOPs: 6570.1312. Time: 65.9301 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #187: GFLOPs: 6619.2203. Time: 65.4412 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #188: GFLOPs: 6996.9348. Time: 61.9085 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #189: GFLOPs: 6697.4240. Time: 64.6770 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #190: GFLOPs: 6772.6079. Time: 63.9590 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #191: GFLOPs: 5912.4181. Time: 73.2643 us. Best GFLOPs: 7932.8884
2024-04-30 05:04:54 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #192: GFLOPs: 1487.8038. Time: 291.1469 us. Best GFLOPs: 7932.8884
2024-04-30 06:41:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 06:41:15 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 06:41:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 388 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 06:41:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 782 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 06:41:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 1169 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 06:41:36 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2024-04-30 06:41:54 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 47 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 06:42:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 55 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 06:42:36 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 53 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 06:42:56 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 45 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 06:43:01 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9889  0.9852  0.9824  0.9823  0.9743  0.9718  0.9695  0.9687  0.9672  0.9591  0.9588  0.9564  0.9558  0.9556  0.9535  0.9533
[17 : 32]:	0.9531  0.9530  0.9528  0.9497  0.9476  0.9471  0.9460  0.9453  0.9445  0.9399  0.9392  0.9392  0.9375  0.9364  0.9350  0.9346
[33 : 48]:	0.9342  0.9333  0.9329  0.9329  0.9326  0.9325  0.9306  0.9306  0.9306  0.9283  0.9278  0.9275  0.9269  0.9260  0.9259  0.9255
[49 : 64]:	0.9255  0.9244  0.9243  0.9232  0.9227  0.9223  0.9221  0.9221  0.9220  0.9220  0.9216  0.9216  0.9216  0.9215  0.9210  0.9209
2024-04-30 06:43:01 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 06:43:01 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #193: GFLOPs: 7630.7501. Time: 56.7663 us. Best GFLOPs: 7932.8884
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #194: GFLOPs: 7697.9109. Time: 56.2710 us. Best GFLOPs: 7932.8884
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #195: GFLOPs: 7244.4254. Time: 59.7935 us. Best GFLOPs: 7932.8884
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #196: GFLOPs: 7676.2566. Time: 56.4298 us. Best GFLOPs: 7932.8884
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #197: GFLOPs: 7094.1887. Time: 61.0598 us. Best GFLOPs: 7932.8884
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #198: GFLOPs: 6910.7594. Time: 62.6804 us. Best GFLOPs: 7932.8884
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #199: GFLOPs: 7620.8750. Time: 56.8399 us. Best GFLOPs: 7932.8884
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #200: GFLOPs: 7038.1457. Time: 61.5460 us. Best GFLOPs: 7932.8884
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #201: GFLOPs: 7790.1834. Time: 55.6045 us. Best GFLOPs: 7932.8884
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #202: GFLOPs: 7903.3834. Time: 54.8081 us. Best GFLOPs: 7932.8884
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #203: GFLOPs: 7592.0881. Time: 57.0554 us. Best GFLOPs: 7932.8884
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #204: GFLOPs: 7604.2523. Time: 56.9641 us. Best GFLOPs: 7932.8884
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #205: GFLOPs: 7877.1511. Time: 54.9906 us. Best GFLOPs: 7932.8884
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #206: GFLOPs: 7490.6689. Time: 57.8279 us. Best GFLOPs: 7932.8884
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #207: GFLOPs: 7171.7536. Time: 60.3994 us. Best GFLOPs: 7932.8884
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #208: GFLOPs: 7675.2592. Time: 56.4371 us. Best GFLOPs: 7932.8884
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #209: GFLOPs: 7889.9794. Time: 54.9012 us. Best GFLOPs: 7932.8884
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #210: GFLOPs: 7784.4775. Time: 55.6453 us. Best GFLOPs: 7932.8884
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #211: GFLOPs: 7696.6550. Time: 56.2802 us. Best GFLOPs: 7932.8884
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #212: GFLOPs: 8030.6473. Time: 53.9395 us. Best GFLOPs: 8030.6473
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #213: GFLOPs: 7508.4109. Time: 57.6912 us. Best GFLOPs: 8030.6473
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #214: GFLOPs: 7458.4844. Time: 58.0774 us. Best GFLOPs: 8030.6473
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #215: GFLOPs: 7202.0040. Time: 60.1457 us. Best GFLOPs: 8030.6473
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #216: GFLOPs: 7642.7371. Time: 56.6773 us. Best GFLOPs: 8030.6473
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #217: GFLOPs: 7485.4358. Time: 57.8683 us. Best GFLOPs: 8030.6473
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #218: GFLOPs: 7983.2622. Time: 54.2597 us. Best GFLOPs: 8030.6473
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #219: GFLOPs: 7696.1023. Time: 56.2843 us. Best GFLOPs: 8030.6473
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #220: GFLOPs: 7719.9752. Time: 56.1102 us. Best GFLOPs: 8030.6473
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #221: GFLOPs: 6866.8546. Time: 63.0812 us. Best GFLOPs: 8030.6473
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #222: GFLOPs: 7020.9765. Time: 61.6965 us. Best GFLOPs: 8030.6473
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #223: GFLOPs: 8120.3001. Time: 53.3440 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #224: GFLOPs: 7444.6323. Time: 58.1855 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #225: GFLOPs: 7129.5908. Time: 60.7566 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #226: GFLOPs: 7495.3362. Time: 57.7919 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #227: GFLOPs: 7766.5154. Time: 55.7740 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #228: GFLOPs: 7767.3967. Time: 55.7676 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #229: GFLOPs: 7575.4547. Time: 57.1806 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #230: GFLOPs: 7743.8226. Time: 55.9374 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #231: GFLOPs: 7645.5810. Time: 56.6562 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #232: GFLOPs: 7645.1324. Time: 56.6595 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #233: GFLOPs: 7714.3573. Time: 56.1511 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #234: GFLOPs: 7732.4878. Time: 56.0194 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #235: GFLOPs: 7759.1214. Time: 55.8271 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #236: GFLOPs: 7939.4672. Time: 54.5590 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #237: GFLOPs: 7752.5574. Time: 55.8744 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #238: GFLOPs: 7607.1563. Time: 56.9424 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #239: GFLOPs: 7959.0757. Time: 54.4246 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #240: GFLOPs: 7099.8956. Time: 61.0107 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #241: GFLOPs: 7752.9795. Time: 55.8713 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #242: GFLOPs: 7641.9155. Time: 56.6834 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #243: GFLOPs: 7349.3522. Time: 58.9398 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #244: GFLOPs: 6734.1136. Time: 64.3246 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #245: GFLOPs: 7513.8338. Time: 57.6496 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #246: GFLOPs: 7365.8486. Time: 58.8078 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #247: GFLOPs: 7679.7880. Time: 56.4038 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #248: GFLOPs: 6706.2223. Time: 64.5922 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #249: GFLOPs: 8082.9168. Time: 53.5907 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #250: GFLOPs: 7965.2862. Time: 54.3822 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #251: GFLOPs: 7705.0668. Time: 56.2188 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #252: GFLOPs: 7891.4345. Time: 54.8911 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #253: GFLOPs: 7891.0090. Time: 54.8940 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #254: GFLOPs: 1798.1419. Time: 240.8983 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #255: GFLOPs: 1374.5103. Time: 315.1445 us. Best GFLOPs: 8120.3001
2024-04-30 06:44:10 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #256: GFLOPs: 3502.7007. Time: 123.6673 us. Best GFLOPs: 8120.3001
2024-04-30 07:54:18 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 07:54:21 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 07:54:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 399 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 07:54:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 798 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 07:54:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 1185 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 07:54:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 1577 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 07:54:47 [INFO] [evolutionary_search.cc:723] Sampled 63 candidate(s)
2024-04-30 07:55:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 53 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 07:55:22 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 33 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 07:55:41 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 36 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 07:56:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 42 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 07:56:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	3.5895  3.5525  3.5359  3.5339  3.5335  3.5281  3.5270  3.5254  3.5250  3.5207  3.5099  3.5099  3.5087  3.4988  3.4988  3.4918
[17 : 32]:	3.4857  3.3410  3.1986  3.1508  3.0478  3.0436  3.0436  3.0349  3.0049  2.9508  2.9170  2.9127  2.9068  2.8979  2.8979  2.8957
[33 : 48]:	2.8950  2.8950  2.8840  2.8835  2.8832  2.8795  2.8689  2.8336  2.8290  2.8268  2.8203  2.7917  2.7712  2.7426  2.5474  2.5408
[49 : 64]:	2.5337  2.5204  2.4934  2.4813  2.4776  2.4574  2.4475  2.4475  2.3595  2.2434  2.2139  2.2119  2.1852  2.1832  2.1419  2.1324
2024-04-30 07:56:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 07:56:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #257: GFLOPs: 6988.2215. Time: 61.9856 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #258: GFLOPs: 5907.3363. Time: 73.3274 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #259: GFLOPs: 5948.1541. Time: 72.8242 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #260: GFLOPs: 6685.6195. Time: 64.7912 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #261: GFLOPs: 5911.0704. Time: 73.2810 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #262: GFLOPs: 6982.2513. Time: 62.0386 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #263: GFLOPs: 5781.6389. Time: 74.9216 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #264: GFLOPs: 6779.7984. Time: 63.8912 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #265: GFLOPs: 5941.6001. Time: 72.9045 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #266: GFLOPs: 7025.9539. Time: 61.6528 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #267: GFLOPs: 6749.3233. Time: 64.1797 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #268: GFLOPs: 6747.2978. Time: 64.1989 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #269: GFLOPs: 6706.4342. Time: 64.5901 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #270: GFLOPs: 5857.2799. Time: 73.9540 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #271: GFLOPs: 5858.1974. Time: 73.9424 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #272: GFLOPs: 6781.2869. Time: 63.8772 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #273: GFLOPs: 5937.8092. Time: 72.9510 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #274: GFLOPs: 4688.9740. Time: 92.3804 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #275: GFLOPs: 5797.6972. Time: 74.7140 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #276: GFLOPs: 6320.7424. Time: 68.5314 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #277: GFLOPs: 5557.3782. Time: 77.9449 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #278: GFLOPs: 3942.6182. Time: 109.8685 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #279: GFLOPs: 5172.8290. Time: 83.7394 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #280: GFLOPs: 5734.3329. Time: 75.5396 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #281: GFLOPs: 5065.4731. Time: 85.5141 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #282: GFLOPs: 5133.2116. Time: 84.3857 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #283: GFLOPs: 6723.8584. Time: 64.4227 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #284: GFLOPs: 6755.8386. Time: 64.1178 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #285: GFLOPs: 6448.6510. Time: 67.1721 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #286: GFLOPs: 7055.5468. Time: 61.3942 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #287: GFLOPs: 7049.6844. Time: 61.4452 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #288: GFLOPs: 7085.1250. Time: 61.1379 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #289: GFLOPs: 7040.7027. Time: 61.5236 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #290: GFLOPs: 7050.5512. Time: 61.4377 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #291: GFLOPs: 6761.5905. Time: 64.0632 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #292: GFLOPs: 6667.2325. Time: 64.9699 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #293: GFLOPs: 5856.7044. Time: 73.9613 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #294: GFLOPs: 6759.0151. Time: 64.0877 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #295: GFLOPs: 6942.4220. Time: 62.3946 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #296: GFLOPs: 6707.8175. Time: 64.5768 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #297: GFLOPs: 4717.6518. Time: 91.8189 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #298: GFLOPs: 6709.0242. Time: 64.5652 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #299: GFLOPs: 6757.5491. Time: 64.1016 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #300: GFLOPs: 6743.2414. Time: 64.2376 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #301: GFLOPs: 4600.9288. Time: 94.1483 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #302: GFLOPs: 6530.6086. Time: 66.3291 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #303: GFLOPs: 6734.7230. Time: 64.3188 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #304: GFLOPs: 6318.7778. Time: 68.5527 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #305: GFLOPs: 5330.6723. Time: 81.2598 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #306: GFLOPs: 5389.7755. Time: 80.3687 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #307: GFLOPs: 5194.6995. Time: 83.3868 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #308: GFLOPs: 5206.9490. Time: 83.1906 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #309: GFLOPs: 5226.8948. Time: 82.8732 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #310: GFLOPs: 5234.2466. Time: 82.7568 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #311: GFLOPs: 5684.2102. Time: 76.2057 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #312: GFLOPs: 5684.6027. Time: 76.2005 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #313: GFLOPs: 4812.0560. Time: 90.0175 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #314: GFLOPs: 6706.1983. Time: 64.5924 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #315: GFLOPs: 6736.5856. Time: 64.3010 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #316: GFLOPs: 6727.8967. Time: 64.3841 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #317: GFLOPs: 6688.9844. Time: 64.7586 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #318: GFLOPs: 5262.2477. Time: 82.3164 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #319: GFLOPs: 1612.8983. Time: 268.5659 us. Best GFLOPs: 8120.3001
2024-04-30 07:57:13 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #320: GFLOPs: 904.7294. Time: 478.7834 us. Best GFLOPs: 8120.3001
2024-04-30 09:18:57 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 09:19:00 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 09:19:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 394 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 09:19:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 779 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 09:19:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 1168 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 09:19:21 [INFO] [evolutionary_search.cc:723] Sampled 62 candidate(s)
2024-04-30 09:19:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 59 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 09:19:59 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 47 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 09:20:19 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 41 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 09:20:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9fabea8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a0768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x9f26c68)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x9c9c6b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x51f22c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8595958)]: 45 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x9dd8248)]: 0 failure(s)
2024-04-30 09:20:45 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.6576  1.4591  1.2917  1.0577  1.0479  1.0313  1.0306  1.0283  1.0104  1.0101  1.0047  1.0044  1.0044  1.0031  1.0031  1.0008
[17 : 32]:	0.9968  0.9952  0.9947  0.9895  0.9876  0.9861  0.9809  0.9808  0.9805  0.9801  0.9797  0.9796  0.9782  0.9776  0.9773  0.9772
[33 : 48]:	0.9766  0.9763  0.9757  0.9756  0.9752  0.9750  0.9745  0.9738  0.9722  0.9719  0.9717  0.9716  0.9713  0.9712  0.9699  0.9698
[49 : 64]:	0.9686  0.9686  0.9671  0.9664  0.9664  0.9653  0.9644  0.9642  0.9637  0.9637  0.9625  0.9625  0.9625  0.9616  0.9613  0.9611
2024-04-30 09:20:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 09:20:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #321: GFLOPs: 2186.4951. Time: 198.1113 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #322: GFLOPs: 2218.9953. Time: 195.2097 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #323: GFLOPs: 3058.7710. Time: 141.6155 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #324: GFLOPs: 8068.3016. Time: 53.6878 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #325: GFLOPs: 8084.0470. Time: 53.5832 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #326: GFLOPs: 8103.9498. Time: 53.4516 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #327: GFLOPs: 8114.1209. Time: 53.3846 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #328: GFLOPs: 7917.7592. Time: 54.7086 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #329: GFLOPs: 7938.9300. Time: 54.5627 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #330: GFLOPs: 7910.5977. Time: 54.7581 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #331: GFLOPs: 7369.0523. Time: 58.7822 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #332: GFLOPs: 7968.8974. Time: 54.3575 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #333: GFLOPs: 7663.3517. Time: 56.5248 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #334: GFLOPs: 7876.0700. Time: 54.9982 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #335: GFLOPs: 7509.7492. Time: 57.6809 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #336: GFLOPs: 7686.5476. Time: 56.3542 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #337: GFLOPs: 8014.4298. Time: 54.0487 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #338: GFLOPs: 7572.9811. Time: 57.1993 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #339: GFLOPs: 7468.7242. Time: 57.9978 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #340: GFLOPs: 7733.2723. Time: 56.0137 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #341: GFLOPs: 2173.6659. Time: 199.2806 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #342: GFLOPs: 7726.1330. Time: 56.0655 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #343: GFLOPs: 7756.1372. Time: 55.8486 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #344: GFLOPs: 7533.3870. Time: 57.5000 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #345: GFLOPs: 7950.8698. Time: 54.4808 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #346: GFLOPs: 7764.5126. Time: 55.7884 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #347: GFLOPs: 7762.6024. Time: 55.8021 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #348: GFLOPs: 7995.3173. Time: 54.1779 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #349: GFLOPs: 7942.1112. Time: 54.5408 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #350: GFLOPs: 7367.2833. Time: 58.7964 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #351: GFLOPs: 2172.8419. Time: 199.3562 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #352: GFLOPs: 8019.0612. Time: 54.0175 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #353: GFLOPs: 7901.6327. Time: 54.8202 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #354: GFLOPs: 7583.0682. Time: 57.1232 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #355: GFLOPs: 7891.9622. Time: 54.8874 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #356: GFLOPs: 7709.1958. Time: 56.1887 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #357: GFLOPs: 8039.5234. Time: 53.8800 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #358: GFLOPs: 7554.7700. Time: 57.3372 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #359: GFLOPs: 7847.7249. Time: 55.1968 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #360: GFLOPs: 7495.9586. Time: 57.7871 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #361: GFLOPs: 7863.3725. Time: 55.0870 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #362: GFLOPs: 7784.1660. Time: 55.6475 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #363: GFLOPs: 6311.0145. Time: 68.6370 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #364: GFLOPs: 8097.5446. Time: 53.4939 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #365: GFLOPs: 7906.1701. Time: 54.7888 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #366: GFLOPs: 8056.7853. Time: 53.7645 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #367: GFLOPs: 7971.3363. Time: 54.3409 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #368: GFLOPs: 7713.4384. Time: 56.1578 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #369: GFLOPs: 7741.8629. Time: 55.9516 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #370: GFLOPs: 7740.9310. Time: 55.9583 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #371: GFLOPs: 8079.5985. Time: 53.6127 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #372: GFLOPs: 7936.5629. Time: 54.5790 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #373: GFLOPs: 7915.1299. Time: 54.7268 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #374: GFLOPs: 7373.2498. Time: 58.7488 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #375: GFLOPs: 7779.9197. Time: 55.6779 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #376: GFLOPs: 7879.7163. Time: 54.9727 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #377: GFLOPs: 7966.4295. Time: 54.3743 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #378: GFLOPs: 7970.3802. Time: 54.3474 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #379: GFLOPs: 8042.6681. Time: 53.8589 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #380: GFLOPs: 7877.9859. Time: 54.9848 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #381: GFLOPs: 7701.8951. Time: 56.2419 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #382: GFLOPs: 4920.3425. Time: 88.0364 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #383: GFLOPs: 122.3111. Time: 3541.5381 us. Best GFLOPs: 8120.3001
2024-04-30 09:22:05 [INFO] [task_scheduler.cc:131] [Task #0: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu] Trial #384: GFLOPs: 1182.8958. Time: 366.1940 us. Best GFLOPs: 8120.3001
