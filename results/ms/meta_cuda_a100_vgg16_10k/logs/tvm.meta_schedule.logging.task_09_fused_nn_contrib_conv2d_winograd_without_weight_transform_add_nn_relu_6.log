2024-04-30 01:34:58 [INFO] [task_scheduler.cc:160] Initializing Task #9: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6"
2024-04-30 01:34:58 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(30), T.int64(30)))
        input_tile = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)))
        B = T.alloc_buffer((T.int64(4), T.int64(4)))
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)))
        A = T.alloc_buffer((T.int64(4), T.int64(2)))
        inverse = T.alloc_buffer((T.int64(512), T.int64(196), T.int64(2), T.int64(2)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(256), T.int64(30), T.int64(30)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(256), T.int64(196), T.int64(4), T.int64(4)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps, v_p % T.int64(14) * T.int64(2) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps, v_p % T.int64(14) * T.int64(2) + v_nu]
        for i, j in T.grid(T.int64(4), T.int64(4)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(256), T.int64(196), T.int64(4), T.int64(4)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(4), T.int64(4), T.int64(512), T.int64(196), T.int64(256)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(4), T.int64(2)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(512), T.int64(196), T.int64(2), T.int64(2), T.int64(4), T.int64(4)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(512), T.int64(28), T.int64(28)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-04-30 01:34:58 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-04-30 01:34:58 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(512), T.int64(196), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(392), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(1024))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(1024) // T.int64(256))
                                    v2 = T.axis.spatial(T.int64(256), ci_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(256) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(98) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(262144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(65536))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(65536) // T.int64(16384))
                                    v2 = T.axis.spatial(T.int64(256), ci_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(16384) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused // T.int64(98) * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(16), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(4) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused // T.int64(98) * T.int64(128) + co_3 * T.int64(16) + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(98) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(256), ci_0 * T.int64(128) + ci_1 * T.int64(64) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(128), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused // T.int64(98) * T.int64(128) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(98) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 4, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 1, 8, 16])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[98, 1, 2, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[2, 2, 64])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-04-30 01:34:58 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(512), T.int64(196), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(392), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(1024))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(1024) // T.int64(256))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(256) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(98) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(262144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(65536))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(65536) // T.int64(16384))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(16384) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused // T.int64(98) * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(16), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(4) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused // T.int64(98) * T.int64(128) + co_3 * T.int64(16) + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(98) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(256), ci_0_fused * T.int64(128) + ci_1 * T.int64(64) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(128), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused // T.int64(98) * T.int64(128) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(98) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 4, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 1, 8, 16])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[98, 1, 2, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[2, 2, 64])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-30 01:34:58 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(512), T.int64(196), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(392), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(1024))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(1024) // T.int64(256))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(256) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(98) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(262144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(65536))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(65536) // T.int64(16384))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(16384) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused // T.int64(98) * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(64), T.int64(1), T.int64(1), T.int64(16), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(4) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused // T.int64(98) * T.int64(128) + co_3 * T.int64(16) + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(98) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(256), ci_0_fused * T.int64(128) + ci_1 * T.int64(64) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(128), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(4) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused // T.int64(98) * T.int64(128) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(98) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(3136), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 4, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 1, 8, 16])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[98, 1, 2, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[2, 2, 64])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-04-30 01:59:16 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 01:59:16 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 01:59:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 503 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 01:59:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 1003 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 01:59:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 1505 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 01:59:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 2008 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 01:59:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 2511 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 01:59:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 3010 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 01:59:57 [INFO] [evolutionary_search.cc:723] Sampled 62 candidate(s)
2024-04-30 02:00:11 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 135 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 02:00:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 02:00:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 100 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 02:00:50 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 02:00:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9985  0.9984  0.9977  0.9974  0.9970  0.9960  0.9959  0.9957  0.9949  0.9947  0.9945  0.9936  0.9914  0.9913  0.9905
[17 : 32]:	0.9900  0.9897  0.9895  0.9894  0.9891  0.9886  0.9885  0.9876  0.9874  0.9874  0.9874  0.9869  0.9864  0.9859  0.9856  0.9854
[33 : 48]:	0.9853  0.9851  0.9851  0.9842  0.9842  0.9840  0.9833  0.9818  0.9816  0.9815  0.9801  0.9793  0.9790  0.9772  0.9768  0.9744
[49 : 64]:	0.9743  0.9737  0.9736  0.9732  0.9730  0.9726  0.9724  0.9723  0.9714  0.9713  0.9706  0.9704  0.9701  0.9698  0.9694  0.9690
2024-04-30 02:00:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 02:00:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #1: GFLOPs: 2910.8057. Time: 302.5586 us. Best GFLOPs: 2910.8057
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #2: GFLOPs: 190.0353. Time: 4634.3446 us. Best GFLOPs: 2910.8057
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #3: GFLOPs: 3740.5517. Time: 235.4437 us. Best GFLOPs: 3740.5517
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #4: GFLOPs: 1610.7615. Time: 546.7533 us. Best GFLOPs: 3740.5517
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #5: GFLOPs: 11.5921. Time: 75972.9510 us. Best GFLOPs: 3740.5517
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #6: GFLOPs: 47.7561. Time: 18441.3872 us. Best GFLOPs: 3740.5517
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #7: GFLOPs: 263.1350. Time: 3346.9098 us. Best GFLOPs: 3740.5517
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #8: GFLOPs: 467.4383. Time: 1884.0757 us. Best GFLOPs: 3740.5517
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #9: GFLOPs: 6718.6600. Time: 131.0811 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #10: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(512), T.int64(196), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(7)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_3_init * T.int64(4) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(16) * T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(256) + eps_1_nu_1_co_1_p_1_fused % T.int64(16) // T.int64(2) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(49) + p_3_init * T.int64(7) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(256)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(13)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(392))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(392) // T.int64(98))
                                        v2 = T.axis.spatial(T.int64(256), ci_0)
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(98))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1568))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1024))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1024) // T.int64(256))
                                        v2 = T.axis.spatial(T.int64(256), ci_0)
                                        v3 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(256) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(7)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_3 * T.int64(4) + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(16) * T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(256) + eps_1_nu_1_co_1_p_1_fused % T.int64(16) // T.int64(2) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(49) + p_3 * T.int64(7) + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(2), T.int64(1), T.int64(49)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(16) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(256) + eps_1_nu_1_co_1_p_1_fused % T.int64(16) // T.int64(2) * T.int64(32) + eps_2_nu_2_co_2_p_2_fused + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(49) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 4])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 1, 2, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 8, 32, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 2, 1, 7, 7])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[256, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #11: GFLOPs: 282.7104. Time: 3115.1632 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #12: GFLOPs: 742.0227. Time: 1186.8763 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #13: GFLOPs: 35.1790. Time: 25034.4963 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #14: GFLOPs: 3114.2040. Time: 282.7975 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #15: GFLOPs: 139.3411. Time: 6320.3840 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #16: GFLOPs: 40.1430. Time: 21938.7908 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #17: GFLOPs: 264.3421. Time: 3331.6266 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #18: GFLOPs: 1984.9559. Time: 443.6820 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #19: GFLOPs: 3032.6828. Time: 290.3994 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #20: GFLOPs: 141.3363. Time: 6231.1603 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #21: GFLOPs: 5137.9840. Time: 171.4075 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #22: GFLOPs: 456.8555. Time: 1927.7194 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #23: GFLOPs: 267.7609. Time: 3289.0881 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #24: GFLOPs: 50.7423. Time: 17356.1172 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #25: GFLOPs: 464.0011. Time: 1898.0323 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #26: GFLOPs: 642.1551. Time: 1371.4586 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #27: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(512), T.int64(196), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(16), T.int64(2), T.int64(2), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_3_init * T.int64(2) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), nu_3_init * T.int64(4) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(49) * T.int64(16) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(49) * T.int64(2) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(256)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(392))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(392) // T.int64(98))
                                        v2 = T.axis.spatial(T.int64(256), ci_0)
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(98))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(512))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(512) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(256), ci_0)
                                        v3 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2048))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(16), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_3 * T.int64(2) + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), nu_3 * T.int64(4) + nu_4)
                                v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(49) * T.int64(16) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(49) * T.int64(2) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(16), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(128) + eps_1_nu_1_co_1_p_1_fused * T.int64(32) + eps_2_nu_2_co_2_p_2_fused // T.int64(49) * T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(49) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 4])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 4, 2, 16, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 49, 2, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[256, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 98, 2], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 98, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b151)
l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l188, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l188, ann_key="pragma_unroll_explicit", ann_val=1)
l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b153)
l209, l210, l211, l212, l213, l214, l215, l216 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l209, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l209, ann_key="pragma_unroll_explicit", ann_val=1)
l217, l218, l219, l220 = sch.get_loops(block=b155)
b221 = sch.get_block(name="data_pack", func_name="main")
l222, l223, l224, l225, l226, l227 = sch.get_loops(block=b221)
b228 = sch.decompose_reduction(block=b221, loop=l226)
b229 = sch.get_block(name="bgemm", func_name="main")
l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243 = sch.get_loops(block=b229)
b244 = sch.decompose_reduction(block=b229, loop=l233)
b245 = sch.get_block(name="inverse", func_name="main")
l246, l247, l248, l249, l250, l251, l252, l253 = sch.get_loops(block=b245)
b254 = sch.decompose_reduction(block=b245, loop=l252)
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #28: GFLOPs: 66.0027. Time: 13343.2321 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #29: GFLOPs: 700.9570. Time: 1256.4096 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #30: GFLOPs: 754.5512. Time: 1167.1695 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #31: GFLOPs: 35.3725. Time: 24897.5356 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #32: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(512), T.int64(196), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(7) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(16) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3_init * T.int64(7) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(128), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(25)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(392))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196) // T.int64(98))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(98))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(784))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(512))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(512) // T.int64(256))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(256) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(7)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(7) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(16) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3 * T.int64(7) + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0_fused * T.int64(2) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(16), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(7) + ax1)
                            v2 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 8, 4, 4])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 7, 2, 1, 7])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[128, 1, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144 = sch.split(loop=l142, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b150)
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l185, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l185, ann_key="pragma_unroll_explicit", ann_val=1)
l199, l200, l201, l202, l203, l204, l205 = sch.get_loops(block=b152)
l206, l207, l208, l209, l210, l211, l212, l213 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l206, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l206, ann_key="pragma_unroll_explicit", ann_val=1)
l214, l215, l216, l217 = sch.get_loops(block=b154)
b218 = sch.get_block(name="data_pack", func_name="main")
l219, l220, l221, l222, l223, l224 = sch.get_loops(block=b218)
b225 = sch.decompose_reduction(block=b218, loop=l223)
b226 = sch.get_block(name="bgemm", func_name="main")
l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240 = sch.get_loops(block=b226)
b241 = sch.decompose_reduction(block=b226, loop=l230)
b242 = sch.get_block(name="inverse", func_name="main")
l243, l244, l245, l246, l247, l248, l249, l250 = sch.get_loops(block=b242)
b251 = sch.decompose_reduction(block=b242, loop=l249)
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #33: GFLOPs: 82.5279. Time: 10671.4111 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #34: GFLOPs: 110.2560. Time: 7987.6726 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #35: GFLOPs: 1143.6344. Time: 770.0793 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #36: GFLOPs: 3942.7914. Time: 223.3669 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #37: GFLOPs: 3358.0884. Time: 262.2591 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #38: GFLOPs: 1740.2644. Time: 506.0663 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #39: GFLOPs: 4824.7364. Time: 182.5362 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #40: GFLOPs: 259.6659. Time: 3391.6244 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #41: GFLOPs: 2942.9307. Time: 299.2558 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #42: GFLOPs: 33.8059. Time: 26051.3285 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #43: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(512), T.int64(196), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(7)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(32) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(4) * T.int64(16) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(7) + p_3_init * T.int64(7) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(256), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(25)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(784))
                                    v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(784) // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1568))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(512))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(512) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(256), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(7)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(32) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(4) * T.int64(16) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(7) + p_3 * T.int64(7) + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(16), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(32) + ax0)
                            v1 = T.axis.spatial(T.int64(4), ax1)
                            v2 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(4) * T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 8, 4, 4])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 7, 4, 1, 7])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[256, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 64, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #44: GFLOPs: 290.8237. Time: 3028.2578 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #45: GFLOPs: 127.4939. Time: 6907.6991 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #46: GFLOPs: 6.3435. Time: 138832.5500 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #47: GFLOPs: 3465.7290. Time: 254.1137 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #48: GFLOPs: 32.4262. Time: 27159.8070 us. Best GFLOPs: 6718.6600
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #49: GFLOPs: 6723.2474. Time: 130.9916 us. Best GFLOPs: 6723.2474
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #50: GFLOPs: 162.6350. Time: 5415.1274 us. Best GFLOPs: 6723.2474
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #51: GFLOPs: 1115.3373. Time: 789.6169 us. Best GFLOPs: 6723.2474
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #52: GFLOPs: 283.1928. Time: 3109.8570 us. Best GFLOPs: 6723.2474
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #53: GFLOPs: 63.7096. Time: 13823.4881 us. Best GFLOPs: 6723.2474
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #54: GFLOPs: 68.8679. Time: 12788.0964 us. Best GFLOPs: 6723.2474
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #55: GFLOPs: 4709.9268. Time: 186.9857 us. Best GFLOPs: 6723.2474
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #56: GFLOPs: 30.6727. Time: 28712.4480 us. Best GFLOPs: 6723.2474
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #57: GFLOPs: 1565.3065. Time: 562.6305 us. Best GFLOPs: 6723.2474
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #58: GFLOPs: 22.4199. Time: 39281.6643 us. Best GFLOPs: 6723.2474
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #59: GFLOPs: 100.0153. Time: 8805.5464 us. Best GFLOPs: 6723.2474
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #60: GFLOPs: 435.2954. Time: 2023.1987 us. Best GFLOPs: 6723.2474
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #61: GFLOPs: 4902.8235. Time: 179.6290 us. Best GFLOPs: 6723.2474
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #62: GFLOPs: 639.0178. Time: 1378.1918 us. Best GFLOPs: 6723.2474
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #63: GFLOPs: 149.9241. Time: 5874.2328 us. Best GFLOPs: 6723.2474
2024-04-30 02:17:19 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #64: GFLOPs: 3618.2561. Time: 243.4016 us. Best GFLOPs: 6723.2474
2024-04-30 02:56:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 02:56:21 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-04-30 02:56:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 446 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 02:56:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 885 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 02:56:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 1329 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 02:56:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 1775 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 02:56:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 2220 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 02:56:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 2660 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 02:56:59 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-04-30 02:57:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 02:57:33 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 116 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 02:57:51 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 02:58:08 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 76 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 02:58:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.2835  1.2779  1.2684  1.2665  1.1873  1.1584  1.1584  1.1570  1.1458  1.1113  1.0850  1.0816  1.0772  1.0566  1.0560  1.0506
[17 : 32]:	1.0424  1.0410  1.0410  1.0410  1.0410  1.0367  1.0336  1.0316  1.0316  1.0316  1.0305  1.0302  1.0298  1.0278  1.0144  1.0136
[33 : 48]:	1.0122  1.0122  1.0087  1.0035  1.0018  1.0014  1.0002  0.9970  0.9955  0.9943  0.9934  0.9933  0.9914  0.9912  0.9893  0.9858
[49 : 64]:	0.9842  0.9842  0.9831  0.9831  0.9825  0.9825  0.9805  0.9794  0.9763  0.9752  0.9746  0.9719  0.9713  0.9649  0.9621  0.9611
2024-04-30 02:58:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 02:58:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #65: GFLOPs: 436.2139. Time: 2018.9389 us. Best GFLOPs: 6723.2474
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #66: GFLOPs: 2520.0348. Time: 349.4750 us. Best GFLOPs: 6723.2474
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #67: GFLOPs: 477.1730. Time: 1845.6390 us. Best GFLOPs: 6723.2474
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #68: GFLOPs: 747.9351. Time: 1177.4941 us. Best GFLOPs: 6723.2474
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #69: GFLOPs: 3979.6047. Time: 221.3007 us. Best GFLOPs: 6723.2474
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #70: GFLOPs: 46.2698. Time: 19033.7702 us. Best GFLOPs: 6723.2474
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #71: GFLOPs: 53.0604. Time: 16597.8699 us. Best GFLOPs: 6723.2474
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #72: GFLOPs: 3940.7935. Time: 223.4802 us. Best GFLOPs: 6723.2474
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #73: GFLOPs: 558.8016. Time: 1576.0320 us. Best GFLOPs: 6723.2474
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #74: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  2: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  1: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(512), T.int64(196), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x"):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(128), thread="blockIdx.x"):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(8) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused // T.int64(49) * T.int64(64) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(49) * T.int64(2) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(256)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(8))
                                    v2 = T.axis.spatial(T.int64(256), ci_0)
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1)
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(8))
                                        v2 = T.axis.spatial(T.int64(256), ci_0)
                                        v3 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(128))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(8) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused // T.int64(49) * T.int64(64) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(49) * T.int64(2) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(64), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused // T.int64(49) * T.int64(64) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(49) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x"):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 2, 32, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 49, 2, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[256, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136 = sch.split(loop=l134, factors=[None, 98], preserve_unit_iters=True)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b108)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 98, 4], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #75: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(512), T.int64(196), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(14)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused // T.int64(7) * T.int64(16) + co_3_init * T.int64(8) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + p_3_init * T.int64(14) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(28)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1568))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1568) // T.int64(784))
                                        v2 = T.axis.spatial(T.int64(256), ci_0 * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(784) // T.int64(98))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(98))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(74)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2048))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2048) // T.int64(1024))
                                    v2 = T.axis.spatial(T.int64(256), ci_0 * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1024) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(128))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(4096))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(8), T.int64(14)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused // T.int64(7) * T.int64(16) + co_3 * T.int64(8) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + p_3 * T.int64(14) + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0 * T.int64(8) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(16), T.int64(14)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused // T.int64(7) * T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 8, 2, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 14])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[32, 4, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144 = sch.split(loop=l142, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #76: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(512), T.int64(196), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(14)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused // T.int64(7) * T.int64(16) + co_3_init * T.int64(8) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + p_3_init * T.int64(14) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(28)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1568))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1568) // T.int64(784))
                                        v2 = T.axis.spatial(T.int64(256), ci_0 * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(784) // T.int64(98))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(98))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(74)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2048))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2048) // T.int64(1024))
                                    v2 = T.axis.spatial(T.int64(256), ci_0 * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1024) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(128))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(4096))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(8), T.int64(14)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused // T.int64(7) * T.int64(16) + co_3 * T.int64(8) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + p_3 * T.int64(14) + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0 * T.int64(8) + ci_1 * T.int64(8) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(16), T.int64(14)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused // T.int64(7) * T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 8, 2, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 14])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[32, 1, 8])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144 = sch.split(loop=l142, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #77: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/mnt/home/gverma/ceph/opt/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  5: _ZN3tvm7runtime13PackedFun
  4: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  3: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  2: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  0: _ZN3tvm7runtime6deta
  File "/mnt/home/gverma/ceph/opt/tvm/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(512), T.int64(196), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(14)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused // T.int64(7) * T.int64(16) + co_3_init * T.int64(8) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + p_3_init * T.int64(14) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(14)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1568))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1568) // T.int64(784))
                                        v2 = T.axis.spatial(T.int64(256), ci_0 * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(784) // T.int64(98))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(98))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(74)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2048))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2048) // T.int64(1024))
                                    v2 = T.axis.spatial(T.int64(256), ci_0 * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1024) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(128))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(4096))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(14)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused // T.int64(7) * T.int64(16) + co_3 * T.int64(8) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + p_3 * T.int64(14) + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0 * T.int64(8) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(16), T.int64(14)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused // T.int64(7) * T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 8, 2, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 14])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[32, 8, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144 = sch.split(loop=l142, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #78: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(256), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(512), T.int64(196), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(512), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(256), T.int64(512)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(256), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(14)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused // T.int64(7) * T.int64(16) + co_3_init * T.int64(8) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + p_3_init * T.int64(14) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(56)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1568))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1568) // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(256), ci_0 * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(784) // T.int64(98))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(98))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(74)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2048))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2048) // T.int64(1024))
                                    v2 = T.axis.spatial(T.int64(256), ci_0 * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1024) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(128))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(4096))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(8), T.int64(14)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused // T.int64(7) * T.int64(16) + co_3 * T.int64(8) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + p_3 * T.int64(14) + p_4)
                                v_ci = T.axis.reduce(T.int64(256), ci_0 * T.int64(8) + ci_1 * T.int64(8) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(16), T.int64(14)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(16) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(8) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(512), eps_0_nu_0_co_0_p_0_fused % T.int64(8) // T.int64(2) * T.int64(128) + eps_2_nu_2_co_2_p_2_fused // T.int64(7) * T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(98) + eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(14) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(512), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 8, 2, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 14])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[32, 1, 8])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136 = sch.split(loop=l134, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b108)
l142, l143 = sch.split(loop=l141, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
sch.annotate(block_or_loop=l160, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l160, ann_key="pragma_unroll_explicit", ann_val=1)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177 = sch.get_loops(block=b148)
l178, l179, l180, l181, l182, l183 = sch.get_loops(block=b149)
l184, l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197 = sch.get_loops(block=b150)
sch.annotate(block_or_loop=l184, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l184, ann_key="pragma_unroll_explicit", ann_val=1)
l198, l199, l200, l201, l202, l203, l204 = sch.get_loops(block=b151)
l205, l206, l207, l208, l209, l210, l211, l212 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l205, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l205, ann_key="pragma_unroll_explicit", ann_val=1)
l213, l214, l215, l216 = sch.get_loops(block=b153)
b217 = sch.get_block(name="data_pack", func_name="main")
l218, l219, l220, l221, l222, l223 = sch.get_loops(block=b217)
b224 = sch.decompose_reduction(block=b217, loop=l222)
b225 = sch.get_block(name="bgemm", func_name="main")
l226, l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239 = sch.get_loops(block=b225)
b240 = sch.decompose_reduction(block=b225, loop=l229)
b241 = sch.get_block(name="inverse", func_name="main")
l242, l243, l244, l245, l246, l247, l248, l249 = sch.get_loops(block=b241)
b250 = sch.decompose_reduction(block=b241, loop=l248)
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #79: GFLOPs: 53.0116. Time: 16613.1490 us. Best GFLOPs: 6723.2474
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #80: GFLOPs: 8969.0561. Time: 98.1920 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #81: GFLOPs: 523.4955. Time: 1682.3242 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #82: GFLOPs: 382.6339. Time: 2301.6494 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #83: GFLOPs: 235.3144. Time: 3742.6063 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #84: GFLOPs: 372.7505. Time: 2362.6776 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #85: GFLOPs: 513.2901. Time: 1715.7726 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #86: GFLOPs: 388.4316. Time: 2267.2953 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #87: GFLOPs: 3738.8385. Time: 235.5515 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #88: GFLOPs: 535.7624. Time: 1643.8053 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #89: GFLOPs: 369.2174. Time: 2385.2860 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #90: GFLOPs: 385.1575. Time: 2286.5687 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #91: GFLOPs: 131.0183. Time: 6721.8775 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #92: GFLOPs: 162.5541. Time: 5417.8222 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #93: GFLOPs: 365.8852. Time: 2407.0095 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #94: GFLOPs: 390.3907. Time: 2255.9175 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #95: GFLOPs: 1090.2376. Time: 807.7956 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #96: GFLOPs: 507.8731. Time: 1734.0734 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #97: GFLOPs: 350.7465. Time: 2510.8991 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #98: GFLOPs: 500.1606. Time: 1760.8129 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #99: GFLOPs: 364.0415. Time: 2419.2000 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #100: GFLOPs: 5842.9592. Time: 150.7266 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #101: GFLOPs: 368.6710. Time: 2388.8214 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #102: GFLOPs: 6762.9988. Time: 130.2217 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #103: GFLOPs: 7163.8841. Time: 122.9346 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #104: GFLOPs: 6587.6603. Time: 133.6877 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #105: GFLOPs: 383.9150. Time: 2293.9694 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #106: GFLOPs: 6794.6180. Time: 129.6157 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #107: GFLOPs: 1084.0552. Time: 812.4025 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #108: GFLOPs: 6804.2177. Time: 129.4328 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #109: GFLOPs: 6819.0979. Time: 129.1504 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #110: GFLOPs: 6707.0840. Time: 131.3073 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #111: GFLOPs: 4905.5175. Time: 179.5303 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #112: GFLOPs: 6441.8248. Time: 136.7142 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #113: GFLOPs: 6811.6481. Time: 129.2916 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #114: GFLOPs: 6819.6956. Time: 129.1391 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #115: GFLOPs: 6777.1233. Time: 129.9503 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #116: GFLOPs: 6763.6514. Time: 130.2091 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #117: GFLOPs: 7259.8526. Time: 121.3095 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #118: GFLOPs: 5135.0169. Time: 171.5066 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #119: GFLOPs: 7157.6009. Time: 123.0425 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #120: GFLOPs: 7086.9331. Time: 124.2694 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #121: GFLOPs: 5213.7685. Time: 168.9160 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #122: GFLOPs: 6820.0080. Time: 129.1332 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #123: GFLOPs: 6455.1575. Time: 136.4319 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #124: GFLOPs: 6763.8543. Time: 130.2052 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #125: GFLOPs: 7196.5775. Time: 122.3761 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #126: GFLOPs: 65.6719. Time: 13410.4318 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #127: GFLOPs: 5157.0106. Time: 170.7751 us. Best GFLOPs: 8969.0561
2024-04-30 02:59:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #128: GFLOPs: 4996.4359. Time: 176.2635 us. Best GFLOPs: 8969.0561
2024-04-30 04:00:00 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 04:00:02 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 04:00:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 404 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:00:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 809 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:00:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 1209 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:00:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 1611 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:00:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 2010 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:00:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 2419 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:00:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 2822 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:00:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 3223 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:00:47 [INFO] [evolutionary_search.cc:723] Sampled 57 candidate(s)
2024-04-30 04:01:02 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:01:19 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:01:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:01:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:02:00 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0113  1.0094  1.0079  1.0029  1.0029  1.0027  0.9858  0.9749  0.9642  0.9630  0.9404  0.9267  0.9263  0.9162  0.9151  0.9006
[17 : 32]:	0.9005  0.8998  0.8994  0.8947  0.8921  0.8911  0.8898  0.8898  0.8889  0.8829  0.8784  0.8754  0.8754  0.8739  0.8712  0.8707
[33 : 48]:	0.8703  0.8700  0.8689  0.8688  0.8677  0.8658  0.8626  0.8620  0.8571  0.8521  0.8513  0.8513  0.8509  0.8509  0.8446  0.8430
[49 : 64]:	0.8416  0.8382  0.8374  0.8338  0.8333  0.8325  0.8321  0.8321  0.8315  0.8314  0.8307  0.8307  0.8305  0.8303  0.8302  0.8297
2024-04-30 04:02:00 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 04:02:00 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #129: GFLOPs: 5972.0479. Time: 147.4685 us. Best GFLOPs: 8969.0561
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #130: GFLOPs: 6019.4203. Time: 146.3080 us. Best GFLOPs: 8969.0561
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #131: GFLOPs: 35.0254. Time: 25144.3195 us. Best GFLOPs: 8969.0561
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #132: GFLOPs: 6115.4026. Time: 144.0116 us. Best GFLOPs: 8969.0561
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #133: GFLOPs: 5959.2357. Time: 147.7856 us. Best GFLOPs: 8969.0561
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #134: GFLOPs: 5866.0924. Time: 150.1322 us. Best GFLOPs: 8969.0561
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #135: GFLOPs: 5617.6886. Time: 156.7707 us. Best GFLOPs: 8969.0561
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #136: GFLOPs: 8878.7199. Time: 99.1910 us. Best GFLOPs: 8969.0561
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #137: GFLOPs: 9071.5687. Time: 97.0823 us. Best GFLOPs: 9071.5687
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #138: GFLOPs: 9331.4814. Time: 94.3783 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #139: GFLOPs: 99.2783. Time: 8870.9118 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #140: GFLOPs: 98.9661. Time: 8898.9016 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #141: GFLOPs: 8676.7772. Time: 101.4996 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #142: GFLOPs: 7681.6724. Time: 114.6481 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #143: GFLOPs: 7837.9045. Time: 112.3628 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #144: GFLOPs: 120.4947. Time: 7308.9463 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #145: GFLOPs: 104.4667. Time: 8430.3359 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #146: GFLOPs: 7467.7676. Time: 117.9321 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #147: GFLOPs: 117.6536. Time: 7485.4398 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #148: GFLOPs: 8322.9207. Time: 105.8149 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #149: GFLOPs: 117.0406. Time: 7524.6446 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #150: GFLOPs: 8681.2138. Time: 101.4477 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #151: GFLOPs: 8351.4590. Time: 105.4533 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #152: GFLOPs: 8352.3876. Time: 105.4416 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #153: GFLOPs: 6654.7176. Time: 132.3406 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #154: GFLOPs: 5878.5489. Time: 149.8140 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #155: GFLOPs: 7146.6057. Time: 123.2318 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #156: GFLOPs: 6067.6969. Time: 145.1439 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #157: GFLOPs: 8241.1754. Time: 106.8645 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #158: GFLOPs: 6433.2265. Time: 136.8970 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #159: GFLOPs: 7374.1512. Time: 119.4292 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #160: GFLOPs: 7596.5580. Time: 115.9327 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #161: GFLOPs: 7841.5188. Time: 112.3110 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #162: GFLOPs: 7577.3464. Time: 116.2266 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #163: GFLOPs: 6563.5626. Time: 134.1785 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #164: GFLOPs: 7883.6016. Time: 111.7115 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #165: GFLOPs: 6681.0329. Time: 131.8193 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #166: GFLOPs: 6176.5968. Time: 142.5849 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #167: GFLOPs: 6287.4479. Time: 140.0710 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #168: GFLOPs: 191.4041. Time: 4601.2042 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #169: GFLOPs: 7532.4918. Time: 116.9187 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #170: GFLOPs: 7446.1222. Time: 118.2749 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #171: GFLOPs: 4094.6076. Time: 215.0851 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #172: GFLOPs: 4094.0111. Time: 215.1165 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #173: GFLOPs: 6149.9795. Time: 143.2020 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #174: GFLOPs: 2741.7426. Time: 321.2151 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #175: GFLOPs: 7417.0996. Time: 118.7377 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #176: GFLOPs: 5155.1069. Time: 170.8382 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #177: GFLOPs: 8270.9339. Time: 106.4800 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #178: GFLOPs: 5872.5050. Time: 149.9682 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #179: GFLOPs: 7460.0759. Time: 118.0536 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #180: GFLOPs: 7443.8061. Time: 118.3117 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #181: GFLOPs: 6605.9080. Time: 133.3184 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #182: GFLOPs: 6284.5337. Time: 140.1360 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #183: GFLOPs: 7134.5914. Time: 123.4393 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #184: GFLOPs: 7125.0349. Time: 123.6049 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #185: GFLOPs: 7043.1595. Time: 125.0418 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #186: GFLOPs: 4183.9878. Time: 210.4904 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #187: GFLOPs: 7474.0062. Time: 117.8336 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #188: GFLOPs: 7473.9928. Time: 117.8338 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #189: GFLOPs: 5849.8499. Time: 150.5490 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #190: GFLOPs: 2363.8312. Time: 372.5685 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #191: GFLOPs: 6512.9593. Time: 135.2210 us. Best GFLOPs: 9331.4814
2024-04-30 04:03:16 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #192: GFLOPs: 3999.1518. Time: 220.2190 us. Best GFLOPs: 9331.4814
2024-04-30 04:52:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 04:52:40 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 04:52:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:52:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 799 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:52:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 1199 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:53:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 1603 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:53:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 2003 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:53:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 2405 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:53:13 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-04-30 04:53:28 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:53:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 75 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:54:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:54:18 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 68 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 04:54:23 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9967  0.9963  0.9699  0.9693  0.9692  0.9672  0.9661  0.9657  0.9649  0.9641  0.9629  0.9625  0.9614  0.9614  0.9610  0.9602
[17 : 32]:	0.9543  0.9503  0.9501  0.9485  0.9459  0.9455  0.9420  0.9400  0.9380  0.9380  0.9377  0.9376  0.9367  0.9359  0.9355  0.9342
[33 : 48]:	0.9310  0.9289  0.9274  0.9274  0.9259  0.9252  0.9238  0.9230  0.9222  0.9222  0.9222  0.9219  0.9202  0.9183  0.9174  0.9166
[49 : 64]:	0.9158  0.9135  0.9099  0.9090  0.9080  0.9066  0.9060  0.9058  0.9057  0.9053  0.9018  0.9015  0.9012  0.8989  0.8988  0.8983
2024-04-30 04:54:23 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 04:54:23 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #193: GFLOPs: 35.3244. Time: 24931.4982 us. Best GFLOPs: 9331.4814
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #194: GFLOPs: 35.5492. Time: 24773.8372 us. Best GFLOPs: 9331.4814
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #195: GFLOPs: 9307.4166. Time: 94.6223 us. Best GFLOPs: 9331.4814
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #196: GFLOPs: 9178.8380. Time: 95.9478 us. Best GFLOPs: 9331.4814
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #197: GFLOPs: 9306.5054. Time: 94.6316 us. Best GFLOPs: 9331.4814
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #198: GFLOPs: 9136.8289. Time: 96.3889 us. Best GFLOPs: 9331.4814
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #199: GFLOPs: 8949.3381. Time: 98.4083 us. Best GFLOPs: 9331.4814
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #200: GFLOPs: 9457.6919. Time: 93.1188 us. Best GFLOPs: 9457.6919
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #201: GFLOPs: 9429.3462. Time: 93.3988 us. Best GFLOPs: 9457.6919
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #202: GFLOPs: 9516.8288. Time: 92.5402 us. Best GFLOPs: 9516.8288
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #203: GFLOPs: 9015.0753. Time: 97.6907 us. Best GFLOPs: 9516.8288
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #204: GFLOPs: 9165.6792. Time: 96.0855 us. Best GFLOPs: 9516.8288
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #205: GFLOPs: 9178.0083. Time: 95.9565 us. Best GFLOPs: 9516.8288
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #206: GFLOPs: 9175.1181. Time: 95.9867 us. Best GFLOPs: 9516.8288
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #207: GFLOPs: 9499.0362. Time: 92.7135 us. Best GFLOPs: 9516.8288
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #208: GFLOPs: 7837.3060. Time: 112.3714 us. Best GFLOPs: 9516.8288
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #209: GFLOPs: 9151.0560. Time: 96.2391 us. Best GFLOPs: 9516.8288
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #210: GFLOPs: 9934.6542. Time: 88.6482 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #211: GFLOPs: 9289.9819. Time: 94.7999 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #212: GFLOPs: 9126.6819. Time: 96.4961 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #213: GFLOPs: 9242.5462. Time: 95.2864 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #214: GFLOPs: 7591.0727. Time: 116.0164 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #215: GFLOPs: 8824.7558. Time: 99.7976 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #216: GFLOPs: 9012.4950. Time: 97.7187 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #217: GFLOPs: 7886.5956. Time: 111.6691 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #218: GFLOPs: 7936.8994. Time: 110.9614 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #219: GFLOPs: 9461.3724. Time: 93.0826 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #220: GFLOPs: 8016.4553. Time: 109.8602 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #221: GFLOPs: 7895.4976. Time: 111.5432 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #222: GFLOPs: 8819.6954. Time: 99.8548 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #223: GFLOPs: 9054.6411. Time: 97.2638 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #224: GFLOPs: 7973.1055. Time: 110.4575 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #225: GFLOPs: 7239.5346. Time: 121.6500 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #226: GFLOPs: 7859.8473. Time: 112.0491 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #227: GFLOPs: 3670.6119. Time: 239.9298 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #228: GFLOPs: 3662.7991. Time: 240.4416 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #229: GFLOPs: 8005.0754. Time: 110.0163 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #230: GFLOPs: 7833.8397. Time: 112.4211 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #231: GFLOPs: 8959.9663. Time: 98.2916 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #232: GFLOPs: 9157.8262. Time: 96.1679 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #233: GFLOPs: 9030.6195. Time: 97.5226 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #234: GFLOPs: 7752.3339. Time: 113.6031 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #235: GFLOPs: 7750.9580. Time: 113.6233 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #236: GFLOPs: 9178.3746. Time: 95.9526 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #237: GFLOPs: 9215.8648. Time: 95.5623 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #238: GFLOPs: 8942.2595. Time: 98.4862 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #239: GFLOPs: 9046.3882. Time: 97.3526 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #240: GFLOPs: 8840.0230. Time: 99.6252 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #241: GFLOPs: 7691.3398. Time: 114.5040 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #242: GFLOPs: 7142.8115. Time: 123.2973 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #243: GFLOPs: 8217.4003. Time: 107.1737 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #244: GFLOPs: 7690.5319. Time: 114.5160 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #245: GFLOPs: 9053.2508. Time: 97.2788 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #246: GFLOPs: 8093.4658. Time: 108.8148 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #247: GFLOPs: 7909.0774. Time: 111.3517 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #248: GFLOPs: 9697.2219. Time: 90.8187 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #249: GFLOPs: 8182.3874. Time: 107.6323 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #250: GFLOPs: 7842.8185. Time: 112.2924 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #251: GFLOPs: 4686.0014. Time: 187.9404 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #252: GFLOPs: 8117.6397. Time: 108.4908 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #253: GFLOPs: 7630.2664. Time: 115.4205 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #254: GFLOPs: 4476.5913. Time: 196.7321 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #255: GFLOPs: 4531.9836. Time: 194.3275 us. Best GFLOPs: 9934.6542
2024-04-30 04:55:35 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #256: GFLOPs: 225.0709. Time: 3912.9404 us. Best GFLOPs: 9934.6542
2024-04-30 05:23:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 05:23:13 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 05:23:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 05:23:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 804 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 05:23:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 1207 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 05:23:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 1611 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 05:23:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 2015 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 05:23:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 2416 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 05:23:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 2817 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 05:23:53 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-30 05:24:07 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 67 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 05:24:23 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 62 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 05:24:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 53 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 05:24:56 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 62 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 05:25:01 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1206  1.1030  1.1012  1.0967  1.0826  1.0826  1.0807  1.0778  1.0591  0.9987  0.9539  0.9452  0.9441  0.9413  0.9412  0.9410
[17 : 32]:	0.9362  0.9355  0.9351  0.9349  0.9332  0.9315  0.9309  0.9307  0.9304  0.9304  0.9302  0.9302  0.9282  0.9278  0.9277  0.9276
[33 : 48]:	0.9267  0.9245  0.9235  0.9234  0.9232  0.9229  0.9216  0.9215  0.9214  0.9212  0.9212  0.9200  0.9195  0.9195  0.9191  0.9191
[49 : 64]:	0.9190  0.9190  0.9189  0.9184  0.9181  0.9177  0.9161  0.9151  0.9151  0.9140  0.9053  0.9047  0.9035  0.9031  0.9003  0.9002
2024-04-30 05:25:01 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 05:25:01 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #257: GFLOPs: 102.1856. Time: 8618.5258 us. Best GFLOPs: 9934.6542
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #258: GFLOPs: 53.9428. Time: 16326.3636 us. Best GFLOPs: 9934.6542
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #259: GFLOPs: 56.0610. Time: 15709.4770 us. Best GFLOPs: 9934.6542
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #260: GFLOPs: 60.5162. Time: 14552.9414 us. Best GFLOPs: 9934.6542
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #261: GFLOPs: 49.2907. Time: 17867.2637 us. Best GFLOPs: 9934.6542
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #262: GFLOPs: 59.3177. Time: 14846.9761 us. Best GFLOPs: 9934.6542
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #263: GFLOPs: 71.9772. Time: 12235.6618 us. Best GFLOPs: 9934.6542
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #264: GFLOPs: 60.8773. Time: 14466.6333 us. Best GFLOPs: 9934.6542
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #265: GFLOPs: 71.9946. Time: 12232.7041 us. Best GFLOPs: 9934.6542
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #266: GFLOPs: 2857.4482. Time: 308.2083 us. Best GFLOPs: 9934.6542
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #267: GFLOPs: 8801.9393. Time: 100.0563 us. Best GFLOPs: 9934.6542
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #268: GFLOPs: 8853.0408. Time: 99.4787 us. Best GFLOPs: 9934.6542
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #269: GFLOPs: 7297.3311. Time: 120.6865 us. Best GFLOPs: 9934.6542
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #270: GFLOPs: 8217.1268. Time: 107.1773 us. Best GFLOPs: 9934.6542
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #271: GFLOPs: 9839.5799. Time: 89.5048 us. Best GFLOPs: 9934.6542
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #272: GFLOPs: 8146.4941. Time: 108.1065 us. Best GFLOPs: 9934.6542
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #273: GFLOPs: 9051.1555. Time: 97.3013 us. Best GFLOPs: 9934.6542
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #274: GFLOPs: 9232.0722. Time: 95.3945 us. Best GFLOPs: 9934.6542
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #275: GFLOPs: 9940.7041. Time: 88.5942 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #276: GFLOPs: 8142.3237. Time: 108.1619 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #277: GFLOPs: 9430.6703. Time: 93.3856 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #278: GFLOPs: 8867.1007. Time: 99.3210 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #279: GFLOPs: 9301.3612. Time: 94.6839 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #280: GFLOPs: 9088.4924. Time: 96.9016 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #281: GFLOPs: 8890.2335. Time: 99.0625 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #282: GFLOPs: 8814.0849. Time: 99.9184 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #283: GFLOPs: 8723.9614. Time: 100.9506 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #284: GFLOPs: 9478.7535. Time: 92.9119 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #285: GFLOPs: 9151.0110. Time: 96.2395 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #286: GFLOPs: 9026.0946. Time: 97.5715 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #287: GFLOPs: 9427.3945. Time: 93.4181 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #288: GFLOPs: 8916.8872. Time: 98.7664 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #289: GFLOPs: 9858.2369. Time: 89.3354 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #290: GFLOPs: 9869.9782. Time: 89.2291 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #291: GFLOPs: 9440.6470. Time: 93.2869 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #292: GFLOPs: 8989.9007. Time: 97.9643 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #293: GFLOPs: 9028.4345. Time: 97.5462 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #294: GFLOPs: 8904.4522. Time: 98.9044 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #295: GFLOPs: 9356.4730. Time: 94.1262 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #296: GFLOPs: 8914.7333. Time: 98.7903 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #297: GFLOPs: 9158.9186. Time: 96.1565 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #298: GFLOPs: 8989.3390. Time: 97.9704 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #299: GFLOPs: 9028.5414. Time: 97.5450 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #300: GFLOPs: 9321.8068. Time: 94.4762 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #301: GFLOPs: 9352.6727. Time: 94.1644 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #302: GFLOPs: 9368.2551. Time: 94.0078 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #303: GFLOPs: 9197.4586. Time: 95.7535 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #304: GFLOPs: 9201.4679. Time: 95.7118 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #305: GFLOPs: 9037.6666. Time: 97.4465 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #306: GFLOPs: 9053.4933. Time: 97.2762 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #307: GFLOPs: 8725.0750. Time: 100.9377 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #308: GFLOPs: 9042.0882. Time: 97.3989 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #309: GFLOPs: 8857.2196. Time: 99.4318 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #310: GFLOPs: 9491.2496. Time: 92.7896 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #311: GFLOPs: 8485.4908. Time: 103.7876 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #312: GFLOPs: 9103.0401. Time: 96.7467 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #313: GFLOPs: 9121.9177. Time: 96.5465 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #314: GFLOPs: 8128.7894. Time: 108.3420 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #315: GFLOPs: 8660.3739. Time: 101.6918 us. Best GFLOPs: 9940.7041
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #316: GFLOPs: 10059.4341. Time: 87.5486 us. Best GFLOPs: 10059.4341
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #317: GFLOPs: 8855.1950. Time: 99.4545 us. Best GFLOPs: 10059.4341
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #318: GFLOPs: 2373.0485. Time: 371.1214 us. Best GFLOPs: 10059.4341
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #319: GFLOPs: 3477.4537. Time: 253.2569 us. Best GFLOPs: 10059.4341
2024-04-30 05:26:10 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #320: GFLOPs: 2369.0371. Time: 371.7498 us. Best GFLOPs: 10059.4341
2024-04-30 06:34:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 06:34:12 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 06:34:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 399 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 06:34:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 800 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 06:34:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 1200 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 06:34:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 1597 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 06:34:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 2002 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 06:34:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 2407 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 06:34:47 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-04-30 06:35:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 46 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 06:35:17 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 30 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 06:35:33 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 47 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 06:35:49 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 36 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 06:35:54 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.5381  1.2710  1.2268  1.2259  1.1829  1.1768  1.1679  1.1403  1.1403  1.1304  1.1166  1.1077  0.9730  0.9685  0.9673  0.9668
[17 : 32]:	0.9658  0.9599  0.9596  0.9588  0.9576  0.9574  0.9574  0.9574  0.9538  0.9490  0.9483  0.9461  0.9459  0.9446  0.9441  0.9399
[33 : 48]:	0.9382  0.9341  0.9329  0.9315  0.9315  0.9311  0.9299  0.9296  0.9285  0.9279  0.9279  0.9275  0.9257  0.9254  0.9239  0.9238
[49 : 64]:	0.9235  0.9233  0.9228  0.9222  0.9219  0.9218  0.9217  0.9214  0.9203  0.9195  0.9191  0.9190  0.9187  0.9183  0.9169  0.9161
2024-04-30 06:35:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 06:35:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #321: GFLOPs: 14.4271. Time: 61044.0520 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #322: GFLOPs: 3.1359. Time: 280841.5527 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #323: GFLOPs: 35.8276. Time: 24581.3246 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #324: GFLOPs: 12.3856. Time: 71105.8753 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #325: GFLOPs: 15.4935. Time: 56842.5800 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #326: GFLOPs: 12.6991. Time: 69350.7433 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #327: GFLOPs: 12.3672. Time: 71211.6900 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #328: GFLOPs: 3.1369. Time: 280748.0263 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #329: GFLOPs: 0.9870. Time: 892271.2400 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #330: GFLOPs: 12.7180. Time: 69247.6600 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #331: GFLOPs: 12.7094. Time: 69294.4233 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #332: GFLOPs: 12.3719. Time: 71184.7227 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #333: GFLOPs: 9581.9385. Time: 91.9114 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #334: GFLOPs: 9542.7119. Time: 92.2892 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #335: GFLOPs: 9301.9677. Time: 94.6777 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #336: GFLOPs: 9567.2194. Time: 92.0528 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #337: GFLOPs: 9934.4208. Time: 88.6503 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #338: GFLOPs: 9276.3100. Time: 94.9396 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #339: GFLOPs: 8990.2901. Time: 97.9600 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #340: GFLOPs: 9302.1648. Time: 94.6757 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #341: GFLOPs: 9042.7438. Time: 97.3918 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #342: GFLOPs: 9925.5099. Time: 88.7299 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #343: GFLOPs: 9354.9227. Time: 94.1418 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #344: GFLOPs: 9926.4554. Time: 88.7214 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #345: GFLOPs: 9819.8083. Time: 89.6850 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #346: GFLOPs: 9837.1922. Time: 89.5265 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #347: GFLOPs: 9424.9766. Time: 93.4421 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #348: GFLOPs: 9109.2046. Time: 96.6812 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #349: GFLOPs: 9362.0993. Time: 94.0696 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #350: GFLOPs: 9204.0073. Time: 95.6854 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #351: GFLOPs: 9117.5380. Time: 96.5929 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #352: GFLOPs: 9328.6264. Time: 94.4072 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #353: GFLOPs: 9039.7642. Time: 97.4239 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #354: GFLOPs: 9127.4517. Time: 96.4880 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #355: GFLOPs: 9327.8661. Time: 94.4149 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #356: GFLOPs: 9473.7863. Time: 92.9606 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #357: GFLOPs: 9471.7615. Time: 92.9805 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #358: GFLOPs: 9930.0180. Time: 88.6896 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #359: GFLOPs: 9941.3010. Time: 88.5889 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #360: GFLOPs: 9344.2632. Time: 94.2492 us. Best GFLOPs: 10059.4341
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #361: GFLOPs: 10069.3101. Time: 87.4627 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #362: GFLOPs: 9821.6761. Time: 89.6679 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #363: GFLOPs: 9821.1199. Time: 89.6730 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #364: GFLOPs: 9263.0757. Time: 95.0752 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #365: GFLOPs: 9938.2014. Time: 88.6166 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #366: GFLOPs: 4840.0900. Time: 181.9572 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #367: GFLOPs: 8920.9811. Time: 98.7211 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #368: GFLOPs: 9156.3913. Time: 96.1830 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #369: GFLOPs: 8232.9354. Time: 106.9715 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #370: GFLOPs: 7146.7902. Time: 123.2286 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #371: GFLOPs: 9053.4933. Time: 97.2762 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #372: GFLOPs: 9360.2636. Time: 94.0881 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #373: GFLOPs: 9374.9753. Time: 93.9404 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #374: GFLOPs: 7331.9197. Time: 120.1171 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #375: GFLOPs: 9907.4452. Time: 88.8917 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #376: GFLOPs: 9443.1748. Time: 93.2620 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #377: GFLOPs: 9821.9370. Time: 89.6655 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #378: GFLOPs: 4835.6819. Time: 182.1231 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #379: GFLOPs: 9229.6428. Time: 95.4196 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #380: GFLOPs: 9319.5760. Time: 94.4988 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #381: GFLOPs: 9365.7444. Time: 94.0330 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #382: GFLOPs: 1900.2312. Time: 463.4642 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #383: GFLOPs: 597.9701. Time: 1472.7981 us. Best GFLOPs: 10069.3101
2024-04-30 06:37:18 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #384: GFLOPs: 121.7545. Time: 7233.3166 us. Best GFLOPs: 10069.3101
2024-04-30 07:27:20 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 07:27:22 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 07:27:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 400 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 07:27:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 803 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 07:27:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 1202 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 07:27:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 1602 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 07:27:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 2003 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 07:27:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 2403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 07:27:57 [INFO] [evolutionary_search.cc:723] Sampled 57 candidate(s)
2024-04-30 07:28:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 29 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 07:28:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 38 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 07:28:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 50 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 07:28:58 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 46 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 07:29:03 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9864  0.9864  0.9861  0.9842  0.9839  0.9835  0.9717  0.9656  0.9632  0.9632  0.9617  0.9600  0.9598  0.9586  0.9581  0.9579
[17 : 32]:	0.9571  0.9565  0.9544  0.9541  0.9523  0.9523  0.9507  0.9507  0.9502  0.9482  0.9475  0.9475  0.9462  0.9456  0.9456  0.9454
[33 : 48]:	0.9451  0.9440  0.9429  0.9423  0.9418  0.9408  0.9406  0.9397  0.9397  0.9366  0.9363  0.9363  0.9360  0.9358  0.9358  0.9350
[49 : 64]:	0.9346  0.9335  0.9335  0.9326  0.9321  0.9321  0.9321  0.9318  0.9301  0.9301  0.9300  0.9296  0.9294  0.9294  0.9276  0.9275
2024-04-30 07:29:03 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 07:29:03 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #385: GFLOPs: 10072.6395. Time: 87.4338 us. Best GFLOPs: 10072.6395
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #386: GFLOPs: 10028.8166. Time: 87.8159 us. Best GFLOPs: 10072.6395
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #387: GFLOPs: 10054.6262. Time: 87.5904 us. Best GFLOPs: 10072.6395
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #388: GFLOPs: 9906.5281. Time: 88.8999 us. Best GFLOPs: 10072.6395
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #389: GFLOPs: 9948.5364. Time: 88.5245 us. Best GFLOPs: 10072.6395
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #390: GFLOPs: 9933.1327. Time: 88.6618 us. Best GFLOPs: 10072.6395
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #391: GFLOPs: 9982.1950. Time: 88.2260 us. Best GFLOPs: 10072.6395
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #392: GFLOPs: 10226.7592. Time: 86.1162 us. Best GFLOPs: 10226.7592
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #393: GFLOPs: 9820.6932. Time: 89.6769 us. Best GFLOPs: 10226.7592
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #394: GFLOPs: 9821.6698. Time: 89.6680 us. Best GFLOPs: 10226.7592
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #395: GFLOPs: 9335.8727. Time: 94.3339 us. Best GFLOPs: 10226.7592
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #396: GFLOPs: 10257.6990. Time: 85.8564 us. Best GFLOPs: 10257.6990
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #397: GFLOPs: 9914.1598. Time: 88.8314 us. Best GFLOPs: 10257.6990
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #398: GFLOPs: 5345.0672. Time: 164.7667 us. Best GFLOPs: 10257.6990
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #399: GFLOPs: 9798.3755. Time: 89.8811 us. Best GFLOPs: 10257.6990
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #400: GFLOPs: 9820.5714. Time: 89.6780 us. Best GFLOPs: 10257.6990
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #401: GFLOPs: 9043.2127. Time: 97.3868 us. Best GFLOPs: 10257.6990
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #402: GFLOPs: 10191.9662. Time: 86.4101 us. Best GFLOPs: 10257.6990
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #403: GFLOPs: 9935.0032. Time: 88.6451 us. Best GFLOPs: 10257.6990
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #404: GFLOPs: 10001.3741. Time: 88.0568 us. Best GFLOPs: 10257.6990
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #405: GFLOPs: 9104.8684. Time: 96.7273 us. Best GFLOPs: 10257.6990
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #406: GFLOPs: 9105.6272. Time: 96.7192 us. Best GFLOPs: 10257.6990
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #407: GFLOPs: 9951.5935. Time: 88.4973 us. Best GFLOPs: 10257.6990
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #408: GFLOPs: 9940.3935. Time: 88.5970 us. Best GFLOPs: 10257.6990
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #409: GFLOPs: 9725.4357. Time: 90.5552 us. Best GFLOPs: 10257.6990
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #410: GFLOPs: 9125.8490. Time: 96.5049 us. Best GFLOPs: 10257.6990
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #411: GFLOPs: 9735.4872. Time: 90.4617 us. Best GFLOPs: 10257.6990
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #412: GFLOPs: 9696.7627. Time: 90.8230 us. Best GFLOPs: 10257.6990
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #413: GFLOPs: 10339.8377. Time: 85.1744 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #414: GFLOPs: 10271.7571. Time: 85.7389 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #415: GFLOPs: 9908.2879. Time: 88.8841 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #416: GFLOPs: 8983.5677. Time: 98.0333 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #417: GFLOPs: 9743.5964. Time: 90.3865 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #418: GFLOPs: 7386.9975. Time: 119.2215 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #419: GFLOPs: 9124.1153. Time: 96.5232 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #420: GFLOPs: 6977.7540. Time: 126.2138 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #421: GFLOPs: 10290.0611. Time: 85.5864 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #422: GFLOPs: 9396.5640. Time: 93.7246 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #423: GFLOPs: 7703.2553. Time: 114.3269 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #424: GFLOPs: 10283.2933. Time: 85.6427 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #425: GFLOPs: 9229.2276. Time: 95.4239 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #426: GFLOPs: 9616.1781. Time: 91.5841 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #427: GFLOPs: 10097.1819. Time: 87.2213 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #428: GFLOPs: 10025.7851. Time: 87.8424 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #429: GFLOPs: 9925.0941. Time: 88.7336 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #430: GFLOPs: 9294.0091. Time: 94.7588 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #431: GFLOPs: 7573.3969. Time: 116.2872 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #432: GFLOPs: 9502.7208. Time: 92.6776 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #433: GFLOPs: 10080.0257. Time: 87.3697 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #434: GFLOPs: 8982.8723. Time: 98.0409 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #435: GFLOPs: 9446.2141. Time: 93.2320 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #436: GFLOPs: 9534.6918. Time: 92.3668 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #437: GFLOPs: 9530.3362. Time: 92.4090 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #438: GFLOPs: 9578.3326. Time: 91.9460 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #439: GFLOPs: 8878.7470. Time: 99.1907 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #440: GFLOPs: 9547.9648. Time: 92.2384 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #441: GFLOPs: 9480.8015. Time: 92.8918 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #442: GFLOPs: 9481.4392. Time: 92.8856 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #443: GFLOPs: 9493.4641. Time: 92.7679 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #444: GFLOPs: 9504.1411. Time: 92.6637 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #445: GFLOPs: 9319.0750. Time: 94.5039 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #446: GFLOPs: 152.6758. Time: 5768.3627 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #447: GFLOPs: 65.8435. Time: 13375.4883 us. Best GFLOPs: 10339.8377
2024-04-30 07:30:13 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #448: GFLOPs: 2744.3871. Time: 320.9056 us. Best GFLOPs: 10339.8377
2024-04-30 08:34:06 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 08:34:08 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 08:34:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 08:34:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 805 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 08:34:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 1207 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 08:34:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 1611 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 08:34:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 2009 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 08:34:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 2406 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 08:34:43 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-04-30 08:34:56 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 36 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 08:35:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 56 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 08:35:28 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 47 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 08:35:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 66 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 08:35:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9807  0.9703  0.9703  0.9642  0.9615  0.9583  0.9583  0.9583  0.9572  0.9545  0.9542  0.9542  0.9542  0.9542  0.9533  0.9516
[17 : 32]:	0.9516  0.9510  0.9503  0.9500  0.9498  0.9491  0.9484  0.9476  0.9476  0.9474  0.9473  0.9459  0.9454  0.9452  0.9433  0.9412
[33 : 48]:	0.9410  0.9407  0.9403  0.9402  0.9402  0.9369  0.9369  0.9363  0.9358  0.9354  0.9354  0.9351  0.9347  0.9340  0.9332  0.9332
[49 : 64]:	0.9319  0.9319  0.9319  0.9315  0.9304  0.9294  0.9292  0.9289  0.9286  0.9280  0.9279  0.9272  0.9267  0.9267  0.9267  0.9259
2024-04-30 08:35:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 08:35:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #449: GFLOPs: 10260.5613. Time: 85.8325 us. Best GFLOPs: 10339.8377
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #450: GFLOPs: 10345.0747. Time: 85.1313 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #451: GFLOPs: 10304.7858. Time: 85.4641 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #452: GFLOPs: 9739.0550. Time: 90.4286 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #453: GFLOPs: 15.1549. Time: 58112.6810 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #454: GFLOPs: 10022.0358. Time: 87.8753 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #455: GFLOPs: 10100.6333. Time: 87.1915 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #456: GFLOPs: 10149.4898. Time: 86.7718 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #457: GFLOPs: 10006.4165. Time: 88.0124 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #458: GFLOPs: 10268.0808. Time: 85.7696 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #459: GFLOPs: 10163.1523. Time: 86.6551 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #460: GFLOPs: 10162.4479. Time: 86.6611 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #461: GFLOPs: 9823.9719. Time: 89.6470 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #462: GFLOPs: 9783.5518. Time: 90.0173 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #463: GFLOPs: 14.1355. Time: 62303.5733 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #464: GFLOPs: 9832.5412. Time: 89.5688 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #465: GFLOPs: 9815.0906. Time: 89.7281 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #466: GFLOPs: 9833.1720. Time: 89.5631 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #467: GFLOPs: 9949.2109. Time: 88.5185 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #468: GFLOPs: 8598.5881. Time: 102.4225 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #469: GFLOPs: 10008.8846. Time: 87.9907 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #470: GFLOPs: 9796.9532. Time: 89.8942 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #471: GFLOPs: 9995.1210. Time: 88.1119 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #472: GFLOPs: 9979.5403. Time: 88.2495 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #473: GFLOPs: 9982.3706. Time: 88.2244 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #474: GFLOPs: 10108.2803. Time: 87.1255 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #475: GFLOPs: 8955.1142. Time: 98.3448 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #476: GFLOPs: 15.3980. Time: 57195.1800 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #477: GFLOPs: 8675.6460. Time: 101.5128 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #478: GFLOPs: 8962.1671. Time: 98.2674 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #479: GFLOPs: 8938.8645. Time: 98.5236 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #480: GFLOPs: 8946.7823. Time: 98.4364 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #481: GFLOPs: 9746.5452. Time: 90.3591 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #482: GFLOPs: 10180.3708. Time: 86.5086 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #483: GFLOPs: 10127.6569. Time: 86.9588 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #484: GFLOPs: 8956.6936. Time: 98.3275 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #485: GFLOPs: 8955.4547. Time: 98.3411 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #486: GFLOPs: 9228.9346. Time: 95.4270 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #487: GFLOPs: 9451.4578. Time: 93.1802 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #488: GFLOPs: 10153.5815. Time: 86.7368 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #489: GFLOPs: 7164.6841. Time: 122.9209 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #490: GFLOPs: 9829.7032. Time: 89.5947 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #491: GFLOPs: 9837.1230. Time: 89.5271 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #492: GFLOPs: 9850.3292. Time: 89.4071 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #493: GFLOPs: 9866.3243. Time: 89.2621 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #494: GFLOPs: 9732.3950. Time: 90.4905 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #495: GFLOPs: 8963.3382. Time: 98.2546 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #496: GFLOPs: 10130.2622. Time: 86.9365 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #497: GFLOPs: 9720.9018. Time: 90.5975 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #498: GFLOPs: 9977.1343. Time: 88.2708 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #499: GFLOPs: 10031.8620. Time: 87.7892 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #500: GFLOPs: 9567.7952. Time: 92.0472 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #501: GFLOPs: 9366.2239. Time: 94.0282 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #502: GFLOPs: 10173.0921. Time: 86.5704 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #503: GFLOPs: 10093.4281. Time: 87.2537 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #504: GFLOPs: 9452.9783. Time: 93.1653 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #505: GFLOPs: 10015.0896. Time: 87.9362 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #506: GFLOPs: 9805.5925. Time: 89.8150 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #507: GFLOPs: 9810.6993. Time: 89.7682 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #508: GFLOPs: 8858.7934. Time: 99.4141 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #509: GFLOPs: 10039.2368. Time: 87.7247 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #510: GFLOPs: 4948.0210. Time: 177.9882 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #511: GFLOPs: 6299.8333. Time: 139.7956 us. Best GFLOPs: 10345.0747
2024-04-30 08:37:04 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #512: GFLOPs: 211.4283. Time: 4165.4272 us. Best GFLOPs: 10345.0747
2024-04-30 09:25:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 09:25:29 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-04-30 09:25:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 09:25:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 804 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 09:25:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 1212 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 09:25:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 1610 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 09:25:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 2008 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 09:26:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 2409 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 09:26:03 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-04-30 09:26:16 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 37 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 09:26:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 42 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 09:26:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 51 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 09:27:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xc032a98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0xc94d2a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85e7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4793468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8616948)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x530f838)]: 46 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x8a90ff8)]: 0 failure(s)
2024-04-30 09:27:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9816  0.9765  0.9744  0.9676  0.9669  0.9669  0.9669  0.9659  0.9659  0.9659  0.9630  0.9630  0.9622  0.9621  0.9621  0.9612
[17 : 32]:	0.9607  0.9607  0.9603  0.9603  0.9603  0.9599  0.9599  0.9599  0.9598  0.9598  0.9598  0.9594  0.9584  0.9584  0.9584  0.9581
[33 : 48]:	0.9573  0.9573  0.9572  0.9566  0.9566  0.9565  0.9564  0.9564  0.9556  0.9547  0.9540  0.9540  0.9540  0.9540  0.9540  0.9540
[49 : 64]:	0.9537  0.9537  0.9532  0.9530  0.9529  0.9521  0.9518  0.9517  0.9512  0.9512  0.9512  0.9511  0.9511  0.9504  0.9500  0.9499
2024-04-30 09:27:08 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 09:27:08 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #513: GFLOPs: 10140.1628. Time: 86.8516 us. Best GFLOPs: 10345.0747
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #514: GFLOPs: 10436.2576. Time: 84.3874 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #515: GFLOPs: 10304.9893. Time: 85.4624 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #516: GFLOPs: 10201.5776. Time: 86.3287 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #517: GFLOPs: 10046.3914. Time: 87.6622 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #518: GFLOPs: 10423.7287. Time: 84.4889 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #519: GFLOPs: 10435.8440. Time: 84.3908 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #520: GFLOPs: 10417.3930. Time: 84.5403 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #521: GFLOPs: 10415.2403. Time: 84.5577 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #522: GFLOPs: 10415.9462. Time: 84.5520 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #523: GFLOPs: 10158.5572. Time: 86.6943 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #524: GFLOPs: 10159.0598. Time: 86.6900 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #525: GFLOPs: 10101.2495. Time: 87.1862 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #526: GFLOPs: 10131.9268. Time: 86.9222 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #527: GFLOPs: 10150.4096. Time: 86.7639 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #528: GFLOPs: 10330.4717. Time: 85.2516 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #529: GFLOPs: 10267.1227. Time: 85.7776 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #530: GFLOPs: 10125.9402. Time: 86.9736 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #531: GFLOPs: 10321.6807. Time: 85.3242 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #532: GFLOPs: 10325.1458. Time: 85.2956 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #533: GFLOPs: 10318.2144. Time: 85.3529 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #534: GFLOPs: 10245.6197. Time: 85.9576 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #535: GFLOPs: 10232.2960. Time: 86.0696 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #536: GFLOPs: 10229.9131. Time: 86.0896 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #537: GFLOPs: 10257.3789. Time: 85.8591 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #538: GFLOPs: 10275.3516. Time: 85.7089 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #539: GFLOPs: 10258.6153. Time: 85.8487 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #540: GFLOPs: 10022.4032. Time: 87.8721 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #541: GFLOPs: 10042.9504. Time: 87.6923 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #542: GFLOPs: 10053.6332. Time: 87.5991 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #543: GFLOPs: 10056.8664. Time: 87.5709 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #544: GFLOPs: 10347.8744. Time: 85.1082 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #545: GFLOPs: 10017.9613. Time: 87.9110 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #546: GFLOPs: 10001.6214. Time: 88.0546 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #547: GFLOPs: 10328.6809. Time: 85.2664 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #548: GFLOPs: 9962.1750. Time: 88.4033 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #549: GFLOPs: 9975.8159. Time: 88.2824 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #550: GFLOPs: 10407.6684. Time: 84.6193 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #551: GFLOPs: 9994.7065. Time: 88.1156 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #552: GFLOPs: 9994.6971. Time: 88.1156 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #553: GFLOPs: 10422.9544. Time: 84.4952 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #554: GFLOPs: 10408.1377. Time: 84.6154 us. Best GFLOPs: 10436.2576
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #555: GFLOPs: 10441.5820. Time: 84.3444 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #556: GFLOPs: 10437.8301. Time: 84.3747 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #557: GFLOPs: 10419.7351. Time: 84.5213 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #558: GFLOPs: 10425.8077. Time: 84.4720 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #559: GFLOPs: 10422.4351. Time: 84.4994 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #560: GFLOPs: 10315.4183. Time: 85.3760 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #561: GFLOPs: 9885.3630. Time: 89.0902 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #562: GFLOPs: 9970.4478. Time: 88.3299 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #563: GFLOPs: 10332.2765. Time: 85.2367 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #564: GFLOPs: 10023.6452. Time: 87.8612 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #565: GFLOPs: 9894.6555. Time: 89.0066 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #566: GFLOPs: 9883.7076. Time: 89.1051 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #567: GFLOPs: 9884.6118. Time: 89.0970 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #568: GFLOPs: 9789.0763. Time: 89.9665 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #569: GFLOPs: 9891.5286. Time: 89.0347 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #570: GFLOPs: 9906.4934. Time: 88.9002 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #571: GFLOPs: 9892.5152. Time: 89.0258 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #572: GFLOPs: 10115.3996. Time: 87.0642 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #573: GFLOPs: 10134.5207. Time: 86.8999 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #574: GFLOPs: 104.0234. Time: 8466.2615 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #575: GFLOPs: 34.4729. Time: 25547.2640 us. Best GFLOPs: 10441.5820
2024-04-30 09:28:25 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_6] Trial #576: GFLOPs: 1921.2486. Time: 458.3942 us. Best GFLOPs: 10441.5820
