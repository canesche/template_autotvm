2024-04-30 01:34:56 [INFO] [task_scheduler.cc:160] Initializing Task #5: "fused_nn_max_pool2d_1"
2024-04-30 01:34:56 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56), T.int64(2), T.int64(2)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
2024-04-30 01:34:56 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-04-30 01:34:56 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0_ax1_ax2_ax3_fused_0, rv0, rv1 in T.grid(T.int64(2), T.int64(2), T.int64(2)):
                        with T.block("pool_max"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3136))
                            v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3136) // T.int64(56))
                            v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(401408))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                            T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l3, l4, l5, l6, preserve_unit_iters=True)
l10, l11, l12 = sch.split(loop=l9, factors=[None, 256, 1024], preserve_unit_iters=True)
sch.reorder(l11, l12, l10)
sch.bind(loop=l11, thread_axis="blockIdx.x")
sch.bind(loop=l12, thread_axis="threadIdx.x")
2024-04-30 01:34:56 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            for ax0_ax1_ax2_ax3_fused in T.thread_binding(T.int64(401408), thread="blockIdx.x"):
                for rv0_rv1_fused_0 in range(T.int64(1)):
                    for rv0_rv1_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                        with T.block("pool_max"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                            v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                            v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                            v_rv0 = T.axis.reduce(T.int64(2), (rv0_rv1_fused_0 * T.int64(512) + rv0_rv1_fused_1) // T.int64(2))
                            v_rv1 = T.axis.reduce(T.int64(2), (rv0_rv1_fused_0 * T.int64(512) + rv0_rv1_fused_1) % T.int64(2))
                            T.where(rv0_rv1_fused_0 * T.int64(512) + rv0_rv1_fused_1 < T.int64(4))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                            T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
v2 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=7)
l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
l10, l11 = sch.split(loop=l9, factors=[None, v2], preserve_unit_iters=True)
sch.bind(loop=l11, thread_axis="threadIdx.x")
v12 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v12)
l13, l14, l15, l16, l17, l18 = sch.get_loops(block=b0)
l19 = sch.fuse(l13, l14, l15, l16, preserve_unit_iters=True)
sch.bind(loop=l19, thread_axis="blockIdx.x")
2024-04-30 01:50:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 01:50:11 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 01:50:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9c9e618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1798)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc94f848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8ab60a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xa11c3c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8613498)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85abd78)]: 0 failure(s)
2024-04-30 01:50:12 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-30 01:50:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9c9e618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1798)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc94f848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8ab60a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xa11c3c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8613498)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85abd78)]: 0 failure(s)
2024-04-30 01:50:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9c9e618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1798)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc94f848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8ab60a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xa11c3c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8613498)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85abd78)]: 0 failure(s)
2024-04-30 01:50:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9c9e618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1798)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc94f848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8ab60a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xa11c3c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8613498)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85abd78)]: 0 failure(s)
2024-04-30 01:50:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x9c9e618)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85a1798)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0xc94f848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x8ab60a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0xa11c3c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x8613498)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85abd78)]: 0 failure(s)
2024-04-30 01:50:13 [INFO] [evolutionary_search.cc:649] Scores of the best 45 candidates:
[1 : 16]:	0.9839  0.9277  0.9037  0.8767  0.8495  0.8236  0.8178  0.7646  0.7461  0.6761  0.6730  0.6678  0.6355  0.6187  0.6177  0.6126
[17 : 32]:	0.6115  0.6045  0.5942  0.5797  0.5759  0.5106  0.4991  0.4752  0.4578  0.4556  0.4028  0.3320  0.2997  0.2095  0.1549  0.1286
[33 : 45]:	0.1181  0.1177  0.1115  0.0948  0.0702  0.0661  0.0586  0.0413  0.0357  0.0212  0.0140  0.0089  0.0056
2024-04-30 01:50:13 [INFO] [evolutionary_search.cc:727] Got 45 candidate(s) with evolutionary search
2024-04-30 01:50:13 [INFO] [evolutionary_search.cc:730] Sending 45 candidates(s) for measurement
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #1: GFLOPs: 5.3477. Time: 300.2482 us. Best GFLOPs: 5.3477
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #2: GFLOPs: 5.3432. Time: 300.4992 us. Best GFLOPs: 5.3477
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #3: GFLOPs: 5.3436. Time: 300.4801 us. Best GFLOPs: 5.3477
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #4: GFLOPs: 2.0788. Time: 772.3875 us. Best GFLOPs: 5.3477
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #5: GFLOPs: 5.3431. Time: 300.5068 us. Best GFLOPs: 5.3477
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #6: GFLOPs: 5.3428. Time: 300.5202 us. Best GFLOPs: 5.3477
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #7: GFLOPs: 341.9469. Time: 4.6956 us. Best GFLOPs: 341.9469
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #8: GFLOPs: 5.3434. Time: 300.4897 us. Best GFLOPs: 341.9469
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #9: GFLOPs: 5.3524. Time: 299.9843 us. Best GFLOPs: 341.9469
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #10: GFLOPs: 2.0791. Time: 772.2850 us. Best GFLOPs: 341.9469
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #11: GFLOPs: 5.3434. Time: 300.4878 us. Best GFLOPs: 341.9469
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #12: GFLOPs: 5.3475. Time: 300.2570 us. Best GFLOPs: 341.9469
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #13: GFLOPs: 5.3438. Time: 300.4687 us. Best GFLOPs: 341.9469
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #14: GFLOPs: 4.2245. Time: 380.0751 us. Best GFLOPs: 341.9469
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #15: GFLOPs: 4.2272. Time: 379.8338 us. Best GFLOPs: 341.9469
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #16: GFLOPs: 5.3430. Time: 300.5125 us. Best GFLOPs: 341.9469
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #17: GFLOPs: 4.2238. Time: 380.1437 us. Best GFLOPs: 341.9469
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #18: GFLOPs: 5.3470. Time: 300.2875 us. Best GFLOPs: 341.9469
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #19: GFLOPs: 5.3431. Time: 300.5067 us. Best GFLOPs: 341.9469
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #20: GFLOPs: 5.3258. Time: 301.4816 us. Best GFLOPs: 341.9469
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #21: GFLOPs: 341.9878. Time: 4.6950 us. Best GFLOPs: 341.9878
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #22: GFLOPs: 5.3526. Time: 299.9748 us. Best GFLOPs: 341.9878
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #23: GFLOPs: 5.3525. Time: 299.9767 us. Best GFLOPs: 341.9878
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #24: GFLOPs: 5.3524. Time: 299.9824 us. Best GFLOPs: 341.9878
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #25: GFLOPs: 5.3434. Time: 300.4897 us. Best GFLOPs: 341.9878
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #26: GFLOPs: 2.0790. Time: 772.3087 us. Best GFLOPs: 341.9878
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #27: GFLOPs: 297.0786. Time: 5.4047 us. Best GFLOPs: 341.9878
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #28: GFLOPs: 2.0790. Time: 772.2929 us. Best GFLOPs: 341.9878
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #29: GFLOPs: 5.3433. Time: 300.4933 us. Best GFLOPs: 341.9878
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #30: GFLOPs: 5.3432. Time: 300.4973 us. Best GFLOPs: 341.9878
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #31: GFLOPs: 5.3436. Time: 300.4801 us. Best GFLOPs: 341.9878
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #32: GFLOPs: 341.9182. Time: 4.6960 us. Best GFLOPs: 341.9878
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #33: GFLOPs: 5.3472. Time: 300.2742 us. Best GFLOPs: 341.9878
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #34: GFLOPs: 5.3478. Time: 300.2406 us. Best GFLOPs: 341.9878
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #35: GFLOPs: 342.0333. Time: 4.6944 us. Best GFLOPs: 342.0333
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #36: GFLOPs: 5.3477. Time: 300.2494 us. Best GFLOPs: 342.0333
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #37: GFLOPs: 5.3473. Time: 300.2704 us. Best GFLOPs: 342.0333
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #38: GFLOPs: 4.2249. Time: 380.0444 us. Best GFLOPs: 342.0333
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #39: GFLOPs: 5.3527. Time: 299.9672 us. Best GFLOPs: 342.0333
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #40: GFLOPs: 5.3478. Time: 300.2418 us. Best GFLOPs: 342.0333
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #41: GFLOPs: 2.0790. Time: 772.3166 us. Best GFLOPs: 342.0333
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #42: GFLOPs: 5.3474. Time: 300.2646 us. Best GFLOPs: 342.0333
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #43: GFLOPs: 5.3432. Time: 300.5011 us. Best GFLOPs: 342.0333
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #44: GFLOPs: 5.3432. Time: 300.4992 us. Best GFLOPs: 342.0333
2024-04-30 02:17:12 [INFO] [task_scheduler.cc:131] [Task #5: fused_nn_max_pool2d_1] Trial #45: GFLOPs: 4.2243. Time: 380.0904 us. Best GFLOPs: 342.0333
