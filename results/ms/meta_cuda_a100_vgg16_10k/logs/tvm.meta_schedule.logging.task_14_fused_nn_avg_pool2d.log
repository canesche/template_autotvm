2024-04-30 01:35:01 [INFO] [task_scheduler.cc:160] Initializing Task #14: "fused_nn_avg_pool2d"
2024-04-30 01:35:01 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(512), T.int64(7), T.int64(7), T.int64(1), T.int64(1)):
            with T.block("pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1])
                T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(7), T.int64(7)):
            with T.block("pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.pool_avg"})
                pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] / T.Cast("float32", T.max((T.min(T.int64(0), T.int64(6) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(0), T.int64(6) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
2024-04-30 01:35:01 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2024-04-30 01:35:01 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(7), T.int64(7)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(1), T.int64(1)):
                        with T.block("pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(512), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                            v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                            v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1])
                            T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    with T.block("pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(512), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) // T.int64(49))
                        v_ax2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49) // T.int64(7))
                        v_ax3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] / T.Cast("float32", T.max((T.min(T.int64(0), T.int64(6) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(0), T.int64(6) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-04-30 02:10:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-04-30 02:10:27 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-04-30 02:10:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa6583e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85c6068)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c6648)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa0bb418)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8673a88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x85aeef8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85c74e8)]: 0 failure(s)
2024-04-30 02:10:28 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-04-30 02:10:29 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa6583e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85c6068)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c6648)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa0bb418)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8673a88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x85aeef8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85c74e8)]: 0 failure(s)
2024-04-30 02:10:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa6583e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85c6068)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c6648)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa0bb418)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8673a88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x85aeef8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85c74e8)]: 0 failure(s)
2024-04-30 02:10:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa6583e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85c6068)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c6648)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa0bb418)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8673a88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x85aeef8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85c74e8)]: 0 failure(s)
2024-04-30 02:10:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0xa6583e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x85c6068)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x85c6648)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0xa0bb418)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x8673a88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x85aeef8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x85c74e8)]: 0 failure(s)
2024-04-30 02:10:30 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9945  0.9830  0.9770  0.9734  0.9733  0.9670  0.9580  0.9297  0.9289  0.9285  0.9284  0.9228  0.9224  0.9215  0.8809  0.8727
[17 : 32]:	0.8700  0.8653  0.8607  0.8574  0.8497  0.8438  0.8399  0.8363  0.8340  0.8296  0.8256  0.8236  0.8213  0.8200  0.8182  0.8150
[33 : 48]:	0.8086  0.8038  0.7956  0.7927  0.7840  0.7815  0.7814  0.7803  0.7766  0.7692  0.7662  0.7588  0.7506  0.7503  0.7492  0.7460
[49 : 64]:	0.7448  0.7442  0.7436  0.7336  0.7311  0.7302  0.7291  0.7231  0.7190  0.6970  0.6687  0.6651  0.6571  0.6513  0.6513  0.6498
2024-04-30 02:10:30 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-04-30 02:10:30 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #1: GFLOPs: 73.6727. Time: 5.4485 us. Best GFLOPs: 73.6727
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #2: GFLOPs: 72.0534. Time: 5.5710 us. Best GFLOPs: 73.6727
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #3: GFLOPs: 74.6173. Time: 5.3796 us. Best GFLOPs: 74.6173
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #4: GFLOPs: 72.8931. Time: 5.5068 us. Best GFLOPs: 74.6173
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #5: GFLOPs: 67.0969. Time: 5.9825 us. Best GFLOPs: 74.6173
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #6: GFLOPs: 68.9541. Time: 5.8214 us. Best GFLOPs: 74.6173
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #7: GFLOPs: 68.5386. Time: 5.8567 us. Best GFLOPs: 74.6173
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #8: GFLOPs: 72.0674. Time: 5.5699 us. Best GFLOPs: 74.6173
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #9: GFLOPs: 66.9555. Time: 5.9951 us. Best GFLOPs: 74.6173
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #10: GFLOPs: 69.3409. Time: 5.7889 us. Best GFLOPs: 74.6173
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #11: GFLOPs: 66.9998. Time: 5.9912 us. Best GFLOPs: 74.6173
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #12: GFLOPs: 72.6791. Time: 5.5230 us. Best GFLOPs: 74.6173
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #13: GFLOPs: 75.0034. Time: 5.3519 us. Best GFLOPs: 75.0034
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #14: GFLOPs: 66.9715. Time: 5.9937 us. Best GFLOPs: 75.0034
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #15: GFLOPs: 74.1973. Time: 5.4100 us. Best GFLOPs: 75.0034
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #16: GFLOPs: 72.8688. Time: 5.5086 us. Best GFLOPs: 75.0034
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #17: GFLOPs: 67.1709. Time: 5.9759 us. Best GFLOPs: 75.0034
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #18: GFLOPs: 71.9415. Time: 5.5796 us. Best GFLOPs: 75.0034
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #19: GFLOPs: 72.8875. Time: 5.5072 us. Best GFLOPs: 75.0034
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #20: GFLOPs: 66.3981. Time: 6.0455 us. Best GFLOPs: 75.0034
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #21: GFLOPs: 73.8887. Time: 5.4326 us. Best GFLOPs: 75.0034
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #22: GFLOPs: 69.2701. Time: 5.7948 us. Best GFLOPs: 75.0034
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #23: GFLOPs: 75.9853. Time: 5.2827 us. Best GFLOPs: 75.9853
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #24: GFLOPs: 69.2809. Time: 5.7939 us. Best GFLOPs: 75.9853
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #25: GFLOPs: 71.4167. Time: 5.6206 us. Best GFLOPs: 75.9853
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #26: GFLOPs: 68.8537. Time: 5.8299 us. Best GFLOPs: 75.9853
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #27: GFLOPs: 71.9896. Time: 5.5759 us. Best GFLOPs: 75.9853
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #28: GFLOPs: 71.9239. Time: 5.5810 us. Best GFLOPs: 75.9853
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #29: GFLOPs: 74.9683. Time: 5.3544 us. Best GFLOPs: 75.9853
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #30: GFLOPs: 74.9725. Time: 5.3541 us. Best GFLOPs: 75.9853
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #31: GFLOPs: 70.1534. Time: 5.7219 us. Best GFLOPs: 75.9853
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #32: GFLOPs: 72.0171. Time: 5.5738 us. Best GFLOPs: 75.9853
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #33: GFLOPs: 70.7874. Time: 5.6706 us. Best GFLOPs: 75.9853
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #34: GFLOPs: 68.5545. Time: 5.8553 us. Best GFLOPs: 75.9853
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #35: GFLOPs: 64.6774. Time: 6.2063 us. Best GFLOPs: 75.9853
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #36: GFLOPs: 75.0606. Time: 5.3478 us. Best GFLOPs: 75.9853
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #37: GFLOPs: 72.0766. Time: 5.5692 us. Best GFLOPs: 75.9853
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #38: GFLOPs: 71.6694. Time: 5.6008 us. Best GFLOPs: 75.9853
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #39: GFLOPs: 73.3715. Time: 5.4709 us. Best GFLOPs: 75.9853
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #40: GFLOPs: 76.0187. Time: 5.2804 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #41: GFLOPs: 73.7854. Time: 5.4402 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #42: GFLOPs: 74.9928. Time: 5.3526 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #43: GFLOPs: 75.0371. Time: 5.3495 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #44: GFLOPs: 69.3143. Time: 5.7911 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #45: GFLOPs: 72.0317. Time: 5.5727 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #46: GFLOPs: 74.9626. Time: 5.3548 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #47: GFLOPs: 74.9984. Time: 5.3522 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #48: GFLOPs: 69.2758. Time: 5.7943 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #49: GFLOPs: 72.7102. Time: 5.5207 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #50: GFLOPs: 64.6924. Time: 6.2049 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #51: GFLOPs: 67.1280. Time: 5.9797 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #52: GFLOPs: 72.8871. Time: 5.5073 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #53: GFLOPs: 71.6799. Time: 5.6000 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #54: GFLOPs: 74.5856. Time: 5.3818 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #55: GFLOPs: 70.1227. Time: 5.7244 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #56: GFLOPs: 69.4474. Time: 5.7800 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #57: GFLOPs: 70.1002. Time: 5.7262 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #58: GFLOPs: 71.4337. Time: 5.6193 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #59: GFLOPs: 75.0181. Time: 5.3508 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #60: GFLOPs: 74.2516. Time: 5.4060 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #61: GFLOPs: 75.0264. Time: 5.3502 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #62: GFLOPs: 72.8882. Time: 5.5072 us. Best GFLOPs: 76.0187
2024-04-30 02:17:28 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_avg_pool2d] Trial #63: GFLOPs: 70.6498. Time: 5.6817 us. Best GFLOPs: 76.0187
